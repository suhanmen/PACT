{"Mbpp/2": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/3": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/4": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/6": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/7": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/8": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/9": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/11": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/12": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}]}}
{"Mbpp/14": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}]}}
{"Mbpp/16": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/17": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/18": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/19": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/20": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/56": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/57": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/58": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/59": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/61": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/62": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/63": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/64": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/65": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/66": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/67": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/68": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/69": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/70": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/71": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/72": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/74": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/75": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/77": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/79": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/80": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/82": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/84": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/85": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/86": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/87": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/88": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/89": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/90": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/91": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/92": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/93": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/94": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/95": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/96": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/97": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/98": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/99": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/100": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/101": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/102": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/103": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/104": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/105": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/106": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/108": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}]}}
{"Mbpp/109": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/111": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/113": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/116": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/118": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/119": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/120": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/123": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/124": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/125": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/126": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/127": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/128": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/129": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}]}}
{"Mbpp/130": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/131": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/132": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/133": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/135": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/137": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/138": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/139": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/140": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/141": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/142": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/145": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/160": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/161": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/162": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/165": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/166": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/167": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/168": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/170": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}]}}
{"Mbpp/171": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/172": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/222": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/223": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}]}}
{"Mbpp/224": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/226": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/227": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/230": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/232": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/233": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/234": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/235": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/237": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/238": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/239": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/240": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/242": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/244": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/245": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/247": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/250": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/251": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/252": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/253": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/255": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/256": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/257": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/259": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": false, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": false, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": false, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": false, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert (not C8))\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": false, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert (not C9))\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": false, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)\n(assert (not C8))\n(assert C9)\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true, "assert_8": false, "assert_9": true, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)\n(assert (not C8))\n(assert C9)\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true, "assert_8": false, "assert_9": true, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)\n(assert (not C8))\n(assert C9)\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true, "assert_8": false, "assert_9": true, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert (not C8))\n(assert C9)\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": false, "assert_9": true, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert (not C8))\n(assert C9)\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": false, "assert_9": true, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert (not C8))\n(assert C9)\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": false, "assert_9": true, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert C9)\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": true, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert C9)\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": true, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert C9)\n(assert (not C10))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": true, "assert_10": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert C8)\n(assert (not C9))\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": true, "assert_9": false, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert (not C9))\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": false, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert (not C9))\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": false, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert (not C9))\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": false, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert C9)\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": true, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert C9)\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": true, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert C9)\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": true, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert C9)\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": true, "assert_10": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)\n(assert C9)\n(assert C10)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true, "assert_9": true, "assert_10": true}}]}}
{"Mbpp/260": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/261": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/262": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/264": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/265": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/266": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/267": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/268": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/269": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/270": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/271": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/272": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/273": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/274": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/276": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/277": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/278": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/279": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/280": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/281": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/282": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true}}]}}
{"Mbpp/283": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/284": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/285": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/286": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/287": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/290": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/292": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/293": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/294": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/296": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/297": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/299": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/300": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/301": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/305": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/306": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true}}]}}
{"Mbpp/308": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}]}}
{"Mbpp/309": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/310": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/311": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/312": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/388": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/389": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/390": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/391": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/392": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/394": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/395": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/397": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/398": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/404": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/405": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/406": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/409": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/410": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/412": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/413": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/414": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/415": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/418": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/419": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/420": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/421": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/422": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/424": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/425": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/426": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/427": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/428": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/429": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/430": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/432": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/433": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/435": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/436": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/437": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/439": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/440": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/441": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/445": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true}}]}}
{"Mbpp/446": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/447": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/448": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/450": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/451": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/453": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/454": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/455": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/456": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/457": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/458": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/459": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/460": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/462": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/463": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/465": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/468": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/470": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/471": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/472": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/473": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/474": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/475": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/476": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/477": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/478": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/479": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/554": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/555": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/556": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/557": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/558": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/559": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/560": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/562": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/563": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/564": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/565": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/566": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/567": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/568": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/569": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/572": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/573": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/576": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/577": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/578": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/579": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/580": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/581": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/583": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/585": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true}}]}}
{"Mbpp/586": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/587": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/588": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/589": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/590": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/591": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/592": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/593": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/594": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/596": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/597": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/598": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/599": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/600": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/602": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/603": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/604": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/605": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/606": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/607": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/608": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/610": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/611": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true}}]}}
{"Mbpp/612": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/614": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/615": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/616": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/618": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true, "assert_6": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true}}]}}
{"Mbpp/619": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/620": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/622": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}]}}
{"Mbpp/623": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/624": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/626": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/628": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/629": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/630": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/631": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/632": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/633": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/635": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/637": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/638": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/639": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/641": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/643": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/644": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/720": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/721": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/722": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": false, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": false, "assert_7": false, "assert_8": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": false, "assert_8": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert (not C8))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert (not C8))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert C7)\n(assert (not C8))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": true, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert C7)\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": true, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert (not C6))\n(assert C7)\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": false, "assert_7": true, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert (not C6))\n(assert C7)\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": false, "assert_7": true, "assert_8": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)\n(assert (not C8))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert (not C8))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert C8)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert C8)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert C8)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n(assert C6)\n(assert (not C7))\n(assert C8)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false, "assert_6": true, "assert_7": false, "assert_8": true}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert C8)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert C8)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert C8)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert (not C7))\n(assert C8)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": false, "assert_8": true}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n(assert C6)\n(assert C7)\n(assert C8)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true, "assert_6": true, "assert_7": true, "assert_8": true}}]}}
{"Mbpp/723": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/724": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/725": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/726": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/728": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/730": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/731": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/732": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/733": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/734": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/735": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/736": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/737": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/739": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/740": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/741": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/742": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/743": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/744": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/745": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/748": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/749": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/750": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/751": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/752": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/753": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/754": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/755": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/757": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/758": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/759": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/760": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/762": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/763": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/764": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/765": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/766": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/767": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/769": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/770": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/771": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/772": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/773": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/775": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/777": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/778": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/780": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/781": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/782": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/784": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/785": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"Mbpp/786": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/787": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/788": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/790": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/791": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/792": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/793": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"Mbpp/794": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/796": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/797": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/798": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/799": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/800": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/801": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/803": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/804": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/805": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/806": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"Mbpp/807": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"Mbpp/808": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"Mbpp/809": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
