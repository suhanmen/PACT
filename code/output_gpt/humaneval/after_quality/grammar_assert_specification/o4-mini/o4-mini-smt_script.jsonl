{"HumanEval/0": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/1": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/2": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/3": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/4": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/5": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/6": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/7": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/8": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/9": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/10": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/11": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/12": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/13": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/14": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/15": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/16": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/17": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/18": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/19": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/20": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/21": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/22": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/23": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/24": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/25": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/26": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/27": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/28": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/29": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/30": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/31": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/32": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/33": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/34": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/35": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/36": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/37": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/38": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/39": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/40": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/41": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/42": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/43": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/44": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/45": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/46": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/47": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/48": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/49": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/50": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/51": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/52": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/53": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/54": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/55": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/56": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/57": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/58": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/59": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/60": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/61": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/62": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/63": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/64": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/65": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/66": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/67": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/68": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/69": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/70": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/71": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/72": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/73": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/74": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))": {"assert_0": false, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)": {"assert_0": false, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/75": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/76": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/77": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/78": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/79": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/80": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/81": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/82": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/83": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/84": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/85": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/86": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/87": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert C1)\n(assert C2)": {"assert_0": false, "assert_1": true, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/88": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/89": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/90": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/91": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/92": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/93": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/94": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/95": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/96": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/97": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/98": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/99": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/100": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/101": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/102": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/103": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/104": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/105": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/106": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/107": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/108": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/109": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/110": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/111": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/112": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/113": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))": {"assert_0": false, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/114": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/115": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/116": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/117": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/118": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/119": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"HumanEval/120": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"HumanEval/121": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/122": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"HumanEval/123": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/124": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/125": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/126": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/127": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/128": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/129": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true}}]}}
{"HumanEval/130": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/131": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/132": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/133": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/134": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/135": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))": {"assert_0": true, "assert_1": false, "assert_2": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/136": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/137": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/138": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/139": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/140": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/141": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/142": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/143": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/144": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/145": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/146": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/147": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/148": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/149": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/150": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/151": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/152": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/153": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/154": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/155": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/156": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/157": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert (not C0))\n(assert C1)": {"assert_0": false, "assert_1": true}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
{"HumanEval/158": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))": {"assert_0": true, "assert_1": true, "assert_2": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)": {"assert_0": true, "assert_1": false, "assert_2": true}}, {"(assert C0)\n(assert C1)\n(assert C2)": {"assert_0": true, "assert_1": true, "assert_2": true}}]}}
{"HumanEval/159": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": false, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false}}, {"(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": false, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true}}, {"(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": false, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true}}]}}
{"HumanEval/160": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": false}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": false, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": false, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": false, "assert_3": true, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": false, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}, {"(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)": {"assert_0": true, "assert_1": true, "assert_2": true, "assert_3": true, "assert_4": true, "assert_5": true}}]}}
{"HumanEval/161": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/162": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))": {"assert_0": false}}, {"(assert C0)": {"assert_0": true}}]}}
{"HumanEval/163": {"base_smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n<<HELPER_FUNCTIONS>>\n\n; === Inputs ===\n<<INPUT>>\n\n; === BASIC STRUCTURE ===\n<<BASIC_STRUCTURE>>\n\n; === Contract predicates ===\n<<CONTRACT_DEFS>>\n\n; === COMBINATION ===\n<<COMBINATION>>\n\n(check-sat)\n(get-model)\n", "combination": [{"(assert (not C0))\n(assert (not C1))": {"assert_0": false, "assert_1": false}}, {"(assert C0)\n(assert (not C1))": {"assert_0": true, "assert_1": false}}, {"(assert C0)\n(assert C1)": {"assert_0": true, "assert_1": true}}]}}
