{
  "metadata": {
    "model_name": "o4-mini",
    "total_test_cases": 1,
    "generation_timestamp": "2025-09-12 23:49:29.298644",
    "solver_config": {
      "solver_path": "z3",
      "timeout": 20,
      "num_solutions": 5
    }
  },
  "test_cases": {
    "HumanEval/0": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_numeric ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (or (is-IntVal (head lst)) (is-FloatVal (head lst)))\n                 (list_all_numeric (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const threshold Value)\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-FloatVal threshold))\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-FloatVal threshold) (> (fval threshold) 0)))\n(define-fun C1 () Bool (IsList numbers))\n(define-fun C2 () Bool (list_all_numeric numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_numeric ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (or (is-IntVal (head lst)) (is-FloatVal (head lst)))\n                 (list_all_numeric (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const threshold Value)\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-FloatVal threshold))\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-FloatVal threshold) (> (fval threshold) 0)))\n(define-fun C1 () Bool (IsList numbers))\n(define-fun C2 () Bool (list_all_numeric numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                "!0!"
              ],
              "threshold": 0.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                "!"
              ],
              "threshold": -7719.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                "0"
              ],
              "threshold": -10156.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "threshold": -10156.0,
              "numbers": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                ""
              ],
              "threshold": -10156.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_numeric ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (or (is-IntVal (head lst)) (is-FloatVal (head lst)))\n                 (list_all_numeric (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const threshold Value)\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-FloatVal threshold))\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-FloatVal threshold) (> (fval threshold) 0)))\n(define-fun C1 () Bool (IsList numbers))\n(define-fun C2 () Bool (list_all_numeric numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                "!0!"
              ],
              "threshold": 0.5
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                "!"
              ],
              "threshold": 0.25
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "threshold": 0.125,
              "numbers": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                "0!"
              ],
              "threshold": 0.0625
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                "A"
              ],
              "threshold": 0.03125
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_numeric ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (or (is-IntVal (head lst)) (is-FloatVal (head lst)))\n                 (list_all_numeric (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const threshold Value)\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-FloatVal threshold))\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-FloatVal threshold) (> (fval threshold) 0)))\n(define-fun C1 () Bool (IsList numbers))\n(define-fun C2 () Bool (list_all_numeric numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_numeric ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (or (is-IntVal (head lst)) (is-FloatVal (head lst)))\n                 (list_all_numeric (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const threshold Value)\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-FloatVal threshold))\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-FloatVal threshold) (> (fval threshold) 0)))\n(define-fun C1 () Bool (IsList numbers))\n(define-fun C2 () Bool (list_all_numeric numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_numeric ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (or (is-IntVal (head lst)) (is-FloatVal (head lst)))\n                 (list_all_numeric (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const threshold Value)\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-FloatVal threshold))\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-FloatVal threshold) (> (fval threshold) 0)))\n(define-fun C1 () Bool (IsList numbers))\n(define-fun C2 () Bool (list_all_numeric numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [],
              "threshold": 0.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [],
              "threshold": -7719.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [],
              "threshold": -10156.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [],
              "threshold": -21953.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "threshold": -54238.0,
              "numbers": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_numeric ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (or (is-IntVal (head lst)) (is-FloatVal (head lst)))\n                 (list_all_numeric (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const threshold Value)\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-FloatVal threshold))\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-FloatVal threshold) (> (fval threshold) 0)))\n(define-fun C1 () Bool (IsList numbers))\n(define-fun C2 () Bool (list_all_numeric numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [],
              "threshold": 0.5
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [],
              "threshold": 0.25
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [],
              "threshold": 0.125
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [],
              "threshold": 0.0625
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [],
              "threshold": 0.03125
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_numeric ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (or (is-IntVal (head lst)) (is-FloatVal (head lst)))\n                 (list_all_numeric (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const threshold Value)\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-FloatVal threshold))\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-FloatVal threshold) (> (fval threshold) 0)))\n(define-fun C1 () Bool (IsList numbers))\n(define-fun C2 () Bool (list_all_numeric numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/1": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": "A)"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": ")B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": ")C"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": ")D"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": ")E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": ")"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": " )"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": ") "
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "))"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": " ) "
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": "(A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": "(B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "(C"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "(D"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "(E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": "("
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": " ("
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "(("
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "( "
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "  ("
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": ")A("
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": "B)("
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "C)("
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "D)("
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "E)("
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": ")("
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": " )("
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": ")( "
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": ") ("
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": " ) ("
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": "A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": "B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "C"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "D"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": " "
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "  "
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "()"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": " ()"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-sval ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec all_valid_chars ((v Value) (idx Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (and (or (= ch \"(\") (= ch \")\") (= ch \" \"))\n              (all_valid_chars v (+ idx 1))))\n       true))\n\n(define-fun-rec prefix_balanced ((v Value) (idx Int) (cnt Int)) Bool\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (let ((new_cnt (ite (= ch \"(\") (+ cnt 1)\n                              (ite (= ch \")\") (- cnt 1) cnt))))\n           (and (>= new_cnt 0)\n                (prefix_balanced v (+ idx 1) new_cnt))))\n       true))\n\n(define-fun-rec final_count ((v Value) (idx Int) (cnt Int)) Int\n  (ite (< idx (str.len (safe-sval v)))\n       (let ((ch (str.substr (safe-sval v) idx 1)))\n         (final_count v (+ idx 1)\n                      (ite (= ch \"(\") (+ cnt 1)\n                           (ite (= ch \")\") (- cnt 1) cnt))))\n       cnt))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (all_valid_chars paren_string 0))\n(define-fun C2 () Bool (prefix_balanced paren_string 0 0))\n(define-fun C3 () Bool (= (final_count paren_string 0 0) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/2": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "number": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "number": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "number": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "number": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "number": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe_fval ((v Value)) Real\n (ite (is-FloatVal v) (fval v) 0.0))\n(declare-const INF Real)\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (safe_fval number) 0.0))\n(define-fun C1 () Bool (is-FloatVal number))\n(define-fun C2 () Bool (and (is-FloatVal number) (not (= (fval number) INF))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe_fval ((v Value)) Real\n (ite (is-FloatVal v) (fval v) 0.0))\n(declare-const INF Real)\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (safe_fval number) 0.0))\n(define-fun C1 () Bool (is-FloatVal number))\n(define-fun C2 () Bool (and (is-FloatVal number) (not (= (fval number) INF))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "number": 0.0,
              "INF": 0.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "INF": -1.0,
              "number": -1.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "INF": -2.0,
              "number": -2.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "INF": -3.0,
              "number": -3.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "INF": -4.0,
              "number": -4.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe_fval ((v Value)) Real\n (ite (is-FloatVal v) (fval v) 0.0))\n(declare-const INF Real)\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (safe_fval number) 0.0))\n(define-fun C1 () Bool (is-FloatVal number))\n(define-fun C2 () Bool (and (is-FloatVal number) (not (= (fval number) INF))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "number": 0.5,
              "INF": 0.5
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "INF": 0.25,
              "number": 0.25
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "INF": 0.125,
              "number": 0.125
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "INF": 0.0625,
              "number": 0.0625
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "INF": 0.03125,
              "number": 0.03125
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe_fval ((v Value)) Real\n (ite (is-FloatVal v) (fval v) 0.0))\n(declare-const INF Real)\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (safe_fval number) 0.0))\n(define-fun C1 () Bool (is-FloatVal number))\n(define-fun C2 () Bool (and (is-FloatVal number) (not (= (fval number) INF))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe_fval ((v Value)) Real\n (ite (is-FloatVal v) (fval v) 0.0))\n(declare-const INF Real)\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (safe_fval number) 0.0))\n(define-fun C1 () Bool (is-FloatVal number))\n(define-fun C2 () Bool (and (is-FloatVal number) (not (= (fval number) INF))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe_fval ((v Value)) Real\n (ite (is-FloatVal v) (fval v) 0.0))\n(declare-const INF Real)\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (safe_fval number) 0.0))\n(define-fun C1 () Bool (is-FloatVal number))\n(define-fun C2 () Bool (and (is-FloatVal number) (not (= (fval number) INF))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "INF": 2.0,
              "number": 0.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "INF": 3.0,
              "number": -7719.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "INF": 4.0,
              "number": -10156.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "INF": 5.0,
              "number": -21953.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "INF": 6.0,
              "number": -54238.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe_fval ((v Value)) Real\n (ite (is-FloatVal v) (fval v) 0.0))\n(declare-const INF Real)\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (safe_fval number) 0.0))\n(define-fun C1 () Bool (is-FloatVal number))\n(define-fun C2 () Bool (and (is-FloatVal number) (not (= (fval number) INF))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "INF": 2.0,
              "number": 0.5
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "INF": 3.0,
              "number": 0.25
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "INF": 4.0,
              "number": 0.125
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "INF": 5.0,
              "number": 0.0625
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "INF": 6.0,
              "number": 0.03125
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe_fval ((v Value)) Real\n (ite (is-FloatVal v) (fval v) 0.0))\n(declare-const INF Real)\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (safe_fval number) 0.0))\n(define-fun C1 () Bool (is-FloatVal number))\n(define-fun C2 () Bool (and (is-FloatVal number) (not (= (fval number) INF))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/3": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun safe_ival ((v Value)) Int\n  (ite (is-IntVal v)\n       (ival v)\n       0))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-IntVal (head v))\n           (list_all_int (tail v)))))\n\n; === Inputs ===\n(declare-const operations Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operations))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList operations))\n(define-fun C1 () Bool (list_all_int operations))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operations": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operations": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operations": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operations": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operations": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun safe_ival ((v Value)) Int\n  (ite (is-IntVal v)\n       (ival v)\n       0))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-IntVal (head v))\n           (list_all_int (tail v)))))\n\n; === Inputs ===\n(declare-const operations Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operations))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList operations))\n(define-fun C1 () Bool (list_all_int operations))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun safe_ival ((v Value)) Int\n  (ite (is-IntVal v)\n       (ival v)\n       0))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-IntVal (head v))\n           (list_all_int (tail v)))))\n\n; === Inputs ===\n(declare-const operations Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operations))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList operations))\n(define-fun C1 () Bool (list_all_int operations))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operations": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operations": [
                2,
                3
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operations": [
                4
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operations": [
                5
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operations": [
                6
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun safe_ival ((v Value)) Int\n  (ite (is-IntVal v)\n       (ival v)\n       0))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-IntVal (head v))\n           (list_all_int (tail v)))))\n\n; === Inputs ===\n(declare-const operations Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operations))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList operations))\n(define-fun C1 () Bool (list_all_int operations))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/4": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_float ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-FloatVal (head lst)) (list_all_float (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_float numbers))\n(define-fun C1 () Bool\n  (is-Cons numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "numbers": []
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_float ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-FloatVal (head lst)) (list_all_float (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_float numbers))\n(define-fun C1 () Bool\n  (is-Cons numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                2
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                3
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                4
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                5
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                6
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_float ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-FloatVal (head lst)) (list_all_float (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_float numbers))\n(define-fun C1 () Bool\n  (is-Cons numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_float ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-FloatVal (head lst)) (list_all_float (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_float numbers))\n(define-fun C1 () Bool\n  (is-Cons numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/5": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                3.0
              ],
              "delimeter": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                5.0
              ],
              "delimeter": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                7.0
              ],
              "delimeter": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                8.0
              ],
              "delimeter": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                10.0
              ],
              "delimeter": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (IsList t))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (and (is-IntVal h)\n                   (list_all_ints t)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n(declare-const delimeter Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_ints numbers))\n(define-fun C1 () Bool\n  (is-IntVal delimeter))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [],
              "delimeter": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [],
              "delimeter": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [],
              "delimeter": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [],
              "delimeter": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [],
              "delimeter": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (IsList t))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (and (is-IntVal h)\n                   (list_all_ints t)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n(declare-const delimeter Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_ints numbers))\n(define-fun C1 () Bool\n  (is-IntVal delimeter))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                2.0
              ],
              "delimeter": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                3.0
              ],
              "delimeter": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                4.0
              ],
              "delimeter": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                5.0
              ],
              "delimeter": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                6.0
              ],
              "delimeter": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (IsList t))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (and (is-IntVal h)\n                   (list_all_ints t)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n(declare-const delimeter Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_ints numbers))\n(define-fun C1 () Bool\n  (is-IntVal delimeter))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [],
              "delimeter": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [],
              "delimeter": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [],
              "delimeter": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [],
              "delimeter": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [],
              "delimeter": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (IsList t))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (and (is-IntVal h)\n                   (list_all_ints t)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n(declare-const delimeter Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_ints numbers))\n(define-fun C1 () Bool\n  (is-IntVal delimeter))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/6": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": ")A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": "B)"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "C)"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "D)"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "E)"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": ")"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": " )"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "))"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": ") "
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "  )"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": "A("
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": "B("
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "C("
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "D("
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "E("
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": "("
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": " ("
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "( "
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "(("
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "  ("
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": "A)("
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": "B)("
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "C)("
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "D)("
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "E)("
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": ")("
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": ") ("
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": ")( "
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": " )("
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": " ) ("
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": "A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": "B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "C"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "D"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": "E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "paren_string": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "paren_string": " "
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "paren_string": "()"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "paren_string": "  "
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "paren_string": " ()"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun ValidParenChars ((s String)) Bool\n  (str.in.re s (re.* (re.union (str.to.re \"(\") (re.union (str.to.re \")\") (str.to.re \" \"))))))\n\n(define-fun-rec prefix_ok ((s String) (i Int) (cnt Int)) Bool\n  (ite (>= i (str.len s))\n       true\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((newCnt (ite isL (+ cnt 1) (ite isR (- cnt 1) cnt))))\n             (and (>= newCnt 0)\n                  (prefix_ok s (+ i 1) newCnt)))))))\n\n(define-fun-rec sum_balance ((s String) (i Int)) Int\n  (ite (>= i (str.len s))\n       0\n       (let ((ch (str.at s i)))\n         (let ((isL (str.in.re ch (str.to.re \"(\")))\n               (isR (str.in.re ch (str.to.re \")\"))))\n           (let ((cur (ite isL 1 (ite isR (- 1) 0))))\n             (+ cur (sum_balance s (+ i 1))))))))\n\n; === Inputs ===\n(declare-const paren_string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal paren_string))\n(define-fun C1 () Bool (and (is-StrVal paren_string) (ValidParenChars (sval paren_string))))\n(define-fun C2 () Bool (and (is-StrVal paren_string) (prefix_ok (sval paren_string) 0 0)))\n(define-fun C3 () Bool (and (is-StrVal paren_string) (= (sum_balance (sval paren_string) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/7": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllStr ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (AllStr (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n(define-fun C2 () Bool (is-StrVal substring))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "substring": 2.0,
              "strings": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "substring": 4.0,
              "strings": [
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "substring": 6.0,
              "strings": [
                7.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "substring": 9.0,
              "strings": [
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": [
                10.0
              ],
              "substring": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllStr ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (AllStr (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n(define-fun C2 () Bool (is-StrVal substring))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllStr ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (AllStr (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n(define-fun C2 () Bool (is-StrVal substring))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "substring": 2.0,
              "strings": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "substring": 3.0,
              "strings": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "substring": 4.0,
              "strings": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "substring": 5.0,
              "strings": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "substring": 6.0,
              "strings": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllStr ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (AllStr (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n(define-fun C2 () Bool (is-StrVal substring))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllStr ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (AllStr (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n(define-fun C2 () Bool (is-StrVal substring))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "substring": "!0!",
              "strings": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "substring": "!",
              "strings": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "substring": "0",
              "strings": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "substring": "0!",
              "strings": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "substring": "A",
              "strings": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllStr ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (AllStr (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n(define-fun C2 () Bool (is-StrVal substring))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllStr ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (AllStr (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n(define-fun C2 () Bool (is-StrVal substring))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "substring": "!0!",
              "strings": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "substring": "!",
              "strings": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": [],
              "substring": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "substring": "0!",
              "strings": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "substring": "",
              "strings": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllStr ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (AllStr (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n(define-fun C2 () Bool (is-StrVal substring))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/8": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l))\n                 (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_int numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l))\n                 (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_int numbers))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/9": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList numbers))\n(define-fun C1 () Bool (list_all_int numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList numbers))\n(define-fun C1 () Bool (list_all_int numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList numbers))\n(define-fun C1 () Bool (list_all_int numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList numbers))\n(define-fun C1 () Bool (list_all_int numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/10": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/11": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "A",
              "a": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": "B",
              "a": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": "D",
              "a": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": "C",
              "a": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": "E",
              "a": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun Safe_Sval ((x Value)) String\n  (ite (is-StrVal x) (sval x) \"\"))\n(define-fun isBinaryString ((s Value)) Bool\n  (and (is-StrVal s)\n       (str.in.re (Safe_Sval s) (re.* (re.union (str.to.re \"0\") (str.to.re \"1\"))))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n(define-fun C1 () Bool (= (str.len (Safe_Sval a)) (str.len (Safe_Sval b))))\n(define-fun C2 () Bool (and (isBinaryString a) (isBinaryString b)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "",
              "a": "B"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": "",
              "a": "C"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": "",
              "a": "D"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": "",
              "a": "A"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": "",
              "a": "E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun Safe_Sval ((x Value)) String\n  (ite (is-StrVal x) (sval x) \"\"))\n(define-fun isBinaryString ((s Value)) Bool\n  (and (is-StrVal s)\n       (str.in.re (Safe_Sval s) (re.* (re.union (str.to.re \"0\") (str.to.re \"1\"))))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n(define-fun C1 () Bool (= (str.len (Safe_Sval a)) (str.len (Safe_Sval b))))\n(define-fun C2 () Bool (and (isBinaryString a) (isBinaryString b)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 3.0,
              "a": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 4.0,
              "a": 5.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 7.0,
              "a": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 8.0,
              "a": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 10.0,
              "a": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun Safe_Sval ((x Value)) String\n  (ite (is-StrVal x) (sval x) \"\"))\n(define-fun isBinaryString ((s Value)) Bool\n  (and (is-StrVal s)\n       (str.in.re (Safe_Sval s) (re.* (re.union (str.to.re \"0\") (str.to.re \"1\"))))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n(define-fun C1 () Bool (= (str.len (Safe_Sval a)) (str.len (Safe_Sval b))))\n(define-fun C2 () Bool (and (isBinaryString a) (isBinaryString b)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "A",
              "a": "A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": "B",
              "a": "B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": "C",
              "a": "C"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": "D",
              "a": "D"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": "E",
              "a": "E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun Safe_Sval ((x Value)) String\n  (ite (is-StrVal x) (sval x) \"\"))\n(define-fun isBinaryString ((s Value)) Bool\n  (and (is-StrVal s)\n       (str.in.re (Safe_Sval s) (re.* (re.union (str.to.re \"0\") (str.to.re \"1\"))))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n(define-fun C1 () Bool (= (str.len (Safe_Sval a)) (str.len (Safe_Sval b))))\n(define-fun C2 () Bool (and (isBinaryString a) (isBinaryString b)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun Safe_Sval ((x Value)) String\n  (ite (is-StrVal x) (sval x) \"\"))\n(define-fun isBinaryString ((s Value)) Bool\n  (and (is-StrVal s)\n       (str.in.re (Safe_Sval s) (re.* (re.union (str.to.re \"0\") (str.to.re \"1\"))))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n(define-fun C1 () Bool (= (str.len (Safe_Sval a)) (str.len (Safe_Sval b))))\n(define-fun C2 () Bool (and (isBinaryString a) (isBinaryString b)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "",
              "a": "0"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": "",
              "a": "1"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": "0",
              "a": ""
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": "1",
              "a": ""
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": "1",
              "a": "10"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun Safe_Sval ((x Value)) String\n  (ite (is-StrVal x) (sval x) \"\"))\n(define-fun isBinaryString ((s Value)) Bool\n  (and (is-StrVal s)\n       (str.in.re (Safe_Sval s) (re.* (re.union (str.to.re \"0\") (str.to.re \"1\"))))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n(define-fun C1 () Bool (= (str.len (Safe_Sval a)) (str.len (Safe_Sval b))))\n(define-fun C2 () Bool (and (isBinaryString a) (isBinaryString b)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun Safe_Sval ((x Value)) String\n  (ite (is-StrVal x) (sval x) \"\"))\n(define-fun isBinaryString ((s Value)) Bool\n  (and (is-StrVal s)\n       (str.in.re (Safe_Sval s) (re.* (re.union (str.to.re \"0\") (str.to.re \"1\"))))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n(define-fun C1 () Bool (= (str.len (Safe_Sval a)) (str.len (Safe_Sval b))))\n(define-fun C2 () Bool (and (isBinaryString a) (isBinaryString b)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "",
              "a": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": "1",
              "a": "1"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": "0",
              "a": "1"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": "0",
              "a": "0"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": "1",
              "a": "0"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun Safe_Sval ((x Value)) String\n  (ite (is-StrVal x) (sval x) \"\"))\n(define-fun isBinaryString ((s Value)) Bool\n  (and (is-StrVal s)\n       (str.in.re (Safe_Sval s) (re.* (re.union (str.to.re \"0\") (str.to.re \"1\"))))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n(define-fun C1 () Bool (= (str.len (Safe_Sval a)) (str.len (Safe_Sval b))))\n(define-fun C2 () Bool (and (isBinaryString a) (isBinaryString b)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/12": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun-rec AllStr ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (is-StrVal (head v)) (AllStr (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const strings Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "strings": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "strings": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "strings": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun-rec AllStr ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (is-StrVal (head v)) (AllStr (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const strings Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun-rec AllStr ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (is-StrVal (head v)) (AllStr (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const strings Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "strings": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "strings": [
                "!0!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": [
                "!"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "strings": [
                "0"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": [
                "0!"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun-rec AllStr ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (is-StrVal (head v)) (AllStr (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const strings Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList strings))\n(define-fun C1 () Bool (AllStr strings))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/13": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 3.0,
              "a": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 5.0,
              "a": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 7.0,
              "a": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 9.0,
              "a": 8.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 10.0,
              "a": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun IsInt ((v Value)) Bool (is-IntVal v))\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n(define-fun-rec query_gcd ((x Int) (y Int)) Int\n  (ite (= y 0)\n       x\n       (query_gcd y (mod x y))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n(define-fun C1 () Bool (and (> (SafeI a) 0) (> (SafeI b) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 21238,
              "a": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 2437,
              "a": -21238
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 10802,
              "a": -21238
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 41414,
              "a": -21238
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 42556,
              "a": -21238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun IsInt ((v Value)) Bool (is-IntVal v))\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n(define-fun-rec query_gcd ((x Int) (y Int)) Int\n  (ite (= y 0)\n       x\n       (query_gcd y (mod x y))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n(define-fun C1 () Bool (and (> (SafeI a) 0) (> (SafeI b) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun IsInt ((v Value)) Bool (is-IntVal v))\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n(define-fun-rec query_gcd ((x Int) (y Int)) Int\n  (ite (= y 0)\n       x\n       (query_gcd y (mod x y))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n(define-fun C1 () Bool (and (> (SafeI a) 0) (> (SafeI b) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 7720,
              "a": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 7721,
              "a": 1
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 7719,
              "a": 1
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 2732,
              "a": 1
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 1143,
              "a": 28101
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun IsInt ((v Value)) Bool (is-IntVal v))\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n(define-fun-rec query_gcd ((x Int) (y Int)) Int\n  (ite (= y 0)\n       x\n       (query_gcd y (mod x y))))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n(define-fun C1 () Bool (and (> (SafeI a) 0) (> (SafeI b) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/14": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/15": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (implies (is-IntVal n) (>= (ival n) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (implies (is-IntVal n) (>= (ival n) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (implies (is-IntVal n) (>= (ival n) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (implies (is-IntVal n) (>= (ival n) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/16": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/17": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const music_string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal music_string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal music_string))\n(define-fun C1 () Bool (or (= (SafeS music_string) \"\") (str.in.re (SafeS music_string) (re.union (str.to.re \"\") (re.++ (re.union (str.to.re \"o\") (str.to.re \"o|\") (str.to.re \".|\")) (re.* (re.++ (str.to.re \" \") (re.union (str.to.re \"o\") (str.to.re \"o|\") (str.to.re \".|\")))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "music_string": "A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "music_string": "B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "music_string": "C"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "music_string": "D"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "music_string": "E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const music_string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal music_string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal music_string))\n(define-fun C1 () Bool (or (= (SafeS music_string) \"\") (str.in.re (SafeS music_string) (re.union (str.to.re \"\") (re.++ (re.union (str.to.re \"o\") (str.to.re \"o|\") (str.to.re \".|\")) (re.* (re.++ (str.to.re \" \") (re.union (str.to.re \"o\") (str.to.re \"o|\") (str.to.re \".|\")))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const music_string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal music_string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal music_string))\n(define-fun C1 () Bool (or (= (SafeS music_string) \"\") (str.in.re (SafeS music_string) (re.union (str.to.re \"\") (re.++ (re.union (str.to.re \"o\") (str.to.re \"o|\") (str.to.re \".|\")) (re.* (re.++ (str.to.re \" \") (re.union (str.to.re \"o\") (str.to.re \"o|\") (str.to.re \".|\")))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "music_string": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "music_string": "o"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "music_string": ".|"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "music_string": "o|"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "music_string": "o o"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const music_string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal music_string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal music_string))\n(define-fun C1 () Bool (or (= (SafeS music_string) \"\") (str.in.re (SafeS music_string) (re.union (str.to.re \"\") (re.++ (re.union (str.to.re \"o\") (str.to.re \"o|\") (str.to.re \".|\")) (re.* (re.++ (str.to.re \" \") (re.union (str.to.re \"o\") (str.to.re \"o|\") (str.to.re \".|\")))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/18": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n(assert (is-StrVal substring))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal string) (is-StrVal substring)))\n(define-fun C1 () Bool (ite (is-StrVal substring) (not (= (sval substring) \"\")) true))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "substring": "",
              "string": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "substring": "",
              "string": "A"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "substring": "",
              "string": "B"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "substring": "",
              "string": "C"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "substring": "",
              "string": "D"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n(assert (is-StrVal substring))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal string) (is-StrVal substring)))\n(define-fun C1 () Bool (ite (is-StrVal substring) (not (= (sval substring) \"\")) true))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n(assert (is-StrVal substring))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal string) (is-StrVal substring)))\n(define-fun C1 () Bool (ite (is-StrVal substring) (not (= (sval substring) \"\")) true))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "substring": "A",
              "string": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "substring": "B",
              "string": "A"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "substring": "C",
              "string": "B"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "substring": "D",
              "string": "C"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "substring": "E",
              "string": "D"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n(declare-const substring Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n(assert (is-StrVal substring))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal string) (is-StrVal substring)))\n(define-fun C1 () Bool (ite (is-StrVal substring) (not (= (sval substring) \"\")) true))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/19": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStr ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal numbers))\n(define-fun C1 () Bool\n  (let ((s (SafeStr numbers))\n        (pattern\n          (let ((digit (re.union (str.to.re \"zero\") (str.to.re \"one\") (str.to.re \"two\") (str.to.re \"three\") (str.to.re \"four\") (str.to.re \"five\") (str.to.re \"six\") (str.to.re \"seven\") (str.to.re \"eight\") (str.to.re \"nine\")))\n                (sep (str.to.re \" \")))\n            (re.++ digit (re.* (re.++ sep digit))))))\n    (or (= s \"\") (str.in.re s pattern))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": "e"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": "f"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": "o"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": "t"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": "n"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStr ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal numbers))\n(define-fun C1 () Bool\n  (let ((s (SafeStr numbers))\n        (pattern\n          (let ((digit (re.union (str.to.re \"zero\") (str.to.re \"one\") (str.to.re \"two\") (str.to.re \"three\") (str.to.re \"four\") (str.to.re \"five\") (str.to.re \"six\") (str.to.re \"seven\") (str.to.re \"eight\") (str.to.re \"nine\")))\n                (sep (str.to.re \" \")))\n            (re.++ digit (re.* (re.++ sep digit))))))\n    (or (= s \"\") (str.in.re s pattern))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStr ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal numbers))\n(define-fun C1 () Bool\n  (let ((s (SafeStr numbers))\n        (pattern\n          (let ((digit (re.union (str.to.re \"zero\") (str.to.re \"one\") (str.to.re \"two\") (str.to.re \"three\") (str.to.re \"four\") (str.to.re \"five\") (str.to.re \"six\") (str.to.re \"seven\") (str.to.re \"eight\") (str.to.re \"nine\")))\n                (sep (str.to.re \" \")))\n            (re.++ digit (re.* (re.++ sep digit))))))\n    (or (= s \"\") (str.in.re s pattern))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": "one"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": "two"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": "six"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": "four"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStr ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal numbers))\n(define-fun C1 () Bool\n  (let ((s (SafeStr numbers))\n        (pattern\n          (let ((digit (re.union (str.to.re \"zero\") (str.to.re \"one\") (str.to.re \"two\") (str.to.re \"three\") (str.to.re \"four\") (str.to.re \"five\") (str.to.re \"six\") (str.to.re \"seven\") (str.to.re \"eight\") (str.to.re \"nine\")))\n                (sep (str.to.re \" \")))\n            (re.++ digit (re.* (re.++ sep digit))))))\n    (or (= s \"\") (str.in.re s pattern))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/20": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                ""
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (let ((head (head v)) (tailv (tail v)))\n             (and (or (is-IntVal head) (is-FloatVal head))\n                  (list_all_numeric tailv))))))\n(define-fun-rec list_length ((v Value)) Int\n  (ite (is-Cons v)\n       (+ 1 (list_length (tail v)))\n       0))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_numeric numbers))\n(define-fun C1 () Bool\n  (>= (list_length numbers) 2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                4.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                5.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (let ((head (head v)) (tailv (tail v)))\n             (and (or (is-IntVal head) (is-FloatVal head))\n                  (list_all_numeric tailv))))))\n(define-fun-rec list_length ((v Value)) Int\n  (ite (is-Cons v)\n       (+ 1 (list_length (tail v)))\n       0))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_numeric numbers))\n(define-fun C1 () Bool\n  (>= (list_length numbers) 2))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                "!0!",
                "!0!",
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                "0",
                "!",
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                "!0!",
                "0!",
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                "!0!",
                6.0,
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                "!0!",
                8.0,
                7.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (let ((head (head v)) (tailv (tail v)))\n             (and (or (is-IntVal head) (is-FloatVal head))\n                  (list_all_numeric tailv))))))\n(define-fun-rec list_length ((v Value)) Int\n  (ite (is-Cons v)\n       (+ 1 (list_length (tail v)))\n       0))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_numeric numbers))\n(define-fun C1 () Bool\n  (>= (list_length numbers) 2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                8,
                2.0,
                9
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                10,
                11,
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                12,
                4.0,
                13
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                14,
                5.0,
                15
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                16,
                17,
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (let ((head (head v)) (tailv (tail v)))\n             (and (or (is-IntVal head) (is-FloatVal head))\n                  (list_all_numeric tailv))))))\n(define-fun-rec list_length ((v Value)) Int\n  (ite (is-Cons v)\n       (+ 1 (list_length (tail v)))\n       0))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_numeric numbers))\n(define-fun C1 () Bool\n  (>= (list_length numbers) 2))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/21": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                "A"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (IsList (tail l)))))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (or (is-IntVal (head l)) (is-FloatVal (head l))) (list_all_numeric (tail l)))))\n\n(define-fun safe_num ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v)) (ite (is-FloatVal v) (fval v) 0.0)))\n\n(define-fun LenGE2 ((l Value)) Bool\n  (and (is-Cons l) (is-Cons (tail l))))\n\n(define-fun-rec exists_gt_tail ((x Value) (l Value)) Bool\n  (ite (is-Cons l) (or (> (safe_num x) (safe_num (head l))) (exists_gt_tail x (tail l))) false))\n\n(define-fun-rec exists_pair_gt ((l Value)) Bool\n  (ite (is-Cons l) (or (exists_gt_tail (head l) (tail l)) (exists_pair_gt (tail l))) false))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_numeric numbers))\n(define-fun C1 () Bool (LenGE2 numbers))\n(define-fun C2 () Bool (and (LenGE2 numbers) (exists_pair_gt numbers)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                4.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                5.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (IsList (tail l)))))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (or (is-IntVal (head l)) (is-FloatVal (head l))) (list_all_numeric (tail l)))))\n\n(define-fun safe_num ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v)) (ite (is-FloatVal v) (fval v) 0.0)))\n\n(define-fun LenGE2 ((l Value)) Bool\n  (and (is-Cons l) (is-Cons (tail l))))\n\n(define-fun-rec exists_gt_tail ((x Value) (l Value)) Bool\n  (ite (is-Cons l) (or (> (safe_num x) (safe_num (head l))) (exists_gt_tail x (tail l))) false))\n\n(define-fun-rec exists_pair_gt ((l Value)) Bool\n  (ite (is-Cons l) (or (exists_gt_tail (head l) (tail l)) (exists_pair_gt (tail l))) false))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_numeric numbers))\n(define-fun C1 () Bool (LenGE2 numbers))\n(define-fun C2 () Bool (and (LenGE2 numbers) (exists_pair_gt numbers)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                0,
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                0,
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                -30612,
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                -30893,
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                -30893,
                "!0!"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (IsList (tail l)))))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (or (is-IntVal (head l)) (is-FloatVal (head l))) (list_all_numeric (tail l)))))\n\n(define-fun safe_num ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v)) (ite (is-FloatVal v) (fval v) 0.0)))\n\n(define-fun LenGE2 ((l Value)) Bool\n  (and (is-Cons l) (is-Cons (tail l))))\n\n(define-fun-rec exists_gt_tail ((x Value) (l Value)) Bool\n  (ite (is-Cons l) (or (> (safe_num x) (safe_num (head l))) (exists_gt_tail x (tail l))) false))\n\n(define-fun-rec exists_pair_gt ((l Value)) Bool\n  (ite (is-Cons l) (or (exists_gt_tail (head l) (tail l)) (exists_pair_gt (tail l))) false))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_numeric numbers))\n(define-fun C1 () Bool (LenGE2 numbers))\n(define-fun C2 () Bool (and (LenGE2 numbers) (exists_pair_gt numbers)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                0.5,
                1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                0,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                0.0,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                -15921.0,
                0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                -47812.0,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (IsList (tail l)))))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (or (is-IntVal (head l)) (is-FloatVal (head l))) (list_all_numeric (tail l)))))\n\n(define-fun safe_num ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v)) (ite (is-FloatVal v) (fval v) 0.0)))\n\n(define-fun LenGE2 ((l Value)) Bool\n  (and (is-Cons l) (is-Cons (tail l))))\n\n(define-fun-rec exists_gt_tail ((x Value) (l Value)) Bool\n  (ite (is-Cons l) (or (> (safe_num x) (safe_num (head l))) (exists_gt_tail x (tail l))) false))\n\n(define-fun-rec exists_pair_gt ((l Value)) Bool\n  (ite (is-Cons l) (or (exists_gt_tail (head l) (tail l)) (exists_pair_gt (tail l))) false))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_numeric numbers))\n(define-fun C1 () Bool (LenGE2 numbers))\n(define-fun C2 () Bool (and (LenGE2 numbers) (exists_pair_gt numbers)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (IsList (tail l)))))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (or (is-IntVal (head l)) (is-FloatVal (head l))) (list_all_numeric (tail l)))))\n\n(define-fun safe_num ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v)) (ite (is-FloatVal v) (fval v) 0.0)))\n\n(define-fun LenGE2 ((l Value)) Bool\n  (and (is-Cons l) (is-Cons (tail l))))\n\n(define-fun-rec exists_gt_tail ((x Value) (l Value)) Bool\n  (ite (is-Cons l) (or (> (safe_num x) (safe_num (head l))) (exists_gt_tail x (tail l))) false))\n\n(define-fun-rec exists_pair_gt ((l Value)) Bool\n  (ite (is-Cons l) (or (exists_gt_tail (head l) (tail l)) (exists_pair_gt (tail l))) false))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_numeric numbers))\n(define-fun C1 () Bool (LenGE2 numbers))\n(define-fun C2 () Bool (and (LenGE2 numbers) (exists_pair_gt numbers)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (IsList (tail l)))))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (or (is-IntVal (head l)) (is-FloatVal (head l))) (list_all_numeric (tail l)))))\n\n(define-fun safe_num ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v)) (ite (is-FloatVal v) (fval v) 0.0)))\n\n(define-fun LenGE2 ((l Value)) Bool\n  (and (is-Cons l) (is-Cons (tail l))))\n\n(define-fun-rec exists_gt_tail ((x Value) (l Value)) Bool\n  (ite (is-Cons l) (or (> (safe_num x) (safe_num (head l))) (exists_gt_tail x (tail l))) false))\n\n(define-fun-rec exists_pair_gt ((l Value)) Bool\n  (ite (is-Cons l) (or (exists_gt_tail (head l) (tail l)) (exists_pair_gt (tail l))) false))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_numeric numbers))\n(define-fun C1 () Bool (LenGE2 numbers))\n(define-fun C2 () Bool (and (LenGE2 numbers) (exists_pair_gt numbers)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                1,
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                "!",
                -1
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                "0",
                -1
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                "0!",
                -20977
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                "!0!",
                -20977
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (IsList (tail l)))))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (or (is-IntVal (head l)) (is-FloatVal (head l))) (list_all_numeric (tail l)))))\n\n(define-fun safe_num ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v)) (ite (is-FloatVal v) (fval v) 0.0)))\n\n(define-fun LenGE2 ((l Value)) Bool\n  (and (is-Cons l) (is-Cons (tail l))))\n\n(define-fun-rec exists_gt_tail ((x Value) (l Value)) Bool\n  (ite (is-Cons l) (or (> (safe_num x) (safe_num (head l))) (exists_gt_tail x (tail l))) false))\n\n(define-fun-rec exists_pair_gt ((l Value)) Bool\n  (ite (is-Cons l) (or (exists_gt_tail (head l) (tail l)) (exists_pair_gt (tail l))) false))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_numeric numbers))\n(define-fun C1 () Bool (LenGE2 numbers))\n(define-fun C2 () Bool (and (LenGE2 numbers) (exists_pair_gt numbers)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                -1,
                -2
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                -0.25,
                -0.5
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                -0.0625,
                -0.125
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                0.5,
                0.25
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                0.125,
                0.0625
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (IsList (tail l)))))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (or (is-Nil l) (and (is-Cons l) (or (is-IntVal (head l)) (is-FloatVal (head l))) (list_all_numeric (tail l)))))\n\n(define-fun safe_num ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v)) (ite (is-FloatVal v) (fval v) 0.0)))\n\n(define-fun LenGE2 ((l Value)) Bool\n  (and (is-Cons l) (is-Cons (tail l))))\n\n(define-fun-rec exists_gt_tail ((x Value) (l Value)) Bool\n  (ite (is-Cons l) (or (> (safe_num x) (safe_num (head l))) (exists_gt_tail x (tail l))) false))\n\n(define-fun-rec exists_pair_gt ((l Value)) Bool\n  (ite (is-Cons l) (or (exists_gt_tail (head l) (tail l)) (exists_pair_gt (tail l))) false))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_numeric numbers))\n(define-fun C1 () Bool (LenGE2 numbers))\n(define-fun C2 () Bool (and (LenGE2 numbers) (exists_pair_gt numbers)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/22": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "values": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "values": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "values": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "values": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "values": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n; === Inputs ===\n(declare-const values Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList values))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "values": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "values": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "values": [
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "values": [
                4.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "values": [
                5.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n; === Inputs ===\n(declare-const values Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList values))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/23": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal string))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/24": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (safe-int n) 1))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (safe-int n) 1))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (safe-int n) 1))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7721
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10158
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21955
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54240
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (safe-int n) 1))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/25": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (is-IntVal n) (>= (SafeI n) 2)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (is-IntVal n) (>= (SafeI n) 2)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (is-IntVal n) (>= (SafeI n) 2)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7721
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10158
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21955
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54240
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (is-IntVal n) (>= (SafeI n) 2)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/26": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_ints (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList numbers))\n(define-fun C1 () Bool (list_all_ints numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_ints (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList numbers))\n(define-fun C1 () Bool (list_all_ints numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_ints (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList numbers))\n(define-fun C1 () Bool (list_all_ints numbers))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "numbers": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "numbers": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "numbers": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "numbers": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "numbers": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_ints (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const numbers Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList numbers))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList numbers))\n(define-fun C1 () Bool (list_all_ints numbers))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/27": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/28": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "strings": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "strings": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "strings": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v) (IsList (tail v)))\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v)) (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const strings Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_str strings))\n(define-fun C1 () Bool (IsList strings))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v) (IsList (tail v)))\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v)) (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const strings Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_str strings))\n(define-fun C1 () Bool (IsList strings))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "strings": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "strings": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "strings": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v) (IsList (tail v)))\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v)) (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const strings Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_str strings))\n(define-fun C1 () Bool (IsList strings))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "strings": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "strings": [
                "!0!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": [
                "!"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "strings": [
                "0"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": [
                "0!"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v) (IsList (tail v)))\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v)) (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const strings Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_str strings))\n(define-fun C1 () Bool (IsList strings))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/29": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "strings": [
                3.0
              ],
              "prefix": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "strings": [
                5.0
              ],
              "prefix": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": [
                7.0
              ],
              "prefix": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "strings": [
                8.0
              ],
              "prefix": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": [
                10.0
              ],
              "prefix": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const prefix Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_str strings))\n(define-fun C1 () Bool\n  (is-StrVal prefix))\n(define-fun COMBINATION () Bool\n  (or\n    (and C0 C1)\n    (and (not C0) C1)\n    (and C0 (not C1))\n    (and (not C0) (not C1))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "strings": [],
              "prefix": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "strings": [],
              "prefix": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": [],
              "prefix": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "prefix": 5.0,
              "strings": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": [],
              "prefix": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const prefix Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_str strings))\n(define-fun C1 () Bool\n  (is-StrVal prefix))\n(define-fun COMBINATION () Bool\n  (or\n    (and C0 C1)\n    (and (not C0) C1)\n    (and C0 (not C1))\n    (and (not C0) (not C1))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "strings": [
                2.0
              ],
              "prefix": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "strings": [
                3.0
              ],
              "prefix": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": [
                4.0
              ],
              "prefix": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "strings": [
                5.0
              ],
              "prefix": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": [
                6.0
              ],
              "prefix": "A"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const prefix Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_str strings))\n(define-fun C1 () Bool\n  (is-StrVal prefix))\n(define-fun COMBINATION () Bool\n  (or\n    (and C0 C1)\n    (and (not C0) C1)\n    (and C0 (not C1))\n    (and (not C0) (not C1))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "strings": [],
              "prefix": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "strings": [],
              "prefix": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "strings": [],
              "prefix": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "prefix": "0!",
              "strings": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "strings": [],
              "prefix": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const strings Value)\n(declare-const prefix Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList strings))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_str strings))\n(define-fun C1 () Bool\n  (is-StrVal prefix))\n(define-fun COMBINATION () Bool\n  (or\n    (and C0 C1)\n    (and (not C0) C1)\n    (and C0 (not C1))\n    (and (not C0) (not C1))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/30": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (let ((hd (head v)) (tl (tail v)))\n           (and (or (is-IntVal hd) (is-FloatVal hd))\n                (list_all_numeric tl)))\n         false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n(assert (list_all_numeric l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                2
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                3
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                3.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (let ((hd (head v)) (tl (tail v)))\n           (and (or (is-IntVal hd) (is-FloatVal hd))\n                (list_all_numeric tl)))\n         false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n(assert (list_all_numeric l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/31": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/32": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                -1,
                7.0,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                -1,
                10.0,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                -1,
                12.0,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                -1,
                13.0,
                0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                -1,
                14.0,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                11.0,
                10.0,
                1,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                12.0,
                -1,
                13.0,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                14.0,
                -1,
                15.0,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                16.0,
                -1,
                17.0,
                0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                18.0,
                -1,
                19.0,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                9.0,
                2,
                -1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                8.0,
                0,
                -4
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                10.0,
                -2,
                1
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                11.0,
                1,
                -200000
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                12.0,
                1,
                -200000
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                6.0,
                -1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                1,
                7.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                -1,
                8.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                -1,
                9.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                -1,
                10.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                1,
                -1,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                2,
                1,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                3,
                2,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                4,
                2,
                0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                4,
                1,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                1,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                2,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                3,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                4,
                0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                5,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                -1
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                -2
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                -3
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                1,
                1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                2,
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                3,
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                5,
                5
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                7,
                7
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                7.0,
                6.0,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                12.0,
                2,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                10.0,
                -1,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                11.0,
                -1,
                0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                13.0,
                -1,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                6.0,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                7.0,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                8.0,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                9.0,
                0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                10.0,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                5.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                6.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                7.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                9.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                6.0,
                -1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                5.0,
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                7.0,
                7.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                8.0,
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                9.0,
                9.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                1,
                -200001,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                1,
                200001,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                1,
                1,
                0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                2,
                2,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                0,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                0,
                -2,
                -2,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                0,
                -2,
                -1,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                0,
                -3,
                -1,
                0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                0,
                -4,
                -16,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                1,
                -100001,
                100000
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                0,
                2,
                1
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                1,
                40000400000,
                40000000000
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                2,
                40000400001,
                39999999999
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                0,
                40000400001,
                22184
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                0,
                -1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                0,
                1
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                -3,
                -2
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                -4,
                -2
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                -2,
                -1
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n(define-fun-rec lastElem ((l Value)) Value\n  (ite (and (is-Cons l) (is-Nil (tail l)))\n       (head l)\n       (ite (is-Cons l)\n            (lastElem (tail l))\n            l)))\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (and (is-Cons l) (is-IntVal (head l)) (list_all_int (tail l)))\n            true\n            false)))\n(define-fun-rec pow ((x Real) (n Int)) Real\n  (ite (= n 0)\n       1\n       (* x (pow x (- n 1)))))\n(define-fun-rec poly_help ((l Value) (idx Int) (x Real)) Real\n  (ite (is-Nil l)\n       0\n       (let ((h (head l)) (t (tail l)))\n         (ite (is-IntVal h)\n              (+ (* (to_real (ival h)) (pow x idx))\n                 (poly_help t (+ idx 1) x))\n              (poly_help t (+ idx 1) x)))))\n(define-fun poly ((l Value) (x Real)) Real\n  (poly_help l 0 x))\n(define-fun abs ((r Real)) Real\n  (ite (< r 0) (- r) r))\n(declare-fun find_zero ((Value)) Real)\n\n; === Inputs ===\n(declare-const xs Value)\n\n\n; === BASIC STRUCTURE ===\n(assert (isList xs))\n(assert (> (length xs) 0))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (isList xs)\n       (> (length xs) 0)\n       (= (mod (length xs) 2) 0)))\n(define-fun C1 () Bool\n  (not (= (lastElem xs) (IntVal 0))))\n(define-fun C2 () Bool\n  (list_all_int xs))\n(define-fun C3 () Bool\n  (< (abs (poly xs (find_zero xs))) (/ 1 100000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/33": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (ite (is-Nil v) true (ite (is-Cons v) (IsList (tail v)) false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                4.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                5.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (ite (is-Nil v) true (ite (is-Cons v) (IsList (tail v)) false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/34": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((x Value)) Bool\n  (ite (is-Nil x) true\n       (ite (is-Cons x)\n            (IsList (tail x))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (or (is-Nil l) (is-Cons l)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                4.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                5.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((x Value)) Bool\n  (ite (is-Nil x) true\n       (ite (is-Cons x)\n            (IsList (tail x))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (or (is-Nil l) (is-Cons l)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/35": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (and (or (is-IntVal h) (is-FloatVal h))\n                   (list_all_numeric t)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (not (= (length l) 0)))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (and (or (is-IntVal h) (is-FloatVal h))\n                   (list_all_numeric t)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (not (= (length l) 0)))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (and (or (is-IntVal h) (is-FloatVal h))\n                   (list_all_numeric t)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (not (= (length l) 0)))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                ""
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (and (or (is-IntVal h) (is-FloatVal h))\n                   (list_all_numeric t)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (not (= (length l) 0)))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (and (or (is-IntVal h) (is-FloatVal h))\n                   (list_all_numeric t)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (not (= (length l) 0)))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (and (or (is-IntVal h) (is-FloatVal h))\n                   (list_all_numeric t)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (not (= (length l) 0)))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (and (or (is-IntVal h) (is-FloatVal h))\n                   (list_all_numeric t)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (not (= (length l) 0)))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (and (or (is-IntVal h) (is-FloatVal h))\n                   (list_all_numeric t)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (not (= (length l) 0)))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/36": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (> (ival n) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (> (ival n) 0)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/37": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList l))\n(define-fun C1 () Bool\n  (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                ""
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList l))\n(define-fun C1 () Bool\n  (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList l))\n(define-fun C1 () Bool\n  (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                2.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                3.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                3
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList l))\n(define-fun C1 () Bool\n  (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/38": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/39": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-ival ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (<= 1 (safe-ival n)) (<= (safe-ival n) 12)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 13
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 21251
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 33048
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 43498
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 71598
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-ival ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (<= 1 (safe-ival n)) (<= (safe-ival n) 12)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-ival ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (<= 1 (safe-ival n)) (<= (safe-ival n) 12)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 4
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 2
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 3
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 10
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-ival ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (<= 1 (safe-ival n)) (<= (safe-ival n) 12)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/40": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(and (IsList l) (list_all_int l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                4.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                5.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(and (IsList l) (list_all_int l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/41": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 1))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 1))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 1))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 1))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/42": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((xs Value)) Bool\n  (ite (is-Nil xs)\n       true\n       (ite (is-Cons xs)\n            (and (or (is-IntVal (head xs))\n                     (is-FloatVal (head xs)))\n                 (list_all_numeric (tail xs)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n(assert (list_all_numeric l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                2
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                3
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                3.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((xs Value)) Bool\n  (ite (is-Nil xs)\n       true\n       (ite (is-Cons xs)\n            (and (or (is-IntVal (head xs))\n                     (is-FloatVal (head xs)))\n                 (list_all_numeric (tail xs)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n(assert (list_all_numeric l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/43": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (ite (is-IntVal h)\n                   (list_all_int t)\n                   false))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_int l))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v)) (t (tail v)))\n              (ite (is-IntVal h)\n                   (list_all_int t)\n                   false))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_int l))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/44": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 2.0,
              "base": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 5.0,
              "base": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 7.0,
              "base": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 9.0,
              "base": 8.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 10.0,
              "base": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const base Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal base)))\n(define-fun C1 () Bool (and (is-IntVal x) (>= (ival x) 0)))\n(define-fun C2 () Bool (and (is-IntVal base) (<= 2 (ival base) 9)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": -1,
              "base": 10
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": -1,
              "base": 0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": -1,
              "base": -2437
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": -8366,
              "base": -2437
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": -38978,
              "base": -2437
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const base Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal base)))\n(define-fun C1 () Bool (and (is-IntVal x) (>= (ival x) 0)))\n(define-fun C2 () Bool (and (is-IntVal base) (<= 2 (ival base) 9)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 0,
              "base": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 7719,
              "base": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 10156,
              "base": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 10156,
              "base": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 18521,
              "base": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const base Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal base)))\n(define-fun C1 () Bool (and (is-IntVal x) (>= (ival x) 0)))\n(define-fun C2 () Bool (and (is-IntVal base) (<= 2 (ival base) 9)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 0,
              "base": -21238
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 21238,
              "base": -2437
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 29603,
              "base": -2437
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 60215,
              "base": -2437
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 61357,
              "base": -2437
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const base Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal base)))\n(define-fun C1 () Bool (and (is-IntVal x) (>= (ival x) 0)))\n(define-fun C2 () Bool (and (is-IntVal base) (<= 2 (ival base) 9)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 2.0,
              "base": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 3.0,
              "base": 9
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 4.0,
              "base": 7
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 5.0,
              "base": 7
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 6.0,
              "base": 7
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const base Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal base)))\n(define-fun C1 () Bool (and (is-IntVal x) (>= (ival x) 0)))\n(define-fun C2 () Bool (and (is-IntVal base) (<= 2 (ival base) 9)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": -1,
              "base": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": -21239,
              "base": 9
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": -21239,
              "base": 8
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": -21239,
              "base": 7
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": -21239,
              "base": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const base Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal base)))\n(define-fun C1 () Bool (and (is-IntVal x) (>= (ival x) 0)))\n(define-fun C2 () Bool (and (is-IntVal base) (<= 2 (ival base) 9)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const base Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal base)))\n(define-fun C1 () Bool (and (is-IntVal x) (>= (ival x) 0)))\n(define-fun C2 () Bool (and (is-IntVal base) (<= 2 (ival base) 9)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 0,
              "base": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 7719,
              "base": 8
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 16574,
              "base": 8
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 24939,
              "base": 8
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 24939,
              "base": 4
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const base Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal base)))\n(define-fun C1 () Bool (and (is-IntVal x) (>= (ival x) 0)))\n(define-fun C2 () Bool (and (is-IntVal base) (<= 2 (ival base) 9)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/45": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeToReal ((v Value)) Real\n  (ite (is-IntVal v)\n       (to_real (ival v))\n       (ite (is-FloatVal v)\n            (fval v)\n            0.0)))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const h Value)\n\n; === BASIC STRUCTURE ===\n(assert (or (is-IntVal a) (is-FloatVal a)))\n(assert (or (is-IntVal h) (is-FloatVal h)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (or (is-IntVal a) (is-FloatVal a))\n       (or (is-IntVal h) (is-FloatVal h))))\n(define-fun C1 () Bool\n  (and (> (SafeToReal a) 0)\n       (> (SafeToReal h) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "h": 1,
              "a": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "h": -1,
              "a": 30612
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "h": -1.5,
              "a": -2
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "h": -1.25,
              "a": -2
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "h": -31892.5,
              "a": -31893
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeToReal ((v Value)) Real\n  (ite (is-IntVal v)\n       (to_real (ival v))\n       (ite (is-FloatVal v)\n            (fval v)\n            0.0)))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const h Value)\n\n; === BASIC STRUCTURE ===\n(assert (or (is-IntVal a) (is-FloatVal a)))\n(assert (or (is-IntVal h) (is-FloatVal h)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (or (is-IntVal a) (is-FloatVal a))\n       (or (is-IntVal h) (is-FloatVal h))))\n(define-fun C1 () Bool\n  (and (> (SafeToReal a) 0)\n       (> (SafeToReal h) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeToReal ((v Value)) Real\n  (ite (is-IntVal v)\n       (to_real (ival v))\n       (ite (is-FloatVal v)\n            (fval v)\n            0.0)))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const h Value)\n\n; === BASIC STRUCTURE ===\n(assert (or (is-IntVal a) (is-FloatVal a)))\n(assert (or (is-IntVal h) (is-FloatVal h)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (or (is-IntVal a) (is-FloatVal a))\n       (or (is-IntVal h) (is-FloatVal h))))\n(define-fun C1 () Bool\n  (and (> (SafeToReal a) 0)\n       (> (SafeToReal h) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "h": 282,
              "a": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "h": 20538,
              "a": 282
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "h": 52429,
              "a": 282.5
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "h": 52429,
              "a": 282.25
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "h": 52429,
              "a": 282.125
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeToReal ((v Value)) Real\n  (ite (is-IntVal v)\n       (to_real (ival v))\n       (ite (is-FloatVal v)\n            (fval v)\n            0.0)))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const h Value)\n\n; === BASIC STRUCTURE ===\n(assert (or (is-IntVal a) (is-FloatVal a)))\n(assert (or (is-IntVal h) (is-FloatVal h)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (or (is-IntVal a) (is-FloatVal a))\n       (or (is-IntVal h) (is-FloatVal h))))\n(define-fun C1 () Bool\n  (and (> (SafeToReal a) 0)\n       (> (SafeToReal h) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/46": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/47": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (isList (tail v)) false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l) 0\n    (ite (is-Cons l) (+ 1 (length (tail l))) 0)))\n\n(define-fun-rec all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n           (all_numeric (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length l) 0))\n(define-fun C1 () Bool (all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                ""
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (isList (tail v)) false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l) 0\n    (ite (is-Cons l) (+ 1 (length (tail l))) 0)))\n\n(define-fun-rec all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n           (all_numeric (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length l) 0))\n(define-fun C1 () Bool (all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (isList (tail v)) false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l) 0\n    (ite (is-Cons l) (+ 1 (length (tail l))) 0)))\n\n(define-fun-rec all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n           (all_numeric (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length l) 0))\n(define-fun C1 () Bool (all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [
                4
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                5
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                6
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                7
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                8
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (isList (tail v)) false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l) 0\n    (ite (is-Cons l) (+ 1 (length (tail l))) 0)))\n\n(define-fun-rec all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n           (all_numeric (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length l) 0))\n(define-fun C1 () Bool (all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/48": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "text": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "text": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "text": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "text": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "text": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec rev ((s String)) String\n  (ite (= (str.len s) 0) \"\"\n    (str.++ (str.substr s (- (str.len s) 1) 1)\n      (rev (str.substr s 0 (- (str.len s) 1))))))\n\n(define-fun is_palindrome_fn ((v Value)) Bool\n  (= (SafeS v) (rev (SafeS v))))\n\n; === Inputs ===\n(declare-const text Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal text))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "text": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "text": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "text": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "text": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "text": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec rev ((s String)) String\n  (ite (= (str.len s) 0) \"\"\n    (str.++ (str.substr s (- (str.len s) 1) 1)\n      (rev (str.substr s 0 (- (str.len s) 1))))))\n\n(define-fun is_palindrome_fn ((v Value)) Bool\n  (= (SafeS v) (rev (SafeS v))))\n\n; === Inputs ===\n(declare-const text Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal text))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/49": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": -1,
              "p": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0,
              "p": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 5.0,
              "p": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 8.0,
              "p": 7.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -1,
              "p": 9.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeIval ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const p Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (is-IntVal p)))\n(define-fun C1 () Bool (and (>= (SafeIval n) 0) (>= (SafeIval p) 1)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0,
              "p": -21238
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 0,
              "p": -21237
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 0,
              "p": -21239
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 0,
              "p": -51851
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 0,
              "p": -52993
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeIval ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const p Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (is-IntVal p)))\n(define-fun C1 () Bool (and (>= (SafeIval n) 0) (>= (SafeIval p) 1)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0,
              "p": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0,
              "p": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0,
              "p": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0,
              "p": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0,
              "p": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeIval ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const p Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (is-IntVal p)))\n(define-fun C1 () Bool (and (>= (SafeIval n) 0) (>= (SafeIval p) 1)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0,
              "p": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719,
              "p": 21239
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 7719,
              "p": 30094
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 7719,
              "p": 38459
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 18169,
              "p": 38459
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeIval ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const p Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (is-IntVal p)))\n(define-fun C1 () Bool (and (>= (SafeIval n) 0) (>= (SafeIval p) 1)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/50": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec all_lower ((str String) (i Int)) Bool\n  (ite (= i (str.len str))\n       true\n       (and (str.in.re (str.substr str i 1) (str.to.re \"[a-z]\"))\n            (all_lower str (+ i 1)))))\n\n(define-fun is_lower ((str String)) Bool\n  (and (> (str.len str) 0)\n       (all_lower str 0)))\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(is-StrVal s)\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (let ((str (sval s)))\n    (or (= str \"\")\n        (is_lower str))))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec all_lower ((str String) (i Int)) Bool\n  (ite (= i (str.len str))\n       true\n       (and (str.in.re (str.substr str i 1) (str.to.re \"[a-z]\"))\n            (all_lower str (+ i 1)))))\n\n(define-fun is_lower ((str String)) Bool\n  (and (> (str.len str) 0)\n       (all_lower str 0)))\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(is-StrVal s)\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (let ((str (sval s)))\n    (or (= str \"\")\n        (is_lower str))))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/51": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "text": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "text": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "text": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "text": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "text": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const text Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal text))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "text": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "text": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "text": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "text": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "text": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const text Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal text))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/52": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (isList (tail v))\n            false)))\n\n(define-fun isNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)\n      (is-BoolVal v)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (isNumeric (head v))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n(declare-const t Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList l))\n(define-fun C1 () Bool (is-IntVal t))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [
                "!0!"
              ],
              "t": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                "!"
              ],
              "t": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                "0"
              ],
              "t": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                "0!"
              ],
              "t": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                "A"
              ],
              "t": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (isList (tail v))\n            false)))\n\n(define-fun isNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)\n      (is-BoolVal v)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (isNumeric (head v))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n(declare-const t Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList l))\n(define-fun C1 () Bool (is-IntVal t))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (isList (tail v))\n            false)))\n\n(define-fun isNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)\n      (is-BoolVal v)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (isNumeric (head v))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n(declare-const t Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList l))\n(define-fun C1 () Bool (is-IntVal t))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [
                "!0!"
              ],
              "t": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                "!"
              ],
              "t": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                "0"
              ],
              "t": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                "0!"
              ],
              "t": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                ""
              ],
              "t": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (isList (tail v))\n            false)))\n\n(define-fun isNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)\n      (is-BoolVal v)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (isNumeric (head v))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n(declare-const t Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList l))\n(define-fun C1 () Bool (is-IntVal t))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (isList (tail v))\n            false)))\n\n(define-fun isNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)\n      (is-BoolVal v)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (isNumeric (head v))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n(declare-const t Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList l))\n(define-fun C1 () Bool (is-IntVal t))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [],
              "t": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [],
              "t": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [],
              "t": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [],
              "t": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [],
              "t": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (isList (tail v))\n            false)))\n\n(define-fun isNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)\n      (is-BoolVal v)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (isNumeric (head v))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n(declare-const t Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList l))\n(define-fun C1 () Bool (is-IntVal t))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (isList (tail v))\n            false)))\n\n(define-fun isNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)\n      (is-BoolVal v)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (isNumeric (head v))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n(declare-const t Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList l))\n(define-fun C1 () Bool (is-IntVal t))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [],
              "t": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [],
              "t": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [],
              "t": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [],
              "t": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [],
              "t": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (isList (tail v))\n            false)))\n\n(define-fun isNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)\n      (is-BoolVal v)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (isNumeric (head v))\n                 (list_all_numeric (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n(declare-const t Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList l))\n(define-fun C1 () Bool (is-IntVal t))\n(define-fun C2 () Bool (list_all_numeric l))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/53": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 2.0,
              "y": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 5.0,
              "y": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 7.0,
              "y": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 9.0,
              "y": 8.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 11.0,
              "y": 10.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (is-IntVal y))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 2,
              "y": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 3,
              "y": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 4,
              "y": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 5,
              "y": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 6,
              "y": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (is-IntVal y))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 2.0,
              "y": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 3.0,
              "y": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 4.0,
              "y": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 5.0,
              "y": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 6.0,
              "y": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (is-IntVal y))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 2,
              "y": 3
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 4,
              "y": 5
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 6,
              "y": 7
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 8,
              "y": 9
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 10,
              "y": 11
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (is-IntVal y))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/54": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s0 Value)\n(declare-const s1 Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s0))\n(assert (is-StrVal s1))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s0) (is-StrVal s1)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s1": "!0!",
              "s0": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s1": "0",
              "s0": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s1": "0!",
              "s0": "0!"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s1": "!",
              "s0": ""
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s1": "A",
              "s0": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s0 Value)\n(declare-const s1 Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s0))\n(assert (is-StrVal s1))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s0) (is-StrVal s1)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/55": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (>= (SafeI n) 0))\n(define-fun C1 () Bool (is-IntVal n))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (>= (SafeI n) 0))\n(define-fun C1 () Bool (is-IntVal n))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (>= (SafeI n) 0))\n(define-fun C1 () Bool (is-IntVal n))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (>= (SafeI n) 0))\n(define-fun C1 () Bool (is-IntVal n))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/56": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec allAngleChars ((s String)) Bool\n  (ite (= (str.len s) 0)\n       true\n       (let ((c (str.substr s 0 1))\n             (rest (str.substr s 1 (- (str.len s) 1))))\n         (and (or (= c \"<\") (= c \">\"))\n              (allAngleChars rest)))))\n\n; === Inputs ===\n(declare-const brackets Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal brackets))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal brackets))\n(define-fun C1 () Bool (allAngleChars (SafeS brackets)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "brackets": "A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "brackets": "B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "brackets": "C"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "brackets": "D"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "brackets": "E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec allAngleChars ((s String)) Bool\n  (ite (= (str.len s) 0)\n       true\n       (let ((c (str.substr s 0 1))\n             (rest (str.substr s 1 (- (str.len s) 1))))\n         (and (or (= c \"<\") (= c \">\"))\n              (allAngleChars rest)))))\n\n; === Inputs ===\n(declare-const brackets Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal brackets))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal brackets))\n(define-fun C1 () Bool (allAngleChars (SafeS brackets)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec allAngleChars ((s String)) Bool\n  (ite (= (str.len s) 0)\n       true\n       (let ((c (str.substr s 0 1))\n             (rest (str.substr s 1 (- (str.len s) 1))))\n         (and (or (= c \"<\") (= c \">\"))\n              (allAngleChars rest)))))\n\n; === Inputs ===\n(declare-const brackets Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal brackets))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal brackets))\n(define-fun C1 () Bool (allAngleChars (SafeS brackets)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "brackets": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "brackets": "<"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "brackets": ">"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "brackets": "><"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "brackets": ">>"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun-rec allAngleChars ((s String)) Bool\n  (ite (= (str.len s) 0)\n       true\n       (let ((c (str.substr s 0 1))\n             (rest (str.substr s 1 (- (str.len s) 1))))\n         (and (or (= c \"<\") (= c \">\"))\n              (allAngleChars rest)))))\n\n; === Inputs ===\n(declare-const brackets Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal brackets))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal brackets))\n(define-fun C1 () Bool (allAngleChars (SafeS brackets)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/57": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec AllNum ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((headv (head v)) (tailv (tail v)))\n              (and (or (is-IntVal headv)\n                       (is-FloatVal headv)\n                       (is-BoolVal headv))\n                   (AllNum tailv)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (AllNum l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                ""
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec AllNum ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((headv (head v)) (tailv (tail v)))\n              (and (or (is-IntVal headv)\n                       (is-FloatVal headv)\n                       (is-BoolVal headv))\n                   (AllNum tailv)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (AllNum l))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec AllNum ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((headv (head v)) (tailv (tail v)))\n              (and (or (is-IntVal headv)\n                       (is-FloatVal headv)\n                       (is-BoolVal headv))\n                   (AllNum tailv)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (AllNum l))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l": [
                2.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l": [
                3
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l": [
                3.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec AllNum ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((headv (head v)) (tailv (tail v)))\n              (and (or (is-IntVal headv)\n                       (is-FloatVal headv)\n                       (is-BoolVal headv))\n                   (AllNum tailv)))\n            false)))\n\n; === Inputs ===\n(declare-const l Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList l))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList l))\n(define-fun C1 () Bool (AllNum l))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/58": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l2": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l2": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l1": 4.0,
              "l2": 2
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l1": 3,
              "l2": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l1": 6.0,
              "l2": 4
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n    true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n; === Inputs ===\n(declare-const l1 Value)\n(declare-const l2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList l1) (IsList l2)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "l1": [],
              "l2": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "l1": [],
              "l2": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "l1": [],
              "l2": [
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "l1": [],
              "l2": [
                4.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "l1": [],
              "l2": [
                5.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n    true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n; === Inputs ===\n(declare-const l1 Value)\n(declare-const l2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList l1) (IsList l2)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/59": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_prime ((a Value)) Bool\n  (ite (is-IntVal a)\n       (let ((ai (ival a)))\n         (and (>= ai 2)\n              (not (exists ((x Int))\n                       (and (>= x 2)\n                            (<= (* x x) ai)\n                            (= (mod ai x) 0))))))\n       false))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool\n  (let ((ai (ite (is-IntVal n) (ival n) 0)))\n    (and (> ai 1)\n         (not (is_prime n)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -21238
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -33035
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -43485
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -71585
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_prime ((a Value)) Bool\n  (ite (is-IntVal a)\n       (let ((ai (ival a)))\n         (and (>= ai 2)\n              (not (exists ((x Int))\n                       (and (>= x 2)\n                            (<= (* x x) ai)\n                            (= (mod ai x) 0))))))\n       false))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool\n  (let ((ai (ite (is-IntVal n) (ival n) 0)))\n    (and (> ai 1)\n         (not (is_prime n)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_prime ((a Value)) Bool\n  (ite (is-IntVal a)\n       (let ((ai (ival a)))\n         (and (>= ai 2)\n              (not (exists ((x Int))\n                       (and (>= x 2)\n                            (<= (* x x) ai)\n                            (= (mod ai x) 0))))))\n       false))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool\n  (let ((ai (ite (is-IntVal n) (ival n) 0)))\n    (and (> ai 1)\n         (not (is_prime n)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 4
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 9
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 20
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 10
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_prime ((a Value)) Bool\n  (ite (is-IntVal a)\n       (let ((ai (ival a)))\n         (and (>= ai 2)\n              (not (exists ((x Int))\n                       (and (>= x 2)\n                            (<= (* x x) ai)\n                            (= (mod ai x) 0))))))\n       false))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool\n  (let ((ai (ite (is-IntVal n) (ival n) 0)))\n    (and (> ai 1)\n         (not (is_prime n)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/60": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 1))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 1))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 1))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 1))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/61": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "brackets": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "brackets": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "brackets": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "brackets": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "brackets": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const brackets Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal brackets))\n(define-fun C1 () Bool (let ((s (SafeS brackets))) (str.in.re s (str.to.re \"^[()]*$\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "brackets": "^"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "brackets": "["
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "brackets": "("
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "brackets": ")"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "brackets": "]"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const brackets Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal brackets))\n(define-fun C1 () Bool (let ((s (SafeS brackets))) (str.in.re s (str.to.re \"^[()]*$\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const brackets Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal brackets))\n(define-fun C1 () Bool (let ((s (SafeS brackets))) (str.in.re s (str.to.re \"^[()]*$\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "brackets": "^[()]*$"
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const brackets Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal brackets))\n(define-fun C1 () Bool (let ((s (SafeS brackets))) (str.in.re s (str.to.re \"^[()]*$\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/62": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_List ((v Value)) Bool (or (is-Nil v) (is-Cons v)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l) 0\n    (ite (is-Cons l)\n      (let ((restLen (length (tail l))))\n        (+ restLen 1))\n      0)))\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (let ((hd (head l)) (tl (tail l)))\n        (and (or (is-IntVal hd) (is-FloatVal hd))\n             (list_all_numeric tl)))\n      false)))\n\n; === Inputs ===\n(declare-const xs Value)\n\n; === BASIC STRUCTURE ===\n(assert (is_List xs))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length xs) 0))\n(define-fun C1 () Bool (list_all_numeric xs))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                ""
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_List ((v Value)) Bool (or (is-Nil v) (is-Cons v)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l) 0\n    (ite (is-Cons l)\n      (let ((restLen (length (tail l))))\n        (+ restLen 1))\n      0)))\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (let ((hd (head l)) (tl (tail l)))\n        (and (or (is-IntVal hd) (is-FloatVal hd))\n             (list_all_numeric tl)))\n      false)))\n\n; === Inputs ===\n(declare-const xs Value)\n\n; === BASIC STRUCTURE ===\n(assert (is_List xs))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length xs) 0))\n(define-fun C1 () Bool (list_all_numeric xs))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "xs": []
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_List ((v Value)) Bool (or (is-Nil v) (is-Cons v)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l) 0\n    (ite (is-Cons l)\n      (let ((restLen (length (tail l))))\n        (+ restLen 1))\n      0)))\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (let ((hd (head l)) (tl (tail l)))\n        (and (or (is-IntVal hd) (is-FloatVal hd))\n             (list_all_numeric tl)))\n      false)))\n\n; === Inputs ===\n(declare-const xs Value)\n\n; === BASIC STRUCTURE ===\n(assert (is_List xs))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length xs) 0))\n(define-fun C1 () Bool (list_all_numeric xs))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "xs": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "xs": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "xs": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "xs": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "xs": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_List ((v Value)) Bool (or (is-Nil v) (is-Cons v)))\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l) 0\n    (ite (is-Cons l)\n      (let ((restLen (length (tail l))))\n        (+ restLen 1))\n      0)))\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (let ((hd (head l)) (tl (tail l)))\n        (and (or (is-IntVal hd) (is-FloatVal hd))\n             (list_all_numeric tl)))\n      false)))\n\n; === Inputs ===\n(declare-const xs Value)\n\n; === BASIC STRUCTURE ===\n(assert (is_List xs))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length xs) 0))\n(define-fun C1 () Bool (list_all_numeric xs))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/63": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/64": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/65": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-ival ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const shift Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal x))\n(assert (is-IntVal shift))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal shift)))\n(define-fun C1 () Bool (and (>= (get-ival x) 0) (>= (get-ival shift) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": -1,
              "shift": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": -2438,
              "shift": 21238
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": -2438,
              "shift": -8366
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": -2438,
              "shift": 22246
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": -2438,
              "shift": 23388
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-ival ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const shift Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal x))\n(assert (is-IntVal shift))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal shift)))\n(define-fun C1 () Bool (and (>= (get-ival x) 0) (>= (get-ival shift) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-ival ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const shift Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal x))\n(assert (is-IntVal shift))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal shift)))\n(define-fun C1 () Bool (and (>= (get-ival x) 0) (>= (get-ival shift) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 0,
              "shift": 7719
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 7719,
              "shift": 21238
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 16084,
              "shift": 21238
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 26534,
              "shift": 21238
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 26534,
              "shift": 27091
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-ival ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const shift Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal x))\n(assert (is-IntVal shift))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal shift)))\n(define-fun C1 () Bool (and (>= (get-ival x) 0) (>= (get-ival shift) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/66": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/67": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": 2.0,
              "n": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 4.0,
              "s": 5.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 6.0,
              "s": 7.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 8.0,
              "s": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 11.0,
              "s": 10.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "",
              "n": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3,
              "s": ""
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4,
              "s": ""
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5,
              "s": ""
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6,
              "s": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "3 0 p 3 h",
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0,
              "s": "4 0 K K C"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0,
              "s": "4 0 K K 1"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0,
              "s": "4 0 K K 1"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0,
              "s": "4 0 K K 1"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "3 0 0 0 2",
              "n": 12
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 13,
              "s": "k 0 0 z A"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 15,
              "s": "k 0 0 z z"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 16,
              "s": "k 0 0 z z"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 17,
              "s": "k 0 0 z z"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "s": "0 apples and 0 oranges",
              "n": 28
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun LETTER () (RegEx String) (re.union (re.range \"A\" \"Z\") (re.range \"a\" \"z\")))\n(define-fun ALNUM () (RegEx String) (re.union LETTER DIGIT))\n(define-fun WORD () (RegEx String) (re.++ LETTER (re.* ALNUM)))\n(define-fun NUM () (RegEx String) (re.++ DIGIT (re.* DIGIT)))\n(define-fun TOKEN () (RegEx String) (re.union WORD NUM))\n(define-fun SP () (RegEx String) (str.to.re \" \"))\n(define-const R5 (RegEx String) (re.++ TOKEN SP TOKEN SP TOKEN SP TOKEN SP TOKEN))\n(define-const RW (RegEx String) (re.++ TOKEN (str.to.re \" apples and \") TOKEN (str.to.re \" oranges\")))\n(define-const RN (RegEx String) (re.++ NUM (str.to.re \" apples and \") NUM (str.to.re \" oranges\")))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-IntVal n)))\n(define-fun C1 () Bool (and (is-StrVal s) (str.in.re (sval s) R5)))\n(define-fun C2 () Bool (and (is-StrVal s) (str.in.re (sval s) RW)))\n(define-fun C3 () Bool (and (is-StrVal s) (str.in.re (sval s) RN)))\n(define-fun C4 () Bool (and (is-StrVal s) (is-IntVal n) (let ((sep1 \" apples and \") (sep2 \" oranges\") (S (sval s))) (let ((i1 (str.indexof S sep1 0))) (and (>= i1 0) (let ((x (str.substr S 0 i1)) (start2 (+ i1 (str.len sep1)))) (let ((i2 (str.indexof S sep2 start2))) (and (>= i2 0) (let ((y (str.substr S start2 (- i2 start2)))) (and (str.in.re x NUM) (str.in.re y NUM) (>= (ival n) (+ (str.to.int x) (str.to.int y)))))))))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/68": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((hd (head v)))\n              (and (is-IntVal hd)\n                   (let ((iv (ival hd)))\n                     (and (>= iv 0)\n                          (list_all_numeric (tail v))))))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (<= (length arr) 10000))\n(define-fun C1 () Bool (list_all_numeric arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((hd (head v)))\n              (and (is-IntVal hd)\n                   (let ((iv (ival hd)))\n                     (and (>= iv 0)\n                          (list_all_numeric (tail v))))))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (<= (length arr) 10000))\n(define-fun C1 () Bool (list_all_numeric arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((hd (head v)))\n              (and (is-IntVal hd)\n                   (let ((iv (ival hd)))\n                     (and (>= iv 0)\n                          (list_all_numeric (tail v))))))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (<= (length arr) 10000))\n(define-fun C1 () Bool (list_all_numeric arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                10450
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                281
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                2997
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((hd (head v)))\n              (and (is-IntVal hd)\n                   (let ((iv (ival hd)))\n                     (and (>= iv 0)\n                          (list_all_numeric (tail v))))))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (<= (length arr) 10000))\n(define-fun C1 () Bool (list_all_numeric arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/69": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_int ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (let ((hd (head lst)) (tl (tail lst)))\n              (and (is-IntVal hd)\n                   (list_all_int tl)))\n            false)))\n\n(define-fun-rec list_all_positive ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (let ((hd (head lst)) (tl (tail lst)))\n              (and (is-IntVal hd)\n                   (>= (ival hd) 1)\n                   (list_all_positive tl)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (list_all_int lst) (list_all_positive lst)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                1
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                2438
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                8366
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                30613
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (IsList (tail lst))\n            false)))\n\n(define-fun-rec list_all_int ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (let ((hd (head lst)) (tl (tail lst)))\n              (and (is-IntVal hd)\n                   (list_all_int tl)))\n            false)))\n\n(define-fun-rec list_all_positive ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (let ((hd (head lst)) (tl (tail lst)))\n              (and (is-IntVal hd)\n                   (>= (ival hd) 1)\n                   (list_all_positive tl)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (list_all_int lst) (list_all_positive lst)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/70": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l) (IsList (tail l)) false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (is-IntVal (head l)) (list_all_int (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l) (IsList (tail l)) false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (is-IntVal (head l)) (list_all_int (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l) (IsList (tail l)) false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (is-IntVal (head l)) (list_all_int (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l) (IsList (tail l)) false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (is-IntVal (head l)) (list_all_int (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/71": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 2.0,
              "c": 0,
              "a": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "c": -28102,
              "b": -28101,
              "a": -1
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "c": -19157,
              "b": 3.0,
              "a": -1
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "c": -19157,
              "b": 4.0,
              "a": -2
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "c": -28102,
              "b": -0.5,
              "a": 1
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is-Numeric ((v Value)) Bool (or (is-IntVal v) (is-FloatVal v)))\n(define-fun toReal ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v))\n       (ite (is-FloatVal v) (fval v)\n            0)))\n(define-fun isPositive ((v Value)) Bool\n  (and (is-Numeric v) (> (toReal v) 0)))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n(declare-const c Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-Numeric a))\n(assert (is-Numeric b))\n(assert (is-Numeric c))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (isPositive a) (isPositive b) (isPositive c)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 0.5,
              "c": 282,
              "a": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "c": 31892,
              "b": 20977,
              "a": 1
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "c": 31892.0,
              "b": 20977,
              "a": 1.25
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "c": 31892.0,
              "b": 20977.0,
              "a": 1.125
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "c": 32482.0,
              "b": 20977.0,
              "a": 1.0625
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is-Numeric ((v Value)) Bool (or (is-IntVal v) (is-FloatVal v)))\n(define-fun toReal ((v Value)) Real\n  (ite (is-IntVal v) (to_real (ival v))\n       (ite (is-FloatVal v) (fval v)\n            0)))\n(define-fun isPositive ((v Value)) Bool\n  (and (is-Numeric v) (> (toReal v) 0)))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n(declare-const c Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-Numeric a))\n(assert (is-Numeric b))\n(assert (is-Numeric c))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (isPositive a) (isPositive b) (isPositive c)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/72": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "q": [
                "!0!"
              ],
              "w": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "w": "!",
              "q": [
                "0"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "w": "0",
              "q": [
                "0!"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "w": false,
              "q": [
                "!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "q": [
                false
              ],
              "w": true
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun IsNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsNumeric (head l))\n                 (list_all_numeric (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const q Value)\n(declare-const w Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList q))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (IsList q)\n       (list_all_numeric q)))\n(define-fun C1 () Bool\n  (IsNumeric w))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "q": [],
              "w": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "w": "!",
              "q": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "w": "0",
              "q": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "w": "0!",
              "q": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "w": "",
              "q": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun IsNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsNumeric (head l))\n                 (list_all_numeric (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const q Value)\n(declare-const w Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList q))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (IsList q)\n       (list_all_numeric q)))\n(define-fun C1 () Bool\n  (IsNumeric w))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "q": [
                "!0!"
              ],
              "w": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "w": 3,
              "q": [
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "w": 4,
              "q": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "w": 5,
              "q": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "w": 6,
              "q": [
                ""
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun IsNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsNumeric (head l))\n                 (list_all_numeric (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const q Value)\n(declare-const w Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList q))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (IsList q)\n       (list_all_numeric q)))\n(define-fun C1 () Bool\n  (IsNumeric w))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "q": [],
              "w": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "w": 3,
              "q": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "q": [],
              "w": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "w": 5,
              "q": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "w": 6,
              "q": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun IsNumeric ((v Value)) Bool\n  (or (is-IntVal v)\n      (is-FloatVal v)))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsNumeric (head l))\n                 (list_all_numeric (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const q Value)\n(declare-const w Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList q))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (IsList q)\n       (list_all_numeric q)))\n(define-fun C1 () Bool\n  (IsNumeric w))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/73": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_ints (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList arr))\n(define-fun C1 () Bool\n  (list_all_ints arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_ints (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList arr))\n(define-fun C1 () Bool\n  (list_all_ints arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_ints (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList arr))\n(define-fun C1 () Bool\n  (list_all_ints arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_ints ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_ints (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList arr))\n(define-fun C1 () Bool\n  (list_all_ints arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/74": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": 2.0,
              "lst2": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst2": 4.0,
              "lst1": 5.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst1": 7.0,
              "lst2": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": 9.0,
              "lst1": 8.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst1": 11.0,
              "lst2": 10.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec ListAllStr ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (and (let ((h (head l))) (is-StrVal h))\n                 (ListAllStr (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (ListAllStr lst1))\n(define-fun C2 () Bool (ListAllStr lst2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [
                3.0
              ],
              "lst2": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst1": [
                4.0
              ],
              "lst2": [
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst2": [
                6.0
              ],
              "lst1": [
                7.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [
                9.0
              ],
              "lst1": [
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst1": [
                10.0
              ],
              "lst2": [
                11.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec ListAllStr ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (and (let ((h (head l))) (is-StrVal h))\n                 (ListAllStr (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (ListAllStr lst1))\n(define-fun C2 () Bool (ListAllStr lst2))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [],
              "lst2": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst2": 3.0,
              "lst1": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst2": 4.0,
              "lst1": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst1": [],
              "lst2": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst2": 6.0,
              "lst1": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec ListAllStr ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (and (let ((h (head l))) (is-StrVal h))\n                 (ListAllStr (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (ListAllStr lst1))\n(define-fun C2 () Bool (ListAllStr lst2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [],
              "lst2": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst2": [
                3.0
              ],
              "lst1": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst1": [],
              "lst2": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [
                5.0
              ],
              "lst1": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst1": [],
              "lst2": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec ListAllStr ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (and (let ((h (head l))) (is-StrVal h))\n                 (ListAllStr (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (ListAllStr lst1))\n(define-fun C2 () Bool (ListAllStr lst2))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": 2.0,
              "lst2": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst2": [],
              "lst1": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst2": [],
              "lst1": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst1": 5.0,
              "lst2": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst2": [],
              "lst1": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec ListAllStr ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (and (let ((h (head l))) (is-StrVal h))\n                 (ListAllStr (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (ListAllStr lst1))\n(define-fun C2 () Bool (ListAllStr lst2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [
                2.0
              ],
              "lst2": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst2": [],
              "lst1": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst1": [
                4.0
              ],
              "lst2": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [],
              "lst1": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst2": [],
              "lst1": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec ListAllStr ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (and (let ((h (head l))) (is-StrVal h))\n                 (ListAllStr (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (ListAllStr lst1))\n(define-fun C2 () Bool (ListAllStr lst2))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec ListAllStr ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (and (let ((h (head l))) (is-StrVal h))\n                 (ListAllStr (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (ListAllStr lst1))\n(define-fun C2 () Bool (ListAllStr lst2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [],
              "lst2": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst2": [
                "!0!"
              ],
              "lst1": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst2": [
                "!"
              ],
              "lst1": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [
                "0"
              ],
              "lst1": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst1": [],
              "lst2": [
                "0!"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec ListAllStr ((l Value)) Bool\n  (ite (is-Nil l) true\n       (ite (is-Cons l)\n            (and (let ((h (head l))) (is-StrVal h))\n                 (ListAllStr (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (ListAllStr lst1))\n(define-fun C2 () Bool (ListAllStr lst2))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/75": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "a": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "a": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "a": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "a": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "a": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const a Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal a))\n(define-fun C1 () Bool (and (is-IntVal a) (< (SafeI a) 100)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "a": 100
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "a": 7819
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "a": 10256
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "a": 22053
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "a": 54338
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const a Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal a))\n(define-fun C1 () Bool (and (is-IntVal a) (< (SafeI a) 100)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const a Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal a))\n(define-fun C1 () Bool (and (is-IntVal a) (< (SafeI a) 100)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "a": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "a": -7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "a": -10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "a": -21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "a": -54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const a Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal a))\n(define-fun C1 () Bool (and (is-IntVal a) (< (SafeI a) 100)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/76": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 2.0,
              "n": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 4.0,
              "x": 5.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 6.0,
              "x": 7.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 9.0,
              "x": 8.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 11.0,
              "x": 10.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal n)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": 2,
              "n": 3
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 4,
              "n": 5
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 6,
              "n": 7
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 8,
              "n": 9
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 10,
              "n": 11
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal x) (is-IntVal n)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/77": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "a": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "a": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "a": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "a": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "a": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeIVal ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const a Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal a))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "a": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "a": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "a": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "a": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "a": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeIVal ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const a Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal a))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/78": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "num": "@"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "num": " "
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "num": "\\u{8020}"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "num": "\\u{8420}"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "num": "\\u{8428}"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun hex_char_re () (RegEx String)\n  (re.union (re.range \"0\" \"9\") (re.range \"A\" \"F\")))\n\n; === Inputs ===\n(declare-const num Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal num))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal num) (str.in.re (sval num) (re.* hex_char_re))))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "num": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "num": "0"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "num": "8"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "num": "9"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "num": "1"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun hex_char_re () (RegEx String)\n  (re.union (re.range \"0\" \"9\") (re.range \"A\" \"F\")))\n\n; === Inputs ===\n(declare-const num Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal num))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal num) (str.in.re (sval num) (re.* hex_char_re))))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/79": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "decimal": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "decimal": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "decimal": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "decimal": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "decimal": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const decimal Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal decimal))\n(define-fun C1 () Bool (and (is-IntVal decimal) (>= (ival decimal) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "decimal": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "decimal": -7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "decimal": -10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "decimal": -21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "decimal": -54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const decimal Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal decimal))\n(define-fun C1 () Bool (and (is-IntVal decimal) (>= (ival decimal) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const decimal Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal decimal))\n(define-fun C1 () Bool (and (is-IntVal decimal) (>= (ival decimal) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "decimal": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "decimal": 7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "decimal": 10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "decimal": 21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "decimal": 54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const decimal Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal decimal))\n(define-fun C1 () Bool (and (is-IntVal decimal) (>= (ival decimal) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/80": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((v Value)) Int\n  (ite (is-StrVal v)\n       (str.len (sval v))\n       0))\n(define-fun SafeCharAt ((v Value) (i Int)) Value\n  (ite (and (is-StrVal v)\n            (<= 0 i)\n            (< i (str.len (sval v))))\n       (StrVal (str.substr (sval v) i 1))\n       Nil))\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal s))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((v Value)) Int\n  (ite (is-StrVal v)\n       (str.len (sval v))\n       0))\n(define-fun SafeCharAt ((v Value) (i Int)) Value\n  (ite (and (is-StrVal v)\n            (<= 0 i)\n            (< i (str.len (sval v))))\n       (StrVal (str.substr (sval v) i 1))\n       Nil))\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal s))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/81": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "grades": [
                -1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "grades": [
                5
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "grades": [
                -0.5
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "grades": [
                -0.25
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "grades": [
                -0.125
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n                 (list_all_numeric (tail l)))\n            false)))\n\n(define-fun get_real ((v Value)) Real\n  (ite (is-IntVal v)\n       (to_real (ival v))\n       (ite (is-FloatVal v)\n            (fval v)\n            0)))\n\n(define-fun-rec list_all_in_range ((l Value) (lo Real) (hi Real)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((headVal (get_real (head l))))\n              (and (<= lo headVal)\n                   (<= headVal hi)\n                   (list_all_in_range (tail l) lo hi)))\n            false)))\n\n; === Inputs ===\n(declare-const grades Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grades))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (list_all_numeric grades) (list_all_in_range grades 0.0 4.0)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "grades": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "grades": [
                0.5
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "grades": [
                0.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "grades": [
                1
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "grades": [
                0.25
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n                 (list_all_numeric (tail l)))\n            false)))\n\n(define-fun get_real ((v Value)) Real\n  (ite (is-IntVal v)\n       (to_real (ival v))\n       (ite (is-FloatVal v)\n            (fval v)\n            0)))\n\n(define-fun-rec list_all_in_range ((l Value) (lo Real) (hi Real)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((headVal (get_real (head l))))\n              (and (<= lo headVal)\n                   (<= headVal hi)\n                   (list_all_in_range (tail l) lo hi)))\n            false)))\n\n; === Inputs ===\n(declare-const grades Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grades))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (list_all_numeric grades) (list_all_in_range grades 0.0 4.0)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/82": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n(define-fun length ((s Value)) Int (str.len (SafeS s)))\n(define-fun is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (forall ((x Int))\n         (or (< x 2)\n             (> (* x x) n)\n             (not (= (mod n x) 0))))))\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n(define-fun length ((s Value)) Int (str.len (SafeS s)))\n(define-fun is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (forall ((x Int))\n         (or (< x 2)\n             (> (* x x) n)\n             (not (= (mod n x) 0))))))\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/83": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (> (ival n) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (> (ival n) 0)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/84": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "N": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "N": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "N": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "N": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "N": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const N Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal N))\n(define-fun C1 () Bool (and (> (SafeI N) 0) (<= (SafeI N) 10000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "N": 10001
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "N": 31239
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "N": 43036
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "N": 53486
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "N": 81586
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const N Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal N))\n(define-fun C1 () Bool (and (> (SafeI N) 0) (<= (SafeI N) 10000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const N Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal N))\n(define-fun C1 () Bool (and (> (SafeI N) 0) (<= (SafeI N) 10000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "N": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "N": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "N": 2438
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "N": 1798
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "N": 2286
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const N Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal N))\n(define-fun C1 () Bool (and (> (SafeI N) 0) (<= (SafeI N) 10000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/85": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length lst) 0))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length lst) 0))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length lst) 0))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                4
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                5
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                6
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                7
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                8
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun-rec isList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (isList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (> (length lst) 0))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/86": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/87": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllRowsAreList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsList (head l))\n                 (AllRowsAreList (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (AllRowsAreList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (IsList lst))\n(define-fun C2 () Bool (AllRowsAreList lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllRowsAreList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsList (head l))\n                 (AllRowsAreList (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (AllRowsAreList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (IsList lst))\n(define-fun C2 () Bool (AllRowsAreList lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllRowsAreList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsList (head l))\n                 (AllRowsAreList (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (AllRowsAreList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (IsList lst))\n(define-fun C2 () Bool (AllRowsAreList lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllRowsAreList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsList (head l))\n                 (AllRowsAreList (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (AllRowsAreList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (IsList lst))\n(define-fun C2 () Bool (AllRowsAreList lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllRowsAreList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsList (head l))\n                 (AllRowsAreList (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (AllRowsAreList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (IsList lst))\n(define-fun C2 () Bool (AllRowsAreList lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllRowsAreList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsList (head l))\n                 (AllRowsAreList (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (AllRowsAreList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (IsList lst))\n(define-fun C2 () Bool (AllRowsAreList lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [],
              "x": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 3.0,
              "lst": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [],
              "x": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 5.0,
              "lst": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 6.0,
              "lst": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllRowsAreList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsList (head l))\n                 (AllRowsAreList (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (AllRowsAreList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (IsList lst))\n(define-fun C2 () Bool (AllRowsAreList lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [],
              "x": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 3,
              "lst": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 4,
              "lst": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [],
              "x": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 6,
              "lst": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllRowsAreList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (IsList (head l))\n                 (AllRowsAreList (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (AllRowsAreList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal x))\n(define-fun C1 () Bool (IsList lst))\n(define-fun C2 () Bool (AllRowsAreList lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/88": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "array": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "array": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "array": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "array": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "array": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((h (head l)) (t (tail l)))\n             (IsList t)))))\n\n(define-fun-rec list_all_nonneg_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((h (head l)) (t (tail l)))\n              (and (is-IntVal h)\n                   (>= (ival h) 0)\n                   (list_all_nonneg_int t))))))\n\n; === Inputs ===\n(declare-const array Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList array))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_nonneg_int array))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "array": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "array": [
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "array": [
                2437
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "array": [
                8365
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "array": [
                30612
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((h (head l)) (t (tail l)))\n             (IsList t)))))\n\n(define-fun-rec list_all_nonneg_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((h (head l)) (t (tail l)))\n              (and (is-IntVal h)\n                   (>= (ival h) 0)\n                   (list_all_nonneg_int t))))))\n\n; === Inputs ===\n(declare-const array Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList array))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (list_all_nonneg_int array))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/89": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "["
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "a"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "-"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "z"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": "]"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (or (= (sval s) \"\")\n      (str.in.re (sval s) (str.to.re \"[a-z]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 2,
        "solutions": [
          {
            "test_case": {
              "s": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "[a-z]*"
            },
            "solution_id": 2
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (or (= (sval s) \"\")\n      (str.in.re (sval s) (str.to.re \"[a-z]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/90": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (IsList (tail v)))))\n\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v)) (ListAllInt (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (ListAllInt lst))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (IsList (tail v)))))\n\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v)) (ListAllInt (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (ListAllInt lst))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/91": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "S": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "S": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "S": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "S": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "S": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const S Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal S))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "S": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "S": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "S": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "S": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "S": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const S Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal S))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/92": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "y": "!0!",
              "z": "!0!",
              "x": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": "0!",
              "z": "0",
              "y": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": "0",
              "z": "0!",
              "y": "0!"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": [
                2.0,
                3.0
              ],
              "z": [],
              "y": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": [
                5.0,
                4.0
              ],
              "z": [
                7.0,
                6.0
              ],
              "y": [
                9.0,
                8.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n(declare-const z Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (or (is-IntVal x) (is-FloatVal x) (is-BoolVal x)) (or (is-IntVal y) (is-FloatVal y) (is-BoolVal y)) (or (is-IntVal z) (is-FloatVal z) (is-BoolVal z))))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "y": false,
              "z": 2,
              "x": 3
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 4,
              "z": false,
              "y": true
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 5,
              "z": true,
              "y": true
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 6,
              "z": true,
              "y": true
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 7,
              "z": true,
              "y": true
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n(declare-const z Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (or (is-IntVal x) (is-FloatVal x) (is-BoolVal x)) (or (is-IntVal y) (is-FloatVal y) (is-BoolVal y)) (or (is-IntVal z) (is-FloatVal z) (is-BoolVal z))))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/93": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const message Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal message))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal message))\n(define-fun C1 () Bool (let ((s (ite (is-StrVal message) (sval message) \"\"))) (forall ((i Int)) (=> (and (>= i 0) (< i (str.len s))) (or (= (str.substr s i 1) \" \") (str.in.re (str.substr s i 1) (str.to.re \"[A-Za-z]\")))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "message": "["
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "message": "A"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "message": "B"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "message": "C"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "message": "D"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const message Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal message))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal message))\n(define-fun C1 () Bool (let ((s (ite (is-StrVal message) (sval message) \"\"))) (forall ((i Int)) (=> (and (>= i 0) (< i (str.len s))) (or (= (str.substr s i 1) \" \") (str.in.re (str.substr s i 1) (str.to.re \"[A-Za-z]\")))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const message Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal message))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal message))\n(define-fun C1 () Bool (let ((s (ite (is-StrVal message) (sval message) \"\"))) (forall ((i Int)) (=> (and (>= i 0) (< i (str.len s))) (or (= (str.substr s i 1) \" \") (str.in.re (str.substr s i 1) (str.to.re \"[A-Za-z]\")))))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "message": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "message": " "
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "message": "  "
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "message": "    "
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "message": "   "
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const message Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal message))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal message))\n(define-fun C1 () Bool (let ((s (ite (is-StrVal message) (sval message) \"\"))) (forall ((i Int)) (=> (and (>= i 0) (< i (str.len s))) (or (= (str.substr s i 1) \" \") (str.in.re (str.substr s i 1) (str.to.re \"[A-Za-z]\")))))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/94": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                -5853
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                17894
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (let ((tailVal (tail v)))\n             (IsList tailVal)))))\n(define-fun-rec list_all_int ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (let ((headVal (head v)) (tailVal (tail v)))\n             (and (is-IntVal headVal)\n                  (list_all_int tailVal))))))\n(define-fun-rec has_no_divisor ((n Int) (x Int)) Bool\n  (ite (> (* x x) n)\n       true\n       (ite (= (mod n x) 0)\n            false\n            (has_no_divisor n (+ x 1)))))\n(define-fun is_prime_val ((v Value)) Bool\n  (and (is-IntVal v)\n       (let ((n (ival v)))\n         (and (>= n 2)\n              (has_no_divisor n 2)))))\n(define-fun-rec list_has_prime ((v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (and (is-Cons v)\n            (let ((headVal (head v)) (tailVal (tail v)))\n              (or (is_prime_val headVal)\n                  (list_has_prime tailVal))))))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (list_all_int lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_has_prime lst))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                3
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3,
                7
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                3,
                5
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                3,
                6
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                3,
                8
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (let ((tailVal (tail v)))\n             (IsList tailVal)))))\n(define-fun-rec list_all_int ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (let ((headVal (head v)) (tailVal (tail v)))\n             (and (is-IntVal headVal)\n                  (list_all_int tailVal))))))\n(define-fun-rec has_no_divisor ((n Int) (x Int)) Bool\n  (ite (> (* x x) n)\n       true\n       (ite (= (mod n x) 0)\n            false\n            (has_no_divisor n (+ x 1)))))\n(define-fun is_prime_val ((v Value)) Bool\n  (and (is-IntVal v)\n       (let ((n (ival v)))\n         (and (>= n 2)\n              (has_no_divisor n 2)))))\n(define-fun-rec list_has_prime ((v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (and (is-Cons v)\n            (let ((headVal (head v)) (tailVal (tail v)))\n              (or (is_prime_val headVal)\n                  (list_has_prime tailVal))))))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n(assert (list_all_int lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_has_prime lst))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/95": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "dict": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "dict": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "dict": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "dict": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "dict": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun IsKV2 ((p Value)) Bool\n  (and (is-Cons p)\n       (is-Cons (tail p))\n       (is-Nil (tail (tail p)))\n       (is-StrVal (head p))))\n\n(define-fun-rec IsDictLike ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (IsKV2 (head v)) (IsDictLike (tail v)))\n            false)))\n\n(define-fun-rec KeysV ((v Value)) Value\n  (ite (is-Nil v)\n       Nil\n       (Cons (head (head v)) (KeysV (tail v)))))\n\n; === Inputs ===\n(declare-const dict Value)\n\n; === BASIC STRUCTURE ===\n(assert (=> (IsDictLike dict)\n                 (IsList (KeysV dict))))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsDictLike dict))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "dict": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "dict": [
                [
                  "!0!",
                  2.0
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "dict": [
                [
                  "!",
                  3.0
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "dict": [
                [
                  "0",
                  4.0
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "dict": [
                [
                  "0!",
                  5.0
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun IsKV2 ((p Value)) Bool\n  (and (is-Cons p)\n       (is-Cons (tail p))\n       (is-Nil (tail (tail p)))\n       (is-StrVal (head p))))\n\n(define-fun-rec IsDictLike ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (IsKV2 (head v)) (IsDictLike (tail v)))\n            false)))\n\n(define-fun-rec KeysV ((v Value)) Value\n  (ite (is-Nil v)\n       Nil\n       (Cons (head (head v)) (KeysV (tail v)))))\n\n; === Inputs ===\n(declare-const dict Value)\n\n; === BASIC STRUCTURE ===\n(assert (=> (IsDictLike dict)\n                 (IsList (KeysV dict))))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsDictLike dict))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/96": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (>= (ival n) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (>= (ival n) 0)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/97": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 2.0,
              "a": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 5.0,
              "a": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 7.0,
              "a": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 8.0,
              "a": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 10.0,
              "a": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 3,
              "a": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 5,
              "a": 4
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 7,
              "a": 6
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 9,
              "a": 8
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 11,
              "a": 10
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/98": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/99": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "value": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "value": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "value": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "value": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "value": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const value Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal value))\n(define-fun C1 () Bool (ite (is-StrVal value)\n                               (not (or (= (sval value) \"Infinity\")\n                                        (= (sval value) \"-Infinity\")\n                                        (= (sval value) \"NaN\")))\n                               false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 3,
        "solutions": [
          {
            "test_case": {
              "value": "Infinity"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "value": "-Infinity"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "value": "NaN"
            },
            "solution_id": 3
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const value Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal value))\n(define-fun C1 () Bool (ite (is-StrVal value)\n                               (not (or (= (sval value) \"Infinity\")\n                                        (= (sval value) \"-Infinity\")\n                                        (= (sval value) \"NaN\")))\n                               false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const value Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal value))\n(define-fun C1 () Bool (ite (is-StrVal value)\n                               (not (or (= (sval value) \"Infinity\")\n                                        (= (sval value) \"-Infinity\")\n                                        (= (sval value) \"NaN\")))\n                               false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "value": "-"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "value": "N"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "value": "a"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "value": "aN"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "value": "I"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const value Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal value))\n(define-fun C1 () Bool (ite (is-StrVal value)\n                               (not (or (= (sval value) \"Infinity\")\n                                        (= (sval value) \"-Infinity\")\n                                        (= (sval value) \"NaN\")))\n                               false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/100": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (>= (SafeI n) 1)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (>= (SafeI n) 1)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/101": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/102": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "y": 3.0,
              "x": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 4.0,
              "y": 5.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 6.0,
              "y": 7.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 8.0,
              "y": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 11.0,
              "y": 10.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (is-IntVal x)\n       (is-IntVal y)))\n(define-fun C1 () Bool\n  (and (> (SafeI x) 0)\n       (> (SafeI y) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "y": 21238,
              "x": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": -21238,
              "y": 2437
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": -21238,
              "y": 10802
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": -21238,
              "y": 41414
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": -21238,
              "y": 42556
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (is-IntVal x)\n       (is-IntVal y)))\n(define-fun C1 () Bool\n  (and (> (SafeI x) 0)\n       (> (SafeI y) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (is-IntVal x)\n       (is-IntVal y)))\n(define-fun C1 () Bool\n  (and (> (SafeI x) 0)\n       (> (SafeI y) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "y": 7720,
              "x": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": 1,
              "y": 7721
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": 1,
              "y": 7719
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": 1,
              "y": 2732
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": 28101,
              "y": 1143
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (is-IntVal x)\n       (is-IntVal y)))\n(define-fun C1 () Bool\n  (and (> (SafeI x) 0)\n       (> (SafeI y) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/103": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const m Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n(assert (is-IntVal m))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (is-IntVal m)))\n(define-fun C1 () Bool (and (is-IntVal n) (> (ival n) 0) (is-IntVal m) (> (ival m) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 21238,
              "m": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 2437,
              "m": -21238
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 2437,
              "m": -29603
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 2437,
              "m": -60215
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 2437,
              "m": -61357
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const m Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n(assert (is-IntVal m))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (is-IntVal m)))\n(define-fun C1 () Bool (and (is-IntVal n) (> (ival n) 0) (is-IntVal m) (> (ival m) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const m Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n(assert (is-IntVal m))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (is-IntVal m)))\n(define-fun C1 () Bool (and (is-IntVal n) (> (ival n) 0) (is-IntVal m) (> (ival m) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1,
              "m": 7720
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720,
              "m": 21239
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 16575,
              "m": 21239
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 24940,
              "m": 21239
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 24940,
              "m": 31689
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const m Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n(assert (is-IntVal m))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal n) (is-IntVal m)))\n(define-fun C1 () Bool (and (is-IntVal n) (> (ival n) 0) (is-IntVal m) (> (ival m) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/104": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllPosIntList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (and (is-IntVal h)\n                   (> (ival h) 0)\n                   (AllPosIntList t)))\n            false)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList x))\n(define-fun C1 () Bool\n  (AllPosIntList x))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllPosIntList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (and (is-IntVal h)\n                   (> (ival h) 0)\n                   (AllPosIntList t)))\n            false)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList x))\n(define-fun C1 () Bool\n  (AllPosIntList x))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllPosIntList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (and (is-IntVal h)\n                   (> (ival h) 0)\n                   (AllPosIntList t)))\n            false)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList x))\n(define-fun C1 () Bool\n  (AllPosIntList x))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": [
                1
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": [
                2438
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": [
                8366
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": [
                30613
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec AllPosIntList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (let ((h (head v))\n                  (t (tail v)))\n              (and (is-IntVal h)\n                   (> (ival h) 0)\n                   (AllPosIntList t)))\n            false)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList x))\n(define-fun C1 () Bool\n  (AllPosIntList x))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/105": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))))\n)\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (and (is-Cons v)\n            (is-IntVal (head v))\n            (list_all_int (tail v)))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))))\n)\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (and (is-Cons v)\n            (is-IntVal (head v))\n            (list_all_int (tail v)))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))))\n)\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (and (is-Cons v)\n            (is-IntVal (head v))\n            (list_all_int (tail v)))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))))\n)\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (and (is-Cons v)\n            (is-IntVal (head v))\n            (list_all_int (tail v)))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/106": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (>= (SafeI n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/107": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (is-IntVal n) (<= 1 (SafeI n)) (<= (SafeI n) 1000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -21238
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -33035
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -43485
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -71585
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (is-IntVal n) (<= 1 (SafeI n)) (<= (SafeI n) 1000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (is-IntVal n) (<= 1 (SafeI n)) (<= (SafeI n) 1000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 438
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 798
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 286
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (and (is-IntVal n) (<= 1 (SafeI n)) (<= (SafeI n) 1000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/108": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/109": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0,
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                3.0,
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                4.0,
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                5.0,
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6.0,
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2,
                2
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                3,
                3
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                4,
                4
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                5,
                5
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6,
                6
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((l Value)) Bool\n  (or (is-Nil l)\n      (and (is-Cons l)\n           (let ((tailVal (tail l)))\n             (isList tailVal)))))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal))))))\n\n(define-fun-rec list_contains ((l Value) (v Value)) Bool\n  (ite (is-Nil l)\n       false\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (or (= headVal v)\n                  (list_contains tailVal v))))))\n\n(define-fun-rec list_unique ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (and (is-Cons l)\n            (let ((headVal (head l)) (tailVal (tail l)))\n              (and (not (list_contains tailVal headVal))\n                   (list_unique tailVal))))))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (isList arr))\n(define-fun C1 () Bool\n  (list_all_int arr))\n(define-fun C2 () Bool\n  (list_unique arr))\n(define-fun C3 () Bool\n  (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/110": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [],
              "lst2": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst2": [
                3.0
              ],
              "lst1": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst1": [],
              "lst2": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [
                5.0
              ],
              "lst1": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst1": [],
              "lst2": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [
                2.0
              ],
              "lst2": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst2": [],
              "lst1": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst1": [
                4.0
              ],
              "lst2": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [],
              "lst1": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst2": [],
              "lst1": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [],
              "lst2": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst1": [],
              "lst2": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst2": [
                3
              ],
              "lst1": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst1": [],
              "lst2": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst2": [
                5
              ],
              "lst1": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [
                3.0
              ],
              "lst2": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst1": [
                5.0
              ],
              "lst2": [
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst2": [
                7.0
              ],
              "lst1": [
                6.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [
                9.0
              ],
              "lst1": [
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst2": [
                11.0
              ],
              "lst1": [
                10.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [
                5
              ],
              "lst2": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst1": [
                6
              ],
              "lst2": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst2": [
                4.0
              ],
              "lst1": [
                7
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [
                5.0
              ],
              "lst1": [
                8
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst1": [
                9
              ],
              "lst2": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [
                2.0
              ],
              "lst2": [
                5
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst1": [
                3.0
              ],
              "lst2": [
                6
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst2": [
                7
              ],
              "lst1": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [
                8
              ],
              "lst1": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst1": [
                6.0
              ],
              "lst2": [
                9
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst1": [
                5
              ],
              "lst2": [
                6
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst1": [
                7
              ],
              "lst2": [
                8
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst2": [
                10
              ],
              "lst1": [
                9
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst2": [
                12
              ],
              "lst1": [
                11
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst1": [
                13
              ],
              "lst2": [
                14
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const lst1 Value)\n(declare-const lst2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst1))\n(assert (IsList lst2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList lst1) (IsList lst2)))\n(define-fun C1 () Bool (list_all_int lst1))\n(define-fun C2 () Bool (list_all_int lst2))\n(define-fun C3 () Bool (and (> (length lst1) 0) (> (length lst2) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/111": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const test Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal test))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal test))\n(define-fun C1 () Bool (let ((s (SafeS test))) (str.in.re s (str.to.re \"^(|[a-z]( [a-z])*)$\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "test": "^"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "test": "("
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "test": "|"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "test": "["
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "test": "a"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const test Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal test))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal test))\n(define-fun C1 () Bool (let ((s (SafeS test))) (str.in.re s (str.to.re \"^(|[a-z]( [a-z])*)$\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const test Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal test))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal test))\n(define-fun C1 () Bool (let ((s (SafeS test))) (str.in.re s (str.to.re \"^(|[a-z]( [a-z])*)$\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "test": "^(|[a-z]( [a-z])*)$"
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const test Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal test))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal test))\n(define-fun C1 () Bool (let ((s (SafeS test))) (str.in.re s (str.to.re \"^(|[a-z]( [a-z])*)$\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/112": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const c Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-StrVal c))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-StrVal c)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "!0!",
              "c": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "!",
              "c": "0"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "0!",
              "c": "0!"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "0",
              "c": ""
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": "A",
              "c": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const c Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-StrVal c))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal s) (is-StrVal c)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/113": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))\n    )\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n(define-fun str_all_digits ((s Value)) Bool\n  (and\n    (is-StrVal s)\n    (str.in.re (sval s) (str.to.re \"[0-9]+\"))\n  )\n)\n\n(define-fun-rec list_all_digit_strings ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (str_all_digits (head v))\n                 (list_all_digit_strings (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (list_all_digit_strings lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))\n    )\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n(define-fun str_all_digits ((s Value)) Bool\n  (and\n    (is-StrVal s)\n    (str.in.re (sval s) (str.to.re \"[0-9]+\"))\n  )\n)\n\n(define-fun-rec list_all_digit_strings ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (str_all_digits (head v))\n                 (list_all_digit_strings (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (list_all_digit_strings lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))\n    )\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n(define-fun str_all_digits ((s Value)) Bool\n  (and\n    (is-StrVal s)\n    (str.in.re (sval s) (str.to.re \"[0-9]+\"))\n  )\n)\n\n(define-fun-rec list_all_digit_strings ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (str_all_digits (head v))\n                 (list_all_digit_strings (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (list_all_digit_strings lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                "["
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "0"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "-"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "9"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "]"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))\n    )\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n(define-fun str_all_digits ((s Value)) Bool\n  (and\n    (is-StrVal s)\n    (str.in.re (sval s) (str.to.re \"[0-9]+\"))\n  )\n)\n\n(define-fun-rec list_all_digit_strings ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (str_all_digits (head v))\n                 (list_all_digit_strings (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (list_all_digit_strings lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))\n    )\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n(define-fun str_all_digits ((s Value)) Bool\n  (and\n    (is-StrVal s)\n    (str.in.re (sval s) (str.to.re \"[0-9]+\"))\n  )\n)\n\n(define-fun-rec list_all_digit_strings ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (str_all_digits (head v))\n                 (list_all_digit_strings (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (list_all_digit_strings lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))\n    )\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n(define-fun str_all_digits ((s Value)) Bool\n  (and\n    (is-StrVal s)\n    (str.in.re (sval s) (str.to.re \"[0-9]+\"))\n  )\n)\n\n(define-fun-rec list_all_digit_strings ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (str_all_digits (head v))\n                 (list_all_digit_strings (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (list_all_digit_strings lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))\n    )\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n(define-fun str_all_digits ((s Value)) Bool\n  (and\n    (is-StrVal s)\n    (str.in.re (sval s) (str.to.re \"[0-9]+\"))\n  )\n)\n\n(define-fun-rec list_all_digit_strings ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (str_all_digits (head v))\n                 (list_all_digit_strings (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (list_all_digit_strings lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "[0-9]+"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "[0-9]+",
                "[0-9]+"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "[0-9]+",
                "[0-9]+",
                "[0-9]+"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "[0-9]+",
                "[0-9]+",
                "[0-9]+",
                "[0-9]+"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or\n    (is-Nil v)\n    (and (is-Cons v)\n         (IsList (tail v))\n    )\n  )\n)\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-StrVal (head v))\n                 (list_all_str (tail v)))\n            false\n       )\n  )\n)\n\n(define-fun str_all_digits ((s Value)) Bool\n  (and\n    (is-StrVal s)\n    (str.in.re (sval s) (str.to.re \"[0-9]+\"))\n  )\n)\n\n(define-fun-rec list_all_digit_strings ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (str_all_digits (head v))\n                 (list_all_digit_strings (tail v)))\n            false\n       )\n  )\n)\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (list_all_digit_strings lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/114": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (and (is-Cons v)\n            (is-IntVal (head v))\n            (list_all_int (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n(assert (list_all_int nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList nums))\n(define-fun C1 () Bool\n  (> (length nums) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "nums": []
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (and (is-Cons v)\n            (is-IntVal (head v))\n            (list_all_int (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n(assert (list_all_int nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList nums))\n(define-fun C1 () Bool\n  (> (length nums) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (and (is-Cons v)\n            (is-IntVal (head v))\n            (list_all_int (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n(assert (list_all_int nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList nums))\n(define-fun C1 () Bool\n  (> (length nums) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "nums": [
                4
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "nums": [
                5
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "nums": [
                6
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "nums": [
                7
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "nums": [
                8
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (and (is-Cons v)\n            (is-IntVal (head v))\n            (list_all_int (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n(assert (list_all_int nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList nums))\n(define-fun C1 () Bool\n  (> (length nums) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/115": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 11,
              "grid": [
                [
                  2.0
                ],
                []
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "capacity": 0,
              "grid": [
                [
                  3.0
                ],
                []
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "capacity": -29272,
              "grid": [
                [
                  4.0
                ],
                []
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "capacity": -33095,
              "grid": [
                [
                  5.0
                ],
                []
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "capacity": -33095,
              "grid": [
                [
                  6.0
                ],
                []
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 0,
              "grid": [
                [
                  2.0
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "capacity": -12329,
              "grid": [
                [
                  3.0
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "capacity": -40185,
              "grid": [
                [
                  4.0
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "capacity": -69056,
              "grid": [
                [
                  5.0
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "capacity": -69056,
              "grid": [
                [
                  6.0
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 0,
              "grid": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "grid": [],
              "capacity": 11
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "grid": [],
              "capacity": 292
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "grid": [],
              "capacity": 21268
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "grid": [],
              "capacity": 23508
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 11,
              "grid": [
                []
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "grid": [
                []
              ],
              "capacity": 0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "capacity": -28881,
              "grid": [
                []
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "capacity": -41337,
              "grid": [
                []
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "capacity": -48966,
              "grid": [
                []
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 11,
              "grid": [
                [
                  1
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "capacity": -2446,
              "grid": [
                [
                  0
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "capacity": -9324,
              "grid": [
                [
                  0
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "capacity": -21603,
              "grid": [
                [
                  0
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "capacity": -22705,
              "grid": [
                [
                  0
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 1,
              "grid": [
                [
                  2.0
                ],
                []
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "capacity": 10,
              "grid": [
                [
                  3.0
                ],
                []
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "capacity": 5,
              "grid": [
                [
                  4.0
                ],
                []
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "capacity": 5,
              "grid": [
                [
                  5.0
                ],
                []
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "capacity": 5,
              "grid": [
                [
                  6.0
                ],
                []
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 1,
              "grid": [
                [
                  2.0
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "capacity": 8,
              "grid": [
                [
                  4.0
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "capacity": 6,
              "grid": [
                [
                  3.0
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "capacity": 9,
              "grid": [
                [
                  5.0
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "capacity": 4,
              "grid": [
                [
                  7.0
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 1,
              "grid": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "grid": [],
              "capacity": 8
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "grid": [],
              "capacity": 3
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "grid": [],
              "capacity": 2
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "grid": [],
              "capacity": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 1,
              "grid": [
                []
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "grid": [
                []
              ],
              "capacity": 2
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "grid": [
                []
              ],
              "capacity": 6
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "capacity": 5,
              "grid": [
                []
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "capacity": 7,
              "grid": [
                []
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "capacity": 4,
              "grid": [
                [
                  1
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "capacity": 1,
              "grid": [
                [
                  0
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "capacity": 8,
              "grid": [
                [
                  0
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "capacity": 5,
              "grid": [
                [
                  0
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "capacity": 6,
              "grid": [
                [
                  0
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v) (IsList (tail v)) false)))\n\n(define-fun-rec AllLists ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsList (head v)) (AllLists (tail v)))\n      false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (+ 1 (length (tail v)))\n      0)))\n\n(define-fun-rec maxRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (let ((headLen (length (head v)))\n            (tailMax (maxRowLen (tail v))))\n        (ite (> headLen tailMax) headLen tailMax))\n      0)))\n\n(define-fun-rec minRowLen ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n      (ite (is-Nil (tail v))\n        (length (head v))\n        (let ((headLen (length (head v)))\n              (tailMin (minRowLen (tail v))))\n          (ite (< headLen tailMin) headLen tailMin)))\n      0)))\n\n(define-fun-rec IsBinaryList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (let ((h (head v)))\n        (and (is-IntVal h)\n             (let ((i (ival h))) (or (= i 0) (= i 1)))\n             (IsBinaryList (tail v))))\n      false)))\n\n(define-fun-rec AllBinaryMatrix ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (and (IsBinaryList (head v)) (AllBinaryMatrix (tail v)))\n      false)))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const capacity Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (AllLists grid))\n(assert (is-IntVal capacity))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (<= 1 (length grid)) (<= (length grid) 100)))\n(define-fun C1 () Bool\n  (and (= (maxRowLen grid) (minRowLen grid))\n       (<= 1 (maxRowLen grid)) (<= (maxRowLen grid) 100)))\n(define-fun C2 () Bool\n  (AllBinaryMatrix grid))\n(define-fun C3 () Bool\n  (let ((cap (ite (is-IntVal capacity) (ival capacity) 0)))\n    (and (<= 1 cap) (<= cap 10))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/116": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_nonneg_int ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (is-Cons lst)\n            (let ((hd (head lst)) (tl (tail lst)))\n               (and (is-IntVal hd)\n                    (let ((i (ival hd))) (>= i 0))\n                    (list_all_nonneg_int tl)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_nonneg_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_nonneg_int ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (is-Cons lst)\n            (let ((hd (head lst)) (tl (tail lst)))\n               (and (is-IntVal hd)\n                    (let ((i (ival hd))) (>= i 0))\n                    (list_all_nonneg_int tl)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_nonneg_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_nonneg_int ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (is-Cons lst)\n            (let ((hd (head lst)) (tl (tail lst)))\n               (and (is-IntVal hd)\n                    (let ((i (ival hd))) (>= i 0))\n                    (list_all_nonneg_int tl)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_nonneg_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                2437
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                8365
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                30612
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_nonneg_int ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (is-Cons lst)\n            (let ((hd (head lst)) (tl (tail lst)))\n               (and (is-IntVal hd)\n                    (let ((i (ival hd))) (>= i 0))\n                    (list_all_nonneg_int tl)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_nonneg_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/117": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "[",
              "n": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -1,
              "s": "A"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -7720,
              "s": "-"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -7720,
              "s": "Z"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -7720,
              "s": "a"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "[A-Za-z ]*",
              "n": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7720,
              "s": "[A-Za-z ]*"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10157,
              "s": "[A-Za-z ]*"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21954,
              "s": "[A-Za-z ]*"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54239,
              "s": "[A-Za-z ]*"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "[",
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719,
              "s": "A"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 7719,
              "s": "-"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 10156,
              "s": "Z"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 10156,
              "s": "a"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "[A-Za-z ]*",
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719,
              "s": "[A-Za-z ]*"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10156,
              "s": "[A-Za-z ]*"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21953,
              "s": "[A-Za-z ]*"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54238,
              "s": "[A-Za-z ]*"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_string_and_valid_chars ((v Value)) Bool (ite (is-StrVal v) (str.in.re (sval v) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun is_nonneg_int ((v Value)) Bool (ite (is-IntVal v) (>= (ival v) 0) false))\n\n; === Inputs ===\n(declare-const s Value)\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n(define-fun C1 () Bool (ite (is-StrVal s) (str.in.re (sval s) (str.to.re \"[A-Za-z ]*\")) false))\n(define-fun C2 () Bool (is-IntVal n))\n(define-fun C3 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/118": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_letters ((s String)) Bool\n  (str.in.re s (str.to.re \"[A-Za-z]*\")))\n\n; === Inputs ===\n(declare-const word Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal word))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal word))\n(define-fun C1 () Bool\n  (and (is-StrVal word)\n       (or (= (sval word) \"\")\n           (is_letters (sval word)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "word": "["
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "word": "A"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "word": "-"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "word": "Z"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "word": "a"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_letters ((s String)) Bool\n  (str.in.re s (str.to.re \"[A-Za-z]*\")))\n\n; === Inputs ===\n(declare-const word Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal word))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal word))\n(define-fun C1 () Bool\n  (and (is-StrVal word)\n       (or (= (sval word) \"\")\n           (is_letters (sval word)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_letters ((s String)) Bool\n  (str.in.re s (str.to.re \"[A-Za-z]*\")))\n\n; === Inputs ===\n(declare-const word Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal word))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal word))\n(define-fun C1 () Bool\n  (and (is-StrVal word)\n       (or (= (sval word) \"\")\n           (is_letters (sval word)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 2,
        "solutions": [
          {
            "test_case": {
              "word": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "word": "[A-Za-z]*"
            },
            "solution_id": 2
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is_letters ((s String)) Bool\n  (str.in.re s (str.to.re \"[A-Za-z]*\")))\n\n; === Inputs ===\n(declare-const word Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal word))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal word))\n(define-fun C1 () Bool\n  (and (is-StrVal word)\n       (or (= (sval word) \"\")\n           (is_letters (sval word)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/119": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "A"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                ""
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "B"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "C"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0,
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                5.0,
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                6.0,
                7.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                9.0,
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                11.0,
                10.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                "[",
                "("
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "[",
                "["
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "(",
                ""
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "",
                ""
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "",
                "["
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                "[()]*",
                2.0,
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[",
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                6.0,
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                7.0,
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                9.0,
                10.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "[()]*"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "",
                "["
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "",
                ""
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "A",
                ""
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                "[()]*",
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                "[()]*",
                "["
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "("
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                ""
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "A"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "B"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "A"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                ""
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "["
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "B"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                4.0,
                "[()]*"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                2.0,
                "[()]*"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                5.0,
                "[()]*"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                6.0,
                "[()]*"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                7.0,
                "[()]*"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                "[",
                "[()]*"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "(",
                "[()]*"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "",
                "[()]*"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "A",
                "[()]*"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "B",
                "[()]*"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[()]*",
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[()]*",
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[()]*",
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[()]*",
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[()]*",
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "[()]*"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[()]*",
                ""
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[()]*",
                "["
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[()]*",
                "("
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "lst": [
                "[()]*",
                "[()]*"
              ]
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec isList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v) (isList (tail v)))))\n\n(define-fun-rec list_all_str ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (is-StrVal (head v))\n           (list_all_str (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (isList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_str lst))\n(define-fun C2 () Bool (= (length lst) 2))\n(define-fun C3 () Bool\n  (let ((str0 (SafeS (head lst))))\n    (str.in.re str0 (str.to.re \"[()]*\"))))\n(define-fun C4 () Bool\n  (let ((str1 (SafeS (head (tail lst)))))\n    (str.in.re str1 (str.to.re \"[()]*\"))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/120": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ],
              "k": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 1144,
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 1144,
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [],
              "k": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 8856,
              "arr": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 19306,
              "arr": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 20448,
              "arr": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [],
              "k": 29393
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                0
              ],
              "k": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                -555
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                -473
              ],
              "k": 2
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                -34
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                -761
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ],
              "k": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 1,
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 0,
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 0,
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 0,
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "arr": [],
              "k": 0
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                -639
              ],
              "k": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 1,
              "arr": [
                -638
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 0,
              "arr": [
                -640
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                -999
              ],
              "k": 0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 0,
              "arr": [
                -824
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun-rec length ((xs Value)) Int\n  (ite (is-Nil xs) 0\n    (ite (is-Cons xs)\n      (+ 1 (length (tail xs)))\n      0)))\n\n(define-fun-rec all_in_range ((xs Value)) Bool\n  (ite (is-Nil xs) true\n    (ite (and (is-Cons xs)\n              (is-IntVal (head xs))\n              (let ((i (ival (head xs))))\n                (and (<= (- 1000) i) (<= i 1000))))\n      (all_in_range (tail xs))\n      false)))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n(assert (is-IntVal k))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (and (<= 1 (length arr)) (<= (length arr) 1000)))\n(define-fun C2 () Bool (all_in_range arr))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 0 (SafeI k)) (<= (SafeI k) (length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/121": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n(define-fun C2 () Bool (> (length lst) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n(define-fun C2 () Bool (> (length lst) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n(define-fun C2 () Bool (> (length lst) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n(define-fun C2 () Bool (> (length lst) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n(define-fun C2 () Bool (> (length lst) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n(define-fun C2 () Bool (> (length lst) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n(define-fun C2 () Bool (> (length lst) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                4
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                5
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                6
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                7
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                8
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v)\n       0\n       (ite (is-Cons v)\n            (+ 1 (length (tail v)))\n            0)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n(define-fun C2 () Bool (> (length lst) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/122": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                20.0,
                19.0,
                93.0,
                52.0,
                94.0,
                70.0,
                35.0,
                9.0,
                30.0,
                83.0,
                62.0,
                4.0,
                15.0,
                103.0,
                8.0,
                18.0,
                57.0,
                102.0,
                79.0,
                58.0,
                43.0,
                72.0,
                75.0,
                50.0,
                41.0,
                16.0,
                2.0,
                98.0,
                49.0,
                26.0,
                48.0,
                82.0,
                89.0,
                39.0,
                27.0,
                3.0,
                67.0,
                37.0,
                99.0,
                14.0,
                47.0,
                7.0,
                68.0,
                40.0,
                29.0,
                88.0,
                6.0,
                65.0,
                5.0,
                10.0,
                42.0,
                95.0,
                59.0,
                101.0,
                21.0,
                85.0,
                100.0,
                97.0,
                55.0,
                44.0,
                17.0,
                92.0,
                66.0,
                28.0,
                11.0,
                77.0,
                56.0,
                96.0,
                84.0,
                76.0,
                23.0,
                64.0,
                36.0,
                78.0,
                45.0,
                13.0,
                81.0,
                74.0,
                60.0,
                90.0,
                80.0,
                46.0,
                34.0,
                24.0,
                86.0,
                91.0,
                38.0,
                63.0,
                12.0,
                31.0,
                53.0,
                54.0,
                33.0,
                22.0,
                25.0,
                73.0,
                69.0,
                51.0,
                87.0,
                32.0,
                71.0
              ],
              "k": 61.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                203.0,
                114.0,
                106.0,
                195.0,
                174.0,
                143.0,
                186.0,
                196.0,
                181.0,
                140.0,
                166.0,
                176.0,
                172.0,
                124.0,
                137.0,
                141.0,
                145.0,
                183.0,
                149.0,
                178.0,
                204.0,
                160.0,
                168.0,
                104.0,
                170.0,
                132.0,
                110.0,
                188.0,
                200.0,
                173.0,
                148.0,
                129.0,
                138.0,
                157.0,
                115.0,
                142.0,
                191.0,
                107.0,
                159.0,
                198.0,
                154.0,
                125.0,
                111.0,
                199.0,
                156.0,
                123.0,
                158.0,
                152.0,
                194.0,
                197.0,
                144.0,
                155.0,
                127.0,
                153.0,
                105.0,
                187.0,
                117.0,
                130.0,
                147.0,
                108.0,
                113.0,
                151.0,
                205.0,
                119.0,
                193.0,
                179.0,
                177.0,
                180.0,
                164.0,
                146.0,
                161.0,
                184.0,
                116.0,
                122.0,
                112.0,
                190.0,
                134.0,
                175.0,
                120.0,
                162.0,
                139.0,
                136.0,
                169.0,
                202.0,
                121.0,
                189.0,
                118.0,
                109.0,
                128.0,
                150.0,
                131.0,
                182.0,
                135.0,
                201.0,
                192.0,
                163.0,
                185.0,
                167.0,
                126.0,
                133.0,
                165.0
              ],
              "k": 171.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 265.0,
              "arr": [
                235.0,
                292.0,
                255.0,
                291.0,
                214.0,
                306.0,
                276.0,
                270.0,
                212.0,
                250.0,
                305.0,
                274.0,
                284.0,
                264.0,
                267.0,
                236.0,
                246.0,
                245.0,
                207.0,
                262.0,
                253.0,
                225.0,
                259.0,
                224.0,
                229.0,
                282.0,
                226.0,
                302.0,
                294.0,
                234.0,
                210.0,
                254.0,
                251.0,
                280.0,
                232.0,
                297.0,
                239.0,
                275.0,
                298.0,
                237.0,
                263.0,
                290.0,
                222.0,
                278.0,
                238.0,
                230.0,
                283.0,
                296.0,
                240.0,
                277.0,
                221.0,
                271.0,
                286.0,
                288.0,
                279.0,
                206.0,
                215.0,
                247.0,
                252.0,
                269.0,
                228.0,
                213.0,
                211.0,
                304.0,
                266.0,
                219.0,
                260.0,
                285.0,
                248.0,
                220.0,
                295.0,
                303.0,
                223.0,
                287.0,
                242.0,
                243.0,
                241.0,
                217.0,
                256.0,
                231.0,
                261.0,
                272.0,
                249.0,
                293.0,
                227.0,
                244.0,
                300.0,
                258.0,
                299.0,
                281.0,
                218.0,
                257.0,
                209.0,
                273.0,
                301.0,
                216.0,
                208.0,
                233.0,
                307.0,
                289.0,
                268.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 394.0,
              "arr": [
                358.0,
                407.0,
                315.0,
                353.0,
                360.0,
                365.0,
                383.0,
                313.0,
                341.0,
                350.0,
                372.0,
                333.0,
                402.0,
                310.0,
                403.0,
                316.0,
                338.0,
                361.0,
                395.0,
                327.0,
                367.0,
                308.0,
                309.0,
                400.0,
                356.0,
                393.0,
                334.0,
                349.0,
                398.0,
                324.0,
                343.0,
                406.0,
                332.0,
                311.0,
                405.0,
                384.0,
                345.0,
                352.0,
                319.0,
                325.0,
                369.0,
                323.0,
                331.0,
                329.0,
                409.0,
                344.0,
                354.0,
                330.0,
                355.0,
                363.0,
                312.0,
                368.0,
                382.0,
                404.0,
                346.0,
                386.0,
                373.0,
                359.0,
                351.0,
                390.0,
                322.0,
                391.0,
                379.0,
                321.0,
                399.0,
                362.0,
                347.0,
                408.0,
                371.0,
                378.0,
                326.0,
                357.0,
                396.0,
                320.0,
                375.0,
                377.0,
                380.0,
                401.0,
                388.0,
                337.0,
                364.0,
                342.0,
                387.0,
                366.0,
                336.0,
                335.0,
                348.0,
                385.0,
                381.0,
                397.0,
                374.0,
                317.0,
                339.0,
                328.0,
                389.0,
                376.0,
                392.0,
                314.0,
                340.0,
                370.0,
                318.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                462.0,
                470.0,
                412.0,
                460.0,
                426.0,
                435.0,
                497.0,
                438.0,
                498.0,
                484.0,
                432.0,
                410.0,
                503.0,
                483.0,
                428.0,
                418.0,
                480.0,
                479.0,
                485.0,
                494.0,
                469.0,
                427.0,
                461.0,
                507.0,
                474.0,
                447.0,
                454.0,
                430.0,
                463.0,
                439.0,
                411.0,
                495.0,
                424.0,
                441.0,
                455.0,
                473.0,
                431.0,
                505.0,
                472.0,
                502.0,
                416.0,
                501.0,
                499.0,
                488.0,
                487.0,
                504.0,
                468.0,
                458.0,
                492.0,
                450.0,
                443.0,
                496.0,
                482.0,
                481.0,
                493.0,
                422.0,
                478.0,
                415.0,
                486.0,
                413.0,
                414.0,
                451.0,
                467.0,
                448.0,
                475.0,
                434.0,
                489.0,
                419.0,
                508.0,
                421.0,
                466.0,
                491.0,
                452.0,
                465.0,
                425.0,
                477.0,
                506.0,
                417.0,
                429.0,
                436.0,
                471.0,
                464.0,
                511.0,
                437.0,
                442.0,
                446.0,
                444.0,
                510.0,
                449.0,
                453.0,
                456.0,
                459.0,
                500.0,
                420.0,
                423.0,
                476.0,
                509.0,
                440.0,
                433.0,
                490.0,
                457.0
              ],
              "k": 445.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [],
              "k": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 3.0,
              "arr": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 4.0,
              "arr": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 5.0,
              "arr": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [],
              "k": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                3.0
              ],
              "k": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 4.0,
              "arr": [
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 6.0,
              "arr": [
                7.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 9.0,
              "arr": [
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 10.0,
              "arr": [
                11.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                4
              ],
              "k": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 3.0,
              "arr": [
                5
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 4.0,
              "arr": [
                6
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 5.0,
              "arr": [
                7
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 6.0,
              "arr": [
                8
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                38.0,
                36.0,
                74.0,
                87.0,
                56.0,
                72.0,
                62.0,
                20.0,
                32.0,
                69.0,
                86.0,
                41.0,
                68.0,
                100.0,
                12.0,
                4.0,
                93.0,
                73.0,
                42.0,
                84.0,
                94.0,
                81.0,
                37.0,
                64.0,
                76.0,
                70.0,
                23.0,
                33.0,
                39.0,
                44.0,
                82.0,
                48.0,
                78.0,
                101.0,
                59.0,
                65.0,
                2.0,
                67.0,
                29.0,
                8.0,
                88.0,
                98.0,
                71.0,
                47.0,
                27.0,
                34.0,
                55.0,
                13.0,
                40.0,
                90.0,
                5.0,
                58.0,
                96.0,
                52.0,
                24.0,
                9.0,
                97.0,
                54.0,
                22.0,
                57.0,
                50.0,
                92.0,
                95.0,
                43.0,
                53.0,
                25.0,
                51.0,
                3.0,
                85.0,
                15.0,
                28.0,
                46.0,
                6.0,
                11.0,
                49.0,
                102.0,
                17.0,
                91.0,
                80.0,
                77.0,
                79.0,
                63.0,
                45.0,
                60.0,
                83.0,
                26.0,
                14.0,
                21.0,
                10.0,
                89.0,
                30.0,
                75.0,
                18.0,
                61.0,
                35.0,
                31.0,
                66.0,
                99.0,
                19.0,
                16.0,
                7.0
              ],
              "k": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 102,
              "arr": [
                153.0,
                198.0,
                137.0,
                140.0,
                150.0,
                148.0,
                131.0,
                162.0,
                161.0,
                169.0,
                104.0,
                180.0,
                151.0,
                108.0,
                129.0,
                118.0,
                127.0,
                143.0,
                202.0,
                124.0,
                142.0,
                141.0,
                119.0,
                191.0,
                113.0,
                196.0,
                128.0,
                125.0,
                172.0,
                147.0,
                195.0,
                105.0,
                186.0,
                122.0,
                152.0,
                165.0,
                120.0,
                106.0,
                176.0,
                123.0,
                133.0,
                164.0,
                112.0,
                103.0,
                185.0,
                167.0,
                126.0,
                158.0,
                201.0,
                145.0,
                190.0,
                110.0,
                177.0,
                192.0,
                183.0,
                194.0,
                199.0,
                111.0,
                132.0,
                121.0,
                146.0,
                135.0,
                116.0,
                178.0,
                109.0,
                179.0,
                188.0,
                130.0,
                160.0,
                182.0,
                175.0,
                193.0,
                168.0,
                174.0,
                170.0,
                156.0,
                149.0,
                203.0,
                157.0,
                171.0,
                187.0,
                184.0,
                159.0,
                163.0,
                107.0,
                115.0,
                139.0,
                138.0,
                181.0,
                197.0,
                134.0,
                144.0,
                189.0,
                173.0,
                117.0,
                136.0,
                154.0,
                155.0,
                166.0,
                114.0,
                200.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 102,
              "arr": [
                268.0,
                304.0,
                236.0,
                261.0,
                232.0,
                298.0,
                248.0,
                297.0,
                243.0,
                295.0,
                258.0,
                283.0,
                285.0,
                235.0,
                292.0,
                284.0,
                238.0,
                303.0,
                269.0,
                224.0,
                276.0,
                240.0,
                213.0,
                300.0,
                221.0,
                271.0,
                293.0,
                228.0,
                205.0,
                226.0,
                210.0,
                211.0,
                253.0,
                225.0,
                289.0,
                259.0,
                217.0,
                227.0,
                275.0,
                234.0,
                214.0,
                239.0,
                249.0,
                279.0,
                229.0,
                260.0,
                291.0,
                288.0,
                246.0,
                256.0,
                242.0,
                270.0,
                241.0,
                296.0,
                208.0,
                247.0,
                251.0,
                290.0,
                287.0,
                257.0,
                250.0,
                254.0,
                263.0,
                245.0,
                280.0,
                265.0,
                282.0,
                222.0,
                299.0,
                215.0,
                237.0,
                266.0,
                274.0,
                255.0,
                264.0,
                209.0,
                244.0,
                267.0,
                207.0,
                273.0,
                223.0,
                262.0,
                278.0,
                220.0,
                216.0,
                301.0,
                204.0,
                252.0,
                230.0,
                233.0,
                277.0,
                281.0,
                231.0,
                272.0,
                219.0,
                294.0,
                212.0,
                286.0,
                206.0,
                302.0,
                218.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 102,
              "arr": [
                326.0,
                360.0,
                337.0,
                376.0,
                385.0,
                347.0,
                383.0,
                349.0,
                390.0,
                400.0,
                315.0,
                380.0,
                359.0,
                388.0,
                353.0,
                351.0,
                335.0,
                313.0,
                371.0,
                357.0,
                306.0,
                317.0,
                395.0,
                378.0,
                332.0,
                316.0,
                344.0,
                403.0,
                330.0,
                324.0,
                342.0,
                319.0,
                368.0,
                382.0,
                323.0,
                352.0,
                320.0,
                361.0,
                356.0,
                314.0,
                336.0,
                389.0,
                381.0,
                401.0,
                311.0,
                346.0,
                334.0,
                369.0,
                333.0,
                341.0,
                404.0,
                364.0,
                394.0,
                398.0,
                370.0,
                309.0,
                312.0,
                402.0,
                345.0,
                362.0,
                393.0,
                343.0,
                327.0,
                405.0,
                325.0,
                391.0,
                366.0,
                354.0,
                339.0,
                386.0,
                384.0,
                307.0,
                318.0,
                329.0,
                328.0,
                350.0,
                397.0,
                392.0,
                365.0,
                308.0,
                338.0,
                374.0,
                363.0,
                305.0,
                348.0,
                355.0,
                372.0,
                340.0,
                321.0,
                310.0,
                367.0,
                377.0,
                375.0,
                322.0,
                373.0,
                399.0,
                331.0,
                387.0,
                358.0,
                396.0,
                379.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 27590,
              "arr": [
                500.0,
                505.0,
                446.0,
                407.0,
                450.0,
                409.0,
                451.0,
                440.0,
                448.0,
                477.0,
                423.0,
                430.0,
                464.0,
                485.0,
                463.0,
                466.0,
                497.0,
                492.0,
                413.0,
                504.0,
                436.0,
                422.0,
                454.0,
                457.0,
                420.0,
                494.0,
                408.0,
                491.0,
                478.0,
                484.0,
                417.0,
                482.0,
                415.0,
                469.0,
                473.0,
                442.0,
                496.0,
                480.0,
                462.0,
                445.0,
                410.0,
                495.0,
                406.0,
                434.0,
                501.0,
                476.0,
                411.0,
                447.0,
                418.0,
                438.0,
                429.0,
                499.0,
                474.0,
                479.0,
                421.0,
                414.0,
                444.0,
                435.0,
                475.0,
                439.0,
                428.0,
                490.0,
                416.0,
                503.0,
                431.0,
                493.0,
                481.0,
                449.0,
                460.0,
                470.0,
                443.0,
                437.0,
                425.0,
                419.0,
                412.0,
                471.0,
                453.0,
                465.0,
                502.0,
                433.0,
                432.0,
                424.0,
                498.0,
                461.0,
                426.0,
                506.0,
                427.0,
                489.0,
                441.0,
                488.0,
                455.0,
                483.0,
                452.0,
                487.0,
                486.0,
                456.0,
                472.0,
                459.0,
                458.0,
                467.0,
                468.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [],
              "k": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 8856,
              "arr": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [],
              "k": 19306
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 20448,
              "arr": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 29393,
              "arr": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ],
              "k": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6.0
              ],
              "k": 20539
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                4
              ],
              "k": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                6
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                7
              ],
              "k": 2
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 2,
              "arr": [
                8
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 28883,
              "arr": [
                9
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                70.0,
                84.0,
                30.0,
                93.0,
                82.0,
                65.0,
                16.0,
                17.0,
                73.0,
                41.0,
                60.0,
                85.0,
                50.0,
                43.0,
                44.0,
                102.0,
                13.0,
                22.0,
                66.0,
                15.0,
                31.0,
                68.0,
                42.0,
                40.0,
                55.0,
                61.0,
                12.0,
                96.0,
                80.0,
                26.0,
                79.0,
                4.0,
                53.0,
                88.0,
                37.0,
                75.0,
                59.0,
                3.0,
                72.0,
                98.0,
                97.0,
                25.0,
                19.0,
                27.0,
                89.0,
                18.0,
                69.0,
                49.0,
                57.0,
                38.0,
                46.0,
                24.0,
                76.0,
                32.0,
                78.0,
                48.0,
                83.0,
                77.0,
                87.0,
                92.0,
                8.0,
                20.0,
                33.0,
                23.0,
                52.0,
                39.0,
                94.0,
                71.0,
                54.0,
                36.0,
                62.0,
                51.0,
                56.0,
                2.0,
                47.0,
                91.0,
                9.0,
                100.0,
                95.0,
                81.0,
                45.0,
                7.0,
                28.0,
                86.0,
                6.0,
                21.0,
                67.0,
                35.0,
                99.0,
                101.0,
                29.0,
                11.0,
                64.0,
                5.0,
                74.0,
                90.0,
                14.0,
                63.0,
                34.0,
                10.0,
                58.0
              ],
              "k": 101
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 17,
              "arr": [
                156.0,
                179.0,
                166.0,
                134.0,
                160.0,
                186.0,
                175.0,
                187.0,
                122.0,
                189.0,
                121.0,
                104.0,
                195.0,
                149.0,
                146.0,
                124.0,
                125.0,
                152.0,
                154.0,
                127.0,
                162.0,
                167.0,
                113.0,
                141.0,
                184.0,
                177.0,
                114.0,
                144.0,
                133.0,
                174.0,
                130.0,
                157.0,
                173.0,
                188.0,
                153.0,
                151.0,
                201.0,
                109.0,
                129.0,
                191.0,
                135.0,
                163.0,
                164.0,
                112.0,
                136.0,
                198.0,
                117.0,
                147.0,
                110.0,
                120.0,
                131.0,
                139.0,
                159.0,
                115.0,
                202.0,
                182.0,
                203.0,
                192.0,
                197.0,
                143.0,
                170.0,
                171.0,
                137.0,
                183.0,
                172.0,
                119.0,
                138.0,
                108.0,
                126.0,
                190.0,
                111.0,
                169.0,
                199.0,
                123.0,
                128.0,
                140.0,
                176.0,
                150.0,
                158.0,
                194.0,
                148.0,
                118.0,
                105.0,
                155.0,
                145.0,
                196.0,
                180.0,
                178.0,
                185.0,
                193.0,
                168.0,
                103.0,
                116.0,
                132.0,
                142.0,
                106.0,
                181.0,
                107.0,
                161.0,
                200.0,
                165.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 23,
              "arr": [
                245.0,
                297.0,
                290.0,
                277.0,
                248.0,
                221.0,
                214.0,
                298.0,
                204.0,
                269.0,
                234.0,
                273.0,
                207.0,
                278.0,
                233.0,
                293.0,
                285.0,
                260.0,
                215.0,
                244.0,
                300.0,
                302.0,
                235.0,
                250.0,
                287.0,
                267.0,
                213.0,
                218.0,
                225.0,
                240.0,
                228.0,
                258.0,
                222.0,
                246.0,
                254.0,
                288.0,
                255.0,
                259.0,
                227.0,
                231.0,
                219.0,
                296.0,
                209.0,
                232.0,
                216.0,
                226.0,
                304.0,
                212.0,
                211.0,
                220.0,
                205.0,
                272.0,
                266.0,
                275.0,
                264.0,
                291.0,
                274.0,
                257.0,
                208.0,
                262.0,
                294.0,
                271.0,
                242.0,
                299.0,
                251.0,
                239.0,
                303.0,
                265.0,
                292.0,
                268.0,
                206.0,
                238.0,
                223.0,
                236.0,
                224.0,
                295.0,
                247.0,
                263.0,
                279.0,
                229.0,
                230.0,
                241.0,
                284.0,
                243.0,
                261.0,
                256.0,
                252.0,
                289.0,
                280.0,
                270.0,
                286.0,
                253.0,
                276.0,
                210.0,
                282.0,
                301.0,
                283.0,
                249.0,
                237.0,
                281.0,
                217.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 88,
              "arr": [
                379.0,
                382.0,
                390.0,
                378.0,
                351.0,
                307.0,
                317.0,
                397.0,
                322.0,
                328.0,
                335.0,
                388.0,
                402.0,
                324.0,
                394.0,
                320.0,
                311.0,
                331.0,
                305.0,
                343.0,
                395.0,
                377.0,
                391.0,
                353.0,
                352.0,
                399.0,
                380.0,
                348.0,
                345.0,
                308.0,
                384.0,
                341.0,
                333.0,
                362.0,
                323.0,
                340.0,
                318.0,
                404.0,
                373.0,
                370.0,
                376.0,
                338.0,
                336.0,
                386.0,
                319.0,
                316.0,
                347.0,
                329.0,
                360.0,
                342.0,
                381.0,
                361.0,
                314.0,
                400.0,
                389.0,
                405.0,
                401.0,
                365.0,
                396.0,
                321.0,
                372.0,
                354.0,
                337.0,
                312.0,
                350.0,
                327.0,
                398.0,
                392.0,
                325.0,
                349.0,
                356.0,
                310.0,
                332.0,
                366.0,
                367.0,
                315.0,
                374.0,
                339.0,
                383.0,
                355.0,
                385.0,
                387.0,
                375.0,
                359.0,
                357.0,
                313.0,
                344.0,
                326.0,
                330.0,
                403.0,
                306.0,
                369.0,
                363.0,
                334.0,
                309.0,
                346.0,
                358.0,
                393.0,
                368.0,
                364.0,
                371.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 33,
              "arr": [
                490.0,
                493.0,
                431.0,
                428.0,
                409.0,
                460.0,
                451.0,
                443.0,
                475.0,
                418.0,
                505.0,
                440.0,
                424.0,
                452.0,
                432.0,
                444.0,
                468.0,
                472.0,
                455.0,
                438.0,
                478.0,
                499.0,
                506.0,
                495.0,
                457.0,
                479.0,
                437.0,
                464.0,
                416.0,
                469.0,
                450.0,
                485.0,
                497.0,
                406.0,
                447.0,
                492.0,
                494.0,
                425.0,
                458.0,
                436.0,
                427.0,
                448.0,
                446.0,
                442.0,
                445.0,
                415.0,
                413.0,
                433.0,
                500.0,
                435.0,
                429.0,
                483.0,
                473.0,
                408.0,
                456.0,
                502.0,
                419.0,
                421.0,
                481.0,
                453.0,
                414.0,
                486.0,
                462.0,
                477.0,
                467.0,
                412.0,
                480.0,
                430.0,
                484.0,
                471.0,
                463.0,
                454.0,
                470.0,
                465.0,
                501.0,
                426.0,
                407.0,
                417.0,
                496.0,
                439.0,
                498.0,
                461.0,
                420.0,
                503.0,
                410.0,
                423.0,
                459.0,
                487.0,
                476.0,
                449.0,
                441.0,
                504.0,
                422.0,
                491.0,
                482.0,
                434.0,
                488.0,
                411.0,
                474.0,
                489.0,
                466.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                105,
                107,
                109,
                111,
                113,
                115,
                117,
                119,
                121,
                123,
                125,
                127,
                129,
                131,
                133,
                135,
                137,
                139,
                141,
                143,
                145,
                147,
                149,
                151,
                153,
                155,
                157,
                159,
                161,
                163,
                165,
                167,
                169,
                171,
                173,
                175,
                177,
                179,
                181,
                183,
                185,
                187,
                189,
                191,
                193,
                195,
                197,
                199,
                201,
                203,
                205,
                207,
                209,
                211,
                213,
                215,
                217,
                219,
                221,
                223,
                225,
                227,
                229,
                231,
                233,
                235,
                237,
                239,
                241,
                243,
                245,
                247,
                249,
                251,
                253,
                255,
                257,
                259,
                261,
                263,
                265,
                267,
                269,
                271,
                273,
                275,
                277,
                279,
                281,
                283,
                285,
                287,
                289,
                291,
                293,
                295,
                297,
                299,
                301,
                303,
                305
              ],
              "k": 101
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 17,
              "arr": [
                106,
                110,
                114,
                118,
                122,
                126,
                130,
                134,
                138,
                142,
                146,
                150,
                154,
                158,
                162,
                166,
                170,
                174,
                178,
                182,
                186,
                190,
                194,
                198,
                202,
                206,
                210,
                214,
                218,
                222,
                226,
                230,
                234,
                238,
                242,
                246,
                250,
                254,
                258,
                262,
                266,
                270,
                274,
                278,
                282,
                286,
                290,
                294,
                298,
                302,
                306,
                308,
                310,
                312,
                314,
                316,
                318,
                320,
                322,
                324,
                326,
                328,
                330,
                332,
                334,
                336,
                338,
                340,
                342,
                344,
                346,
                348,
                350,
                352,
                354,
                356,
                358,
                360,
                362,
                364,
                366,
                368,
                370,
                372,
                374,
                376,
                378,
                380,
                382,
                384,
                386,
                388,
                390,
                392,
                394,
                396,
                398,
                400,
                402,
                404,
                406
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 17,
              "arr": [
                108,
                116,
                124,
                132,
                140,
                148,
                156,
                164,
                172,
                180,
                188,
                196,
                204,
                212,
                220,
                228,
                236,
                244,
                252,
                260,
                268,
                276,
                284,
                292,
                300,
                307,
                311,
                315,
                319,
                323,
                327,
                331,
                335,
                339,
                343,
                347,
                351,
                355,
                359,
                363,
                367,
                371,
                375,
                379,
                383,
                387,
                391,
                395,
                399,
                403,
                407,
                409,
                411,
                413,
                415,
                417,
                419,
                421,
                423,
                425,
                427,
                429,
                431,
                433,
                435,
                437,
                439,
                441,
                443,
                445,
                447,
                449,
                451,
                453,
                455,
                457,
                459,
                461,
                463,
                465,
                467,
                469,
                471,
                473,
                475,
                477,
                479,
                481,
                483,
                485,
                487,
                489,
                491,
                493,
                495,
                497,
                499,
                501,
                503,
                505,
                507
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 17,
              "arr": [
                112,
                128,
                144,
                160,
                176,
                192,
                208,
                224,
                240,
                256,
                272,
                288,
                304,
                313,
                321,
                329,
                337,
                345,
                353,
                361,
                369,
                377,
                385,
                393,
                401,
                408,
                412,
                416,
                420,
                424,
                428,
                432,
                436,
                440,
                444,
                448,
                452,
                456,
                460,
                464,
                468,
                472,
                476,
                480,
                484,
                488,
                492,
                496,
                500,
                504,
                508,
                510,
                512,
                514,
                516,
                518,
                520,
                522,
                524,
                526,
                528,
                530,
                532,
                534,
                536,
                538,
                540,
                542,
                544,
                546,
                548,
                550,
                552,
                554,
                556,
                558,
                560,
                562,
                564,
                566,
                568,
                570,
                572,
                574,
                576,
                578,
                580,
                582,
                584,
                586,
                588,
                590,
                592,
                594,
                596,
                598,
                600,
                602,
                604,
                606,
                608
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 17,
              "arr": [
                120,
                152,
                184,
                216,
                248,
                280,
                309,
                325,
                341,
                357,
                373,
                389,
                405,
                414,
                422,
                430,
                438,
                446,
                454,
                462,
                470,
                478,
                486,
                494,
                502,
                509,
                513,
                517,
                521,
                525,
                529,
                533,
                537,
                541,
                545,
                549,
                553,
                557,
                561,
                565,
                569,
                573,
                577,
                581,
                585,
                589,
                593,
                597,
                601,
                605,
                609,
                611,
                613,
                615,
                617,
                619,
                621,
                623,
                625,
                627,
                629,
                631,
                633,
                635,
                637,
                639,
                641,
                643,
                645,
                647,
                649,
                651,
                653,
                655,
                657,
                659,
                661,
                663,
                665,
                667,
                669,
                671,
                673,
                675,
                677,
                679,
                681,
                683,
                685,
                687,
                689,
                691,
                693,
                695,
                697,
                699,
                701,
                703,
                705,
                707,
                709
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ],
              "k": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 1,
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 1,
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 1,
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 1,
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                4
              ],
              "k": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 1,
              "arr": [
                6
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 1,
              "arr": [
                7
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 1,
              "arr": [
                8
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                9
              ],
              "k": 1
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (IsList (tail v))\n         false)))\n(define-fun-rec ListAllInt ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n         (and (is-IntVal (head v)) (ListAllInt (tail v)))\n         false)))\n(define-fun-rec Length ((v Value)) Int\n  (ite (is-Nil v) 0\n    (ite (is-Cons v)\n         (+ 1 (Length (tail v)))\n         0)))\n(define-fun SafeI ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const arr Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (ListAllInt arr))\n(define-fun C2 () Bool (and (<= 1 (Length arr)) (<= (Length arr) 100)))\n(define-fun C3 () Bool (is-IntVal k))\n(define-fun C4 () Bool (and (<= 1 (SafeI k)) (<= (SafeI k) (Length arr))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/123": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (get-int n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (get-int n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (get-int n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (get-int n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/124": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "date": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "date": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "date": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "date": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "date": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun s_len ((v Value)) Int\n  (str.len (SafeS v)))\n\n(define-fun s_char ((v Value) (i Int)) String\n  (str.substr (SafeS v) i 1))\n\n(define-fun str_to_int2 ((v Value)) Int\n  (let ((s (SafeS v))\n        (c0 (str.substr (SafeS v) 0 1))\n        (c1 (str.substr (SafeS v) 1 1)))\n    (+ (* (- (str.to_code c0) 48) 10)\n       (- (str.to_code c1) 48))))\n\n; === Inputs ===\n(declare-const date Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal date))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "date": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "date": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "date": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "date": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "date": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeS ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n\n(define-fun s_len ((v Value)) Int\n  (str.len (SafeS v)))\n\n(define-fun s_char ((v Value) (i Int)) String\n  (str.substr (SafeS v) i 1))\n\n(define-fun str_to_int2 ((v Value)) Int\n  (let ((s (SafeS v))\n        (c0 (str.substr (SafeS v) 0 1))\n        (c1 (str.substr (SafeS v) 1 1)))\n    (+ (* (- (str.to_code c0) 48) 10)\n       (- (str.to_code c1) 48))))\n\n; === Inputs ===\n(declare-const date Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal date))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/125": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const txt Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal txt))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal txt))\n(define-fun C1 () Bool (and (is-StrVal txt) (not (str.prefixof \" \" (sval txt))) (not (str.prefixof \",\" (sval txt))) (not (str.suffixof \" \" (sval txt))) (not (str.suffixof \",\" (sval txt)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "txt": " A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "txt": " B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "txt": " "
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "txt": ","
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "txt": ",D"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const txt Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal txt))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal txt))\n(define-fun C1 () Bool (and (is-StrVal txt) (not (str.prefixof \" \" (sval txt))) (not (str.prefixof \",\" (sval txt))) (not (str.suffixof \" \" (sval txt))) (not (str.suffixof \",\" (sval txt)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const txt Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal txt))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal txt))\n(define-fun C1 () Bool (and (is-StrVal txt) (not (str.prefixof \" \" (sval txt))) (not (str.prefixof \",\" (sval txt))) (not (str.suffixof \" \" (sval txt))) (not (str.suffixof \",\" (sval txt)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "txt": "A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "txt": "B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "txt": "C"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "txt": "D"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "txt": "E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const txt Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal txt))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal txt))\n(define-fun C1 () Bool (and (is-StrVal txt) (not (str.prefixof \" \" (sval txt))) (not (str.prefixof \",\" (sval txt))) (not (str.suffixof \" \" (sval txt))) (not (str.suffixof \",\" (sval txt)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/126": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec all_nonneg_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((elem (head l)))\n              (let ((i (ival elem))\n                    (rest (tail l)))\n                (and (is-IntVal elem) (>= i 0) (all_nonneg_int rest))))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (all_nonneg_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec all_nonneg_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((elem (head l)))\n              (let ((i (ival elem))\n                    (rest (tail l)))\n                (and (is-IntVal elem) (>= i 0) (all_nonneg_int rest))))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (all_nonneg_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec all_nonneg_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((elem (head l)))\n              (let ((i (ival elem))\n                    (rest (tail l)))\n                (and (is-IntVal elem) (>= i 0) (all_nonneg_int rest))))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (all_nonneg_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                2437
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                8365
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                30612
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec all_nonneg_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((elem (head l)))\n              (let ((i (ival elem))\n                    (rest (tail l)))\n                (and (is-IntVal elem) (>= i 0) (all_nonneg_int rest))))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (all_nonneg_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/127": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                4.0
              ],
              "interval2": [
                3.0,
                -1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [
                5.0
              ],
              "interval2": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                6.0
              ],
              "interval1": [
                8.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                9.0
              ],
              "interval1": [
                10.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                11.0
              ],
              "interval1": [
                12.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                2.0,
                0
              ],
              "interval2": [
                4.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval2": [
                6.0
              ],
              "interval1": [
                -28100,
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                7.0
              ],
              "interval1": [
                -49076,
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                8.0
              ],
              "interval1": [
                -51316,
                10.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                9.0
              ],
              "interval1": [
                -74927,
                11.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [],
              "interval2": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval2": [
                2.0
              ],
              "interval1": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                4.0
              ],
              "interval1": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                6.0
              ],
              "interval1": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                7.0
              ],
              "interval1": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval2": [
                2.0,
                -1
              ],
              "interval1": [
                0,
                1323
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [
                -1323,
                28881
              ],
              "interval2": [
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                6.0
              ],
              "interval1": [
                -2190,
                58414
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                7.0
              ],
              "interval1": [
                -19256,
                66043
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                8.0
              ],
              "interval1": [
                -38520,
                88157
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                2.0
              ],
              "interval2": [
                0,
                4.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval2": [
                5.0,
                7.0
              ],
              "interval1": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                9.0,
                6.0
              ],
              "interval1": [
                8.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                12.0,
                10.0
              ],
              "interval1": [
                13.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                15.0,
                11.0
              ],
              "interval1": [
                14.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                4.0,
                2.0
              ],
              "interval2": [
                0,
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval2": [
                -10450,
                6.0
              ],
              "interval1": [
                -32285,
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                -10731,
                7.0
              ],
              "interval1": [
                -33427,
                8.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                -37016,
                10.0
              ],
              "interval1": [
                -36424,
                9.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                -62922,
                11.0
              ],
              "interval1": [
                -58079,
                12.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [],
              "interval2": [
                2.0,
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [],
              "interval2": [
                4.0,
                6.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                7.0,
                8.0
              ],
              "interval1": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                10.0,
                5.0
              ],
              "interval1": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                9.0,
                11.0
              ],
              "interval1": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                -18457,
                0
              ],
              "interval2": [
                2.0,
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [
                -20976,
                31891
              ],
              "interval2": [
                5.0,
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                7.0,
                6.0
              ],
              "interval1": [
                -30701,
                64169
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                8.0,
                9.0
              ],
              "interval1": [
                -54312,
                76786
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                10.0,
                11.0
              ],
              "interval1": [
                -85909,
                97370
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                3.0,
                -1
              ],
              "interval2": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [
                4.0
              ],
              "interval2": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                2.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                6.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                7.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                2.0,
                3.0
              ],
              "interval2": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                5.0,
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                6.0,
                8.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                10.0,
                9.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                7.0,
                12.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval2": [],
              "interval1": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [
                1
              ],
              "interval2": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval1": [
                1143
              ],
              "interval2": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                10088
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval1": [
                31064
              ],
              "interval2": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                -15921,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [
                -8945,
                15921
              ],
              "interval2": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                -40836,
                37576
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                -43076,
                47301
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [],
              "interval1": [
                -61663,
                64208
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                4.0
              ],
              "interval2": [
                0,
                2240
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [
                2.0,
                -1
              ],
              "interval2": [
                -1323,
                18457
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                -19910,
                35364
              ],
              "interval1": [
                3.0,
                -841
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                -48133,
                53251
              ],
              "interval1": [
                5.0,
                -7719
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                -55762,
                82655
              ],
              "interval1": [
                6.0,
                -19998
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                0,
                2.0
              ],
              "interval2": [
                -25906,
                21655
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval2": [
                -2240,
                9725
              ],
              "interval1": [
                3.0,
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                -23477,
                33336
              ],
              "interval1": [
                6.0,
                5.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                -41364,
                64933
              ],
              "interval1": [
                8.0,
                7.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                -70768,
                77212
              ],
              "interval1": [
                9.0,
                10.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval2": [
                -20537,
                0
              ],
              "interval1": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [],
              "interval2": [
                -42192,
                15921
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                -51917,
                48199
              ],
              "interval1": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                -73154,
                71810
              ],
              "interval1": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                -85366,
                102921
              ],
              "interval1": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "interval1": [
                -20976,
                0
              ],
              "interval2": [
                -31891,
                21655
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "interval1": [
                -21655,
                31891
              ],
              "interval2": [
                -25906,
                18457
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "interval2": [
                -26746,
                37044
              ],
              "interval1": [
                -24101,
                32481
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "interval2": [
                -39202,
                37911
              ],
              "interval1": [
                -53634,
                39359
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "interval2": [
                -46780,
                54977
              ],
              "interval1": [
                -65846,
                70470
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (length (tail l)))\n            0)))\n\n(define-fun SafeIntVal ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n(define-fun SafeHead ((l Value)) Int\n  (ite (is-Cons l)\n       (SafeIntVal (head l))\n       0))\n\n(define-fun SafeSecond ((l Value)) Int\n  (let ((t (ite (is-Cons l) (tail l) Nil)))\n    (ite (is-Cons t)\n         (SafeIntVal (head t))\n         0)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-IntVal (head l)) (list_all_int (tail l)))\n            false)))\n\n; === Inputs ===\n(declare-const interval1 Value)\n(declare-const interval2 Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList interval1))\n(assert (IsList interval2))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (and (= (length interval1) 2)\n       (<= (SafeHead interval1) (SafeSecond interval1))))\n(define-fun C1 () Bool\n  (list_all_int interval1))\n(define-fun C2 () Bool\n  (and (= (length interval2) 2)\n       (<= (SafeHead interval2) (SafeSecond interval2))))\n(define-fun C3 () Bool\n  (list_all_int interval2))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/128": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_int arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_int arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/129": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 0,
              "grid": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": -21655,
              "grid": [
                6.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "grid": [
                7.0
              ],
              "k": -21655
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": -24101,
              "grid": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": -24101,
              "grid": [
                9.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 1,
              "grid": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 21656,
              "grid": [
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 50537,
              "grid": [
                6.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 52983,
              "grid": [
                7.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 52983,
              "grid": [
                8.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 0,
              "grid": [
                5.0,
                4.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": -25906,
              "grid": [
                [],
                8.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": -25906,
              "grid": [
                [],
                9.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": -26496,
              "grid": [
                [],
                10.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": -26496,
              "grid": [
                [],
                11.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 1,
              "grid": [
                5.0,
                4.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 25907,
              "grid": [
                [],
                8.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 25907,
              "grid": [
                [],
                9.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 26497,
              "grid": [
                [],
                10.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 26497,
              "grid": [
                [],
                11.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 0,
              "grid": [
                [
                  2.0
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": -590,
              "grid": [
                [
                  3.0
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": -590,
              "grid": [
                [
                  4.0
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": -590,
              "grid": [
                [
                  5.0
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": -8219,
              "grid": [
                [
                  6.0
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 1,
              "grid": [
                [
                  2.0
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 591,
              "grid": [
                [
                  3.0
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "grid": [
                [
                  4.0
                ]
              ],
              "k": 591
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "grid": [
                [
                  5.0
                ]
              ],
              "k": 591
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "grid": [
                [
                  6.0
                ]
              ],
              "k": 8220
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 0,
              "grid": [
                [
                  2.0,
                  3.0
                ],
                [
                  4.0,
                  4
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": -18457,
              "grid": [
                [
                  5.0,
                  6.0
                ],
                [
                  7.0,
                  4
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": -18457,
              "grid": [
                [
                  9.0,
                  10.0
                ],
                [
                  8.0,
                  4
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": -18457,
              "grid": [
                [
                  11.0,
                  13.0
                ],
                [
                  12.0,
                  4
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": -18457,
              "grid": [
                [
                  16.0,
                  15.0
                ],
                [
                  14.0,
                  4
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 1,
              "grid": [
                [
                  2.0,
                  3.0
                ],
                [
                  4.0,
                  4
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 18458,
              "grid": [
                [
                  5.0,
                  6.0
                ],
                [
                  7.0,
                  4
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 18458,
              "grid": [
                [
                  9.0,
                  10.0
                ],
                [
                  8.0,
                  4
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 18458,
              "grid": [
                [
                  11.0,
                  13.0
                ],
                [
                  12.0,
                  4
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 18458,
              "grid": [
                [
                  16.0,
                  15.0
                ],
                [
                  14.0,
                  4
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_4"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 0,
              "grid": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": -21238,
              "grid": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": -33035,
              "grid": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": -43485,
              "grid": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": -71585,
              "grid": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 1,
              "grid": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 21239,
              "grid": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 33036,
              "grid": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 43486,
              "grid": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 71586,
              "grid": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 0,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": -20537,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": -23534,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": -45189,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": -74070,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "k": 20538,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "k": 20539,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "k": 20537,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "k": 1324,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "k": 2447,
              "grid": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [],
          "total_contracts": 5
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (or (is-Nil v)\n      (and (is-Cons v)\n           (IsList (tail v)))))\n\n(define-fun-rec length ((v Value)) Int\n  (ite (is-Nil v) 0\n       (ite (is-Cons v) (+ 1 (length (tail v))) 0)))\n\n(define-fun-rec list_nth ((l Value) (idx Int)) Value\n  (ite (not (is-Cons l))\n       Nil\n       (ite (= idx 0)\n            (head l)\n            (list_nth (tail l) (- idx 1)))))\n\n(define-fun-rec AllRowsSameLen ((rows Value) (n Int)) Bool\n  (ite (is-Nil rows)\n       true\n       (and (is-Cons rows)\n            (let ((row (head rows)))\n              (and (IsList row)\n                   (= (length row) n)\n                   (AllRowsSameLen (tail rows) n))))))\n\n(define-fun-rec RowOK ((row Value) (j Int) (i Int) (n Int)) Bool\n  (ite (= j n)\n       (is-Nil row)\n       (and (is-Cons row)\n            (is-IntVal (head row))\n            (= (ival (head row)) (+ 1 j (* i n)))\n            (RowOK (tail row) (+ j 1) i n))))\n\n(define-fun-rec GridOK ((rows Value) (i Int) (n Int)) Bool\n  (ite (= i n)\n       (is-Nil rows)\n       (and (is-Cons rows)\n            (RowOK (head rows) 0 i n)\n            (GridOK (tail rows) (+ i 1) n))))\n\n; === Inputs ===\n(declare-const grid Value)\n(declare-const k Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList grid))\n(assert (is-IntVal k))\n(assert (<= (length grid) 3))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal k))\n(define-fun C1 () Bool (and (is-IntVal k) (> (ival k) 0)))\n(define-fun C2 () Bool (and (IsList grid) (>= (length grid) 2)))\n(define-fun C3 () Bool (and (IsList grid) (AllRowsSameLen grid (length grid))))\n(define-fun C4 () Bool (let ((n (length grid))) (GridOK grid 0 n)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/130": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (ite (is-IntVal n) (>= (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/131": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-Int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (get-Int n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-Int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (get-Int n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-Int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (get-Int n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun get-Int ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (get-Int n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/132": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec all_brackets ((sVal Value) (pos Int)) Bool\n  (ite (not (is-StrVal sVal))\n       false\n       (let ((str (sval sVal))\n             (len (str.len (sval sVal))))\n         (ite (>= pos len)\n              true\n              (let ((ch (str.substr str pos 1)))\n                (ite (or (= ch \"[\") (= ch \"]\"))\n                     (all_brackets sVal (+ pos 1))\n                     false))))))\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n(define-fun C1 () Bool (all_brackets string 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": "A"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": "B"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": "C"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": "D"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": "E"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec all_brackets ((sVal Value) (pos Int)) Bool\n  (ite (not (is-StrVal sVal))\n       false\n       (let ((str (sval sVal))\n             (len (str.len (sval sVal))))\n         (ite (>= pos len)\n              true\n              (let ((ch (str.substr str pos 1)))\n                (ite (or (= ch \"[\") (= ch \"]\"))\n                     (all_brackets sVal (+ pos 1))\n                     false))))))\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n(define-fun C1 () Bool (all_brackets string 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec all_brackets ((sVal Value) (pos Int)) Bool\n  (ite (not (is-StrVal sVal))\n       false\n       (let ((str (sval sVal))\n             (len (str.len (sval sVal))))\n         (ite (>= pos len)\n              true\n              (let ((ch (str.substr str pos 1)))\n                (ite (or (= ch \"[\") (= ch \"]\"))\n                     (all_brackets sVal (+ pos 1))\n                     false))))))\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n(define-fun C1 () Bool (all_brackets string 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "string": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "string": "["
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "string": "]"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "string": "]["
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "string": "]]"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec all_brackets ((sVal Value) (pos Int)) Bool\n  (ite (not (is-StrVal sVal))\n       false\n       (let ((str (sval sVal))\n             (len (str.len (sval sVal))))\n         (ite (>= pos len)\n              true\n              (let ((ch (str.substr str pos 1)))\n                (ite (or (= ch \"[\") (= ch \"]\"))\n                     (all_brackets sVal (+ pos 1))\n                     false))))))\n\n; === Inputs ===\n(declare-const string Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal string))\n(define-fun C1 () Bool (all_brackets string 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/133": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun isList ((v Value)) Bool (or (is-Nil v) (is-Cons v)))\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n           (list_all_numeric (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_numeric lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                "!0!",
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "!",
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "0",
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "0!",
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "!0!",
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun isList ((v Value)) Bool (or (is-Nil v) (is-Cons v)))\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n           (list_all_numeric (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_numeric lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun isList ((v Value)) Bool (or (is-Nil v) (is-Cons v)))\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n           (list_all_numeric (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_numeric lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun isList ((v Value)) Bool (or (is-Nil v) (is-Cons v)))\n(define-fun-rec list_all_numeric ((l Value)) Bool\n  (ite (is-Nil l) true\n    (ite (is-Cons l)\n      (and (or (is-IntVal (head l)) (is-FloatVal (head l)))\n           (list_all_numeric (tail l)))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (isList lst))\n(define-fun C1 () Bool (list_all_numeric lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/134": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "txt": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "txt": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "txt": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "txt": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "txt": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStr ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n(define-fun is-alpha-char ((c String)) Bool\n  (str.in.re c (str.to.re \"[A-Za-z]\")))\n\n; === Inputs ===\n(declare-const txt Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal txt))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "txt": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "txt": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "txt": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "txt": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "txt": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStr ((v Value)) String\n  (ite (is-StrVal v) (sval v) \"\"))\n(define-fun is-alpha-char ((c String)) Bool\n  (str.in.re c (str.to.re \"[A-Za-z]\")))\n\n; === Inputs ===\n(declare-const txt Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal txt))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/135": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n(define-fun value_eq ((v1 Value) (v2 Value)) Bool\n  (or (and (is-IntVal v1) (is-IntVal v2)\n           (= (ival v1) (ival v2)))\n      (and (is-FloatVal v1) (is-FloatVal v2)\n           (= (fval v1) (fval v2)))\n      (and (is-IntVal v1) (is-FloatVal v2)\n           (= (to_real (ival v1)) (fval v2)))\n      (and (is-FloatVal v1) (is-IntVal v2)\n           (= (fval v1) (to_real (ival v2))))))\n\n(define-fun-rec list_contains ((e Value) (v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (ite (value_eq e (head v))\n            true\n            (list_contains e (tail v)))))\n\n(define-fun-rec list_unique ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (not (list_contains (head v) (tail v)))\n                 (list_unique (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_numeric arr))\n(define-fun C2 () Bool (list_unique arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                0.0,
                "A",
                0.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                0,
                "A",
                0.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                21595,
                false,
                21595.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                40284,
                [],
                40284.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                77841,
                [
                  4.0,
                  7.0
                ],
                77841.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n(define-fun value_eq ((v1 Value) (v2 Value)) Bool\n  (or (and (is-IntVal v1) (is-IntVal v2)\n           (= (ival v1) (ival v2)))\n      (and (is-FloatVal v1) (is-FloatVal v2)\n           (= (fval v1) (fval v2)))\n      (and (is-IntVal v1) (is-FloatVal v2)\n           (= (to_real (ival v1)) (fval v2)))\n      (and (is-FloatVal v1) (is-IntVal v2)\n           (= (fval v1) (to_real (ival v2))))))\n\n(define-fun-rec list_contains ((e Value) (v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (ite (value_eq e (head v))\n            true\n            (list_contains e (tail v)))))\n\n(define-fun-rec list_unique ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (not (list_contains (head v) (tail v)))\n                 (list_unique (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_numeric arr))\n(define-fun C2 () Bool (list_unique arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n(define-fun value_eq ((v1 Value) (v2 Value)) Bool\n  (or (and (is-IntVal v1) (is-IntVal v2)\n           (= (ival v1) (ival v2)))\n      (and (is-FloatVal v1) (is-FloatVal v2)\n           (= (fval v1) (fval v2)))\n      (and (is-IntVal v1) (is-FloatVal v2)\n           (= (to_real (ival v1)) (fval v2)))\n      (and (is-FloatVal v1) (is-IntVal v2)\n           (= (fval v1) (to_real (ival v2))))))\n\n(define-fun-rec list_contains ((e Value) (v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (ite (value_eq e (head v))\n            true\n            (list_contains e (tail v)))))\n\n(define-fun-rec list_unique ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (not (list_contains (head v) (tail v)))\n                 (list_unique (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_numeric arr))\n(define-fun C2 () Bool (list_unique arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                0.0,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                0,
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                1,
                1.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                38144,
                38144.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                68544,
                68544.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n(define-fun value_eq ((v1 Value) (v2 Value)) Bool\n  (or (and (is-IntVal v1) (is-IntVal v2)\n           (= (ival v1) (ival v2)))\n      (and (is-FloatVal v1) (is-FloatVal v2)\n           (= (fval v1) (fval v2)))\n      (and (is-IntVal v1) (is-FloatVal v2)\n           (= (to_real (ival v1)) (fval v2)))\n      (and (is-FloatVal v1) (is-IntVal v2)\n           (= (fval v1) (to_real (ival v2))))))\n\n(define-fun-rec list_contains ((e Value) (v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (ite (value_eq e (head v))\n            true\n            (list_contains e (tail v)))))\n\n(define-fun-rec list_unique ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (not (list_contains (head v) (tail v)))\n                 (list_unique (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_numeric arr))\n(define-fun C2 () Bool (list_unique arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n(define-fun value_eq ((v1 Value) (v2 Value)) Bool\n  (or (and (is-IntVal v1) (is-IntVal v2)\n           (= (ival v1) (ival v2)))\n      (and (is-FloatVal v1) (is-FloatVal v2)\n           (= (fval v1) (fval v2)))\n      (and (is-IntVal v1) (is-FloatVal v2)\n           (= (to_real (ival v1)) (fval v2)))\n      (and (is-FloatVal v1) (is-IntVal v2)\n           (= (fval v1) (to_real (ival v2))))))\n\n(define-fun-rec list_contains ((e Value) (v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (ite (value_eq e (head v))\n            true\n            (list_contains e (tail v)))))\n\n(define-fun-rec list_unique ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (not (list_contains (head v) (tail v)))\n                 (list_unique (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_numeric arr))\n(define-fun C2 () Bool (list_unique arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": [
                "A"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                ""
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                false
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                true
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                []
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n(define-fun value_eq ((v1 Value) (v2 Value)) Bool\n  (or (and (is-IntVal v1) (is-IntVal v2)\n           (= (ival v1) (ival v2)))\n      (and (is-FloatVal v1) (is-FloatVal v2)\n           (= (fval v1) (fval v2)))\n      (and (is-IntVal v1) (is-FloatVal v2)\n           (= (to_real (ival v1)) (fval v2)))\n      (and (is-FloatVal v1) (is-IntVal v2)\n           (= (fval v1) (to_real (ival v2))))))\n\n(define-fun-rec list_contains ((e Value) (v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (ite (value_eq e (head v))\n            true\n            (list_contains e (tail v)))))\n\n(define-fun-rec list_unique ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (not (list_contains (head v) (tail v)))\n                 (list_unique (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_numeric arr))\n(define-fun C2 () Bool (list_unique arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n(define-fun value_eq ((v1 Value) (v2 Value)) Bool\n  (or (and (is-IntVal v1) (is-IntVal v2)\n           (= (ival v1) (ival v2)))\n      (and (is-FloatVal v1) (is-FloatVal v2)\n           (= (fval v1) (fval v2)))\n      (and (is-IntVal v1) (is-FloatVal v2)\n           (= (to_real (ival v1)) (fval v2)))\n      (and (is-FloatVal v1) (is-IntVal v2)\n           (= (fval v1) (to_real (ival v2))))))\n\n(define-fun-rec list_contains ((e Value) (v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (ite (value_eq e (head v))\n            true\n            (list_contains e (tail v)))))\n\n(define-fun-rec list_unique ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (not (list_contains (head v) (tail v)))\n                 (list_unique (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_numeric arr))\n(define-fun C2 () Bool (list_unique arr))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "arr": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "arr": [
                0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "arr": [
                -1
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "arr": [
                0.5
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "arr": [
                0.25
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_numeric ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (or (is-IntVal (head v)) (is-FloatVal (head v)))\n                 (list_all_numeric (tail v)))\n            false)))\n\n(define-fun value_eq ((v1 Value) (v2 Value)) Bool\n  (or (and (is-IntVal v1) (is-IntVal v2)\n           (= (ival v1) (ival v2)))\n      (and (is-FloatVal v1) (is-FloatVal v2)\n           (= (fval v1) (fval v2)))\n      (and (is-IntVal v1) (is-FloatVal v2)\n           (= (to_real (ival v1)) (fval v2)))\n      (and (is-FloatVal v1) (is-IntVal v2)\n           (= (fval v1) (to_real (ival v2))))))\n\n(define-fun-rec list_contains ((e Value) (v Value)) Bool\n  (ite (is-Nil v)\n       false\n       (ite (value_eq e (head v))\n            true\n            (list_contains e (tail v)))))\n\n(define-fun-rec list_unique ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (not (list_contains (head v) (tail v)))\n                 (list_unique (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const arr Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList arr))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList arr))\n(define-fun C1 () Bool (list_all_numeric arr))\n(define-fun C2 () Bool (list_unique arr))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/136": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is-list ((v Value)) Bool\n  (or (is-Nil v)\n      (is-Cons v)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((h (head l))\n                  (t (tail l)))\n              (and (is-IntVal h)\n                   (list_all_int t)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-list lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-list lst))\n(define-fun C1 () Bool\n  (list_all_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                3.0,
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                5.0,
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                6.0,
                7.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                9.0,
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                10.0,
                11.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is-list ((v Value)) Bool\n  (or (is-Nil v)\n      (is-Cons v)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((h (head l))\n                  (t (tail l)))\n              (and (is-IntVal h)\n                   (list_all_int t)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-list lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-list lst))\n(define-fun C1 () Bool\n  (list_all_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is-list ((v Value)) Bool\n  (or (is-Nil v)\n      (is-Cons v)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((h (head l))\n                  (t (tail l)))\n              (and (is-IntVal h)\n                   (list_all_int t)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-list lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-list lst))\n(define-fun C1 () Bool\n  (list_all_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun is-list ((v Value)) Bool\n  (or (is-Nil v)\n      (is-Cons v)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((h (head l))\n                  (t (tail l)))\n              (and (is-IntVal h)\n                   (list_all_int t)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-list lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-list lst))\n(define-fun C1 () Bool\n  (list_all_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/137": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": false,
              "a": false
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": true,
              "a": true
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": [],
              "a": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": [
                2.0,
                4.0
              ],
              "a": [
                5.0,
                3.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": [
                9.0,
                6.0
              ],
              "a": [
                7.0,
                8.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (or (is-IntVal a) (is-FloatVal a) (is-StrVal a)))\n(define-fun C1 () Bool (or (is-IntVal b) (is-FloatVal b) (is-StrVal b)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": false,
              "a": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": true,
              "a": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": [],
              "a": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": [
                3.0,
                2.0
              ],
              "a": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": [
                5.0,
                4.0
              ],
              "a": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (or (is-IntVal a) (is-FloatVal a) (is-StrVal a)))\n(define-fun C1 () Bool (or (is-IntVal b) (is-FloatVal b) (is-StrVal b)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "!0!",
              "a": false
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": "!",
              "a": true
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": "0",
              "a": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": "0!",
              "a": [
                2.0,
                3.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": "",
              "a": [
                5.0,
                4.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (or (is-IntVal a) (is-FloatVal a) (is-StrVal a)))\n(define-fun C1 () Bool (or (is-IntVal b) (is-FloatVal b) (is-StrVal b)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "!0!",
              "a": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": "!",
              "a": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": "0",
              "a": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": "0!",
              "a": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": "",
              "a": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (or (is-IntVal a) (is-FloatVal a) (is-StrVal a)))\n(define-fun C1 () Bool (or (is-IntVal b) (is-FloatVal b) (is-StrVal b)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/138": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeIval ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-IntVal n))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeIval ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-IntVal n))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/139": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (ite (is-IntVal n) (> (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (ite (is-IntVal n) (> (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (ite (is-IntVal n) (> (ival n) 0) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (ite (is-IntVal n) (> (ival n) 0) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/140": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "text": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "text": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "text": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "text": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "text": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const text Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal text))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "text": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "text": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "text": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "text": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "text": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const text Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal text))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/141": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const file_name Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal file_name))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal file_name))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "file_name": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "file_name": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "file_name": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "file_name": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "file_name": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const file_name Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal file_name))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal file_name))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/142": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_int lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/143": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "sentence": "\\u{1005b}"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "sentence": "\\u{1000b}"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "sentence": "\\u{160}"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "sentence": "|"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "sentence": "\\u{107c}"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "sentence": ""
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "sentence": "D"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "sentence": "X"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "sentence": "P"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "sentence": "H"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "sentence": "L"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStrLen ((s Value)) Int\n  (ite (is-StrVal s) (str.len (sval s)) 0))\n\n(define-fun-rec is_prime ((n Int)) Bool\n  (and (>= n 2)\n       (not (exists ((x Int))\n               (and (>= x 2)\n                    (<= (* x x) n)\n                    (= (mod n x) 0))))))\n\n(define-fun-rec all_alpha_words ((s Value)) Bool\n  (ite (not (is-StrVal s))\n       false\n       (let ((str (sval s)))\n         (ite (str.contains str \" \")\n              (let ((idx (str.indexof str \" \" 0)))\n                (let ((headVal (StrVal (str.substr str 0 idx)))\n                      (tailVal (StrVal (str.substr str (+ idx 1)\n                                           (- (str.len str) (+ idx 1))))))\n                  (and (all_alpha_words headVal)\n                       (all_alpha_words tailVal))))\n              (str.in.re str\n                         (re.* (re.union\n                                  (re.range \"A\" \"Z\")\n                                  (re.range \"a\" \"z\"))))))))\n\n; === Inputs ===\n(declare-const sentence Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal sentence))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-StrVal sentence))\n(define-fun C1 () Bool\n  (let ((len (ite (is-StrVal sentence)\n                  (str.len (sval sentence))\n                  0)))\n    (and (<= 1 len)\n         (<= len 100))))\n(define-fun C2 () Bool\n  (and (is-StrVal sentence)\n       (not (str.contains (sval sentence) \"  \"))))\n(define-fun C3 () Bool\n  (all_alpha_words sentence))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/144": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": ""
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": "D"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": ":"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": "\\u{1003a}"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": "\\u{803a}"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "x": "/"
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "x": "4/"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "x": "2/"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "x": "6/"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "x": "3/"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "x": "7/"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "x": "4"
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "x": "/4"
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "x": "8/8"
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun DIGIT () (RegEx String) (re.range \"0\" \"9\"))\n(define-fun POSINT () (RegEx String) (re.++ (re.range \"1\" \"9\") (re.* DIGIT)))\n\n; === Inputs ===\n(declare-const x Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal x))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal x))\n(define-fun C1 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (and (>= idx 0) (= (str.indexof svx \"/\" (+ idx 1)) -1))))\n(define-fun C2 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((num (str.substr svx 0 idx)))\n      (and (not (= num \"\")) (str.in.re num POSINT)))))\n(define-fun C3 () Bool\n  (let ((svx (sval x)) (idx (str.indexof (sval x) \"/\" 0)))\n    (let ((den (str.substr svx (+ idx 1) (- (str.len svx) (+ idx 1)))))\n      (and (not (= den \"\")) (str.in.re den POSINT)))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/145": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "nums": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "nums": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "nums": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "nums": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "nums": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_int nums))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "nums": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "nums": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "nums": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "nums": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "nums": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n(define-fun-rec list_all_int ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (and (is-IntVal (head v))\n                 (list_all_int (tail v)))\n            false)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (list_all_int nums))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/146": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((tailVal (tail l)))\n              (IsList tailVal))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((headVal (head l))\n                  (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal)))\n            false)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList nums))\n(define-fun C1 () Bool\n  (list_all_int nums))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "nums": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "nums": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "nums": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "nums": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "nums": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((tailVal (tail l)))\n              (IsList tailVal))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((headVal (head l))\n                  (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal)))\n            false)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList nums))\n(define-fun C1 () Bool\n  (list_all_int nums))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((tailVal (tail l)))\n              (IsList tailVal))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((headVal (head l))\n                  (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal)))\n            false)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList nums))\n(define-fun C1 () Bool\n  (list_all_int nums))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "nums": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "nums": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "nums": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "nums": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "nums": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((tailVal (tail l)))\n              (IsList tailVal))\n            false)))\n\n(define-fun-rec list_all_int ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((headVal (head l))\n                  (tailVal (tail l)))\n              (and (is-IntVal headVal)\n                   (list_all_int tailVal)))\n            false)))\n\n; === Inputs ===\n(declare-const nums Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList nums))\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (IsList nums))\n(define-fun C1 () Bool\n  (list_all_int nums))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/147": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (SafeI n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": -7719
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": -10156
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": -21953
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": -54238
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (SafeI n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (SafeI n) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 10157
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 21954
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 54239
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const n Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-IntVal n))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n(define-fun C1 () Bool (> (SafeI n) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/148": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "planet2": 2.0,
              "planet1": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "planet2": 5.0,
              "planet1": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "planet2": 7.0,
              "planet1": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "planet2": 8.0,
              "planet1": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "planet2": 10.0,
              "planet1": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStr ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const planet1 Value)\n(declare-const planet2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal planet1) (is-StrVal planet2)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "planet2": "!0!",
              "planet1": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "planet2": "0",
              "planet1": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "planet2": "0!",
              "planet1": "0!"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "planet2": "!",
              "planet1": "A"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "planet2": "",
              "planet1": "B"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeStr ((v Value)) String (ite (is-StrVal v) (sval v) \"\"))\n\n; === Inputs ===\n(declare-const planet1 Value)\n(declare-const planet2 Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal planet1) (is-StrVal planet2)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/149": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or\n    (is-Nil l)\n    (and (is-Cons l)\n         (IsList (tail l)))))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((hd (head l))\n                  (tl (tail l)))\n              (and (is-StrVal hd)\n                   (list_all_str tl)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or\n    (is-Nil l)\n    (and (is-Cons l)\n         (IsList (tail l)))))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((hd (head l))\n                  (tl (tail l)))\n              (and (is-StrVal hd)\n                   (list_all_str tl)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or\n    (is-Nil l)\n    (and (is-Cons l)\n         (IsList (tail l)))))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((hd (head l))\n                  (tl (tail l)))\n              (and (is-StrVal hd)\n                   (list_all_str tl)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                "!0!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                "!"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                "0"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                "0!"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (or\n    (is-Nil l)\n    (and (is-Cons l)\n         (IsList (tail l)))))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (let ((hd (head l))\n                  (tl (tail l)))\n              (and (is-StrVal hd)\n                   (list_all_str tl)))\n            false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList lst))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n(define-fun C1 () Bool (list_all_str lst))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/150": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "n": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "n": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "n": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "n": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "n": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const n Value)\n(declare-const x Value)\n(declare-const y Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal n))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/151": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "lst": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "lst": [
                2.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "lst": [
                3.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "lst": [
                4.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "lst": [
                5.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v) true\n    (ite (is-Cons v)\n      (IsList (tail v))\n      false)))\n\n; === Inputs ===\n(declare-const lst Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList lst))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/152": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "guess": [
                5.0,
                3.0
              ],
              "game": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "game": [
                8.0
              ],
              "guess": [
                7.0,
                6.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "game": [
                10.0
              ],
              "guess": [
                9.0,
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "game": [
                11.0
              ],
              "guess": [
                13.0,
                12.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "game": [
                14.0
              ],
              "guess": [
                16.0,
                15.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "guess": [
                2.0
              ],
              "game": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "game": [],
              "guess": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "game": [],
              "guess": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "game": [],
              "guess": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "game": [],
              "guess": [
                7.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "guess": [],
              "game": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "game": [
                4.0
              ],
              "guess": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "game": [
                5.0
              ],
              "guess": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "game": [
                6.0
              ],
              "guess": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "game": [
                7.0
              ],
              "guess": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "guess": [],
              "game": [
                2
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "game": [
                3
              ],
              "guess": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "game": [
                4
              ],
              "guess": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "game": [
                5
              ],
              "guess": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "game": [
                6
              ],
              "guess": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "guess": [
                2.0
              ],
              "game": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "game": [
                6.0
              ],
              "guess": [
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "game": [
                5.0
              ],
              "guess": [
                7.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "game": [
                8.0
              ],
              "guess": [
                9.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "game": [
                11.0
              ],
              "guess": [
                10.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "guess": [
                3.0
              ],
              "game": [
                2
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "game": [
                3
              ],
              "guess": [
                4.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "game": [
                4
              ],
              "guess": [
                5.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "game": [
                5
              ],
              "guess": [
                6.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "game": [
                6
              ],
              "guess": [
                7.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "guess": [
                7
              ],
              "game": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "game": [
                5.0
              ],
              "guess": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "game": [
                4.0
              ],
              "guess": [
                3
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "game": [
                6.0
              ],
              "guess": [
                4
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "game": [
                7.0
              ],
              "guess": [
                5
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "guess": [],
              "game": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "game": [
                3
              ],
              "guess": [
                2
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "game": [
                5
              ],
              "guess": [
                4
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "game": [
                7
              ],
              "guess": [
                6
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "game": [
                9
              ],
              "guess": [
                8
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (IsList (tail v)))))\n(define-fun-rec ListAllInt ((v Value)) Bool (or (is-Nil v) (and (is-Cons v) (is-IntVal (head v)) (ListAllInt (tail v)))))\n(define-fun-rec Length ((v Value)) Int (ite (is-Nil v) 0 (ite (is-Cons v) (+ 1 (Length (tail v))) 0)))\n\n; === Inputs ===\n(declare-const game Value)\n(declare-const guess Value)\n\n; === BASIC STRUCTURE ===\n(assert (and (IsList game) (IsList guess)))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList game) (IsList guess)))\n(define-fun C1 () Bool (ListAllInt game))\n(define-fun C2 () Bool (ListAllInt guess))\n(define-fun C3 () Bool (= (Length game) (Length guess)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/153": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": 2.0,
              "extensions": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": 4.0,
              "class_name": 5.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "extensions": 6.0,
              "class_name": 7.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "extensions": 8.0,
              "class_name": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "class_name": 11.0,
              "extensions": 10.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": "!0!",
              "extensions": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": 3.0,
              "class_name": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "extensions": 4.0,
              "class_name": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "extensions": 5.0,
              "class_name": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "extensions": 6.0,
              "class_name": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": 2.0,
              "extensions": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": [],
              "class_name": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "class_name": 4.0,
              "extensions": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "extensions": [],
              "class_name": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "extensions": [],
              "class_name": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": "!0!",
              "extensions": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": [],
              "class_name": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "extensions": [],
              "class_name": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "class_name": "0!",
              "extensions": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "extensions": [],
              "class_name": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": 4.0,
              "extensions": [
                2.0,
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": [
                6.0,
                7.0
              ],
              "class_name": 5.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "extensions": [
                9.0,
                10.0
              ],
              "class_name": 8.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "extensions": [
                12.0,
                13.0
              ],
              "class_name": 11.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "extensions": [
                15.0,
                16.0
              ],
              "class_name": 14.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": "!0!",
              "extensions": [
                3.0,
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": [
                4.0,
                5.0
              ],
              "class_name": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "extensions": [
                6.0,
                7.0
              ],
              "class_name": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "extensions": [
                8.0,
                9.0
              ],
              "class_name": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "extensions": [
                11.0,
                10.0
              ],
              "class_name": "A"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": 2.0,
              "extensions": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": [
                5.0
              ],
              "class_name": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "extensions": [
                7.0
              ],
              "class_name": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "extensions": [
                8.0
              ],
              "class_name": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "extensions": [
                10.0
              ],
              "class_name": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": "!0!",
              "extensions": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": [
                3.0
              ],
              "class_name": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "extensions": [
                4.0
              ],
              "class_name": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "extensions": [
                5.0
              ],
              "class_name": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "extensions": [
                6.0
              ],
              "class_name": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": 2.0,
              "extensions": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": [
                "!"
              ],
              "class_name": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "extensions": [
                "0"
              ],
              "class_name": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "extensions": [
                "0!"
              ],
              "class_name": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "extensions": [
                "A"
              ],
              "class_name": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "class_name": "!0!",
              "extensions": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "extensions": [
                "0"
              ],
              "class_name": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "extensions": [
                "0!"
              ],
              "class_name": "0!"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "extensions": [
                "!"
              ],
              "class_name": "0"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "extensions": [
                ""
              ],
              "class_name": "A"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((v Value)) Bool\n  (ite (is-Nil v)\n       true\n       (ite (is-Cons v)\n            (IsList (tail v))\n            false)))\n\n(define-fun-rec list_all_str ((lst Value)) Bool\n  (ite (is-Nil lst)\n       true\n       (ite (is-Cons lst)\n            (and (is-StrVal (head lst))\n                 (list_all_str (tail lst)))\n            false)))\n\n; === Inputs ===\n(declare-const class_name Value)\n(declare-const extensions Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal class_name))\n(define-fun C1 () Bool (IsList extensions))\n(define-fun C2 () Bool (list_all_str extensions))\n(define-fun C3 () Bool (is-Cons extensions))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/154": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 2.0,
              "a": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 5.0,
              "a": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 7.0,
              "a": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 8.0,
              "a": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 10.0,
              "a": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "!0!",
              "a": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": "0",
              "a": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": "0!",
              "a": "0!"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": "!",
              "a": ""
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": "A",
              "a": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-StrVal a) (is-StrVal b)))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/155": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "num": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "num": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "num": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "num": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "num": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const num Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal num))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "num": 2
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "num": 3
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "num": 4
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "num": 5
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "num": 6
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const num Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-IntVal num))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/156": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "number": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "number": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "number": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "number": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "number": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-ival ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-IntVal number))\n(define-fun C1 () Bool\n  (and (<= 1 (safe-ival number))\n       (<= (safe-ival number) 1000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "number": 1001
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "number": 0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "number": -2437
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "number": -10802
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "number": -41414
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-ival ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-IntVal number))\n(define-fun C1 () Bool\n  (and (<= 1 (safe-ival number))\n       (<= (safe-ival number) 1000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-ival ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-IntVal number))\n(define-fun C1 () Bool\n  (and (<= 1 (safe-ival number))\n       (<= (safe-ival number) 1000)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "number": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "number": 720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "number": 438
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "number": 798
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "number": 286
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun safe-ival ((v Value)) Int\n  (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool\n  (is-IntVal number))\n(define-fun C1 () Bool\n  (and (<= 1 (safe-ival number))\n       (<= (safe-ival number) 1000)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/157": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "!0!",
              "c": 0,
              "a": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "c": -1,
              "b": 0,
              "a": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "c": -28101,
              "b": 5853,
              "a": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "c": -28101,
              "b": 21774,
              "a": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "c": -28101,
              "b": 21774,
              "a": "!0!"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun getNum ((v Value)) Real (ite (is-IntVal v) (to_real (ival v)) (fval v)))\n(define-fun square ((x Real)) Real (* x x))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n(declare-const c Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (or (is-IntVal a) (is-FloatVal a)) (or (is-IntVal b) (is-FloatVal b)) (or (is-IntVal c) (is-FloatVal c))))\n(define-fun C1 () Bool (let ((na (getNum a)) (nb (getNum b)) (nc (getNum c))) (and (> na 0.0) (> nb 0.0) (> nc 0.0))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 0,
              "c": 0,
              "a": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "c": 28100,
              "b": 1,
              "a": -1
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "c": 28100,
              "b": -26286,
              "a": -1
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "c": 28100,
              "b": -26286,
              "a": -2
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "c": 30546,
              "b": -26286,
              "a": -2
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun getNum ((v Value)) Real (ite (is-IntVal v) (to_real (ival v)) (fval v)))\n(define-fun square ((x Real)) Real (* x x))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n(declare-const c Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (or (is-IntVal a) (is-FloatVal a)) (or (is-IntVal b) (is-FloatVal b)) (or (is-IntVal c) (is-FloatVal c))))\n(define-fun C1 () Bool (let ((na (getNum a)) (nb (getNum b)) (nc (getNum c))) (and (> na 0.0) (> nb 0.0) (> nc 0.0))))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": "!0!",
              "c": 282,
              "a": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "c": 20538,
              "b": 282,
              "a": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "c": 41514,
              "b": "0",
              "a": "0!"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "c": 41514,
              "b": "!",
              "a": "!0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "c": 41514,
              "b": false,
              "a": "0"
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun getNum ((v Value)) Real (ite (is-IntVal v) (to_real (ival v)) (fval v)))\n(define-fun square ((x Real)) Real (* x x))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n(declare-const c Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (or (is-IntVal a) (is-FloatVal a)) (or (is-IntVal b) (is-FloatVal b)) (or (is-IntVal c) (is-FloatVal c))))\n(define-fun C1 () Bool (let ((na (getNum a)) (nb (getNum b)) (nc (getNum c))) (and (> na 0.0) (> nb 0.0) (> nc 0.0))))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 20977,
              "c": 31892,
              "a": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "c": 31892,
              "b": 20976,
              "a": 1
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "c": 31892,
              "b": 18588,
              "a": 1.5
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "c": 31891,
              "b": 18588,
              "a": 1.25
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "c": 31893,
              "b": 18588,
              "a": 1.125
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun getNum ((v Value)) Real (ite (is-IntVal v) (to_real (ival v)) (fval v)))\n(define-fun square ((x Real)) Real (* x x))\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n(declare-const c Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (or (is-IntVal a) (is-FloatVal a)) (or (is-IntVal b) (is-FloatVal b)) (or (is-IntVal c) (is-FloatVal c))))\n(define-fun C1 () Bool (let ((na (getNum a)) (nb (getNum b)) (nc (getNum c))) (and (> na 0.0) (> nb 0.0) (> nc 0.0))))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/158": {
      "satisfied_, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-StrVal (head l))\n                 (list_all_str (tail l)))\n            false)))\n\n(define-fun-rec list_length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (list_length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const words Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList words))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList words))\n(define-fun C1 () Bool (list_all_str words))\n(define-fun C2 () Bool (> (list_length words) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-StrVal (head l))\n                 (list_all_str (tail l)))\n            false)))\n\n(define-fun-rec list_length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (list_length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const words Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList words))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList words))\n(define-fun C1 () Bool (list_all_str words))\n(define-fun C2 () Bool (> (list_length words) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-StrVal (head l))\n                 (list_all_str (tail l)))\n            false)))\n\n(define-fun-rec list_length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (list_length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const words Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList words))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList words))\n(define-fun C1 () Bool (list_all_str words))\n(define-fun C2 () Bool (> (list_length words) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false
        },
        "is_satisfiable": true,
        "solution_count": 1,
        "solutions": [
          {
            "test_case": {
              "words": []
            },
            "solution_id": 1
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-StrVal (head l))\n                 (list_all_str (tail l)))\n            false)))\n\n(define-fun-rec list_length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (list_length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const words Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList words))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList words))\n(define-fun C1 () Bool (list_all_str words))\n(define-fun C2 () Bool (> (list_length words) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-StrVal (head l))\n                 (list_all_str (tail l)))\n            false)))\n\n(define-fun-rec list_length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (list_length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const words Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList words))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList words))\n(define-fun C1 () Bool (list_all_str words))\n(define-fun C2 () Bool (> (list_length words) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "words": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "words": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "words": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "words": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "words": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-StrVal (head l))\n                 (list_all_str (tail l)))\n            false)))\n\n(define-fun-rec list_length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (list_length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const words Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList words))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList words))\n(define-fun C1 () Bool (list_all_str words))\n(define-fun C2 () Bool (> (list_length words) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-StrVal (head l))\n                 (list_all_str (tail l)))\n            false)))\n\n(define-fun-rec list_length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (list_length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const words Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList words))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList words))\n(define-fun C1 () Bool (list_all_str words))\n(define-fun C2 () Bool (> (list_length words) 0))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "words": [
                "!0!"
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "words": [
                "!"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "words": [
                "0"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "words": [
                "0!"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "words": [
                ""
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [],
          "total_contracts": 3
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (IsList (tail l))\n            false)))\n\n(define-fun-rec list_all_str ((l Value)) Bool\n  (ite (is-Nil l)\n       true\n       (ite (is-Cons l)\n            (and (is-StrVal (head l))\n                 (list_all_str (tail l)))\n            false)))\n\n(define-fun-rec list_length ((l Value)) Int\n  (ite (is-Nil l)\n       0\n       (ite (is-Cons l)\n            (+ 1 (list_length (tail l)))\n            0)))\n\n; === Inputs ===\n(declare-const words Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList words))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (IsList words))\n(define-fun C1 () Bool (list_all_str words))\n(define-fun C2 () Bool (> (list_length words) 0))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/159": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 4.0,
              "remaining": 3.0,
              "number": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 5.0,
              "number": 6.0,
              "remaining": 7.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 9.0,
              "number": 8.0,
              "remaining": 10.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 12.0,
              "number": 13.0,
              "remaining": 11.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 14.0,
              "number": 16.0,
              "remaining": 15.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 9856,
              "remaining": -1,
              "number": 1001
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 12798,
              "number": -1,
              "remaining": 9856
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 12798,
              "number": -1,
              "remaining": 15709
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 12798,
              "number": -1,
              "remaining": 31630
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 12798,
              "number": -1,
              "remaining": 52606
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 2.0,
              "remaining": 3.0,
              "number": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 5.0,
              "number": 435,
              "remaining": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 6.0,
              "number": 435,
              "remaining": 7.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 8.0,
              "number": 435,
              "remaining": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 10.0,
              "number": 435,
              "remaining": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 1001,
              "remaining": 3438,
              "number": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 1001,
              "number": 435,
              "remaining": -1
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 1001,
              "number": 435,
              "remaining": -32286
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 29101,
              "number": 435,
              "remaining": -32286
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 45022,
              "number": 435,
              "remaining": -32286
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 0,
              "remaining": 3.0,
              "number": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 435,
              "number": 5.0,
              "remaining": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 435,
              "number": 6.0,
              "remaining": 7.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 435,
              "number": 8.0,
              "remaining": 9.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 435,
              "number": 10.0,
              "remaining": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 0,
              "remaining": 3438,
              "number": 1001
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 435,
              "number": -1,
              "remaining": 1001
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 435,
              "number": -1,
              "remaining": 33286
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 435,
              "number": -1,
              "remaining": 61386
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 435,
              "number": -1,
              "remaining": 77307
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 712,
              "remaining": 2.0,
              "number": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 217,
              "number": 712,
              "remaining": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 217,
              "number": 847,
              "remaining": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 217,
              "number": 847,
              "remaining": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 217,
              "number": 847,
              "remaining": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 217,
              "remaining": -1,
              "number": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 435,
              "number": 217,
              "remaining": 1001
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 435,
              "number": 217,
              "remaining": 33286
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 435,
              "number": 217,
              "remaining": 39139
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 435,
              "number": 281,
              "remaining": 59676
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 2.0,
              "remaining": 0,
              "number": 3.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 4.0,
              "number": 5.0,
              "remaining": 435
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 7.0,
              "number": 6.0,
              "remaining": 357
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 8.0,
              "number": 9.0,
              "remaining": 440
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 11.0,
              "number": 10.0,
              "remaining": 72
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 1001,
              "remaining": 0,
              "number": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": -2438,
              "number": -1,
              "remaining": 847
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": -2438,
              "number": -1,
              "remaining": 440
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": -2438,
              "number": -1,
              "remaining": 141
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": -2438,
              "number": -8946,
              "remaining": 141
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 2.0,
              "remaining": 712,
              "number": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 3.0,
              "number": 712,
              "remaining": 217
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 4.0,
              "number": 712,
              "remaining": 847
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 5.0,
              "number": 357,
              "remaining": 253
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 6.0,
              "number": 357,
              "remaining": 582
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": -1,
              "remaining": 217,
              "number": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 1001,
              "number": 217,
              "remaining": 435
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 1001,
              "number": 217,
              "remaining": 357
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 1001,
              "number": 217,
              "remaining": 582
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 1001,
              "number": 141,
              "remaining": 281
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 0,
              "remaining": 712,
              "number": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 712,
              "number": 3.0,
              "remaining": 217
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 712,
              "number": 4.0,
              "remaining": 847
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 712,
              "number": 5.0,
              "remaining": 357
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 440,
              "number": 6.0,
              "remaining": 582
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 0,
              "remaining": 217,
              "number": -1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 217,
              "number": 1001,
              "remaining": 435
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 217,
              "number": 1001,
              "remaining": 357
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 217,
              "number": 1001,
              "remaining": 582
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 141,
              "number": 1001,
              "remaining": 281
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "need": 712,
              "remaining": 217,
              "number": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "need": 217,
              "number": 712,
              "remaining": 435
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "need": 217,
              "number": 712,
              "remaining": 253
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "need": 582,
              "number": 712,
              "remaining": 848
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "need": 582,
              "number": 141,
              "remaining": 281
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [],
          "total_contracts": 4
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun SafeI ((v Value)) Int (ite (is-IntVal v) (ival v) 0))\n\n; === Inputs ===\n(declare-const number Value)\n(declare-const need Value)\n(declare-const remaining Value)\n\n; === BASIC STRUCTURE ===\n(assert true)\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal number) (is-IntVal need) (is-IntVal remaining)))\n(define-fun C1 () Bool (ite (is-IntVal number) (and (<= 0 (ival number)) (<= (ival number) 1000)) false))\n(define-fun C2 () Bool (ite (is-IntVal need) (and (<= 0 (ival need)) (<= (ival need) 1000)) false))\n(define-fun C3 () Bool (ite (is-IntVal remaining) (and (<= 0 (ival remaining)) (<= (ival remaining) 1000)) false))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/160": {
      "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                2.0,
                "//"
              ],
              "operand": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                4.0
              ],
              "operator": [
                5.0,
                "//"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                6.0
              ],
              "operator": [
                8.0,
                "//"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operator": [
                7.0,
                "//"
              ],
              "operand": [
                10.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                12.0
              ],
              "operator": [
                9.0,
                "//"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "//",
                3.0
              ],
              "operand": [
                2.0,
                0,
                4.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                7.0,
                0,
                5.0
              ],
              "operator": [
                "//",
                6.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                10.0,
                0,
                8.0
              ],
              "operator": [
                "//",
                9.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                13.0,
                0,
                11.0
              ],
              "operator": [
                "//",
                12.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                16.0,
                0,
                14.0
              ],
              "operator": [
                "//",
                15.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "violated_contracts": [
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                4.0,
                "//"
              ],
              "operand": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [],
              "operator": [
                3.0,
                "//"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [],
              "operator": [
                5.0,
                "//"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [],
              "operator": [
                2.0,
                "//"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [],
              "operator": [
                6.0,
                "//"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false,
          "assert_5": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "//",
                2.0
              ],
              "operand": [
                2240,
                0,
                867
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                2240,
                0,
                9725
              ],
              "operator": [
                "//",
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                20127,
                0,
                31597
              ],
              "operator": [
                "//",
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                44515,
                0,
                11649
              ],
              "operator": [
                "//",
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                68852,
                0,
                27856
              ],
              "operator": [
                "//",
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "violated_contracts": [
            "assert_4",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "//",
                "//"
              ],
              "operand": [
                3.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                2.0
              ],
              "operator": [
                "*",
                "//"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                4.0
              ],
              "operator": [
                "*",
                "//"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                5.0
              ],
              "operator": [
                "*",
                "//"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                6.0
              ],
              "operator": [
                "*",
                "//"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "//"
              ],
              "operand": [
                2.0,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                3.0,
                0
              ],
              "operator": [
                "//"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operator": [
                "//"
              ],
              "operand": [
                4.0,
                0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                5.0,
                0
              ],
              "operator": [
                "//"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operator": [
                "//"
              ],
              "operand": [
                6.0,
                0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_3",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "//"
              ],
              "operand": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                18457
              ],
              "operator": [
                "//",
                "//"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operator": [
                "//",
                "//"
              ],
              "operand": [
                18587
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                6878
              ],
              "operator": [
                "//",
                "//"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                17066
              ],
              "operator": [
                "//",
                "//"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true,
          "assert_5": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "//"
              ],
              "operand": [
                5853,
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                5854,
                0
              ],
              "operator": [
                "//"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                5852,
                0
              ],
              "operator": [
                "//"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                2494,
                0
              ],
              "operator": [
                "//"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                3013,
                0
              ],
              "operator": [
                "//"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "violated_contracts": [
            "assert_5"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert (not C5))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                3.0
              ],
              "operand": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                4.0
              ],
              "operator": [
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                7.0
              ],
              "operator": [
                6.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                9.0
              ],
              "operator": [
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                11.0
              ],
              "operator": [
                10.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                3.0
              ],
              "operand": [
                4.0,
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                7.0,
                6.0
              ],
              "operator": [
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                8.0,
                10.0
              ],
              "operator": [
                9.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                11.0,
                12.0
              ],
              "operator": [
                13.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                16.0,
                14.0
              ],
              "operator": [
                15.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_3",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                2.0
              ],
              "operand": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [],
              "operator": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [],
              "operator": [
                5.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operator": [
                7.0
              ],
              "operand": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [],
              "operator": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": false,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                2.0
              ],
              "operand": [
                0,
                1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                1142,
                282
              ],
              "operator": [
                3.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                30023,
                2522
              ],
              "operator": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                30863,
                21109
              ],
              "operator": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                60396,
                27987
              ],
              "operator": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_4"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert (not C4))\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [],
              "operand": [
                3.0,
                4.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operator": [],
              "operand": [
                2.0,
                5.0
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                6.0,
                7.0
              ],
              "operator": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operator": [],
              "operand": [
                9.0,
                8.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                11.0,
                10.0
              ],
              "operator": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": false,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "**"
              ],
              "operand": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                3.0
              ],
              "operator": [
                "**"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                4.0
              ],
              "operator": [
                "**"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operator": [
                "**"
              ],
              "operand": [
                5.0
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                6.0
              ],
              "operator": [
                "**"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_2",
            "assert_3"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert (not C3))\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [],
              "operand": [
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                3.0
              ],
              "operator": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operator": [],
              "operand": [
                4.0
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                5.0
              ],
              "operator": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operator": [],
              "operand": [
                6.0
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_3"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_3"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": false,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "-"
              ],
              "operand": [
                3.0,
                2.0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                5.0,
                4.0
              ],
              "operator": [
                "-"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                6.0,
                7.0
              ],
              "operator": [
                "-"
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                8.0,
                9.0
              ],
              "operator": [
                "-"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                11.0,
                10.0
              ],
              "operator": [
                "-"
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_3"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert (not C3))\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [],
              "operand": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                0,
                2240
              ],
              "operator": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                21237,
                23611
              ],
              "operator": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                20584,
                12212
              ],
              "operator": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                24388,
                11649
              ],
              "operator": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_1",
            "assert_2"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_2"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": false,
          "assert_3": true,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "+"
              ],
              "operand": []
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [],
              "operator": [
                "*"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operator": [
                "**"
              ],
              "operand": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [],
              "operator": [
                "-"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operator": [
                "//"
              ],
              "operand": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_2"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert (not C2))\n(assert C3)\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_2",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [],
              "operand": [
                0
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                18457
              ],
              "operator": []
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operand": [
                2446
              ],
              "operator": []
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                21237
              ],
              "operator": []
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operand": [
                6878
              ],
              "operator": []
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_2",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true,
          "assert_2": true,
          "assert_3": true,
          "assert_4": true,
          "assert_5": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "operator": [
                "*"
              ],
              "operand": [
                0,
                1
              ]
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "operand": [
                5853,
                28101
              ],
              "operator": [
                "//"
              ]
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "operator": [
                "+"
              ],
              "operand": [
                14798,
                54386
              ]
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "operand": [
                36453,
                80292
              ],
              "operator": [
                "**"
              ]
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "operator": [
                "*"
              ],
              "operand": [
                46178,
                112570
              ]
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1",
            "assert_2",
            "assert_3",
            "assert_4",
            "assert_5"
          ],
          "violated_contracts": [],
          "total_contracts": 6
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n(define-fun-rec IsList ((lst Value)) Bool\n  (or (is-Nil lst)\n      (and (is-Cons lst)\n           (let ((tailVal (tail lst)))\n             (IsList tailVal)))))\n\n(define-fun-rec ListLength ((lst Value)) Int\n  (ite (is-Nil lst) 0\n       (ite (is-Cons lst)\n            (+ 1 (ListLength (tail lst)))\n            0)))\n\n(define-fun-rec ListAllIntNonNeg ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-IntVal headVal)\n                        (>= (ival headVal) 0)))\n                 (ListAllIntNonNeg (tail lst)))\n            true\n            false)))\n\n(define-fun-rec ListAllOp ((lst Value)) Bool\n  (ite (is-Nil lst) true\n       (ite (and (is-Cons lst)\n                 (let ((headVal (head lst)))\n                   (and (is-StrVal headVal)\n                        (or (= (sval headVal) \"+\")\n                            (= (sval headVal) \"-\")\n                            (= (sval headVal) \"*\")\n                            (= (sval headVal) \"//\")\n                            (= (sval headVal) \"**\"))))\n                 (ListAllOp (tail lst)))\n            true\n            false)))\n\n(define-fun-rec SafeDivs ((ops Value) (opnds Value)) Bool\n  (ite (is-Cons ops)\n       (let ((opHead (head ops))\n             (opsTail (tail ops))\n             (opndsTail (tail opnds)))\n         (let ((nextOpnd (ite (is-Cons opndsTail)\n                              (head opndsTail)\n                              opndsTail)))\n           (and (ite (is-StrVal opHead)\n                     (ite (= (sval opHead) \"//\")\n                          (not (and (is-IntVal nextOpnd)\n                                    (= (ival nextOpnd) 0)))\n                          true)\n                     true)\n                (SafeDivs opsTail opndsTail))))\n       true))\n\n; === Inputs ===\n(declare-const operator Value)\n(declare-const operand Value)\n\n; === BASIC STRUCTURE ===\n(assert (IsList operator))\n(assert (IsList operand))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (IsList operator) (IsList operand)))\n(define-fun C1 () Bool (>= (ListLength operator) 1))\n(define-fun C2 () Bool (= (ListLength operand) (+ (ListLength operator) 1)))\n(define-fun C3 () Bool (ListAllIntNonNeg operand))\n(define-fun C4 () Bool (ListAllOp operator))\n(define-fun C5 () Bool (SafeDivs operator operand))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n(assert C2)\n(assert C3)\n(assert C4)\n(assert C5)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/161": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "s": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "s": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "s": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "s": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "s": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const s Value)\n\n; === BASIC STRUCTURE ===\n(assert (is-StrVal s))\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal s))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/162": {
      "satisfied_, violated_assert_0": {
        "combination": {
          "assert_0": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "text": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "text": 3.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "text": 4.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "text": 5.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "text": 6.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const text Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal text))\n\n; === COMBINATION ===\n(assert (not C0))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_": {
        "combination": {
          "assert_0": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "text": "!0!"
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "text": "!"
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "text": "0"
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "text": "0!"
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "text": ""
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [],
          "total_contracts": 1
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const text Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (is-StrVal text))\n\n; === COMBINATION ===\n(assert C0)\n\n(check-sat)\n(get-model)\n"
      }
    },
    "HumanEval/163": {
      "satisfied_, violated_assert_0;assert_1": {
        "combination": {
          "assert_0": false,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 3.0,
              "a": 2.0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 5.0,
              "a": 4.0
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 7.0,
              "a": 6.0
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 9.0,
              "a": 8.0
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 10.0,
              "a": 11.0
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [],
          "violated_contracts": [
            "assert_0",
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n(define-fun C1 () Bool (and (is-IntVal a) (is-IntVal b) (> (ite (is-IntVal a) (ival a) 0) 0) (> (ite (is-IntVal b) (ival b) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0, violated_assert_1": {
        "combination": {
          "assert_0": true,
          "assert_1": false
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 21238,
              "a": 0
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 2437,
              "a": -21238
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 2437,
              "a": -29603
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 2437,
              "a": -60215
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 2437,
              "a": -61357
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0"
          ],
          "violated_contracts": [
            "assert_1"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n(define-fun C1 () Bool (and (is-IntVal a) (is-IntVal b) (> (ite (is-IntVal a) (ival a) 0) 0) (> (ite (is-IntVal b) (ival b) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert (not C1))\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_1, violated_assert_0": {
        "combination": {
          "assert_0": false,
          "assert_1": true
        },
        "is_satisfiable": false,
        "solution_count": 0,
        "solutions": [],
        "metadata": {
          "satisfied_contracts": [
            "assert_1"
          ],
          "violated_contracts": [
            "assert_0"
          ],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n(define-fun C1 () Bool (and (is-IntVal a) (is-IntVal b) (> (ite (is-IntVal a) (ival a) 0) 0) (> (ite (is-IntVal b) (ival b) 0) 0)))\n\n; === COMBINATION ===\n(assert (not C0))\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      },
      "satisfied_assert_0;assert_1, violated_": {
        "combination": {
          "assert_0": true,
          "assert_1": true
        },
        "is_satisfiable": true,
        "solution_count": 5,
        "solutions": [
          {
            "test_case": {
              "b": 7720,
              "a": 1
            },
            "solution_id": 1
          },
          {
            "test_case": {
              "b": 21239,
              "a": 7720
            },
            "solution_id": 2
          },
          {
            "test_case": {
              "b": 21239,
              "a": 16575
            },
            "solution_id": 3
          },
          {
            "test_case": {
              "b": 21239,
              "a": 24940
            },
            "solution_id": 4
          },
          {
            "test_case": {
              "b": 31689,
              "a": 24940
            },
            "solution_id": 5
          }
        ],
        "metadata": {
          "satisfied_contracts": [
            "assert_0",
            "assert_1"
          ],
          "violated_contracts": [],
          "total_contracts": 2
        },
        "smt_script": "\n(set-logic ALL)\n\n; ==== CANONICAL PYTHON-LIKE ADT (DO NOT MODIFY) ====\n(declare-datatypes ((Value 0)) (\n  ((IntVal (ival Int))\n   (FloatVal (fval Real))\n   (StrVal (sval String))\n   (BoolVal (bval Bool))\n   (Nil)\n   (Cons (head Value) (tail Value)))\n))\n\n; === ADD HELPER FUNCTIONS HERE ===\n\n\n; === Inputs ===\n(declare-const a Value)\n(declare-const b Value)\n\n; === BASIC STRUCTURE ===\n\n\n; === Contract predicates ===\n(define-fun C0 () Bool (and (is-IntVal a) (is-IntVal b)))\n(define-fun C1 () Bool (and (is-IntVal a) (is-IntVal b) (> (ite (is-IntVal a) (ival a) 0) 0) (> (ite (is-IntVal b) (ival b) 0) 0)))\n\n; === COMBINATION ===\n(assert C0)\n(assert C1)\n\n(check-sat)\n(get-model)\n"
      }
    }
  }
}