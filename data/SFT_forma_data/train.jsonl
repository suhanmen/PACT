{"name": "1003_B. Binary String Constructing", "description": "You are given three integers a, b and x. Your task is to construct a binary string s of length n = a + b such that there are exactly a zeroes, exactly b ones and exactly x indices i (where 1 ≤ i < n) such that s_i ≠ s_{i + 1}. It is guaranteed that the answer always exists.\n\nFor example, for the string \"01010\" there are four indices i such that 1 ≤ i < n and s_i ≠ s_{i + 1} (i = 1, 2, 3, 4). For the string \"111001\" there are two such indices i (i = 3, 5).\n\nRecall that binary string is a non-empty sequence of characters where each character is either 0 or 1.\n\nInput\n\nThe first line of the input contains three integers a, b and x (1 ≤ a, b ≤ 100, 1 ≤ x < a + b).", "grammar": {"productions": ["<S>->a <s> b <s> x"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=x<=(a+b)"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'a', 'b', and 'x', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> x', representing the input format where 'a', 'b', and 'x' are three integers separated by spaces. None of these variables serve as counters, hence they are not enclosed in brackets."}
{"name": "1005_A. Tanya and Stairways", "description": "Little girl Tanya climbs the stairs inside a multi-storey building. Every time Tanya climbs a stairway, she starts counting steps from 1 to the number of steps in this stairway. She speaks every number aloud. For example, if she climbs two stairways, the first of which contains 3 steps, and the second contains 4 steps, she will pronounce the numbers 1, 2, 3, 1, 2, 3, 4.\n\nYou are given all the numbers pronounced by Tanya. How many stairways did she climb? Also, output the number of steps in each stairway.\n\nThe given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways.\n\nInput\n\nThe first line contains n (1 ≤ n ≤ 1000) — the total number of numbers pronounced by Tanya.\n\nThe second line contains integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — all the numbers Tanya pronounced while climbing the stairs, in order from the first to the last pronounced number. Passing a stairway with x steps, she will pronounce the numbers 1, 2, ..., x in that order.\n\nThe given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000", "1<=a_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of numbers pronounced by Tanya, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence of numbers. Each number in the sequence is represented by 'a_i', separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of numbers following the count [n]."}
{"name": "1006_A. Adjacent Replacements", "description": "Mishka got an integer array a of length n as a birthday present (what a surprise!).\n\nMishka doesn't like this present and wants to change it somehow. He has invented an algorithm and called it \"Mishka's Adjacent Replacements Algorithm\". This algorithm can be represented as a sequence of steps:\n\n  * Replace each occurrence of 1 in the array a with 2; \n  * Replace each occurrence of 2 in the array a with 1; \n  * Replace each occurrence of 3 in the array a with 4; \n  * Replace each occurrence of 4 in the array a with 3; \n  * Replace each occurrence of 5 in the array a with 6; \n  * Replace each occurrence of 6 in the array a with 5; \n  * ... \n  * Replace each occurrence of 10^9 - 1 in the array a with 10^9; \n  * Replace each occurrence of 10^9 in the array a with 10^9 - 1. \n\n\n\nNote that the dots in the middle of this algorithm mean that Mishka applies these replacements for each pair of adjacent integers (2i - 1, 2i) for each i ∈\\{1, 2, …, 5 ⋅ 10^8\\} as described above.\n\nFor example, for the array a = [1, 2, 4, 5, 10], the following sequence of arrays represents the algorithm: \n\n[1, 2, 4, 5, 10] → (replace all occurrences of 1 with 2) → [2, 2, 4, 5, 10] → (replace all occurrences of 2 with 1) → [1, 1, 4, 5, 10] → (replace all occurrences of 3 with 4) → [1, 1, 4, 5, 10] → (replace all occurrences of 4 with 3) → [1, 1, 3, 5, 10] → (replace all occurrences of 5 with 6) → [1, 1, 3, 6, 10] → (replace all occurrences of 6 with 5) → [1, 1, 3, 5, 10] → ... → [1, 1, 3, 5, 10] → (replace all occurrences of 10 with 9) → [1, 1, 3, 5, 9]. The later steps of the algorithm do not change the array.\n\nMishka is very lazy and he doesn't want to apply these changes by himself. But he is very interested in their result. Help him find it.\n\nInput\n\nThe first line of the input contains one integer number n (1 ≤ n ≤ 1000) — the number of elements in Mishka's birthday present (surprisingly, an array).\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the array elements, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter-driven rule for [n], representing each array element 'a_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1006_C. Three Parts of the Array", "description": "You are given an array d_1, d_2, ..., d_n consisting of n integer numbers.\n\nYour task is to split this array into three parts (some of which may be empty) in such a way that each element of the array belongs to exactly one of the three parts, and each of the parts forms a consecutive contiguous subsegment (possibly, empty) of the original array. \n\nLet the sum of elements of the first part be sum_1, the sum of elements of the second part be sum_2 and the sum of elements of the third part be sum_3. Among all possible ways to split the array you have to choose a way such that sum_1 = sum_3 and sum_1 is maximum possible.\n\nMore formally, if the first part of the array contains a elements, the second part of the array contains b elements and the third part contains c elements, then:\n\n$$$sum_1 = ∑_{1 ≤ i ≤ a}d_i, sum_2 = ∑_{a + 1 ≤ i ≤ a + b}d_i, sum_3 = ∑_{a + b + 1 ≤ i ≤ a + b + c}d_i.$$$\n\nThe sum of an empty array is 0.\n\nYour task is to find a way to split the array such that sum_1 = sum_3 and sum_1 is maximum possible.\n\nInput\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array d.\n\nThe second line of the input contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^9) — the elements of the array d.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> d_i", "<T_1>->d_1"], "constraints": ["1<=n<=2*10^5", "1<=d_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the array elements, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The non-terminal <T_i> generates each array element 'd_i' separated by a space <s>, decrementing until it reaches <T_1>, which produces 'd_1'. This setup accurately reflects the input format where 'n' specifies the number of elements in the array, followed by the array elements themselves."}
{"name": "1007_E. Mini Metro", "description": "Input\n\nThe first line contains three integers n, t, and k (1 <= n, t <= 200, 1 <= k <= 10^9) --- the number of stations on the line, hours we want to survive, and capacity of each train respectively.\n\nEach of the next n lines contains three integers a_i, b_i, and c_i (0 <= a_i, b_i <= c_i <= 10^9) --- number of people at the i-th station in the beginning of the game, number of people arriving to i-th station in the end of each hour and maximum number of people at the i-th station allowed respectively.", "grammar": {"productions": ["<S>->[n] <s> t <s> k <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["1<=n,t<=200", "1<=k<=10^9", "0<=a_i,b_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: n, t, and k. Among these, 'n' serves as a counter variable for the number of stations, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> t <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each station's details (a_i, b_i, c_i) are separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i' and '<T_1>->a_1 <s> b_1 <s> c_1' to systematically parse the sequence of station details following the count [n]."}
{"name": "1008_D. Pave the Parallelepiped", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^5) --- the number of test cases.\n\nEach of the next t lines contains three integers A, B and C (1 <= A, B, C <= 10^5) --- the sizes of the parallelepiped.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> A <s> B <s> C", "<T_1>->A <s> B <s> C"], "constraints": ["1<=t<=100000", "1<=A,B,C<=100000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of three integers A, B, and C separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> A <s> B <s> C' and '<T_1>->A <s> B <s> C' to systematically parse each test case following the count [t]."}
{"name": "1009_A. Game Shopping", "description": "Maxim wants to buy some games at the local game shop. There are n games in the shop, the i-th game costs c_i.\n\nMaxim has a wallet which can be represented as an array of integers. His wallet contains m bills, the j-th bill has value a_j.\n\nGames in the shop are ordered from left to right, Maxim tries to buy every game in that order.\n\nWhen Maxim stands at the position i in the shop, he takes the first bill from his wallet (if his wallet is empty then he proceeds to the next position immediately) and tries to buy the i-th game using this bill. After Maxim tried to buy the n-th game, he leaves the shop.\n\nMaxim buys the i-th game if and only if the value of the first bill (which he takes) from his wallet is greater or equal to the cost of the i-th game. If he successfully buys the i-th game, the first bill from his wallet disappears and the next bill becomes first. Otherwise Maxim leaves the first bill in his wallet (this bill still remains the first one) and proceeds to the next game.\n\nFor example, for array c = [2, 4, 5, 2, 4] and array a = [5, 3, 4, 6] the following process takes place: Maxim buys the first game using the first bill (its value is 5), the bill disappears, after that the second bill (with value 3) becomes the first one in Maxim's wallet, then Maxim doesn't buy the second game because c_2 > a_2, the same with the third game, then he buys the fourth game using the bill of value a_2 (the third bill becomes the first one in Maxim's wallet) and buys the fifth game using the bill of value a_3.\n\nYour task is to get the number of games Maxim will buy.\n\nInput\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of games and the number of bills in Maxim's wallet.\n\nThe second line of the input contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 1000), where c_i is the cost of the i-th game.\n\nThe third line of the input contains m integers a_1, a_2, ..., a_m (1 ≤ a_j ≤ 1000), where a_j is the value of the j-th bill from the Maxim's wallet.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=n<=1000", "1<=m<=1000", "1<=c_i<=1000", "1<=a_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n> <n> <L_m>', where <T_n> and <L_m> are counter non-terminals for the sequences of game costs and bill values, respectively. The sequences are constructed using <T_i> and <L_i> non-terminals, which decrement until they reach 1, ensuring the correct number of elements. The game costs and bill values are represented as c_i and a_i, separated by spaces, with the sequences terminated by newline tokens <n>."}
{"name": "1011_A. Stages", "description": "Input\n\nThe first line of input contains two integers --- n and k (1 <= k <= n <= 50) -- the number of available stages and the number of stages to use in the rocket.\n\nThe second line contains string s, which consists of exactly n lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.", "grammar": {"productions": ["<S>->[n] <s> [k] <n> [a-z]{n}"], "constraints": ["1<=k<=n", "1<=n<=50"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, both serving as counter variables, hence they are enclosed in brackets as [n] and [k]. The grammar is initiated with '<S>->[n] <s> [k] <n> [a-z]{n}'. The string 's' is represented by the regular expression [a-z]{n}, indicating it consists of exactly n lowercase Latin letters. This regular expression replaces the variable 's' directly, as it defines the exact format of the input string without needing a counter non-terminal."}
{"name": "1012_B. Chemical table", "description": "Input\n\nThe first line contains three integers n, m, q (1 <= n, m <= 200 000; 0 <= q <= min(n·m, 200 000)), the chemical table dimensions and the number of elements scientists already have.\n\nThe following q lines contain two integers ri, ci (1 <= ri <= n, 1 <= ci <= m), each describes an element that scientists already have. All elements in the input are different.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> q <n> <T_q>", "<T_i>-><T_i-1> <n> r_i <s> c_i", "<T_1>->r_i <s> c_i"], "constraints": ["1<=n,m<=200000", "0<=q<=min(n*m,200000)", "1<=r_i<=n", "1<=c_i<=m"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: n, m, and q. Both n and m serve as counter variables, hence they are enclosed in brackets as [n] and [m]. The variable q is not a counter, so it remains as 'q'. The grammar is initiated with '<S>->[n] <s> [m] <s> q <n> <T_q>'. The non-terminal <T_i> is a counter-driven rule for q, where each line contains two integers r_i and c_i separated by a space. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> r_i <s> c_i' and '<T_1>->r_i <s> c_i' to systematically parse the sequence of elements following the count q."}
{"name": "1013_A. Piles With Stones", "description": "There is a beautiful garden of stones in Innopolis.\n\nIts most beautiful place is the n piles with stones numbered from 1 to n.\n\nEJOI participants have visited this place twice. \n\nWhen they first visited it, the number of stones in piles was x_1, x_2, …, x_n, correspondingly. One of the participants wrote down this sequence in a notebook. \n\nThey visited it again the following day, and the number of stones in piles was equal to y_1, y_2, …, y_n. One of the participants also wrote it down in a notebook.\n\nIt is well known that every member of the EJOI jury during the night either sits in the room 108 or comes to the place with stones. Each jury member who comes there either takes one stone for himself or moves one stone from one pile to another. We can assume that there is an unlimited number of jury members. No one except the jury goes to the place with stones at night.\n\nParticipants want to know whether their notes can be correct or they are sure to have made a mistake.\n\nInput\n\nThe first line of the input file contains a single integer n, the number of piles with stones in the garden (1 ≤ n ≤ 50).\n\nThe second line contains n integers separated by spaces x_1, x_2, …, x_n, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the first time (0 ≤ x_i ≤ 1000).\n\nThe third line contains n integers separated by spaces y_1, y_2, …, y_n, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the second time (0 ≤ y_i ≤ 1000).", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> x_1", "<T_1>->x_1", "<L_i>-><L_i-1> <s> y_i", "<L_1>->y_1"], "constraints": ["1<=n<=50", "0<=x_i<=1000", "0<=y_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequences of stones, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> <L_n>', where <T_n> and <L_n> are counter non-terminals for the sequences x_1, x_2, ..., x_n and y_1, y_2, ..., y_n respectively. Each sequence is separated by a space symbol <s>. The grammar constructs '<T_i>-><T_i-1> <s> x_i' and '<L_i>-><L_i-1> <s> y_i' are used to parse the sequences, with base cases '<T_1>->x_1' and '<L_1>->y_1' to terminate the recursion. This structure ensures the input format is correctly parsed according to the given specification."}
{"name": "1016_C. Vasya And The Mushrooms", "description": "Input\n\nThe first line contains the number n (1 <= n <= 3·105) --- the length of the glade.\n\nThe second line contains n numbers a1, a2, ..., an (1 <= ai <= 106) --- the growth rate of mushrooms in the first row of the glade.\n\nThe third line contains n numbers b1, b2, ..., bn (1 <= bi <= 106) is the growth rate of mushrooms in the second row of the glade.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=3*10^5", "1<=a_i<=10^6", "1<=b_i<=10^6"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for both sequences of numbers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> <L_n>', where <T_n> and <L_n> are counter non-terminals for the sequences 'a1, a2, ..., an' and 'b1, b2, ..., bn' respectively. Each sequence is constructed using counter non-terminals <T_i> and <L_i>, which decrement until they reach 1, ensuring the correct number of elements. The elements are separated by a space symbol <s>. The grammar systematically parses the sequences following the count [n]."}
{"name": "1017_A. The Rank", "description": "John Smith knows that his son, Thomas Smith, is among the best students in his class and even in his school. After the students of the school took the exams in English, German, Math, and History, a table of results was formed.\n\nThere are n students, each of them has a unique id (from 1 to n). Thomas's id is 1. Every student has four scores correspond to his or her English, German, Math, and History scores. The students are given in order of increasing of their ids.\n\nIn the table, the students will be sorted by decreasing the sum of their scores. So, a student with the largest sum will get the first place. If two or more students have the same sum, these students will be sorted by increasing their ids. \n\nPlease help John find out the rank of his son. \n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of students.\n\nEach of the next n lines contains four integers a_i, b_i, c_i, and d_i (0≤ a_i, b_i, c_i, d_i≤ 100) — the grades of the i-th student on English, German, Math, and History. The id of the i-th student is equal to i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i <s> d_i", "<T_1>->a_1 <s> b_1 <s> c_1 <s> d_1"], "constraints": ["1<=n<=1000", "0<=a_i<=100", "0<=b_i<=100", "0<=c_i<=100", "0<=d_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of students, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each student's grades (a_i, b_i, c_i, d_i) are separated by space symbols <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i <s> d_i' and '<T_1>->a_1 <s> b_1 <s> c_1 <s> d_1' to systematically parse the sequence of student grades following the count [n]."}
{"name": "1017_H. The Films", "description": "Input\n\nThe first line contains three integers n, m, and q (1 <= n, m, q <= 10^5, n+q<= 10^5) --- the number of films on the shelf initially, the number of endings, and the number of months.\n\nThe second line contains n integers e_1, e_2, ..., e_n (1<= e_i<= m) --- the ending of the i-th film on the shelf.\n\nEach of the next q lines contains three integers l_i, r_i, and k_i (1 <= l_i <= r_i <= n, 0 <= k_i <= 10^5) --- the i-th query.\n\nIt is guaranteed that there will be only no more than 100 different k values.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [q] <n> <T_n> <n> <Q_q>", "<T_i>-><T_i-1> <s> e_i", "<T_1>->e_1", "<Q_i>-><Q_i-1> <n> l_i <s> r_i <s> k_i", "<Q_1>->l_1 <s> r_1 <s> k_1"], "constraints": ["1<=n,m,q<=10^5", "n+q<=10^5", "1<=e_i<=m", "1<=l_i<=r_i<=n", "0<=k_i<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, n, m, and q, all serving as counter variables, hence they are enclosed in brackets as [n], [m], and [q]. The grammar is initiated with '<S>->[n] <s> [m] <s> [q] <n> <T_n> <n> <Q_q>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'e_i' represents each film ending separated by a space symbol <s>. The non-terminal <Q_i> is a counter-driven rule for [q], where each query consists of 'l_i', 'r_i', and 'k_i' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> e_i', '<T_1>->e_1', '<Q_i>-><Q_i-1> <n> l_i <s> r_i <s> k_i', and '<Q_1>->l_1 <s> r_1 <s> k_1' to systematically parse the sequence of film endings and queries following the counts [n] and [q]."}
{"name": "1020_B. Badge", "description": "In Summer Informatics School, if a student doesn't behave well, teachers make a hole in his badge. And today one of the teachers caught a group of n students doing yet another trick. \n\nLet's assume that all these students are numbered from 1 to n. The teacher came to student a and put a hole in his badge. The student, however, claimed that the main culprit is some other student p_a.\n\nAfter that, the teacher came to student p_a and made a hole in his badge as well. The student in reply said that the main culprit was student p_{p_a}.\n\nThis process went on for a while, but, since the number of students was finite, eventually the teacher came to the student, who already had a hole in his badge.\n\nAfter that, the teacher put a second hole in the student's badge and decided that he is done with this process, and went to the sauna.\n\nYou don't know the first student who was caught by the teacher. However, you know all the numbers p_i. Your task is to find out for every student a, who would be the student with two holes in the badge if the first caught student was a.\n\nInput\n\nThe first line of the input contains the only integer n (1 ≤ n ≤ 1000) — the number of the naughty students.\n\nThe second line contains n integers p_1, ..., p_n (1 ≤ p_i ≤ n), where p_i indicates the student who was reported to the teacher by student i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=1000", "1<=p_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of integers p_i, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n]. The sequence of integers p_i is constructed using '<T_i>-><T_i-1> <s> p_i' and '<T_1>->p_1', ensuring each p_i is separated by a space symbol <s>. This structure accurately reflects the input format where the first line contains the integer n and the second line contains n integers separated by spaces."}
{"name": "1023_A. Single Wildcard Pattern Matching", "description": "You are given two strings s and t. The string s consists of lowercase Latin letters and at most one wildcard character '*', the string t consists only of lowercase Latin letters. The length of the string s equals n, the length of the string t equals m.\n\nThe wildcard character '*' in the string s (if any) can be replaced with an arbitrary sequence (possibly empty) of lowercase Latin letters. No other character of s can be replaced with anything. If it is possible to replace a wildcard character '*' in s to obtain a string t, then the string t matches the pattern s.\n\nFor example, if s=\"aba*aba\" then the following strings match it \"abaaba\", \"abacaba\" and \"abazzzaba\", but the following strings do not match: \"ababa\", \"abcaaba\", \"codeforces\", \"aba1aba\", \"aba?aba\".\n\nIf the given string t matches the given string s, print \"YES\", otherwise print \"NO\".\n\nInput\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the length of the string s and the length of the string t, respectively.\n\nThe second line contains string s of length n, which consists of lowercase Latin letters and at most one wildcard character '*'.\n\nThe third line contains string t of length m, which consists only of lowercase Latin letters.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> [a-z]{n} <n> [a-z]{m}"], "constraints": ["1<=n,m<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, which are used as counters for the lengths of strings s and t respectively. Hence, they are enclosed in brackets as [n] and [m]. The grammar is structured to first read these two integers, followed by the strings s and t on separate lines. The string s can include lowercase Latin letters and at most one wildcard '*', while string t consists solely of lowercase Latin letters. The regular expressions [a-z]{n} and [a-z]{m} are used to represent strings s and t of lengths n and m respectively, ensuring the correct input format is captured."}
{"name": "1025_A. Doggo Recoloring", "description": "Panic is rising in the committee for doggo standardization — the puppies of the new brood have been born multi-colored! In total there are 26 possible colors of puppies in the nature and they are denoted by letters from 'a' to 'z' inclusive.\n\nThe committee rules strictly prohibit even the smallest diversity between doggos and hence all the puppies should be of the same color. Thus Slava, the committee employee, has been assigned the task to recolor some puppies into other colors in order to eliminate the difference and make all the puppies have one common color.\n\nUnfortunately, due to bureaucratic reasons and restricted budget, there's only one operation Slava can perform: he can choose a color x such that there are currently at least two puppies of color x and recolor all puppies of the color x into some arbitrary color y. Luckily, this operation can be applied multiple times (including zero).\n\nFor example, if the number of puppies is 7 and their colors are represented as the string \"abababc\", then in one operation Slava can get the results \"zbzbzbc\", \"bbbbbbc\", \"aaaaaac\", \"acacacc\" and others. However, if the current color sequence is \"abababc\", then he can't choose x='c' right now, because currently only one puppy has the color 'c'.\n\nHelp Slava and the committee determine whether it is possible to standardize all the puppies, i.e. after Slava's operations all the puppies should have the same color.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of puppies.\n\nThe second line contains a string s of length n consisting of lowercase Latin letters, where the i-th symbol denotes the i-th puppy's color.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the string, hence it is enclosed in [n]. The string consists of lowercase Latin letters, each of which can be any character from 'a' to 'z'. The length of the string is specified by the counter variable [n], and the characters are represented using the regular expression [a-z]{n}, meaning a string of n characters where each character is a lowercase letter. Thus, the grammar is constructed as '<S>->[n] <n> [a-z]{n}' to reflect the input format where the first line is the integer n and the second line is the string of length n."}
{"name": "1025_D. Recovering BST", "description": "Input\n\nThe first line contains the number of vertices n (2 <= n <= 700).\n\nThe second line features n distinct integers a_i (2 <= a_i <= 10^9) --- the values of vertices in ascending order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=700", "2<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of integers 'a_i' is represented by the non-terminal <T_i>, which decrements until it reaches <T_1>, ensuring each integer is separated by a space <s>. The grammar constructs are '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to parse the sequence of integers following the count [n]."}
{"name": "1027_A. Palindromic Twist", "description": "You are given a string s consisting of n lowercase Latin letters. n is even.\n\nFor each position i (1 ≤ i ≤ n) in string s you are required to change the letter on this position either to the previous letter in alphabetic order or to the next one (letters 'a' and 'z' have only one of these options). Letter in every position must be changed exactly once.\n\nFor example, letter 'p' should be changed either to 'o' or to 'q', letter 'a' should be changed to 'b' and letter 'z' should be changed to 'y'.\n\nThat way string \"codeforces\", for example, can be changed to \"dpedepqbft\" ('c' → 'd', 'o' → 'p', 'd' → 'e', 'e' → 'd', 'f' → 'e', 'o' → 'p', 'r' → 'q', 'c' → 'b', 'e' → 'f', 's' → 't').\n\nString s is called a palindrome if it reads the same from left to right and from right to left. For example, strings \"abba\" and \"zz\" are palindromes and strings \"abca\" and \"zy\" are not.\n\nYour goal is to check if it's possible to make string s a palindrome by applying the aforementioned changes to every position. Print \"YES\" if string s can be transformed to a palindrome and \"NO\" otherwise.\n\nEach testcase contains several strings, for each of them you are required to solve the problem separately.\n\nInput\n\nThe first line contains a single integer T (1 ≤ T ≤ 50) — the number of strings in a testcase.\n\nThen 2T lines follow — lines (2i - 1) and 2i of them describe the i-th string. The first line of the pair contains a single integer n (2 ≤ n ≤ 100, n is even) — the length of the corresponding string. The second line of the pair contains a string s, consisting of n lowercase Latin letters.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> [a-z]{n}", "<T_1>->[n] <n> [a-z]{n}"], "constraints": ["1<=T<=50", "2<=n<=100", "n%2==0"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable T serves as a counter for the number of strings, hence it is denoted as [T]. The grammar is initiated with '<S>->[T] <n> <T_T>', where <T_i> is a counter non-terminal for [T]. Each string is described by a pair of lines: the first line contains the length n of the string, and the second line contains the string itself, which consists of n lowercase Latin letters. The length n is represented as [n] because it specifies the length of the string, and the string is described using the regular expression [a-z]{n}. Thus, the grammar is constructed as '<T_i>-><T_i-1> <n> [n] <n> [a-z]{n}' and '<T_1>->[n] <n> [a-z]{n}' to systematically parse each string and its length."}
{"name": "1027_E. Inverse Coloring", "description": "Input\n\nA single line contains two integers n and k (1 <= n <= 500, 1 <= k <= n^2) --- the number of rows and columns of the board and the maximum number of tiles inside the rectangle of the single color, respectively.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=500", "1<=k<=n^2"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'k', but neither serves as a counter variable in this context, so they are not enclosed in brackets. The grammar is structured as '<S>->n <s> k', representing the input format where 'n' and 'k' are two integers separated by a space."}
{"name": "1029_A. Many Equal Substrings", "description": "You are given a string t consisting of n lowercase Latin letters and an integer number k.\n\nLet's define a substring of some string s with indices from l to r as s[l ... r].\n\nYour task is to construct such string s of minimum possible length that there are exactly k positions i such that s[i ... i + n - 1] = t. In other words, your task is to construct such string s of minimum possible length that there are exactly k substrings of s equal to t.\n\nIt is guaranteed that the answer is always unique.\n\nInput\n\nThe first line of the input contains two integers n and k (1 ≤ n, k ≤ 50) — the length of the string t and the number of substrings.\n\nThe second line of the input contains the string t consisting of exactly n lowercase Latin letters.", "grammar": {"productions": ["<S>->[n] <s> k <n> [a-z]{n}"], "constraints": ["1<=n<=50", "1<=k<=50"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, where n serves as a counter variable for the length of the string t, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <n> [a-z]{n}'. The string t is represented using the regular expression [a-z]{n}, indicating a sequence of exactly n lowercase Latin letters. This ensures the input format where the first line contains n and k, and the second line contains the string t of length n."}
{"name": "1029_F. Multicolored Markers", "description": "Input\n\nA single line contains two integers a and b (1 <= a, b <= 10^{14}) --- the number of tiles red marker should color and the number of tiles blue marker should color, respectively.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=10^14"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space."}
{"name": "102_B. Sum of Digits", "description": "Having watched the last Harry Potter film, little Gerald also decided to practice magic. He found in his father's magical book a spell that turns any number in the sum of its digits. At the moment Gerald learned that, he came across a number n. How many times can Gerald put a spell on it until the number becomes one-digit?\n\nInput\n\nThe first line contains the only integer n (0 ≤ n ≤ 10^100000). It is guaranteed that n doesn't contain any leading zeroes.", "grammar": {"productions": ["<S>->[1-9]{1}[0-9]{0,10^100000}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a very large integer n, which can have up to 10^100000 digits. Since the number does not have leading zeroes, the first digit must be between 1 and 9, represented by the regex [1-9]{1}. The remaining digits can be any number from 0 to 9, represented by [0-9]{0,10^100000}. The grammar is constructed to reflect this format: '<S>->[1-9]{1}[0-9]{0,10^100000}'."}
{"name": "1030_C. Vasya and Golden Ticket", "description": "Recently Vasya found a golden ticket — a sequence which consists of n digits a_1a_2... a_n. Vasya considers a ticket to be lucky if it can be divided into two or more non-intersecting segments with equal sums. For example, ticket 350178 is lucky since it can be divided into three segments 350, 17 and 8: 3+5+0=1+7=8. Note that each digit of sequence should belong to exactly one segment.\n\nHelp Vasya! Tell him if the golden ticket he found is lucky or not.\n\nInput\n\nThe first line contains one integer n (2 ≤ n ≤ 100) — the number of digits in the ticket.\n\nThe second line contains n digits a_1 a_2 ... a_n (0 ≤ a_i ≤ 9) — the golden ticket. Digits are printed without spaces.", "grammar": {"productions": ["<S>->[n] <n> [0-9]{n}"], "constraints": ["2<=n<=100", "0<=a_i<=9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the number of digits in the ticket, hence it is enclosed in [n]. The second line consists of n digits, each ranging from 0 to 9, which is represented using the regular expression [0-9]{n} to denote a sequence of exactly n digits. Thus, the grammar is constructed as '<S>->[n] <n> [0-9]{n}' to reflect the input format where the first line specifies the number of digits and the second line provides the digits without any spaces."}
{"name": "1030_E. Vasya and Good Sequences", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 3 * 10^5) --- length of the sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^{18}) --- the sequence a.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=3*10^5", "1<=a_i<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence elements, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each sequence element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of elements following the count [n]."}
{"name": "1031_B. Curiosity Has No Limits", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 10^5) --- the length of the sequence t_i. \n\nThe second line contains n - 1 integers a_1, a_2, ..., a_{n-1} (0 <= a_i <= 3) --- the first sequence on the blackboard.\n\nThe third line contains n - 1 integers b_1, b_2, ..., b_{n-1} (0 <= b_i <= 3) --- the second sequence on the blackboard.", "grammar": {"productions": ["<S>->[n] <n> <T_n-1> <n> <L_n-1>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["2<=n<=10^5", "0<=a_i<=3", "0<=b_i<=3"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for the sequences, hence it is enclosed in [n]. The grammar is structured as '<S>->[n] <n> <T_n-1> <n> <L_n-1>', where <T_i> and <L_i> are counter non-terminals for the sequences 'a_i' and 'b_i' respectively. Each sequence is separated by a space symbol <s>, and the sequences are of length 'n-1'. The non-terminals <T_i> and <L_i> decrement until they reach 1, ensuring the correct number of elements in each sequence. The grammar accurately reflects the input format where 'n' is followed by two sequences of 'n-1' integers each, separated by newlines."}
{"name": "1037_E. Trips", "description": "Input\n\nThe first line contains three integers n, m, and k (2 <= n <= 2 * 10^5, 1 <= m <= 2 * 10^5, 1 <= k < n) --- the number of people, the number of days and the number of friends each person on the trip should have in the group.\n\nThe i-th (1 <= i <= m) of the next m lines contains two integers x and y (1<= x, y<= n, x!= y), meaning that persons x and y become friends on the morning of day i. It is guaranteed that x and y were not friends before.", "grammar": {"productions": ["<S>->n <s> [m] <s> k <n> <T_m>", "<T_i>-><T_i-1> <n> x <s> y", "<T_1>->x <s> y"], "constraints": ["2<=n<=2*10^5", "1<=m<=2*10^5", "1<=k<n", "1<=x,y<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: n, m, and k. Among these, 'm' serves as a counter variable for the number of lines that follow, hence it is enclosed in [m]. The grammar is structured as '<S>->n <s> [m] <s> k <n> <T_m>', where <T_m> is a counter non-terminal for [m]. Each line after the first contains two integers x and y, separated by a space, which are not counter variables and thus are not enclosed in brackets. The grammar rules '<T_i>-><T_i-1> <n> x <s> y' and '<T_1>->x <s> y' are used to parse each subsequent line, decrementing the counter until it reaches 1."}
{"name": "1041_E. Tree Reconstruction", "description": "Input\n\nThe first line contains one integer n (2 <= n <= 1 000) --- the number of vertices in the tree.\n\nEach of the next n-1 lines contains two integers a_i and b_i each (1 <= a_i < b_i <= n) --- the maximal indices of vertices in the components formed if the i-th edge is removed.", "grammar": {"productions": ["<S>->[n] <n> <T_n-1>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=n<=1000", "1<=a_i<b_i<=n"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'n' is used as a counter variable for the number of lines, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n-1>', where <T_i> is a counter non-terminal for [n-1] lines. Each line contains two variables 'a_i' and 'b_i' separated by a space <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of pairs following the count [n-1]."}
{"name": "1043_A. Elections", "description": "Awruk is taking part in elections in his school. It is the final round. He has only one opponent — Elodreip. The are n students in the school. Each student has exactly k votes and is obligated to use all of them. So Awruk knows that if a person gives a_i votes for Elodreip, than he will get exactly k - a_i votes from this person. Of course 0 ≤ k - a_i holds.\n\nAwruk knows that if he loses his life is over. He has been speaking a lot with his friends and now he knows a_1, a_2, ..., a_n — how many votes for Elodreip each student wants to give. Now he wants to change the number k to win the elections. Of course he knows that bigger k means bigger chance that somebody may notice that he has changed something and then he will be disqualified.\n\nSo, Awruk knows a_1, a_2, ..., a_n — how many votes each student will give to his opponent. Help him select the smallest winning number k. In order to win, Awruk needs to get strictly more votes than Elodreip.\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of students in the school.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100) — the number of votes each student gives to Elodreip.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=a_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the array elements, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1045_F. Shady Lady", "description": "Input\n\nThe first line contains a positive integer N (2 <= N <= 200  000), denoting the number of the terms in the starting special polynomial.\n\nEach of the following N lines contains a description of a monomial: the k-th line contains two **space**-separated integers a_k and b_k (0 <= a_k, b_k <= 10^9) which mean the starting polynomial has the term \\\\_ x^{a_k} y^{b_k}. It is guaranteed that for k != l, either a_k != a_l or b_k != b_l.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=200000", "0<=a_i<=10^9", "0<=b_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the number of monomials, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter non-terminal for [N]. Each monomial is represented by two integers 'a_i' and 'b_i' separated by a space <s>, leading to the rules '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1'. This structure ensures the input format where each of the N lines contains two space-separated integers."}
{"name": "1047_B. Cover Points", "description": "There are n points on the plane, (x_1,y_1), (x_2,y_2), …, (x_n,y_n).\n\nYou need to place an isosceles triangle with two sides on the coordinate axis to cover all points (a point is covered if it lies inside the triangle or on the side of the triangle). Calculate the minimum length of the shorter side of the triangle.\n\nInput\n\nFirst line contains one integer n (1 ≤ n ≤ 10^5).\n\nEach of the next n lines contains two integers x_i and y_i (1 ≤ x_i,y_i ≤ 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["1<=n<=10^5", "1<=x_i<=10^9", "1<=y_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of points, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each point is represented by 'x_i' and 'y_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> x_i <s> y_i' and '<T_1>->x_1 <s> y_1' to systematically parse the sequence of points following the count [n]."}
{"name": "104_A. Blackjack", "description": "Input\n\nThe only line contains n (1 <= n <= 25) --- the required sum of points.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=25"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is the only input and it is not used as a counter variable, hence it is represented simply as 'n' without brackets. The grammar is straightforward as it only requires the input of 'n', leading to the simple production rule '<S>->n'."}
{"name": "1054_B. Appending Mex", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100 000) --- the number of steps Ildar made.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^9) --- the array Ildar obtained.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100000", "0<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the array elements, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1059_A. Cashier", "description": "Input\n\nThe first line contains three integers n, L and a (0 <= n <= 10^{5}, 1 <= L <= 10^{9}, 1 <= a <= L).\n\nThe i-th of the next n lines contains two integers t_{i} and l_{i} (0 <= t_{i} <= L - 1, 1 <= l_{i} <= L). It is guaranteed that t_{i} + l_{i} <= t_{i + 1} and t_{n} + l_{n} <= L.", "grammar": {"productions": ["<S>->[n] <s> L <s> a <n> <T_n>", "<T_i>-><T_i-1> <n> t_i <s> l_i", "<T_1>->t_1 <s> l_1"], "constraints": ["0<=n<=10^5", "1<=L<=10^9", "1<=a<=L", "0<=t_i<=L-1", "1<=l_i<=L"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, L, and a. Here, 'n' serves as a counter variable for the subsequent lines, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> L <s> a <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two variables 't_i' and 'l_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> t_i <s> l_i' and '<T_1>->t_1 <s> l_1' to systematically parse the sequence of lines following the count [n]."}
{"name": "1061_A. Coins", "description": "You have unlimited number of coins with values 1, 2, …, n. You want to select some set of coins having the total value of S. \n\nIt is allowed to have multiple coins with the same value in the set. What is the minimum number of coins required to get sum S?\n\nInput\n\nThe only line of the input contains two integers n and S (1 ≤ n ≤ 100 000, 1 ≤ S ≤ 10^9)", "grammar": {"productions": ["<S>->n <s> S"], "constraints": ["1<=n<=100000", "1<=S<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'S', where 'n' is not a counter variable and 'S' is also not a counter variable, hence they are not enclosed in brackets. The grammar is structured as '<S>->n <s> S', representing the input format where 'n' and 'S' are two integers separated by a space."}
{"name": "1064_A. Make a triangle!", "description": "Input\n\nThe only line contains tree integers a, b and c (1 <= a, b, c <= 100) --- the lengths of sticks Masha possesses.", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a,b,c<=100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'a', 'b', and 'c', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> c', representing the input format where 'a', 'b', and 'c' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets."}
{"name": "1064_D. Labyrinth", "description": "Input\n\nThe first line contains two integers n, m (1 <= n, m <= 2000) --- the number of rows and the number columns in the labyrinth respectively.\n\nThe second line contains two integers r, c (1 <= r <= n, 1 <= c <= m) --- index of the row and index of the column that define the starting cell.\n\nThe third line contains two integers x, y (0 <= x, y <= 109) --- the maximum allowed number of movements to the left and to the right respectively.\n\nThe next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.\n\nIt is guaranteed, that the starting cell contains no obstacles.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> [r] <s> [c] <n> [x] <s> [y] <n> <T_n>", "<T_i>-><T_i-1> <n> [.*]{m}", "<T_1>->[.*]{m}"], "constraints": ["1<=n,m<=2000", "1<=r<=n", "1<=c<=m", "0<=x,y<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes multiple variables, where 'n' and 'm' serve as counter variables for the labyrinth's dimensions, hence they are enclosed in brackets as [n] and [m]. The variables 'r', 'c', 'x', and 'y' are not counter variables, so they are not enclosed in brackets. The grammar is initiated with '<S>->[n] <s> [m] <n> [r] <s> [c] <n> [x] <s> [y] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], representing each line of the labyrinth, which consists of 'm' characters of '.' or '*', represented by the regex [.*]{m}. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [.*]{m}' and '<T_1>->[.*]{m}' to systematically parse each line of the labyrinth following the count [n]."}
{"name": "1065_A. Vasya and Chocolate", "description": "There is a special offer in Vasya's favourite supermarket: if the customer buys a chocolate bars, he or she may take b additional bars for free. This special offer can be used any number of times.\n\nVasya currently has s roubles, and he wants to get as many chocolate bars for free. Each chocolate bar costs c roubles. Help Vasya to calculate the maximum possible number of chocolate bars he can get!\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of testcases.\n\nEach of the next t lines contains four integers s, a, b, c~(1 ≤ s, a, b, c ≤ 10^9) — the number of roubles Vasya has, the number of chocolate bars you have to buy to use the special offer, the number of bars you get for free, and the cost of one bar, respectively.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> s <s> a <s> b <s> c", "<T_1>->s <s> a <s> b <s> c"], "constraints": ["1<=t<=100", "1<=s<=10^9", "1<=a<=10^9", "1<=b<=10^9", "1<=c<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of four integers s, a, b, and c, separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> s <s> a <s> b <s> c' and '<T_1>->s <s> a <s> b <s> c' to systematically parse each test case following the count [t]."}
{"name": "1066_A. Vova and Train", "description": "Vova plans to go to the conference by train. Initially, the train is at the point 1 and the destination point of the path is the point L. The speed of the train is 1 length unit per minute (i.e. at the first minute the train is at the point 1, at the second minute — at the point 2 and so on).\n\nThere are lanterns on the path. They are placed at the points with coordinates divisible by v (i.e. the first lantern is at the point v, the second is at the point 2v and so on).\n\nThere is also exactly one standing train which occupies all the points from l to r inclusive.\n\nVova can see the lantern at the point p if p is divisible by v and there is no standing train at this position (p not∈ [l; r]). Thus, if the point with the lantern is one of the points covered by the standing train, Vova can't see this lantern.\n\nYour problem is to say the number of lanterns Vova will see during the path. Vova plans to go to t different conferences, so you should answer t independent queries.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of queries.\n\nThen t lines follow. The i-th line contains four integers L_i, v_i, l_i, r_i (1 ≤ L, v ≤ 10^9, 1 ≤ l ≤ r ≤ L) — destination point of the i-th path, the period of the lantern appearance and the segment occupied by the standing train.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> L <s> v <s> l <s> r", "<T_1>->L <s> v <s> l <s> r"], "constraints": ["1<=t<=10^4", "1<=L,v<=10^9", "1<=l<=r<=L"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter variable for the number of queries, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each query consists of four integers L, v, l, and r, separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> L <s> v <s> l <s> r' and '<T_1>->L <s> v <s> l <s> r' to systematically parse each query following the count [t]."}
{"name": "1068_F. Knights", "description": "Input\n\nThe only line of input contains one integer n (1 <= n <= 10^{3}) --- number of knights in the initial placement.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^3"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is used as a counter variable, hence it is enclosed in [n]. The grammar is constructed as '<S>->[n]' to represent the input format where 'n' is the number of knights in the initial placement."}
{"name": "1070_C. Cloud Computing", "description": "Input\n\nThe first line of the input contains three integers n, k and m (1 <= n,k <= 10^6, 1 <= m <= 2*10^5) --- the number of days to analyze, the desired daily number of cores, the number of tariff plans.\n\nThe following m lines contain descriptions of tariff plans, one description per line. Each line contains four integers l_i, r_i, c_i, p_i (1 <= l_i <= r_i <= n, 1 <= c_i, p_i <= 10^6), where l_i and r_i are starting and finishing days of the i-th tariff plan, c_i --- number of cores, p_i --- price of a single core for daily rent on the i-th tariff plan.", "grammar": {"productions": ["<S>->[n] <s> [k] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> l_i <s> r_i <s> c_i <s> p_i", "<T_1>->l_1 <s> r_1 <s> c_1 <s> p_1"], "constraints": ["1<=n,k<=10^6", "1<=m<=2*10^5", "1<=l_i<=r_i<=n", "1<=c_i, p_i<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables, n, k, and m, all of which serve as counter variables, hence they are enclosed in brackets as [n], [k], and [m]. The grammar is initiated with '<S>->[n] <s> [k] <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each line contains four integers l_i, r_i, c_i, and p_i, each separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> l_i <s> r_i <s> c_i <s> p_i' and '<T_1>->l_1 <s> r_1 <s> c_1 <s> p_1' to systematically parse the sequence of tariff plans following the count [m]."}
{"name": "1073_E. Segment Sum", "description": "Input\n\nThe only line of the input contains three integers l, r and k (1 <= l <= r < 10^{18}, 1 <= k <= 10) --- the borders of the segment and the maximum number of different digits.", "grammar": {"productions": ["<S>->l <s> r <s> k"], "constraints": ["1<=l<=r<10^18", "1<=k<=10"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, l, r, and k, none of which serve as counter variables in this context. Therefore, they are represented directly without brackets. The grammar is structured as '<S>->l <s> r <s> k', reflecting the input format where three integers are separated by spaces."}
{"name": "1076_A. Minimizing the String", "description": "You are given a string s consisting of n lowercase Latin letters.\n\nYou have to remove at most one (i.e. zero or one) character of this string in such a way that the string you obtain will be lexicographically smallest among all strings that can be obtained using this operation.\n\nString s = s_1 s_2 ... s_n is lexicographically smaller than string t = t_1 t_2 ... t_m if n < m and s_1 = t_1, s_2 = t_2, ..., s_n = t_n or there exists a number p such that p ≤ min(n, m) and s_1 = t_1, s_2 = t_2, ..., s_{p-1} = t_{p-1} and s_p < t_p.\n\nFor example, \"aaa\" is smaller than \"aaaa\", \"abb\" is smaller than \"abc\", \"pqr\" is smaller than \"z\".\n\nInput\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of s.\n\nThe second line of the input contains exactly n lowercase Latin letters — the string s.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["2<=n<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the string s, hence it is enclosed in [n]. The string s consists of exactly n lowercase Latin letters, which is represented using the regular expression [a-z]{n}. Therefore, the grammar is constructed as '<S>->[n] <n> [a-z]{n}' to reflect the input format where the first line specifies the length of the string and the second line contains the string itself."}
{"name": "1080_A. Petya and Origami", "description": "Petya is having a party soon, and he has decided to invite his n friends.\n\nHe wants to make invitations in the form of origami. For each invitation, he needs two red sheets, five green sheets, and eight blue sheets. The store sells an infinite number of notebooks of each color, but each notebook consists of only one color with k sheets. That is, each notebook contains k sheets of either red, green, or blue.\n\nFind the minimum number of notebooks that Petya needs to buy to invite all n of his friends.\n\nInput\n\nThe first line contains two integers n and k (1≤ n, k≤ 10^8) — the number of Petya's friends and the number of sheets in each notebook respectively.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n,k<=10^8"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'k', which are not used as counter variables in this context, hence they are not enclosed in brackets. The input format requires these two integers to be separated by a space, represented by <s>. Therefore, the grammar is constructed as '<S>->n <s> k' to reflect the input structure where 'n' and 'k' are provided on the same line separated by a single space."}
{"name": "1080_C. Masha and two friends", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^3) --- the number of test cases.\n\nEach of them is described in the following format:\n\nThe first line contains two integers n and m (1 <= n,m <= 10^9) --- the size of the board.\n\nThe second line contains four integers x_1, y_1, x_2, y_2 (1 <= x_1 <= x_2 <= m, 1 <= y_1 <= y_2 <= n) --- the coordinates of the rectangle, the white paint was spilled on.\n\nThe third line contains four integers x_3, y_3, x_4, y_4 (1 <= x_3 <= x_4 <= m, 1 <= y_3 <= y_4 <= n) --- the coordinates of the rectangle, the black paint was spilled on.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m <n> x1 <s> y1 <s> x2 <s> y2 <n> x3 <s> y3 <s> x4 <s> y4", "<T_1>->n <s> m <n> x1 <s> y1 <s> x2 <s> y2 <n> x3 <s> y3 <s> x4 <s> y4"], "constraints": ["1<=t<=10^3", "1<=n,m<=10^9", "1<=x1<=x2<=m", "1<=y1<=y2<=n", "1<=x3<=x4<=m", "1<=y3<=y4<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes two lines: the first line contains 'n' and 'm' separated by a space, and the second line contains four integers separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> m <n> x1 <s> y1 <s> x2 <s> y2 <n> x3 <s> y3 <s> x4 <s> y4' and '<T_1>->n <s> m <n> x1 <s> y1 <s> x2 <s> y2 <n> x3 <s> y3 <s> x4 <s> y4' to systematically parse each test case following the count [t]."}
{"name": "1081_D. Maximum Distance", "description": "Input\n\nThe first line contains three integers n, m and k (2 <= k <= n <= 10^5, n-1 <= m <= 10^5) --- the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains k distinct integers x_1, x_2, ..., x_k (1 <= x_i <= n).\n\nEach of the following m lines contains three integers u, v and w (1 <= u,v <= n, 1 <= w <= 10^9), denoting there is an edge between u and v of weight w. The given graph is undirected, so an edge (u, v) can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [k] <n> <L_k> <n> <T_m>", "<L_i>-><L_i-1> <s> x_i", "<L_1>->x_1", "<T_i>-><T_i-1> <n> u <s> v <s> w", "<T_1>->u <s> v <s> w"], "constraints": ["2<=k<=n<=10^5", "n-1<=m<=10^5", "1<=x_i<=n", "1<=u,v<=n", "1<=w<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, n, m, and k, all serving as counter variables, hence they are enclosed in brackets as [n], [m], and [k]. The grammar is initiated with '<S>->[n] <s> [m] <s> [k] <n> <L_k> <n> <T_m>'. Here, <L_k> is a counter non-terminal for the list of special vertices x_i, constructed as '<L_i>-><L_i-1> <s> x_i' and '<L_1>->x_1'. The counter non-terminal <T_m> handles the m edges, each described by three integers u, v, and w, formatted as '<T_i>-><T_i-1> <n> u <s> v <s> w' and '<T_1>->u <s> v <s> w'. This structure ensures the input is parsed according to the specified format with all counter variables correctly represented."}
{"name": "1090_J. Two Prefixes", "description": "Input\n\nThe first line contains the string s consisting of lowercase English letters. The second line contains the string t consisting of lowercase English letters.\n\nThe lengths of both string do not exceed 105.", "grammar": {"productions": ["<S>->[a-z]{1,10^5} <n> [a-z]{1,10^5}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two strings, s and t, each consisting of lowercase English letters. Since the lengths of both strings are variables but not used as counters, they are not enclosed in brackets. The strings are represented using the regular expression [a-z]{1,10^5}, indicating a sequence of lowercase letters with a length between 1 and 100,000. The grammar is structured as '<S>->[a-z]{1,10^5} <n> [a-z]{1,10^5}', where <n> denotes a newline separating the two strings."}
{"name": "1091_G. New Year and the Factorisation Collaboration", "description": "Input\n\nThe only line contains a single integer n (21 <= n <= 2^{1024}). It is guaranteed that n is a product of between 2 and 10 distinct prime numbers, all of form 4x + 3 for some integer x.", "grammar": {"productions": ["<S>->n"], "constraints": ["21<=n<=2^1024"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is provided as input, but it does not serve as a counter variable in this context, hence it is not enclosed in brackets. The grammar is simply constructed as '<S>->n', representing the input format where 'n' is a single integer. The constraints specify the range for 'n' as 21 ≤ n ≤ 2^1024, which is directly reflected in the constraint section."}
{"name": "1093_A. Dice Rolling", "description": "Mishka got a six-faced dice. It has integer numbers from 2 to 7 written on its faces (all numbers on faces are different, so this is an almost usual dice).\n\nMishka wants to get exactly x points by rolling his dice. The number of points is just a sum of numbers written at the topmost face of the dice for all the rolls Mishka makes.\n\nMishka doesn't really care about the number of rolls, so he just wants to know any number of rolls he can make to be able to get exactly x points for them. Mishka is very lucky, so if the probability to get x points with chosen number of rolls is non-zero, he will be able to roll the dice in such a way. Your task is to print this number. It is guaranteed that at least one answer exists.\n\nMishka is also very curious about different number of points to score so you have to answer t independent queries.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of queries.\n\nEach of the next t lines contains one integer each. The i-th line contains one integer x_i (2 ≤ x_i ≤ 100) — the number of points Mishka wants to get.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x_i", "<T_1>->x_1"], "constraints": ["1<=t<=100", "2<=x_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of queries, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each query 'x_i' is separated by a newline symbol <n>. The grammar constructs are laid out as '<S>->[t] <n> <T_t>', '<T_i>-><T_i-1> <n> x_i', and '<T_1>->x_1' to systematically parse the sequence of queries following the count [t]."}
{"name": "1097_B. Petr and a Combination Lock", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 15) --- the number of rotations.\n\nEach of the following n lines contains one integer a_i (1 <= a_i <= 180) --- the angle of the i-th rotation in degrees.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_i"], "constraints": ["1<=n<=15", "1<=a_i<=180"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the number of rotations, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n], representing each rotation angle 'a_i' on a new line. The grammar constructs are '<T_i>-><T_i-1> <n> a_i' and '<T_1>->a_i' to systematically parse the sequence of rotation angles following the count [n]."}
{"name": "1099_A. Snowball", "description": "Today's morning was exceptionally snowy. Meshanya decided to go outside and noticed a huge snowball rolling down the mountain! Luckily, there are two stones on that mountain.\n\nInitially, snowball is at height h and it has weight w. Each second the following sequence of events happens: snowball's weights increases by i, where i — is the current height of snowball, then snowball hits the stone (if it's present at the current height), then snowball moves one meter down. If the snowball reaches height zero, it stops.\n\nThere are exactly two stones on the mountain. First stone has weight u_1 and is located at height d_1, the second one — u_2 and d_2 respectively. When the snowball hits either of two stones, it loses weight equal to the weight of that stone. If after this snowball has negative weight, then its weight becomes zero, but the snowball continues moving as before.\n\n<image>\n\nFind the weight of the snowball when it stops moving, that is, it reaches height 0.\n\nInput\n\nFirst line contains two integers w and h — initial weight and height of the snowball (0 ≤ w ≤ 100; 1 ≤ h ≤ 100).\n\nSecond line contains two integers u_1 and d_1 — weight and height of the first stone (0 ≤ u_1 ≤ 100; 1 ≤ d_1 ≤ h).\n\nThird line contains two integers u_2 and d_2 — weight and heigth of the second stone (0 ≤ u_2 ≤ 100; 1 ≤ d_2 ≤ h; d_1 ≠ d_2). Notice that stones always have different heights.", "grammar": {"productions": ["<S>->w <s> h <n> u1 <s> d1 <n> u2 <s> d2"], "constraints": ["0<=w<=100", "1<=h<=100", "0<=u1<=100", "1<=d1<=h", "0<=u2<=100", "1<=d2<=h", "d1!=d2"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of three lines, each containing two integers separated by a space. The variables w, h, u1, d1, u2, and d2 are not used as counters, so they are not enclosed in brackets. The grammar is structured as '<S>->w <s> h <n> u1 <s> d1 <n> u2 <s> d2', representing the three lines of input where each line contains two integers separated by a space and each line is separated by a newline token <n>."}
{"name": "109_A. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <=10^6 --- the sum of digits of the required lucky number.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^6"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is used to specify the sum of digits of the lucky number. Since n is not a counter variable but a single integer input, it is represented simply as 'n' without brackets. The grammar is constructed as '<S>->n' to reflect the input format where only the integer n is provided."}
{"name": "10_B. Cinema Cashier", "description": "Input\n\nThe first line contains two integers N and K (1 <= N <= 1000, 1 <= K <= 99) --- the amount of requests and the hall size respectively. The second line contains N space-separated integers Mi from the range [1, K] --- requests to the program.", "grammar": {"productions": ["<S>->[N] <s> [K] <n> <T_N>", "<T_i>-><T_i-1> <s> M_i", "<T_1>->M_1"], "constraints": ["1<=N<=1000", "1<=K<=99", "1<=M_i<=K"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, both serving as counter variables, hence they are enclosed in [N] and [K]. The grammar is initiated with '<S>->[N] <s> [K] <n> <T_N>', where <T_N> is the counter non-terminal for [N]. The sequence of requests M_i is represented by the non-terminal <T_i>, which decrements until it reaches <T_1>->M_1. Each M_i is separated by a space <s>, reflecting the input format where N and K are given first, followed by N space-separated integers M_i."}
{"name": "10_C. Digital Root", "description": "Input\n\nThe first line contains the only number N (1 <= N <= 106).", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^6"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, N, which is used as a counter variable, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N]', representing the input format where only the number N is given."}
{"name": "1102_E. Monotonic Renumeration", "description": "Input\n\nThe first line contains one integer n (2 <= n <= 2 * 10^5) --- the number of elements in a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=2*10^5", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the array elements, hence it is denoted as [n] in the grammar. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1106_B. Lunar New Year and Food Ordering", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 10^5), representing the number of different kinds of food and the number of customers, respectively.\n\nThe second line contains n positive integers a_1, a_2, ..., a_n (1 <= a_i <= 10^7), where a_i denotes the initial remain of the i-th kind of dishes.\n\nThe third line contains n positive integers c_1, c_2, ..., c_n (1 <= c_i <= 10^6), where c_i denotes the cost of one dish of the i-th kind.\n\nThe following m lines describe the orders of the m customers respectively. The j-th line contains two positive integers t_j and d_j (1 <= t_j <= n, 1 <= d_j <= 10^7), representing the kind of food and the number of dishes the j-th customer orders, respectively.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_n> <n> <Z_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> c_i", "<L_1>->c_1", "<Z_i>-><Z_i-1> <n> t_i <s> d_i", "<Z_1>->t_1 <s> d_1"], "constraints": ["1<=n, m<=10^5", "1<=a_i<=10^7", "1<=c_i<=10^6", "1<=t_i<=n", "1<=d_i<=10^7"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n> <n> <L_n> <n> <Z_m>'. Here, <T_i> is the counter non-terminal for the sequence of a_i values, <L_i> for the sequence of c_i values, and <Z_i> for the sequence of customer orders (t_j and d_j). Each counter non-terminal decrements until it reaches 1, ensuring the correct sequence length as per the counter variables. The variables a_i, c_i, t_j, and d_j are not enclosed in brackets as they do not serve as counters but are part of the sequences governed by the counter non-terminals."}
{"name": "110_A. Nearly Lucky Number", "description": "Input\n\nThe only line contains an integer n (1 <= n <=10^18).\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^18"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is not used as a counter variable but simply represents an integer input. Therefore, it is not enclosed in brackets. The grammar is straightforward, represented as '<S>->n', indicating that the input consists of a single integer n."}
{"name": "1110_E. Magic Stones", "description": "Input\n\nThe first line contains one integer n (2 <= n <= 10^5) --- the number of magic stones.\n\nThe second line contains integers c_1, c_2, ..., c_n (0 <= c_i <= 2 * 10^9) --- the charges of Grigory's stones.\n\nThe second line contains integers t_1, t_2, ..., t_n (0 <= t_i <= 2 * 10^9) --- the charges of Andrew's stones.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1", "<L_i>-><L_i-1> <s> t_i", "<L_1>->t_1"], "constraints": ["2<=n<=10^5", "0<=c_i<=2*10^9", "0<=t_i<=2*10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for both sequences of integers, hence it is enclosed in [n]. The grammar is structured as '<S>->[n] <n> <T_n> <n> <L_n>', where <T_n> and <L_n> are counter non-terminals for the sequences 'c_1, c_2, ..., c_n' and 't_1, t_2, ..., t_n' respectively. Each sequence is built incrementally with <T_i> and <L_i> non-terminals, which append the next element in the sequence separated by a space <s>. The base cases <T_1> and <L_1> start the sequences with 'c_1' and 't_1' respectively. This structure ensures the sequences are correctly parsed according to the counter variable [n]."}
{"name": "1111_A. Superhero Transformation", "description": "We all know that a superhero can transform to certain other superheroes. But not all Superheroes can transform to any other superhero. A superhero with name s can transform to another superhero with name t if s can be made equal to t by changing any vowel in s to any other vowel and any consonant in s to any other consonant. Multiple changes can be made.\n\nIn this problem, we consider the letters 'a', 'e', 'i', 'o' and 'u' to be vowels and all the other letters to be consonants.\n\nGiven the names of two superheroes, determine if the superhero with name s can be transformed to the Superhero with name t.\n\nInput\n\nThe first line contains the string s having length between 1 and 1000, inclusive.\n\nThe second line contains the string t having length between 1 and 1000, inclusive.\n\nBoth strings s and t are guaranteed to be different and consist of lowercase English letters only.", "grammar": {"productions": ["<S>->[a-z]{1,1000} <n> [a-z]{1,1000}"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. It includes two strings, s and t, each of which can be of variable length between 1 and 1000 characters. Since the strings consist of lowercase English letters only and their lengths are variable, they are represented using regular expressions [a-z]{1,1000}. The input format requires the two strings to be on separate lines, hence the newline token <n> is used to separate them. The grammar is constructed as '<S>->[a-z]{1,1000} <n> [a-z]{1,1000}' to reflect this structure."}
{"name": "1113_A. Sasha and His Trip", "description": "Sasha is a very happy guy, that's why he is always on the move. There are n cities in the country where Sasha lives. They are all located on one straight line, and for convenience, they are numbered from 1 to n in increasing order. The distance between any two adjacent cities is equal to 1 kilometer. Since all roads in the country are directed, it's possible to reach the city y from the city x only if x < y. \n\nOnce Sasha decided to go on a trip around the country and to visit all n cities. He will move with the help of his car, Cheetah-2677. The tank capacity of this model is v liters, and it spends exactly 1 liter of fuel for 1 kilometer of the way. At the beginning of the journey, the tank is empty. Sasha is located in the city with the number 1 and wants to get to the city with the number n. There is a gas station in each city. In the i-th city, the price of 1 liter of fuel is i dollars. It is obvious that at any moment of time, the tank can contain at most v liters of fuel.\n\nSasha doesn't like to waste money, that's why he wants to know what is the minimum amount of money is needed to finish the trip if he can buy fuel in any city he wants. Help him to figure it out!\n\nInput\n\nThe first line contains two integers n and v (2 ≤ n ≤ 100, 1 ≤ v ≤ 100) — the number of cities in the country and the capacity of the tank.", "grammar": {"productions": ["<S>->n <s> v"], "constraints": ["2<=n<=100", "1<=v<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'v', which are not used as counter variables in this context. Therefore, they are represented simply as 'n' and 'v' without enclosing them in brackets. The grammar is constructed as '<S>->n <s> v', representing the input format where 'n' and 'v' are two integers separated by a space."}
{"name": "1118_C. Palindromic Matrix", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 20).\n\nThe second line contains n^2 integers a_1, a_2, ..., a_{n^2} (1 <= a_i <= 1000) --- the numbers to put into a matrix of n rows and n columns.", "grammar": {"productions": ["<S>->[n] <n> <T_n^2>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=20", "1<=a_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n^2>', where <T_n^2> is a counter non-terminal for the sequence of n^2 integers. The non-terminal <T_i> is used to generate the sequence of integers separated by spaces, decrementing until it reaches <T_1>, which represents the first integer in the sequence. The grammar constructs are designed to parse the input format where the first line specifies the size of the matrix, and the second line lists the integers to be placed in the matrix."}
{"name": "1121_A. Technogoblet of Fire", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n <= 100, 1 <= m, k <= n) --- the total number of students, the number of schools and the number of the Chosen Ones.\n\nThe second line contains n different integers p_1, p_2, ..., p_n (1 <= p_i <= n), where p_i denotes the power of i-th student. The bigger the power, the stronger the student.\n\nThe third line contains n integers s_1, s_2, ..., s_n (1 <= s_i <= m), where s_i denotes the school the i-th student goes to. At least one student studies in each of the schools. \n\nThe fourth line contains k different integers c_1, c_2, ..., c_k (1 <= c_i <= n) --- the id's of the Chosen Ones.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [k] <n> <T_n> <n> <L_n> <n> <Z_k>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1", "<L_i>-><L_i-1> <s> S_i", "<L_1>->S_1", "<Z_i>-><Z_i-1> <s> C_i", "<Z_1>->C_1"], "constraints": ["1<=n<=100", "1<=m<=n", "1<=k<=n", "1<=P_i<=n", "1<=S_i<=m", "1<=C_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, n, m, and k, all serving as counter variables, hence they are enclosed in brackets as [n], [m], and [k]. The grammar is initiated with '<S>->[n] <s> [m] <s> [k] <n> <T_n> <n> <L_n> <n> <Z_k>'. Here, <T_i> is the counter non-terminal for [n], representing the sequence of student powers P_i separated by spaces. Similarly, <L_i> is the counter non-terminal for [n], representing the sequence of school numbers S_i separated by spaces. Lastly, <Z_i> is the counter non-terminal for [k], representing the sequence of Chosen Ones' IDs C_i separated by spaces. The grammar systematically parses the input lines by decrementing each counter non-terminal until it reaches 1."}
{"name": "1130_D2. Toy Train", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 5 000; 1 <= m <= 20 000) --- the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 <= a_i, b_i <= n; a_i != b_i) --- the station that initially contains candy i and the destination station of the candy, respectively.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=n<=5000", "1<=m<=20000", "1<=a_i<=n", "1<=b_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>', where <T_m> is a counter non-terminal for [m]. Each line following the first line contains two integers a_i and b_i, separated by a space, which are represented in the grammar as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1'. This structure ensures that each of the m lines correctly follows the specified format with the two integers."}
{"name": "1131_A. Sea Battle", "description": "In order to make the \"Sea Battle\" game more interesting, Boris decided to add a new ship type to it. The ship consists of two rectangles. The first rectangle has a width of w_1 and a height of h_1, while the second rectangle has a width of w_2 and a height of h_2, where w_1 ≥ w_2. In this game, exactly one ship is used, made up of two rectangles. There are no other ships on the field.\n\nThe rectangles are placed on field in the following way:\n\n  * the second rectangle is on top the first rectangle; \n  * they are aligned to the left, i.e. their left sides are on the same line; \n  * the rectangles are adjacent to each other without a gap. \n\n\n\nSee the pictures in the notes: the first rectangle is colored red, the second rectangle is colored blue.\n\nFormally, let's introduce a coordinate system. Then, the leftmost bottom cell of the first rectangle has coordinates (1, 1), the rightmost top cell of the first rectangle has coordinates (w_1, h_1), the leftmost bottom cell of the second rectangle has coordinates (1, h_1 + 1) and the rightmost top cell of the second rectangle has coordinates (w_2, h_1 + h_2).\n\nAfter the ship is completely destroyed, all cells neighboring by side or a corner with the ship are marked. Of course, only cells, which don't belong to the ship are marked. On the pictures in the notes such cells are colored green.\n\nFind out how many cells should be marked after the ship is destroyed. The field of the game is infinite in any direction.\n\nInput\n\nFour lines contain integers w_1, h_1, w_2 and h_2 (1 ≤ w_1, h_1, w_2, h_2 ≤ 10^8, w_1 ≥ w_2) — the width of the first rectangle, the height of the first rectangle, the width of the second rectangle and the height of the second rectangle. You can't rotate the rectangles.", "grammar": {"productions": ["<S>->w1 <s> h1 <s> w2 <s> h2"], "constraints": ["1<=w1<=10^8", "1<=w2<=10^8", "1<=h2<=10^8", "1<=h1<=10^8", "w1>=w2"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of four variables: w1, h1, w2, and h2, which are all integers. None of these variables serve as counter variables, so they are not enclosed in brackets. The variables are separated by space symbols <s> in the order they appear in the input. The grammar is constructed as '<S>->w1 <s> h1 <s> w2 <s> h2' to represent the input format where the four integers are given in sequence, each separated by a space."}
{"name": "1133_A. Middle of the Contest", "description": "Polycarp is going to participate in the contest. It starts at h_1:m_1 and ends at h_2:m_2. It is guaranteed that the contest lasts an even number of minutes (i.e. m_1 \\% 2 = m_2 \\% 2, where x \\% y is x modulo y). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n\nPolycarp wants to know the time of the midpoint of the contest. For example, if the contest lasts from 10:00 to 11:00 then the answer is 10:30, if the contest lasts from 11:10 to 11:12 then the answer is 11:11.\n\nInput\n\nThe first line of the input contains two integers h_1 and m_1 in the format hh:mm.\n\nThe second line of the input contains two integers h_2 and m_2 in the same format (hh:mm).\n\nIt is guaranteed that 0 ≤ h_1, h_2 ≤ 23 and 0 ≤ m_1, m_2 ≤ 59.\n\nIt is guaranteed that the contest lasts an even number of minutes (i.e. m_1 \\% 2 = m_2 \\% 2, where x \\% y is x modulo y). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.", "grammar": {"productions": ["<S>->h1 [:]{1} m1 <n> h2 [:]{1} m2"], "constraints": ["0<=h1,h2<=23", "0<=m1,m2<=59", "m1%2==m2%2"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes variables h1, m1, h2, and m2, which are not counter variables, so they are not enclosed in brackets. The format requires h1 and m1 to be separated by a colon, represented by the regex [:]{1}, followed by a newline <n>, and then h2 and m2 in the same format. The grammar is structured as '<S>->h1 [:]{1} m1 <n> h2 [:]{1} m2' to reflect the input format where each time is given in hh:mm format on separate lines."}
{"name": "1133_C. Balanced Team", "description": "You are a coach at your local university. There are n students under your supervision, the programming skill of the i-th student is a_i.\n\nYou have to create a team for a new programming competition. As you know, the more students some team has the more probable its victory is! So you have to create a team with the maximum number of students. But you also know that a team should be balanced. It means that the programming skill of each pair of students in a created team should differ by no more than 5.\n\nYour task is to report the maximum possible number of students in a balanced team.\n\nInput\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of students.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is a programming skill of the i-th student.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of students, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence of programming skills 'a_i' separated by spaces <s>. The counter non-terminal <T_i> is defined to decrement until it reaches 1, constructing the sequence of skills as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1'. This structure ensures the input format where the first line is the number of students and the second line lists their skills."}
{"name": "1136_A. Nastya Is Reading a Book", "description": "After lessons Nastya decided to read a book. The book contains n chapters, going one after another, so that one page of the book belongs to exactly one chapter and each chapter contains at least one page.\n\nYesterday evening Nastya did not manage to finish reading the book, so she marked the page with number k as the first page which was not read (i.e. she read all pages from the 1-st to the (k-1)-th).\n\nThe next day Nastya's friend Igor came and asked her, how many chapters remain to be read by Nastya? Nastya is too busy now, so she asks you to compute the number of chapters she has not completely read yet (i.e. the number of chapters she has not started to read or has finished reading somewhere in the middle).\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of chapters in the book.\n\nThere are n lines then. The i-th of these lines contains two integers l_i, r_i separated by space (l_1 = 1, l_i ≤ r_i) — numbers of the first and the last pages of the i-th chapter. It's guaranteed that l_{i+1} = r_i + 1 for all 1 ≤ i ≤ n-1, and also that every chapter contains at most 100 pages.\n\nThe (n+2)-th line contains a single integer k (1 ≤ k ≤ r_n) — the index of the marked page.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> k", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->1 <s> r_1"], "constraints": ["1<=n<=100", "l_i+1=r_i+1", "1<=k<=r_i"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of chapters, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n> <n> k', where <T_n> is a counter non-terminal for [n], generating each chapter's page range. Each chapter's range is represented by 'l_i' and 'r_i' separated by a space <s>, leading to the rules '<T_i>-><T_i-1> <n> l_i <s> r_i' and '<T_1>->1 <s> r_1' for the base case. The final line includes the variable 'k', which is not a counter and thus not enclosed in brackets."}
{"name": "1138_A. Sushi for Two", "description": "Arkady invited Anna for a dinner to a sushi restaurant. The restaurant is a bit unusual: it offers n pieces of sushi aligned in a row, and a customer has to choose a continuous subsegment of these sushi to buy.\n\nThe pieces of sushi are of two types: either with tuna or with eel. Let's denote the type of the i-th from the left sushi as t_i, where t_i = 1 means it is with tuna, and t_i = 2 means it is with eel.\n\nArkady does not like tuna, Anna does not like eel. Arkady wants to choose such a continuous subsegment of sushi that it has equal number of sushi of each type and each half of the subsegment has only sushi of one type. For example, subsegment [2, 2, 2, 1, 1, 1] is valid, but subsegment [1, 2, 1, 2, 1, 2] is not, because both halves contain both types of sushi.\n\nFind the length of the longest continuous subsegment of sushi Arkady can buy.\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 100 000) — the number of pieces of sushi.\n\nThe second line contains n integers t_1, t_2, ..., t_n (t_i = 1, denoting a sushi with tuna or t_i = 2, denoting a sushi with eel), representing the types of sushi from left to right.\n\nIt is guaranteed that there is at least one piece of sushi of each type. Note that it means that there is at least one valid continuous segment.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> t_i", "<T_1>->t_1"], "constraints": ["2<=n<=100000", "1<=t_i<=2"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of sushi types, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence of 't_i' values. Each 't_i' is separated by a space symbol <s>, leading to the rules '<T_i>-><T_i-1> <s> t_i' and '<T_1>->t_1'. This structure ensures the sequence of sushi types is correctly parsed according to the count [n]."}
{"name": "1139_A. Even Substrings", "description": "You are given a string s=s_1s_2... s_n of length n, which only contains digits 1, 2, ..., 9.\n\nA substring s[l ... r] of s is a string s_l s_{l + 1} s_{l + 2} … s_r. A substring s[l ... r] of s is called even if the number represented by it is even. \n\nFind the number of even substrings of s. Note, that even if some substrings are equal as strings, but have different l and r, they are counted as different substrings.\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 65000) — the length of the string s.\n\nThe second line contains a string s of length n. The string s consists only of digits 1, 2, ..., 9.", "grammar": {"productions": ["<S>->[n] <n> [0-9]{n}"], "constraints": ["1<=n<=65000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the string s, hence it is enclosed in [n]. The string s consists only of digits from 1 to 9, and its length is specified by n. Therefore, the grammar is constructed to reflect this format: '<S>->[n] <n> [0-9]{n}', where [0-9]{n} represents a string of n characters, each of which is a digit from 0 to 9."}
{"name": "1139_B. Chocolates", "description": "You went to the store, selling n types of chocolates. There are a_i chocolates of type i in stock.\n\nYou have unlimited amount of cash (so you are not restricted by any prices) and want to buy as many chocolates as possible. However if you buy x_i chocolates of type i (clearly, 0 ≤ x_i ≤ a_i), then for all 1 ≤ j < i at least one of the following must hold:\n\n  * x_j = 0 (you bought zero chocolates of type j)\n  * x_j < x_i (you bought less chocolates of type j than of type i) \n\n\n\nFor example, the array x = [0, 0, 1, 2, 10] satisfies the requirement above (assuming that all a_i ≥ x_i), while arrays x = [0, 1, 0], x = [5, 5] and x = [3, 2] don't.\n\nCalculate the maximum number of chocolates you can buy.\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5), denoting the number of types of chocolate.\n\nThe next line contains n integers a_i (1 ≤ a_i ≤ 10^9), denoting the number of chocolates of each type.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=2*10^5", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of integers 'a_i', hence it is enclosed in brackets as [N]. The grammar is structured to first read [N], followed by a newline <n>, and then the sequence of integers 'a_i' separated by spaces <s>. The counter non-terminal <T_i> is used to generate the sequence of 'a_i' values, decrementing until it reaches <T_1>, which produces the first 'a_1'. The grammar ensures the input format matches the specification where the first line is the count [N] and the second line is the sequence of 'a_i' values."}
{"name": "1140_B. Good String", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) -- the number of test cases. Each test case is represented by two lines.\n\nThe first line of i-th test case contains one integer n (1 <= n <= 100) -- the length of string s.\n\nThe second line of i-th test case contains string s, consisting of only characters > and <.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> [<>]{n}", "<T_1>->[n] <n> [<>]{n}"], "constraints": ["1<=t<=100", "1<=n<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of an integer 'n' (also a counter variable, hence [n]) followed by a string 's' of length 'n' composed of characters '>' and '<'. The string 's' is represented using the regular expression [<>]{n}. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> [<>]{n}' and '<T_1>->[n] <n> [<>]{n}' to systematically parse each test case following the count [t]."}
{"name": "1141_B. Maximal Continuous Rest", "description": "Each day in Berland consists of n hours. Polycarp likes time management. That's why he has a fixed schedule for each day — it is a sequence a_1, a_2, ..., a_n (each a_i is either 0 or 1), where a_i=0 if Polycarp works during the i-th hour of the day and a_i=1 if Polycarp rests during the i-th hour of the day.\n\nDays go one after another endlessly and Polycarp uses the same schedule for each day.\n\nWhat is the maximal number of continuous hours during which Polycarp rests? It is guaranteed that there is at least one working hour in a day.\n\nInput\n\nThe first line contains n (1 ≤ n ≤ 2⋅10^5) — number of hours per day.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1), where a_i=0 if the i-th hour in a day is working and a_i=1 if the i-th hour is resting. It is guaranteed that a_i=0 for at least one i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "0<=a_i<=1"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of hours, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each hour's status (0 or 1) separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of hour statuses following the count [n]."}
{"name": "1143_A. The Doors", "description": "Three years have passes and nothing changed. It is still raining in London, and Mr. Black has to close all the doors in his home in order to not be flooded. Once, however, Mr. Black became so nervous that he opened one door, then another, then one more and so on until he opened all the doors in his house.\n\nThere are exactly two exits from Mr. Black's house, let's name them left and right exits. There are several doors in each of the exits, so each door in Mr. Black's house is located either in the left or in the right exit. You know where each door is located. Initially all the doors are closed. Mr. Black can exit the house if and only if all doors in at least one of the exits is open. You are given a sequence in which Mr. Black opened the doors, please find the smallest index k such that Mr. Black can exit the house after opening the first k doors.\n\nWe have to note that Mr. Black opened each door at most once, and in the end all doors became open.\n\nInput\n\nThe first line contains integer n (2 ≤ n ≤ 200 000) — the number of doors.\n\nThe next line contains n integers: the sequence in which Mr. Black opened the doors. The i-th of these integers is equal to 0 in case the i-th opened door is located in the left exit, and it is equal to 1 in case it is in the right exit.\n\nIt is guaranteed that there is at least one door located in the left exit and there is at least one door located in the right exit.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> [01]{1}", "<T_1>->[01]{1}"], "constraints": ["2<=n<=200000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of doors, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is the counter non-terminal for [n], representing the sequence of door states (0 or 1) separated by spaces. The door states are represented using the regular expression [01]{1}, ensuring each door is either 0 (left exit) or 1 (right exit). The grammar constructs are '<T_i>-><T_i-1> <s> [01]{1}' and '<T_1>->[01]{1}', systematically parsing the sequence of door states following the count [n]."}
{"name": "1143_B. Nirvana", "description": "Input\n\nThe only input line contains the integer n (1 <= n <= 2*10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=2*10^9"]}, "reason": "The grammar begins with the starting non-terminal <S>. The variable 'n' is the only input and does not serve as a counter variable, hence it is represented simply as 'n' without brackets. The grammar is constructed as '<S>->n' to reflect the input format where only the integer 'n' is provided."}
{"name": "1144_C. Two Shuffled Sequences", "description": "Two integer sequences existed initially — one of them was strictly increasing, and the other one — strictly decreasing.\n\nStrictly increasing sequence is a sequence of integers [x_1 < x_2 < ... < x_k]. And strictly decreasing sequence is a sequence of integers [y_1 > y_2 > ... > y_l]. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.\n\nThey were merged into one sequence a. After that sequence a got shuffled. For example, some of the possible resulting sequences a for an increasing sequence [1, 3, 4] and a decreasing sequence [10, 4, 2] are sequences [1, 2, 3, 4, 4, 10] or [4, 2, 1, 10, 4, 3].\n\nThis shuffled sequence a is given in the input.\n\nYour task is to find any two suitable initial sequences. One of them should be strictly increasing and the other one — strictly decreasing. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.\n\nIf there is a contradiction in the input and it is impossible to split the given sequence a to increasing and decreasing sequences, print \"NO\".\n\nInput\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "0<=a_i<=2*10^5"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence elements, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n], generating each element 'a_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of elements following the count [n]."}
{"name": "1144_F. Graph Without Long Directed Paths", "description": "Input\n\nThe first line contains two integer numbers n and m (2 <= n <= 2 * 10^5, n - 1 <= m <= 2 * 10^5) --- the number of vertices and edges, respectively.\n\nThe following m lines contain edges: edge i is given as a pair of vertices u_i, v_i (1 <= u_i, v_i <= n, u_i != v_i). There are no multiple edges in the given graph, i. e. for each pair (u_i, v_i) there are no other pairs (u_i, v_i) and (v_i, u_i) in the list of edges. It is also guaranteed that the given graph is connected (there is a path between any pair of vertex in the given graph).", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> v_i <s> u_i", "<T_1>->v_1 <s> u_1"], "constraints": ["2<=n<=2*10^5", "n-1<=m<=2*10^5", "1<=u_i,v_i<=n", "u_i!=v_i"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each edge is represented by 'v_i' and 'u_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> v_i <s> u_i' and '<T_1>->v_1 <s> u_1' to systematically parse the sequence of edges following the count [m]."}
{"name": "1148_A. Another One Bites The Dust", "description": "Let's call a string good if and only if it consists of only two types of letters — 'a' and 'b' and every two consecutive letters are distinct. For example \"baba\" and \"aba\" are good strings and \"abb\" is a bad string.\n\nYou have a strings \"a\", b strings \"b\" and c strings \"ab\". You want to choose some subset of these strings and concatenate them in any arbitrarily order.\n\nWhat is the length of the longest good string you can obtain this way?\n\nInput\n\nThe first line contains three positive integers a, b, c (1 ≤ a, b, c ≤ 10^9) — the number of strings \"a\", \"b\" and \"ab\" respectively.", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=10^9", "1<=b<=10^9", "1<=c<=10^9"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. It includes three variables 'a', 'b', and 'c', which are not used as counters but simply as input variables. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->a <s> b <s> c', representing the input format where 'a', 'b', and 'c' are three integers separated by spaces."}
{"name": "1149_A. Prefix Sum Primes", "description": "We're giving away nice huge bags containing number tiles! A bag we want to present to you contains n tiles. Each of them has a single number written on it — either 1 or 2.\n\nHowever, there is one condition you must fulfill in order to receive the prize. You will need to put all the tiles from the bag in a sequence, in any order you wish. We will then compute the sums of all prefixes in the sequence, and then count how many of these sums are prime numbers. If you want to keep the prize, you will need to maximize the number of primes you get.\n\nCan you win the prize? Hurry up, the bags are waiting!\n\nInput\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of number tiles in the bag. The following line contains n space-separated integers a_1, a_2, ..., a_n (a_i ∈ \\{1, 2\\}) — the values written on the tiles.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "a_i->1|2"], "constraints": ["1<=n<=2000000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of tiles, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence of tiles. Each tile value 'a_i' is either 1 or 2, represented by the regex [12]{1}, but since 'a_i' is not a counter variable, it is directly used in the production rules. The grammar includes '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to handle the sequence of tiles, with each 'a_i' being a choice between 1 and 2."}
{"name": "114_D. Petr#", "description": "Input\n\nThe input file consists of three lines. The first line contains string t. The second and the third lines contain the sbegin and send identificators, correspondingly. All three lines are non-empty strings consisting of lowercase Latin letters. The length of each string doesn't exceed 2000 characters.", "grammar": {"productions": ["<S>->[a-z]{1,2000} <n> [a-z]{1,2000} <n> [a-z]{1,2000}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. It defines three variables, 't', 'sbegin', and 'send', each representing a string of lowercase Latin letters with a maximum length of 2000 characters. Since none of these variables serve as counters, they are not enclosed in brackets. The structure of the grammar is formulated as '<S>->[a-z]{1,2000} <n> [a-z]{1,2000} <n> [a-z]{1,2000}', representing the input format where each string is separated by a newline symbol denoted as <n>."}
{"name": "1152_A. Neko Finds Grapes", "description": "Input\n\nThe first line contains integers n and m (1 <= n, m <= 10^5) --- the number of chests and the number of keys.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) --- the numbers written on the treasure chests.\n\nThe third line contains m integers b_1, b_2, ..., b_m (1 <= b_i <= 10^9) --- the numbers written on the keys.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n,m<=10^5", "1<=a_i<=10^9", "1<=b_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables 'n' and 'm' serve as counter variables for the sequences of chests and keys, respectively, hence they are enclosed in brackets as [n] and [m]. The grammar is structured as '<S>->[n] <s> [m] <n> <T_n> <n> <L_m>', where <T_n> and <L_m> are counter non-terminals for the sequences of chest numbers 'a_i' and key numbers 'b_i', each separated by a space <s>. The counter non-terminals <T_i> and <L_i> are defined to decrement until they reach 1, generating the sequences 'a_1 a_2 ... a_n' and 'b_1 b_2 ... b_m' respectively. This ensures the grammar accurately reflects the input format where two sequences follow the initial counts of chests and keys."}
{"name": "1152_D. Neko and Aki's Prank", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 1000).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=1000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is not used as a counter variable but simply as an input integer. Therefore, it is represented as 'n' without brackets. The grammar is constructed as '<S>->n' to reflect the input format where only a single integer n is provided."}
{"name": "1155_A. Reverse a Substring", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 3 * 10^5) --- the length of s.\n\nThe second line of the input contains the string s of length n consisting only of lowercase Latin letters.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["2<=n<=3*10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is used both as a counter and to specify the length of a string. Consequently, the variable is represented as [n] to indicate its role as a length specifier for the string of characters, which consist only of lowercase Latin letters. This string is described using the regular expression [a-z]{n}, meaning a string of n characters, each of which is a lowercase Latin letter. Thus, the grammar is constructed to reflect this format: '<S>->[n] <n> [a-z]{n}'."}
{"name": "1157_A. Reachable Numbers", "description": "Let's denote a function f(x) in such a way: we add 1 to x, then, while there is at least one trailing zero in the resulting number, we remove that zero. For example, \n\n  * f(599) = 6: 599 + 1 = 600 → 60 → 6; \n  * f(7) = 8: 7 + 1 = 8; \n  * f(9) = 1: 9 + 1 = 10 → 1; \n  * f(10099) = 101: 10099 + 1 = 10100 → 1010 → 101. \n\n\n\nWe say that some number y is reachable from x if we can apply function f to x some (possibly zero) times so that we get y as a result. For example, 102 is reachable from 10098 because f(f(f(10098))) = f(f(10099)) = f(101) = 102; and any number is reachable from itself.\n\nYou are given a number n; your task is to count how many different numbers are reachable from n.\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is provided as input, but it does not serve as a counter variable for any sequence or repetition in the input format. Therefore, it is represented simply as 'n' without brackets. The grammar is straightforward, consisting only of the start symbol producing 'n', reflecting the input format where a single integer is given. The constraints specify the range for 'n' as 1 to 10^9."}
{"name": "1157_C1. Increasing Subsequence (easy version)", "description": "The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).\n\nYou are given a sequence a consisting of n integers. All these integers are distinct, each value from 1 to n appears in the sequence exactly once.\n\nYou are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\n\nFor example, for the sequence [2, 1, 5, 4, 3] the answer is 4 (you take 2 and the sequence becomes [1, 5, 4, 3], then you take the rightmost element 3 and the sequence becomes [1, 5, 4], then you take 4 and the sequence becomes [1, 5] and then you take 5 and the sequence becomes [1], the obtained increasing sequence is [2, 3, 4, 5]).\n\nInput\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n), where a_i is the i-th element of a. All these integers are pairwise distinct.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence elements, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence elements 'a_i' are separated by spaces <s>, leading to the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1'. This structure ensures the input is parsed as a sequence of 'n' distinct integers, each separated by a space."}
{"name": "1157_E. Minimum Array", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2 * 10^5) --- the number of elements in a, b and c.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 <= a_i < n), where a_i is the i-th element of a.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (0 <= b_i < n), where b_i is the i-th element of b.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=2*10^5", "0<=a_i<n", "0<=b_i<n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the sequences 'a' and 'b', hence it is enclosed in brackets as [n]. The grammar is structured to first read [n], followed by two sequences of 'n' elements each, separated by newlines. The sequences are generated using counter non-terminals <T_n> for the 'a' sequence and <L_n> for the 'b' sequence. Each sequence is built by appending elements (a_i or b_i) separated by spaces, decrementing the counter until it reaches 1. The grammar ensures the correct format and sequence length as specified in the input."}
{"name": "115_A. Party", "description": "A company has n employees numbered from 1 to n. Each employee either has no immediate manager or exactly one immediate manager, who is another employee with a different number. An employee A is said to be the superior of another employee B if at least one of the following is true:\n\n  * Employee A is the immediate manager of employee B\n  * Employee B has an immediate manager employee C such that employee A is the superior of employee C. \n\n\n\nThe company will not have a managerial cycle. That is, there will not exist an employee who is the superior of his/her own immediate manager.\n\nToday the company is going to arrange a party. This involves dividing all n employees into several groups: every employee must belong to exactly one group. Furthermore, within any single group, there must not be two employees A and B such that A is the superior of B.\n\nWhat is the minimum number of groups that must be formed?\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 2000) — the number of employees.\n\nThe next n lines contain the integers pi (1 ≤ pi ≤ n or pi = -1). Every pi denotes the immediate manager for the i-th employee. If pi is -1, that means that the i-th employee does not have an immediate manager. \n\nIt is guaranteed, that no employee will be the immediate manager of him/herself (pi ≠ i). Also, there will be no managerial cycles.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> p_i|<T_i-1> <n> -1", "<T_1>->p_1|-1"], "constraints": ["1<=n<=2000", "1<=p_i<=n"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of employees, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each employee's manager 'p_i' or '-1' (indicating no manager) is listed on separate lines. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> p_i|<T_i-1> <n> -1' and '<T_1>->p_1|-1' to systematically parse the sequence of manager entries for each employee following the count [n]."}
{"name": "1163_A. Eating Soup", "description": "The three friends, Kuro, Shiro, and Katie, met up again! It's time for a party...\n\nWhat the cats do when they unite? Right, they have a party. Since they wanted to have as much fun as possible, they invited all their friends. Now n cats are at the party, sitting in a circle and eating soup. The rules are simple: anyone having finished their soup leaves the circle.\n\nKatie suddenly notices that whenever a cat leaves, the place where she was sitting becomes an empty space, which means the circle is divided into smaller continuous groups of cats sitting next to each other. At the moment Katie observes, there are m cats who left the circle. This raises a question for Katie: what is the maximum possible number of groups the circle is divided into at the moment?\n\nCould you help her with this curiosity?\n\nYou can see the examples and their descriptions with pictures in the \"Note\" section.\n\nInput\n\nThe only line contains two integers n and m (2 ≤ n ≤ 1000, 0 ≤ m ≤ n) — the initial number of cats at the party and the number of cats who left the circle at the moment Katie observes, respectively.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["2<=n<=1000", "0<=m<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'm', which are not used as counter variables in this context, hence they are not enclosed in brackets. The grammar is structured as '<S>->n <s> m', representing the input format where 'n' and 'm' are two integers separated by a space."}
{"name": "1163_D. Mysterious Code", "description": "Input\n\nThe first line contains string c (1 <= |c| <= 1000) --- the mysterious code . It is guaranteed that c consists of lowercase English characters and asterisks \"*\" only.\n\nThe second and third line contain strings s and t respectively (1 <= |s|, |t| <= 50, s != t). It is guaranteed that s and t consist of lowercase English characters only.", "grammar": {"productions": ["<S>->[a-z*]{1,1000} <n> [a-z]{1,50} <n> [a-z]{1,50}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of three strings: 'c', 's', and 't'. The string 'c' has a length between 1 and 1000 and consists of lowercase English letters and asterisks, which is represented by the regex [a-z*]{1,1000}. The strings 's' and 't' each have lengths between 1 and 50 and consist only of lowercase English letters, represented by [a-z]{1,50}. Since none of these variables serve as counters, they are not enclosed in brackets. The grammar is structured to reflect the input format with each string separated by a newline token <n>, resulting in '<S>->[a-z*]{1,1000} <n> [a-z]{1,50} <n> [a-z]{1,50}'."}
{"name": "1165_A. Remainder", "description": "Input\n\nThe first line of the input contains three integers n, x, y (0 <= y < x < n <= 2 * 10^5) --- the length of the number and the integers x and y, respectively.\n\nThe second line of the input contains one decimal number consisting of n digits, each digit of this number is either 0 or 1. It is guaranteed that the first digit of the number is 1.", "grammar": {"productions": ["<S>->[n] <s> x <s> y <n> [01]{n}"], "constraints": ["0<=y<x<n<=200000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, x, and y. Among these, 'n' serves as a counter variable for the length of the decimal number, hence it is enclosed in [n]. The variables x and y are not counters, so they are written as is. The grammar is initiated with '<S>->[n] <s> x <s> y <n> [01]{n}'. The regular expression [01]{n} is used to represent the decimal number consisting of 'n' digits, each being either '0' or '1'. This ensures the input format matches the specification where the first line contains three integers and the second line contains a binary number of length 'n'."}
{"name": "1165_B. Polycarp Training", "description": "Polycarp wants to train before another programming competition. During the first day of his training he should solve exactly 1 problem, during the second day — exactly 2 problems, during the third day — exactly 3 problems, and so on. During the k-th day he should solve k problems.\n\nPolycarp has a list of n contests, the i-th contest consists of a_i problems. During each day Polycarp has to choose exactly one of the contests he didn't solve yet and solve it. He solves exactly k problems from this contest. Other problems are discarded from it. If there are no contests consisting of at least k problems that Polycarp didn't solve yet during the k-th day, then Polycarp stops his training.\n\nHow many days Polycarp can train if he chooses the contests optimally?\n\nInput\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of contests.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — the number of problems in the i-th contest.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of contests, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The non-terminal <T_i> generates the sequence of contest problems 'a_i' separated by spaces <s>, decrementing until it reaches <T_1>, which produces 'a_1'. This structure ensures the input format where the first line is the number of contests and the second line lists the problems in each contest separated by spaces."}
{"name": "1165_E. Two Arrays and Sum of Functions", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2 * 10^5) --- the number of elements in a and b.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^6), where a_i is the i-th element of a.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 <= b_j <= 10^6), where b_j is the j-th element of b.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i> <s> b_i", "<L_1>->b_i"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=10^6", "1<=b_i<=10^6"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequences of 'a' and 'b', hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> <L_n>', where <T_n> and <L_n> are counter non-terminals for the sequences 'a_1, a_2, ..., a_n' and 'b_1, b_2, ..., b_n' respectively. Each sequence is constructed by decrementing the counter non-terminals <T_i> and <L_i> until they reach 1, with elements separated by a space symbol <s>. The grammar ensures the correct parsing of the input format with two sequences of integers, each of length 'n'."}
{"name": "1173_A. Nauuo and Votes", "description": "Nauuo is a girl who loves writing comments.\n\nOne day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.\n\nIt's known that there were x persons who would upvote, y persons who would downvote, and there were also another z persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the x+y+z people would vote exactly one time.\n\nThere are three different results: if there are more people upvote than downvote, the result will be \"+\"; if there are more people downvote than upvote, the result will be \"-\"; otherwise the result will be \"0\".\n\nBecause of the z unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the z persons vote, that the results are different in the two situations.\n\nTell Nauuo the result or report that the result is uncertain.\n\nInput\n\nThe only line contains three integers x, y, z (0≤ x,y,z≤100), corresponding to the number of persons who would upvote, downvote or unknown.", "grammar": {"productions": ["<S>->x <s> y <s> z"], "constraints": ["0<=x<=100", "0<=y<=100", "0<=z<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, x, y, and z, which are not used as counters but simply as input variables. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->x <s> y <s> z', representing the input format where x, y, and z are three integers separated by spaces."}
{"name": "1175_A. From Hero to Zero", "description": "You are given an integer n and an integer k.\n\nIn one step you can do one of the following moves: \n\n  * decrease n by 1; \n  * divide n by k if n is divisible by k. \n\n\n\nFor example, if n = 27 and k = 3 you can do the following steps: 27 → 26 → 25 → 24 → 8 → 7 → 6 → 2 → 1 → 0.\n\nYou are asked to calculate the minimum number of steps to reach 0 from n. \n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of queries.\n\nThe only line of each query contains two integers n and k (1 ≤ n ≤ 10^{18}, 2 ≤ k ≤ 10^{18}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> k", "<T_1>->n <s> k"], "constraints": ["1<=t<=100", "1<=n<=10^18", "2<=k<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of queries, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t]. Each query consists of two integers 'n' and 'k' separated by a space, represented as 'n <s> k'. The counter non-terminal <T_i> is structured to repeat this pattern for each query, decrementing until it reaches <T_1>, which represents the first query. The grammar ensures that each query is parsed correctly with the specified format."}
{"name": "1176_A. Divide it!", "description": "You are given an integer n.\n\nYou can perform any of the following operations with this number an arbitrary (possibly, zero) number of times: \n\n  1. Replace n with n/2 if n is divisible by 2; \n  2. Replace n with 2n/3 if n is divisible by 3; \n  3. Replace n with 4n/5 if n is divisible by 5. \n\n\n\nFor example, you can replace 30 with 15 using the first operation, with 20 using the second operation or with 24 using the third operation.\n\nYour task is to find the minimum number of moves required to obtain 1 from n or say that it is impossible to do it.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 1000) — the number of queries.\n\nThe next q lines contain the queries. For each query you are given the integer number n (1 ≤ n ≤ 10^{18}).", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=q<=1000", "1<=n<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'q' is used as a counter for the number of queries, hence it is enclosed in [q]. The grammar is initiated with '<S>->[q] <n> <T_q>'. The non-terminal <T_i> is a counter-driven rule for [q], where each query is represented by 'n' followed by a newline <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n' and '<T_1>->n' to systematically parse the sequence of queries following the count [q]."}
{"name": "1176_C. Lose it!", "description": "You are given an array a consisting of n integers. Each a_i is one of the six following numbers: 4, 8, 15, 16, 23, 42.\n\nYour task is to remove the minimum number of elements to make this array good.\n\nAn array of length k is called good if k is divisible by 6 and it is possible to split it into k/6 subsequences 4, 8, 15, 16, 23, 42.\n\nExamples of good arrays:\n\n  * [4, 8, 15, 16, 23, 42] (the whole array is a required sequence); \n  * [4, 8, 4, 15, 16, 8, 23, 15, 16, 42, 23, 42] (the first sequence is formed from first, second, fourth, fifth, seventh and tenth elements and the second one is formed from remaining elements); \n  * [] (the empty array is good). \n\n\n\nExamples of bad arrays: \n\n  * [4, 8, 15, 16, 42, 23] (the order of elements should be exactly 4, 8, 15, 16, 23, 42); \n  * [4, 8, 15, 16, 23, 42, 4] (the length of the array is not divisible by 6); \n  * [4, 8, 15, 16, 23, 42, 4, 8, 15, 16, 23, 23] (the first sequence can be formed from first six elements but the remaining array cannot form the required sequence). \n\nInput\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (each a_i is one of the following numbers: 4, 8, 15, 16, 23, 42), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> 4|8|15|16|23|42", "<T_1>->4|8|15|16|23|42"], "constraints": ["1<=n<=5*10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of elements in the array, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of array elements. Each element in the array can be one of the specified numbers (4, 8, 15, 16, 23, 42), represented by the alternatives in the production rules '<T_i>-><T_i-1> <s> 4|8|15|16|23|42' and '<T_1>->4|8|15|16|23|42'. This setup ensures the grammar correctly parses the input format where 'n' is followed by 'n' integers from the given set, each separated by a space."}
{"name": "1177_A. Digits Sequence (Easy Edition)", "description": "Let's write all the positive integer numbers one after another from 1 without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the k-th digit of this sequence.\n\nInput\n\nThe first and only line contains integer k (1 ≤ k ≤ 10000) — the position to process (1-based index).", "grammar": {"productions": ["<S>->k"], "constraints": ["1<=k<=10000"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'k' is the only input variable and it is not used as a counter variable, hence it is represented simply as 'k' without brackets. The grammar is straightforward as it only needs to represent the input format, which is a single integer 'k'. Thus, the grammar is constructed as '<S>->k'."}
{"name": "1178_C. Tiles", "description": "Input\n\nThe only line contains two space separated integers w, h (1 <= w,h <= 1 000) --- the width and height of the kitchen, measured in tiles.", "grammar": {"productions": ["<S>->w <s> h"], "constraints": ["1<=w,h<=1000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'w' and 'h', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->w <s> h', representing the input format where 'w' and 'h' are two integers separated by a space. Since neither 'w' nor 'h' serve as counter variables, they are not enclosed in brackets."}
{"name": "1181_B. Split a Number", "description": "Dima worked all day and wrote down on a long paper strip his favorite number n consisting of l digits. Unfortunately, the strip turned out to be so long that it didn't fit in the Dima's bookshelf.\n\nTo solve the issue, Dima decided to split the strip into two non-empty parts so that each of them contains a positive integer without leading zeros. After that he will compute the sum of the two integers and write it down on a new strip.\n\nDima wants the resulting integer to be as small as possible, because it increases the chances that the sum will fit it in the bookshelf. Help Dima decide what is the minimum sum he can obtain.\n\nInput\n\nThe first line contains a single integer l (2 ≤ l ≤ 100 000) — the length of the Dima's favorite number.\n\nThe second line contains the positive integer n initially written on the strip: the Dima's favorite number.\n\nThe integer n consists of exactly l digits and it does not contain leading zeros. Dima guarantees, that there is at least one valid way to split the strip.", "grammar": {"productions": ["<S>->[l] <n> [1-9]{1}[0-9]{l-1}"], "constraints": ["2<=l<=100000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, l, which serves as a counter variable for the length of the number, hence it is enclosed in [l]. The grammar is initiated with '<S>->[l] <n> [1-9]{1}[0-9]{l-1}'. The regular expression [1-9]{1} ensures the first digit is non-zero, and [0-9]{l-1} covers the remaining digits, ensuring no leading zeros and exactly l digits in total."}
{"name": "1183_A. Nearest Interesting Number", "description": "Input\n\nThe only line in the input contains an integer a (1 <= a <= 1000).", "grammar": {"productions": ["<S>->a"], "constraints": ["1<=a<=1000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, 'a', which is not a counter variable, so it is represented simply as 'a'. The grammar is constructed as '<S>->a' to reflect the input format where only the integer 'a' is provided."}
{"name": "1183_B. Equalize Prices", "description": "There are n products in the shop. The price of the i-th product is a_i. The owner of the shop wants to equalize the prices of all products. However, he wants to change prices smoothly.\n\nIn fact, the owner of the shop can change the price of some product i in such a way that the difference between the old price of this product a_i and the new price b_i is at most k. In other words, the condition |a_i - b_i| ≤ k should be satisfied (|x| is the absolute value of x).\n\nHe can change the price for each product not more than once. Note that he can leave the old prices for some products. The new price b_i of each product i should be positive (i.e. b_i > 0 should be satisfied for all i from 1 to n).\n\nYour task is to find out the maximum possible equal price B of all productts with the restriction that for all products the condiion |a_i - B| ≤ k should be satisfied (where a_i is the old price of the product and B is the same new price of all products) or report that it is impossible to find such price B.\n\nNote that the chosen price B should be integer.\n\nYou should answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 100) — the number of queries. Each query is presented by two lines.\n\nThe first line of the query contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10^8) — the number of products and the value k. The second line of the query contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^8), where a_i is the price of the i-th product.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=q<=100", "1<=n<=100", "1<=k<=10^8", "1<=a_i<=10^8"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'q' is used as a counter for the number of queries, hence it is enclosed in brackets as [q]. The grammar is structured as '<S>->[q] <n> <T_q>', where <T_i> is a counter non-terminal for [q]. Each query consists of two lines: the first line contains 'n' and 'k', and the second line contains 'n' integers. Since 'n' is a counter for the number of products, it is enclosed in brackets as [n], leading to the rule '<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>'. The non-terminal <L_i> is used to represent the sequence of 'n' integers, each separated by a space, with the rule '<L_i>-><L_i-1> <s> a_i' and the base case '<L_1>->a_1'. This structure ensures the grammar accurately reflects the input format for multiple queries, each with a specified number of products and their prices."}
{"name": "1185_G1. Playlist for Polycarp (easy version)", "description": "Input\n\nThe first line of the input contains two integers n and T (1 <= n <= 15, 1 <= T <= 225) --- the number of songs in the player and the required total duration, respectively.\n\nNext, the n lines contain descriptions of songs: the i-th line contains two integers t_i and g_i (1 <= t_i <= 15, 1 <= g_i <= 3) --- the duration of the i-th song and its genre, respectively.", "grammar": {"productions": ["<S>->[n] <s> T <n> <T_n>", "<T_i>-><T_i-1> <n> t_i <s> g_i", "<T_1>->t_1 <s> g_1"], "constraints": ["1<=n<=15", "1<=T<=225", "1<=t_i<=15", "1<=g_i<=3"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'T', where 'n' serves as a counter variable for the number of songs, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> T <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each song is described by two integers 't_i' and 'g_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> t_i <s> g_i' and '<T_1>->t_1 <s> g_1' to systematically parse the sequence of song descriptions following the count [n]."}
{"name": "1187_A. Stickers and Toys", "description": "Your favorite shop sells n Kinder Surprise chocolate eggs. You know that exactly s stickers and exactly t toys are placed in n eggs in total.\n\nEach Kinder Surprise can be one of three types:\n\n  * it can contain a single sticker and no toy; \n  * it can contain a single toy and no sticker; \n  * it can contain both a single sticker and a single toy. \n\n\n\nBut you don't know which type a particular Kinder Surprise has. All eggs look identical and indistinguishable from each other.\n\nWhat is the minimum number of Kinder Surprise Eggs you have to buy to be sure that, whichever types they are, you'll obtain at least one sticker and at least one toy?\n\nNote that you do not open the eggs in the purchasing process, that is, you just buy some number of eggs. It's guaranteed that the answer always exists.\n\nInput\n\nThe first line contains the single integer T (1 ≤ T ≤ 100) — the number of queries.\n\nNext T lines contain three integers n, s and t each (1 ≤ n ≤ 10^9, 1 ≤ s, t ≤ n, s + t ≥ n) — the number of eggs, stickers and toys.\n\nAll queries are independent.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> s <s> t", "<T_1>->n <s> s <s> t"], "constraints": ["1<=T<=100", "1<=n<=10^9", "1<=s<=n", "1<=t<=n", "s+t>=n"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, T, which serves as a counter variable for the number of queries, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each query consists of three integers n, s, and t separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> s <s> t' and '<T_1>->n <s> s <s> t' to systematically parse each query following the count [T]."}
{"name": "1189_A. Keanu Reeves", "description": "Input\n\nThe first line of the input contains a single integer n (1<= n <= 100) --- the length of the string s.\n\nThe second line contains the string s of length n consisting only from zeros and ones.", "grammar": {"productions": ["<S>->[n] <n> [01]{n}"], "constraints": ["1<=n<=100"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which serves as a counter variable to specify the length of the string s. Hence, it is represented as [n]. The string s consists of characters '0' and '1' only, and its length is defined by the counter variable [n]. Therefore, the grammar is constructed as '<S>->[n] <n> [01]{n}', where [01]{n} represents a string of length n composed of '0's and '1's."}
{"name": "118_A. String Task", "description": "Input\n\nThe first line represents input string of Petya's program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive.", "grammar": {"productions": ["<S>->[a-zA-Z]{1,100}"], "constraints": [""]}, "reason": "The grammar starts with the start non-terminal <S>. The input string consists of uppercase and lowercase Latin letters with a length ranging from 1 to 100. Since the variable itself is replaced by the regex expression [a-zA-Z]{1,100}, the grammar is constructed as '<S>->[a-zA-Z]{1,100}', directly representing the input format without any counter variables or non-terminals."}
{"name": "1190_C. Tokitsukaze and Duel", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 10^5).\n\nThe second line contains a single string of length n that only consists of 0 and 1, representing the situation of these n cards, where the color side of the i-th card faces up if the i-th character is 1, or otherwise, it faces down and the i-th character is 0.", "grammar": {"productions": ["<S>->[n] <s> [k] <n>[01]{n}"], "constraints": ["1<=k<=n", "1<=n<=10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and k, both serving as counter variables, hence they are enclosed in brackets as [n] and [k]. The grammar is initiated with '<S>->[n] <s> [k] <n> [01]{n}'. The regular expression [01]{n} is used to represent the string of length n consisting of characters '0' and '1', as specified in the input format. This ensures the grammar accurately reflects the input structure where n and k are counters and the subsequent string is constrained to '0's and '1's of length n."}
{"name": "1191_C. Tokitsukaze and Discard Items", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n <= 10^{18}, 1 <= m <= 10^5, 1 <= m, k <= n) --- the number of items, the number of special items to be discarded and the number of positions in each page.\n\nThe second line contains m distinct integers p_1, p_2, ..., p_m (1 <= p_1 < p_2 < ... < p_m <= n) --- the indices of special items which should be discarded.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [k] <n> <T_m>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=10^18", "1<=m<=10^5", "1<=m<=n", "1<=k<=n", "1<=p_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, m, and k, where n, m, and k serve as counter variables, hence they are enclosed in [n], [m], and [k] respectively. The grammar is initiated with '<S>->[n] <s> [m] <s> [k] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where 'p_i' represents each special item index separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> p_i' and '<T_1>->p_1' to systematically parse the sequence of special item indices following the count [m]."}
{"name": "1194_A. Remove a Progression", "description": "You have a list of numbers from 1 to n written from left to right on the blackboard.\n\nYou perform an algorithm consisting of several steps (steps are 1-indexed). On the i-th step you wipe the i-th number (considering only remaining numbers). You wipe the whole number (not one digit).\n\n<image>\n\nWhen there are less than i numbers remaining, you stop your algorithm. \n\nNow you wonder: what is the value of the x-th remaining number after the algorithm is stopped?\n\nInput\n\nThe first line contains one integer T (1 ≤ T ≤ 100) — the number of queries. The next T lines contain queries — one per line. All queries are independent.\n\nEach line contains two space-separated integers n and x (1 ≤ x < n ≤ 10^{9}) — the length of the list and the position we wonder about. It's guaranteed that after the algorithm ends, the list will still contain at least x numbers.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> x", "<T_1>->n <s> x"], "constraints": ["1<=T<=100", "1<=x<n<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'T' is used as a counter for the number of queries, hence it is enclosed in brackets as [T]. The grammar is structured as '<S>->[T] <n> <T_T>', where <T_i> is a counter non-terminal for [T]. Each query consists of two integers, 'n' and 'x', separated by a space. The counter non-terminal <T_i> is defined to handle each query line, decrementing until it reaches 1. The grammar rules are '<T_i>-><T_i-1> <n> n <s> x' and '<T_1>->n <s> x', ensuring each query is processed correctly."}
{"name": "1194_D. 1-2-K Game", "description": "Input\n\nThe first line contains the single integer T (1 <= T <= 100) --- the number of games. Next T lines contain one game per line. All games are independent.\n\nEach of the next T lines contains two integers n and k (0 <= n <= 109, 3 <= k <= 109) --- the length of the strip and the constant denoting the third move, respectively.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> k", "<T_1>->n <s> k"], "constraints": ["1<=T<=100", "0<=n<=10^9", "3<=k<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable T serves as a counter variable for the number of games, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each game is represented by two integers n and k separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> k' and '<T_1>->n <s> k' to systematically parse each game's input following the count [T]."}
{"name": "1195_B. Sport Mafia", "description": "Each evening after the dinner the SIS's students gather together to play the game of Sport Mafia. \n\nFor the tournament, Alya puts candies into the box, which will serve as a prize for a winner. To do that, she performs n actions. The first action performed is to put a single candy into the box. For each of the remaining moves she can choose from two options:\n\n  * the first option, in case the box contains at least one candy, is to take exactly one candy out and eat it. This way the number of candies in the box decreased by 1; \n  * the second option is to put candies in the box. In this case, Alya will put 1 more candy, than she put in the previous time. \n\n\n\nThus, if the box is empty, then it can only use the second option.\n\nFor example, one possible sequence of Alya's actions look as follows:\n\n  * put one candy into the box; \n  * put two candies into the box; \n  * eat one candy from the box; \n  * eat one candy from the box; \n  * put three candies into the box; \n  * eat one candy from the box; \n  * put four candies into the box; \n  * eat one candy from the box; \n  * put five candies into the box; \n\n\n\nThis way she will perform 9 actions, the number of candies at the end will be 11, while Alya will eat 4 candies in total.\n\nYou know the total number of actions n and the number of candies at the end k. You need to find the total number of sweets Alya ate. That is the number of moves of the first option. It's guaranteed, that for the given n and k the answer always exists.\n\nPlease note, that during an action of the first option, Alya takes out and eats exactly one candy.\n\nInput\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10^9; 0 ≤ k ≤ 10^9) — the total number of moves and the number of candies in the box at the end. \n\nIt's guaranteed, that for the given n and k the answer exists.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=10^9", "0<=k<=10^9"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and k, which are not used as counters in the input format. Therefore, they are represented simply as 'n' and 'k' without brackets. The input format specifies that these two integers are separated by a space, denoted as <s>. Thus, the grammar is constructed as '<S>->n <s> k' to reflect the input structure where 'n' and 'k' are provided on the same line separated by a single space."}
{"name": "1195_D2. Submarine in the Rybinsk Sea (hard edition)", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of elements in the array. The second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) --- the elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100000", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'n' is used as a counter variable for the array elements, thus it is denoted as [n] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1199_B. Water Lily", "description": "While sailing on a boat, Inessa noticed a beautiful water lily flower above the lake's surface. She came closer and it turned out that the lily was exactly H centimeters above the water surface. Inessa grabbed the flower and sailed the distance of L centimeters. Exactly at this point the flower touched the water surface.\n\n<image>\n\nSuppose that the lily grows at some point A on the lake bottom, and its stem is always a straight segment with one endpoint at point A. Also suppose that initially the flower was exactly above the point A, i.e. its stem was vertical. Can you determine the depth of the lake at point A?\n\nInput\n\nThe only line contains two integers H and L (1 ≤ H < L ≤ 10^{6}).", "grammar": {"productions": ["<S>->H <s> L"], "constraints": ["1<=H<L<=10^6"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'H' and 'L', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->H <s> L', representing the input format where 'H' and 'L' are two integers separated by a space. Since neither 'H' nor 'L' serve as counter variables, they are not enclosed in brackets."}
{"name": "1199_C. MP3", "description": "Input\n\nThe first line contains two integers n and I (1 <= n <= 4 * 10^{5}, 1 <= I <= 10^{8}) --- the length of the array and the size of the disk in bytes, respectively.\n\nThe next line contains n integers a_{i} (0 <= a_{i} <= 10^{9}) --- the array denoting the sound file.", "grammar": {"productions": ["<S>->[n] <s> [I] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=4*10^5", "1<=I<=10^8", "0<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables 'n' and 'I' are both used as counters, hence they are enclosed in brackets as [n] and [I]. The grammar is initiated with '<S>->[n] <s> [I] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The array elements 'a_i' are represented in the grammar as '<T_i>-><T_i-1> <s> a_i', with the base case '<T_1>->a_1' to handle the first element of the array. This structure ensures the input format is correctly parsed, with 'n' integers separated by spaces."}
{"name": "119_C. Education Reform", "description": "Input\n\nThe first line contains three integers n, m, k (1 <= n <= m <= 50, 1 <= k <= 100) which represent the number of days in an academic year, the number of subjects and the k parameter correspondingly. Each of the following m lines contains the description of a subject as three integers ai, bi, ci (1 <= ai <= bi <=10^16, bi - ai <= 100, 1 <= ci <= 100) --- two limitations to the number of exercises on the i-th subject and the complexity of the i-th subject, correspondingly. Distinct subjects can have the same complexity. The subjects are numbered with integers from 1 to m. \n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use the cin stream or the %I64d specificator.", "grammar": {"productions": ["<S> -> n <s> m <s> k <n> <T_m>", "<T_i> -> ai <s> bi <s> ci <n> <T_i-1>", "<T_1> -> ai <s> bi <s> ci"], "constraints": ["1<=n<=m<=50", "1<=k<=100", "1<=ai<=bi<=10^16", "bi-ai<=100", "1<=ci<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: n, m, and k, where n and m serve as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <s> k <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each line describes a subject with three integers ai, bi, and ci, separated by spaces. The grammar constructs are laid out as '<T_i>->ai <s> bi <s> ci <n> <T_i-1>' and '<T_1>->ai <s> bi <s> ci' to systematically parse the sequence of subject descriptions following the count [m]."}
{"name": "1200_A. Hotelier", "description": "Amugae has a hotel consisting of 10 rooms. The rooms are numbered from 0 to 9 from left to right.\n\nThe hotel has two entrances — one from the left end, and another from the right end. When a customer arrives to the hotel through the left entrance, they are assigned to an empty room closest to the left entrance. Similarly, when a customer arrives at the hotel through the right entrance, they are assigned to an empty room closest to the right entrance.\n\nOne day, Amugae lost the room assignment list. Thankfully Amugae's memory is perfect, and he remembers all of the customers: when a customer arrived, from which entrance, and when they left the hotel. Initially the hotel was empty. Write a program that recovers the room assignment list from Amugae's memory.\n\nInput\n\nThe first line consists of an integer n (1 ≤ n ≤ 10^5), the number of events in Amugae's memory.\n\nThe second line consists of a string of length n describing the events in chronological order. Each character represents: \n\n  * 'L': A customer arrives from the left entrance. \n  * 'R': A customer arrives from the right entrance. \n  * '0', '1', ..., '9': The customer in room x (0, 1, ..., 9 respectively) leaves. \n\n\n\nIt is guaranteed that there is at least one empty room when a customer arrives, and there is a customer in the room x when x (0, 1, ..., 9) is given. Also, all the rooms are initially empty.", "grammar": {"productions": ["<S>->[n] <n> [LR0-9]{n}"], "constraints": ["0<=n<=10^15"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for the number of events, hence it is enclosed in brackets as [n]. The second line consists of a string of length 'n' with characters 'L', 'R', or digits '0' to '9'. Since the string length is determined by 'n', the grammar uses the regular expression [LR0-9]{n} to represent the sequence of events. Thus, the grammar is constructed as '<S>->[n] <n> [LR0-9]{n}' to reflect the input format where 'n' specifies the length of the event string."}
{"name": "1200_B. Block Adventure", "description": "Gildong is playing a video game called Block Adventure. In Block Adventure, there are n columns of blocks in a row, and the columns are numbered from 1 to n. All blocks have equal heights. The height of the i-th column is represented as h_i, which is the number of blocks stacked in the i-th column.\n\nGildong plays the game as a character that can stand only on the top of the columns. At the beginning, the character is standing on the top of the 1-st column. The goal of the game is to move the character to the top of the n-th column.\n\nThe character also has a bag that can hold infinitely many blocks. When the character is on the top of the i-th column, Gildong can take one of the following three actions as many times as he wants: \n\n  * if there is at least one block on the column, remove one block from the top of the i-th column and put it in the bag; \n  * if there is at least one block in the bag, take one block out of the bag and place it on the top of the i-th column; \n  * if i < n and |h_i - h_{i+1}| ≤ k, move the character to the top of the i+1-st column. k is a non-negative integer given at the beginning of the game. Note that it is only possible to move to the next column. \n\n\n\nIn actions of the first two types the character remains in the i-th column, and the value h_i changes.\n\nThe character initially has m blocks in the bag. Gildong wants to know if it is possible to win the game. Help Gildong find the answer to his question.\n\nInput\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). Description of the test cases follows.\n\nThe first line of each test case contains three integers n, m, and k (1 ≤ n ≤ 100, 0 ≤ m ≤ 10^6, 0 ≤ k ≤ 10^6) — the number of columns in the game, the number of blocks in the character's bag at the beginning, and the non-negative integer k described in the statement.\n\nThe second line of each test case contains n integers. The i-th integer is h_i (0 ≤ h_i ≤ 10^6), the initial height of the i-th column.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> m <s> k <n> <L_n>", "<T_1>->[n] <s> m <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> h_i", "<L_1>->h_1"], "constraints": ["1<=t<=1000", "1<=n<=100", "0<=m<=10^6", "0<=k<=10^6", "0<=h_i<=10^6"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes three integers n, m, and k, followed by a sequence of n integers h_i. The sequence of h_i is handled by another counter non-terminal <L_n>, which is driven by the counter variable [n]. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> m <s> k <n> <L_n>', '<T_1>->[n] <s> m <s> k <n> <L_n>', '<L_i>-><L_i-1> <s> h_i', and '<L_1>->h_1' to systematically parse each test case and the sequence of heights."}
{"name": "1201_B. Zero Array", "description": "You are given an array a_1, a_2, …, a_n.\n\nIn one operation you can choose two elements a_i and a_j (i ≠ j) and decrease each of them by one.\n\nYou need to check whether it is possible to make all the elements equal to zero or not.\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5) — the size of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=10^5", "1<=a_i<=10^9", "i!=j"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for the array elements, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The array elements 'a_i' are separated by spaces <s>, leading to the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1'. This setup ensures the grammar correctly parses the sequence of array elements based on the count [n]."}
{"name": "1202_C. You Are Given a WASD-string...", "description": "Input\n\nThe first line contains one integer T (1 <= T <= 1000) --- the number of queries.\n\nNext T lines contain queries: one per line. This line contains single string s (1 <= |s| <= 2 * 10^5, s_i in \\{W, A, S, D\\}) --- the sequence of commands.\n\nIt's guaranteed that the total length of s over all queries doesn't exceed 2 * 10^5.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [WASD]{1,2*10^5}", "<T_1>->[WASD]{1,2*10^5}"], "constraints": ["1<=T<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'T' is used as a counter variable for the number of queries, hence it is enclosed in brackets as [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each query is a string 's' consisting of characters 'W', 'A', 'S', or 'D' with a length between 1 and 2*10^5. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [WASD]{1,2*10^5}' and '<T_1>->[WASD]{1,2*10^5}' to systematically parse each query string following the count [T]."}
{"name": "1202_F. You Are Given Some Letters...", "description": "Input\n\nThe first line contains two integers a and b (1 <= a, b <= 10^9) --- the number of letters 'A' and 'B', respectively.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space. Since neither 'a' nor 'b' serve as counter variables, they are not enclosed in brackets."}
{"name": "1203_A. Circle of Students", "description": "There are n students standing in a circle in some order. The index of the i-th student is p_i. It is guaranteed that all indices of students are distinct integers from 1 to n (i. e. they form a permutation).\n\nStudents want to start a round dance. A clockwise round dance can be started if the student 2 comes right after the student 1 in clockwise order (there are no students between them), the student 3 comes right after the student 2 in clockwise order, and so on, and the student n comes right after the student n - 1 in clockwise order. A counterclockwise round dance is almost the same thing — the only difference is that the student i should be right after the student i - 1 in counterclockwise order (this condition should be met for every i from 2 to n). \n\nFor example, if the indices of students listed in clockwise order are [2, 3, 4, 5, 1], then they can start a clockwise round dance. If the students have indices [3, 2, 1, 4] in clockwise order, then they can start a counterclockwise round dance.\n\nYour task is to determine whether it is possible to start a round dance. Note that the students cannot change their positions before starting the dance; they cannot swap or leave the circle, and no other student can enter the circle. \n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 200) — the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 200) — the number of students.\n\nThe second line of the query contains a permutation of indices p_1, p_2, ..., p_n (1 ≤ p_i ≤ n), where p_i is the index of the i-th student (in clockwise order). It is guaranteed that all p_i are distinct integers from 1 to n (i. e. they form a permutation).", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> p_i", "<L_1>->p_1"], "constraints": ["1<=q<=200", "1<=n<=200", "1<=p_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'q' is used as a counter for the number of queries, hence it is enclosed in brackets as [q]. The grammar is initiated with '<S>->[q] <n> <T_q>', where <T_q> is a counter non-terminal for [q]. Each query consists of an integer 'n' (also a counter variable, hence [n]) followed by a permutation of 'n' elements, represented by <L_n>. The permutation elements 'p_i' are listed in sequence, separated by spaces, hence the rules '<L_i>-><L_i-1> <s> p_i' and '<L_1>->p_1'. The structure ensures that each query is processed with the correct number of elements as specified by [n]."}
{"name": "1203_C. Common Divisors", "description": "You are given an array a consisting of n integers.\n\nYour task is to say the number of such positive integers x such that x divides each number from the array. In other words, you have to find the number of common divisors of all elements in the array.\n\nFor example, if the array a will be [2, 4, 6, 2, 10], then 1 and 2 divide each number from the array (so the answer for this test is 2).\n\nInput\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 4 ⋅ 10^5) — the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{12}), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=4*10^5", "1<=a_i<=10^12"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the array elements, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "1204_B. Mislove Has Lost an Array", "description": "Mislove had an array a_1, a_2, ⋅⋅⋅, a_n of n positive integers, but he has lost it. He only remembers the following facts about it:\n\n  * The number of different numbers in the array is not less than l and is not greater than r;\n  * For each array's element a_i either a_i = 1 or a_i is even and there is a number (a_i)/(2) in the array.\n\n\n\nFor example, if n=5, l=2, r=3 then an array could be [1,2,2,4,4] or [1,1,1,1,2]; but it couldn't be [1,2,2,4,8] because this array contains 4 different numbers; it couldn't be [1,2,2,3,3] because 3 is odd and isn't equal to 1; and it couldn't be [1,1,2,2,16] because there is a number 16 in the array but there isn't a number 16/2 = 8.\n\nAccording to these facts, he is asking you to count the minimal and the maximal possible sums of all elements in an array. \n\nInput\n\nThe only input line contains three integers n, l and r (1 ≤ n ≤ 1 000, 1 ≤ l ≤ r ≤ min(n, 20)) — an array's size, the minimal number and the maximal number of distinct elements in an array.", "grammar": {"productions": ["<S>->n <s> l <s> r"], "constraints": ["1<=n<=1000", "1<=l<=r<=min(n,20)"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of three variables: n, l, and r, none of which serve as counter variables in this context. Therefore, they are represented directly without brackets. The grammar is structured as '<S>->n <s> l <s> r', reflecting the input format where the three integers are separated by spaces."}
{"name": "1204_D2. Kirk and a Binary String (hard version)", "description": "Input\n\nThe first line contains a binary string of length not more than 10^5.", "grammar": {"productions": ["<S>->[0-1]{1,100000}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a binary string of variable length, which is represented using a regular expression [0-1]{1,100000} to denote a sequence of '0's and '1's with a length ranging from 1 to 100,000. Since there are no counter variables or additional constraints specified, the grammar is simply constructed as '<S>->[0-1]{1,100000}' to match the input format."}
{"name": "1206_F. Almost All", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 1000) --- the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.", "grammar": {"productions": ["<S>->[n] <n> <T_n-1>", "<T_i>-><T_i-1> <n> u <s> v", "<T_1>->u <s> v"], "constraints": ["1<=n<=1000", "1<=u,v<=n", "u!=v"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter for the number of edges, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n-1>', where <T_i> is a counter non-terminal for [n-1] edges. Each edge is represented by two integers 'u' and 'v' separated by a space, leading to the rules '<T_i>-><T_i-1> <n> u <s> v' and '<T_1>->u <s> v'. This setup ensures the grammar correctly parses the input format where 'n' is the number of nodes followed by 'n-1' edges."}
{"name": "1208_B. Uniqueness", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 2000) --- the number of elements in the given array.\n\nThe next line contains n spaced integers a_{1}, a_{2}, ..., a_{n} (1 <= a_{i} <= 10^{9}) --- the elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2000", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the array elements, hence it is denoted as [n] in the grammar. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter-driven rule for [n], representing each array element 'a_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1209_A. Paint the Numbers", "description": "You are given a sequence of integers a_1, a_2, ..., a_n. You need to paint elements in colors, so that: \n\n  * If we consider any color, all elements of this color must be divisible by the minimal element of this color. \n  * The number of used colors must be minimized. \n\n\n\nFor example, it's fine to paint elements [40, 10, 60] in a single color, because they are all divisible by 10. You can use any color an arbitrary amount of times (in particular, it is allowed to use a color only once). The elements painted in one color do not need to be consecutive.\n\nFor example, if a=[6, 2, 3, 4, 12] then two colors are required: let's paint 6, 3 and 12 in the first color (6, 3 and 12 are divisible by 3) and paint 2 and 4 in the second color (2 and 4 are divisible by 2). For example, if a=[10, 7, 15] then 3 colors are required (we can simply paint each element in an unique color).\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 100), where n is the length of the given sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100). These numbers can contain duplicates.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=a_i<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the sequence elements, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence elements. The sequence elements 'a_i' are separated by a space symbol <s>, leading to the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1'. This setup ensures the grammar correctly parses the sequence of integers as specified in the input format."}
{"name": "1209_F. Koala and Notebook", "description": "Input\n\nThe first line contains two integers n and m (2 <= n <= 10^5, n - 1 <= m <= 10^5), the number of cities and the number of roads, respectively.\n\nThe i-th of the following m lines contains integers x_i and y_i (1 <= x_i, y_i <= n, x_i != y_i), representing a bidirectional road between cities x_i and y_i.\n\nIt is guaranteed, that for any pair of cities there is at most one road connecting them, and that one can reach any city from every other city.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_i <s> y_i"], "constraints": ["2<=n<=10^5", "n-1<=m<=10^5", "1<=x_i,y_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each line contains two integers x_i and y_i separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> x_i <s> y_i' and '<T_1>->x_i <s> y_i' to systematically parse the sequence of road connections following the count [m]."}
{"name": "120_C. Winnie-the-Pooh and honey", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 100, 1 <= k <= 100). The second line contains n integers a1, a2, ..., an, separated by spaces (1 <= ai <= 100).", "grammar": {"productions": ["<S>->[n] <s> [k] <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_i"], "constraints": ["1<=n<=100", "1<=k<=100", "1<=A_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, both serving as counter variables, hence they are enclosed in brackets as [n] and [k]. The grammar is initiated with '<S>->[n] <s> [k] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'A_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_i' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1216_B. Shooting", "description": "Recently Vasya decided to improve his pistol shooting skills. Today his coach offered him the following exercise. He placed n cans in a row on a table. Cans are numbered from left to right from 1 to n. Vasya has to knock down each can exactly once to finish the exercise. He is allowed to choose the order in which he will knock the cans down.\n\nVasya knows that the durability of the i-th can is a_i. It means that if Vasya has already knocked x cans down and is now about to start shooting the i-th one, he will need (a_i ⋅ x + 1) shots to knock it down. You can assume that if Vasya starts shooting the i-th can, he will be shooting it until he knocks it down.\n\nYour task is to choose such an order of shooting so that the number of shots required to knock each of the n given cans down exactly once is minimum possible.\n\nInput\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 1 000) — the number of cans.\n\nThe second line of the input contains the sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1 000), where a_i is the durability of the i-th can.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=1000", "1<=a_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of cans, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of durability values 'a_i' is represented by the non-terminal <T_i>, which constructs the sequence with each 'a_i' separated by a space symbol <s>. The base case <T_1>->a_1 terminates the recursion when the counter reaches 1. The grammar systematically parses the sequence of 'a_i' values following the count [n]."}
{"name": "1216_D. Swords", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^{5}) --- the number of types of swords.\n\nThe second line of the input contains the sequence a_1, a_2, ..., a_n (0 <= a_i <= 10^{9}), where a_i equals to the number of swords of the i-th type, which have remained in the basement after the theft. It is guaranteed that there exists at least one such pair of indices (j, k) that a_j != a_k.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=200000", "0<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of integers 'a_i' separated by spaces. The sequence is constructed using the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1', ensuring each element is properly spaced. The constraints reflect the range of 'n' and the values of 'a_i'."}
{"name": "121_A. Lucky Sum", "description": "Input\n\nThe single line contains two integers l and r (1 <= l <= r <= 109) --- the left and right interval limits.", "grammar": {"productions": ["<S>->l <s> r"], "constraints": ["1<=l<=r<=10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'l' and 'r', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->l <s> r', representing the input format where 'l' and 'r' are two integers separated by a space."}
{"name": "1221_A. 2048 Game", "description": "You are playing a variation of game 2048. Initially you have a multiset s of n integers. Every integer in this multiset is a power of two. \n\nYou may perform any number (possibly, zero) operations with this multiset.\n\nDuring each operation you choose two equal integers from s, remove them from s and insert the number equal to their sum into s.\n\nFor example, if s = \\{1, 2, 1, 1, 4, 2, 2\\} and you choose integers 2 and 2, then the multiset becomes \\{1, 1, 1, 4, 4, 2\\}.\n\nYou win if the number 2048 belongs to your multiset. For example, if s = \\{1024, 512, 512, 4\\} you can win as follows: choose 512 and 512, your multiset turns into \\{1024, 1024, 4\\}. Then choose 1024 and 1024, your multiset turns into \\{2048, 4\\} and you win.\n\nYou have to determine if you can win this game.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line contains one integer q (1 ≤ q ≤ 100) – the number of queries.\n\nThe first line of each query contains one integer n (1 ≤ n ≤ 100) — the number of elements in multiset.\n\nThe second line of each query contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 2^{29}) — the description of the multiset. It is guaranteed that all elements of the multiset are powers of two.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> s_i", "<L_1>->s_1"], "constraints": ["1<=q<=100", "1<=n<=100", "1<=s_i<=2^29"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'q' serves as a counter for the number of queries, hence it is denoted as [q]. The grammar is initiated with '<S>->[q] <n> <T_q>'. The non-terminal <T_i> is a counter-driven rule for [q], where each query consists of an integer 'n' (also a counter variable, hence [n]) followed by 'n' integers s_1 to s_n. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> s_i', and '<L_1>->s_1' to systematically parse each query's sequence of integers following the count [n]."}
{"name": "1225_C. p-binary", "description": "Input\n\nThe only line contains two integers n and p (1 <= n <= 10^9, -1000 <= p <= 1000).", "grammar": {"productions": ["<S>->n <s> p"], "constraints": ["1<=n<=10^9", "-1000<=p<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and p, but neither serves as a counter variable, so they are not enclosed in brackets. The grammar is structured as '<S>->n <s> p', representing the input format where 'n' and 'p' are two integers separated by a space. Since neither variable acts as a counter, no counter non-terminals are needed, and the grammar remains simple and direct."}
{"name": "1227_F2. Wrong Answer on test 233 (Hard Version)", "description": "Input\n\nThe first line contains two integers n, k (1 <= n <= 2*10^5, 1 <= k <= 10^9) --- the number of questions and the number of possible answers to each question.\n\nThe following line contains n integers h_1, h_2, ..., h_n, (1 <= h_{i} <= k) --- answers to the questions.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=n<=2*10^5", "1<=k<=10^9", "1<=h_i<=k"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'k', where 'n' serves as a counter variable for the sequence of answers, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <s> k <n> <T_n>', where <T_n> is the counter non-terminal for [n]. The sequence of answers is represented by <T_i>, which decrements until it reaches <T_1>, each time appending the answer h_i separated by a space <s>. The grammar ensures the input format where 'n' and 'k' are given first, followed by 'n' integers representing the answers."}
{"name": "122_E. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <=10^9) --- the number of elements in the permutation and the lexicographical number of the permutation.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n,k<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'k', which are not used as counters in this context, hence they are not enclosed in brackets. The grammar is structured as '<S>->n <s> k', representing the input format where 'n' and 'k' are two integers separated by a space."}
{"name": "1231_A. Dawid and Bags of Candies", "description": "Input\n\nThe only line contains four integers a_1, a_2, a_3 and a_4 (1 <= a_i <= 100) --- the numbers of candies in each bag.", "grammar": {"productions": ["<S>->a_1 <s> a_2 <s> a_3 <s> a_4"], "constraints": ["1<=a_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables, a_1, a_2, a_3, and a_4, which are not counter variables, hence they are not enclosed in brackets. The variables are separated by space symbols <s>. The grammar is constructed as '<S>->a_1 <s> a_2 <s> a_3 <s> a_4' to represent the input format where four integers are given in a single line separated by spaces."}
{"name": "1236_B. Alice and the List of Presents", "description": "Input\n\nThe first line contains two integers n and m, separated by spaces (1 <= n,m <= 10^9) --- the number of kinds of presents and the number of boxes that Alice has.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=n,m<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, which are not used as counters in this context but simply as integers separated by a space. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->n <s> m', representing the input format where 'n' and 'm' are two integers separated by a space."}
{"name": "1237_E. Balanced Binary Search Trees", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 10^6), denoting the required number of vertices.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=1000000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is the only input and does not serve as a counter variable, hence it is represented simply as 'n'. The grammar is constructed as '<S>->n' to reflect the input format where a single integer 'n' is provided."}
{"name": "1238_D. AB-string", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 3 * 10^5) --- the length of the string s.\n\nThe second line contains the string s, consisting of letters A and B.", "grammar": {"productions": ["<S>->[n] <n> [AB]{n}"], "constraints": ["1<=n<=3*10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is used both as a counter and to specify the length of a string. Consequently, the variable is represented as [n] to indicate its role as a length specifier for the string, which consists only of characters 'A' and 'B'. This string is described using the regular expression [AB]{n}, meaning a string of n characters, each of which is either 'A' or 'B'. Thus, the grammar is constructed to reflect this format: '<S>->[n] <n> [AB]{n}'."}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^12"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is provided as input, but it does not serve as a counter variable for any sequence or repetition in the grammar. Therefore, it is represented simply as 'n' without brackets. The grammar is constructed as '<S>->n' to reflect the input format where only a single integer 'n' is given."}
{"name": "1243_A. Maximum Square", "description": "Ujan decided to make a new wooden roof for the house. He has n rectangular planks numbered from 1 to n. The i-th plank has size a_i × 1 (that is, the width is 1 and the height is a_i).\n\nNow, Ujan wants to make a square roof. He will first choose some of the planks and place them side by side in some order. Then he will glue together all of these planks by their vertical sides. Finally, he will cut out a square from the resulting shape in such a way that the sides of the square are horizontal and vertical.\n\nFor example, if Ujan had planks with lengths 4, 3, 1, 4 and 5, he could choose planks with lengths 4, 3 and 5. Then he can cut out a 3 × 3 square, which is the maximum possible. Note that this is not the only way he can obtain a 3 × 3 square.\n\n<image>\n\nWhat is the maximum side length of the square Ujan can get?\n\nInput\n\nThe first line of input contains a single integer k (1 ≤ k ≤ 10), the number of test cases in the input.\n\nFor each test case, the first line contains a single integer n (1 ≤ n ≤ 1 000), the number of planks Ujan has in store. The next line contains n integers a_1, …, a_n (1 ≤ a_i ≤ n), the lengths of the planks.", "grammar": {"productions": ["<S>->[k] <n> <T_k>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=k<=10", "1<=n<=1000", "1<=a_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'k' is used as a counter variable for the number of test cases, hence it is enclosed in [k]. The grammar is initiated with '<S>->[k] <n> <T_k>'. The non-terminal <T_i> is a counter-driven rule for [k], where each test case consists of an integer 'n' (also a counter variable, hence [n]) followed by 'n' integers a_1 to a_n. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>' and '<T_1>->[n] <n> <L_n>', where <L_n> is another counter non-terminal for the sequence of 'a_i' values. The sequence of 'a_i' is represented by '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "1244_G. Running in Pairs", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 10^6, 1 <= k <= n^2) --- the number of runners on each track and the maximum possible duration of the competition, respectively.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=10^6", "1<=k<=n^2"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, 'n' and 'k', but neither serves as a counter variable in this context, so they are not enclosed in brackets. The grammar is initiated with '<S>->n <s> k', representing the input format where 'n' and 'k' are two integers separated by a space. Since neither variable is used to control a sequence or repetition, no counter non-terminals are required."}
{"name": "1245_A. Good ol' Numbers Coloring", "description": "Consider the set of all nonnegative integers: {0, 1, 2, ...}. Given two integers a and b (1 ≤ a, b ≤ 10^4). We paint all the numbers in increasing number first we paint 0, then we paint 1, then 2 and so on.\n\nEach number is painted white or black. We paint a number i according to the following rules: \n\n  * if i = 0, it is colored white; \n  * if i ≥ a and i - a is colored white, i is also colored white; \n  * if i ≥ b and i - b is colored white, i is also colored white; \n  * if i is still not colored white, it is colored black. \n\n\n\nIn this way, each nonnegative integer gets one of two colors.\n\nFor example, if a=3, b=5, then the colors of the numbers (in the order from 0) are: white (0), black (1), black (2), white (3), black (4), white (5), white (6), black (7), white (8), white (9), ...\n\nNote that: \n\n  * It is possible that there are infinitely many nonnegative integers colored black. For example, if a = 10 and b = 10, then only 0, 10, 20, 30 and any other nonnegative integers that end in 0 when written in base 10 are white. The other integers are colored black. \n  * It is also possible that there are only finitely many nonnegative integers colored black. For example, when a = 1 and b = 10, then there is no nonnegative integer colored black at all. \n\n\n\nYour task is to determine whether or not the number of nonnegative integers colored black is infinite.\n\nIf there are infinitely many nonnegative integers colored black, simply print a line containing \"Infinite\" (without the quotes). Otherwise, print \"Finite\" (without the quotes).\n\nInput\n\nThe first line of input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t lines follow, each line contains two space-separated integers a and b (1 ≤ a, b ≤ 10^4).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=a<=10^4", "1<=b<=10^4", "1<=t<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two integers 'a' and 'b' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a <s> b' and '<T_1>->a <s> b' to systematically parse each test case following the count [t]."}
{"name": "1246_A. p-binary", "description": "Input\n\nThe only line contains two integers n and p (1 <= n <= 10^9, -1000 <= p <= 1000).", "grammar": {"productions": ["<S>->n <s> p"], "constraints": ["1<=n<=10^9", "-1000<=p<=1000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and p, but neither serves as a counter variable, so they are not enclosed in brackets. The grammar is initiated with '<S>->n <s> p', representing the input format where 'n' and 'p' are two integers separated by a space."}
{"name": "1248_B. Grow The Tree", "description": "Gardener Alexey teaches competitive programming to high school students. To congratulate Alexey on the Teacher's Day, the students have gifted him a collection of wooden sticks, where every stick has an integer length. Now Alexey wants to grow a tree from them.\n\nThe tree looks like a polyline on the plane, consisting of all sticks. The polyline starts at the point (0, 0). While constructing the polyline, Alexey will attach sticks to it one by one in arbitrary order. Each stick must be either vertical or horizontal (that is, parallel to OX or OY axis). It is not allowed for two consecutive sticks to be aligned simultaneously horizontally or simultaneously vertically. See the images below for clarification.\n\nAlexey wants to make a polyline in such a way that its end is as far as possible from (0, 0). Please help him to grow the tree this way.\n\nNote that the polyline defining the form of the tree may have self-intersections and self-touches, but it can be proved that the optimal answer does not contain any self-intersections or self-touches.\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 100 000) — the number of sticks Alexey got as a present.\n\nThe second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10 000) — the lengths of the sticks.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100000", "1<=a_i<=10000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of stick lengths, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of stick lengths separated by spaces. The counter non-terminal <T_i> is defined to decrement until it reaches 1, producing each 'a_i' in sequence. The grammar ensures the input format matches the specification where the first line is the count of sticks and the second line lists their lengths."}
{"name": "1249_C1. Good Numbers (easy version)", "description": "The only difference between easy and hard versions is the maximum value of n.\n\nYou are given a positive integer number n. You really love good numbers so you want to find the smallest good number greater than or equal to n.\n\nThe positive integer is called good if it can be represented as a sum of distinct powers of 3 (i.e. no duplicates of powers of 3 are allowed).\n\nFor example:\n\n  * 30 is a good number: 30 = 3^3 + 3^1, \n  * 1 is a good number: 1 = 3^0, \n  * 12 is a good number: 12 = 3^2 + 3^1, \n  * but 2 is not a good number: you can't represent it as a sum of distinct powers of 3 (2 = 3^0 + 3^0), \n  * 19 is not a good number: you can't represent it as a sum of distinct powers of 3 (for example, the representations 19 = 3^2 + 3^2 + 3^0 = 3^2 + 3^1 + 3^1 + 3^1 + 3^0 are invalid), \n  * 20 is also not a good number: you can't represent it as a sum of distinct powers of 3 (for example, the representation 20 = 3^2 + 3^2 + 3^0 + 3^0 is invalid). \n\n\n\nNote, that there exist other representations of 19 and 20 as sums of powers of 3 but none of them consists of distinct powers of 3.\n\nFor the given positive integer n find such smallest m (n ≤ m) that m is a good number.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 500) — the number of queries. Then q queries follow.\n\nThe only line of the query contains one integer n (1 ≤ n ≤ 10^4).", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=q<=500", "1<=n<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'q' serves as a counter for the number of queries, hence it is enclosed in [q]. The grammar is initiated with '<S>->[q] <n> <T_q>', where <T_i> is a counter non-terminal for [q], representing each query line. Each query line contains an integer 'n', which is not a counter variable, so it is not enclosed in brackets. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n' and '<T_1>->n' to systematically parse each query line following the count [q]."}
{"name": "1249_D1. Too Many Segments (easy version)", "description": "Input\n\nThe first line of the input contains two integers n and k (1 <= k <= n <= 200) --- the number of segments and the maximum number of segments by which each integer point can be covered.\n\nThe next n lines contain segments. The i-th line contains two integers l_i and r_i (1 <= l_i <= r_i <= 200) --- the endpoints of the i-th segment.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1"], "constraints": ["1<=k<=n<=200", "1<=l_i<=r_i<=200"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, where n serves as a counter variable for the number of segments, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each segment is represented by 'l_i' and 'r_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> l_i <s> r_i' and '<T_1>->l_1 <s> r_1' to systematically parse the sequence of segments following the count [n]."}
{"name": "124_A. The number of positions", "description": "Petr stands in line of n people, but he doesn't know exactly which position he occupies. He can say that there are no less than a people standing in front of him and no more than b people standing behind him. Find the number of different positions Petr can occupy.\n\nInput\n\nThe only line contains three integers n, a and b (0 ≤ a, b < n ≤ 100).", "grammar": {"productions": ["<S>->n <s> a <s> b"], "constraints": ["0<=a,b<n<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, n, a, and b, but none of them serve as counter variables, hence they are not enclosed in brackets. The input format specifies these three integers separated by spaces, leading to the grammar structure '<S>->n <s> a <s> b'."}
{"name": "1251_A. Broken Keyboard", "description": "Recently Polycarp noticed that some of the buttons of his keyboard are malfunctioning. For simplicity, we assume that Polycarp's keyboard contains 26 buttons (one for each letter of the Latin alphabet). Each button is either working fine or malfunctioning. \n\nTo check which buttons need replacement, Polycarp pressed some buttons in sequence, and a string s appeared on the screen. When Polycarp presses a button with character c, one of the following events happened:\n\n  * if the button was working correctly, a character c appeared at the end of the string Polycarp was typing; \n  * if the button was malfunctioning, two characters c appeared at the end of the string. \n\n\n\nFor example, suppose the buttons corresponding to characters a and c are working correctly, and the button corresponding to b is malfunctioning. If Polycarp presses the buttons in the order a, b, a, c, a, b, a, then the string he is typing changes as follows: a → abb → abba → abbac → abbaca → abbacabb → abbacabba.\n\nYou are given a string s which appeared on the screen after Polycarp pressed some buttons. Help Polycarp to determine which buttons are working correctly for sure (that is, this string could not appear on the screen if any of these buttons was malfunctioning).\n\nYou may assume that the buttons don't start malfunctioning when Polycarp types the string: each button either works correctly throughout the whole process, or malfunctions throughout the whole process.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases in the input.\n\nThen the test cases follow. Each test case is represented by one line containing a string s consisting of no less than 1 and no more than 500 lowercase Latin letters.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [a-z]{1,500}", "<T_1>->[a-z]{1,500}"], "constraints": ["1<=t<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case is a string of lowercase Latin letters with a length between 1 and 500, represented by the regular expression [a-z]{1,500}. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [a-z]{1,500}' and '<T_1>->[a-z]{1,500}' to systematically parse each test case following the count [t]."}
{"name": "1253_A. Single Push", "description": "You're given two arrays a[1 ... n] and b[1 ... n], both of the same length n.\n\nIn order to perform a push operation, you have to choose three integers l, r, k satisfying 1 ≤ l ≤ r ≤ n and k > 0. Then, you will add k to elements a_l, a_{l+1}, …, a_r.\n\nFor example, if a = [3, 7, 1, 4, 1, 2] and you choose (l = 3, r = 5, k = 2), the array a will become [3, 7, \\underline{3, 6, 3}, 2].\n\nYou can do this operation at most once. Can you make array a equal to array b?\n\n(We consider that a = b if and only if, for every 1 ≤ i ≤ n, a_i = b_i)\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 20) — the number of test cases in the input.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100\\ 000) — the number of elements in each array.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 1000).\n\nThe third line of each test case contains n integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 1000).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=20", "1<=n<=100000", "1<=a_i<=1000", "1<=b_i<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes an integer 'n' (also a counter variable, hence [n]), followed by two sequences of integers 'a_i' and 'b_i' of length 'n'. These sequences are represented by the non-terminals <L_n> and <Z_n>, respectively. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>' and '<T_1>->[n] <n> <L_n> <n> <Z_n>', with <L_i> and <Z_i> generating the sequences 'a_i' and 'b_i' separated by spaces. The base cases '<L_1>->a_1' and '<Z_1>->b_1' terminate the recursion."}
{"name": "1256_E. Yet Another Division Into Teams", "description": "Input\n\nThe first line of the input contains one integer n (3 <= n <= 2 * 10^5) --- the number of students.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i is the programming skill of the i-th student.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["3<=n<=2*10^5", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is the counter non-terminal for [n], representing the sequence of integers separated by spaces. The sequence is constructed as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to parse each integer in the sequence according to the count [n]."}
{"name": "1257_C. Dominated Subarray", "description": "Let's call an array t dominated by value v in the next situation.\n\nAt first, array t should have at least 2 elements. Now, let's calculate number of occurrences of each number num in t and define it as occ(num). Then t is dominated (by v) if (and only if) occ(v) > occ(v') for any other number v'. For example, arrays [1, 2, 3, 4, 5, 2], [11, 11] and [3, 2, 3, 2, 3] are dominated (by 2, 11 and 3 respectevitely) but arrays [3], [1, 2] and [3, 3, 2, 2, 1] are not.\n\nSmall remark: since any array can be dominated only by one number, we can not specify this number and just say that array is either dominated or not.\n\nYou are given array a_1, a_2, ..., a_n. Calculate its shortest dominated subarray or say that there are no such subarrays.\n\nThe subarray of a is a contiguous part of the array a, i. e. the array a_i, a_{i + 1}, ..., a_j for some 1 ≤ i ≤ j ≤ n.\n\nInput\n\nThe first line contains single integer T (1 ≤ T ≤ 1000) — the number of test cases. Each test case consists of two lines.\n\nThe first line contains single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the corresponding values of the array a.\n\nIt's guaranteed that the total length of all arrays in one test doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=T<=1000", "1<=n<=2*10^5", "1<=a_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'T' is used as a counter for the number of test cases, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case consists of a line with 'n' (the length of the array) followed by the array elements. The array elements are represented by <L_n>, a counter non-terminal for the array length 'n'. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>' and '<T_1>->[n] <n> <L_n>', with <L_i> representing the array elements separated by spaces. The array elements are denoted as 'a_i' in the input, hence '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_1'."}
{"name": "1257_G. Divisor Set", "description": "Input\n\nThe first line contains the single integer n (1 <= n <= 2 * 10^5) --- the number of prime divisors in representation of x.\n\nThe second line contains n integers p_1, p_2, ..., p_n (2 <= p_i <= 3 * 10^6) --- the prime factorization of x.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=200000", "2<=p_i<=3000000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of prime divisors, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n]. The sequence of prime divisors p_i is represented with each element separated by a space symbol <s>, leading to the rules '<T_i>-><T_i-1> <s> p_i' and '<T_1>->p_1' to parse the sequence according to the count [n]."}
{"name": "1264_A. Beautiful Regional Contest", "description": "Input\n\nThe first line of the input contains an integer t (1 <= t <= 10000) --- the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains an integer n (1 <= n <= 4*10^5) --- the number of BeRC participants. The second line of a test case contains integers p_1, p_2, ..., p_n (0 <= p_i <= 10^6), where p_i is equal to the number of problems solved by the i-th participant from the final standings. The values p_i are sorted in non-increasing order, i.e. p_1 >= p_2 >= ... >= p_n.\n\nThe sum of n over all test cases in the input does not exceed 4*10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> p_i", "<L_1>->p_1"], "constraints": ["1<=t<=10000", "1<=n<=4*10^5", "0<=p_i<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes a line with [n] (another counter variable for the number of participants) followed by a sequence of integers p_i separated by spaces. The sequence of p_i is handled by the non-terminal <L_n>, which is a counter-driven rule for [n]. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> p_i', and '<L_1>->p_1' to systematically parse the sequence of participants' scores for each test case."}
{"name": "1266_A. Competitive Programmer", "description": "Bob is a competitive programmer. He wants to become red, and for that he needs a strict training regime. He went to the annual meeting of grandmasters and asked n of them how much effort they needed to reach red.\n\n\"Oh, I just spent x_i hours solving problems\", said the i-th of them. \n\nBob wants to train his math skills, so for each answer he wrote down the number of minutes (60 ⋅ x_i), thanked the grandmasters and went home. Bob could write numbers with leading zeroes — for example, if some grandmaster answered that he had spent 2 hours, Bob could write 000120 instead of 120.\n\nAlice wanted to tease Bob and so she took the numbers Bob wrote down, and for each of them she did one of the following independently: \n\n  * rearranged its digits, or \n  * wrote a random number. \n\n\n\nThis way, Alice generated n numbers, denoted y_1, ..., y_n.\n\nFor each of the numbers, help Bob determine whether y_i can be a permutation of a number divisible by 60 (possibly with leading zeroes).\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 418) — the number of grandmasters Bob asked.\n\nThen n lines follow, the i-th of which contains a single integer y_i — the number that Alice wrote down.\n\nEach of these numbers has between 2 and 100 digits '0' through '9'. They can contain leading zeroes.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [0-9]{2,100}", "<T_1>->[0-9]{2,100}"], "constraints": ["1<=n<=418"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of grandmasters, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n]. Each line after the first contains a number 'y_i' with digits ranging from '0' to '9' and a length between 2 and 100 characters, represented by the regular expression [0-9]{2,100}. The grammar constructs are '<T_i>-><T_i-1> <n> [0-9]{2,100}' and '<T_1>->[0-9]{2,100}' to parse each 'y_i' in sequence."}
{"name": "1266_B. Dice Tower", "description": "Bob is playing with 6-sided dice. A net of such standard cube is shown below.\n\n<image>\n\nHe has an unlimited supply of these dice and wants to build a tower by stacking multiple dice on top of each other, while choosing the orientation of each dice. Then he counts the number of visible pips on the faces of the dice.\n\nFor example, the number of visible pips on the tower below is 29 — the number visible on the top is 1, from the south 5 and 3, from the west 4 and 2, from the north 2 and 4 and from the east 3 and 5.\n\n<image>\n\nThe one at the bottom and the two sixes by which the dice are touching are not visible, so they are not counted towards total.\n\nBob also has t favourite integers x_i, and for every such integer his goal is to build such a tower that the number of visible pips is exactly x_i. For each of Bob's favourite integers determine whether it is possible to build a tower that has exactly that many visible pips.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of favourite integers of Bob. \n\nThe second line contains t space-separated integers x_i (1 ≤ x_i ≤ 10^{18}) — Bob's favourite integers.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=t<=1000", "1<=x_i<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter variable for the number of favorite integers, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal that generates 't' space-separated integers 'x_i'. The counter non-terminal <T_i> is defined to decrement until it reaches 1, producing each 'x_i' separated by a space <s>. The final rule '<T_1>->x_1' ensures the sequence ends correctly. This setup accurately reflects the input format where 't' integers are provided in a single line."}
{"name": "1270_F. Awesome Substrings", "description": "Input\n\nThe first line contains the string s (1 <= |s|<= 200 000) consisting only of zeros and ones.", "grammar": {"productions": ["<S>->[01]{1,200000}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a string 's' that can only contain zeros and ones, with a length ranging from 1 to 200,000 characters. Since the entire string is defined by a regular expression [01]{1,200000}, the grammar is simply represented as '<S>->[01]{1,200000}', where the regex directly replaces the variable 's' to specify the allowed characters and their length constraints."}
{"name": "1271_A. Suits", "description": "A new delivery of clothing has arrived today to the clothing store. This delivery consists of a ties, b scarves, c vests and d jackets.\n\nThe store does not sell single clothing items — instead, it sells suits of two types:\n\n  * a suit of the first type consists of one tie and one jacket; \n  * a suit of the second type consists of one scarf, one vest and one jacket. \n\n\n\nEach suit of the first type costs e coins, and each suit of the second type costs f coins.\n\nCalculate the maximum possible cost of a set of suits that can be composed from the delivered clothing items. Note that one item cannot be used in more than one suit (though some items may be left unused).\n\nInput\n\nThe first line contains one integer a (1 ≤ a ≤ 100 000) — the number of ties.\n\nThe second line contains one integer b (1 ≤ b ≤ 100 000) — the number of scarves.\n\nThe third line contains one integer c (1 ≤ c ≤ 100 000) — the number of vests.\n\nThe fourth line contains one integer d (1 ≤ d ≤ 100 000) — the number of jackets.\n\nThe fifth line contains one integer e (1 ≤ e ≤ 1 000) — the cost of one suit of the first type.\n\nThe sixth line contains one integer f (1 ≤ f ≤ 1 000) — the cost of one suit of the second type.", "grammar": {"productions": ["<S>->a <n> b <n> c <n> d <n> e <n> f"], "constraints": ["1<=a<=100000", "1<=b<=100000", "1<=c<=100000", "1<=d<=100000", "1<=e<=100000", "1<=f<=100000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes six variables: a, b, c, d, e, and f. None of these variables serve as counters for sequences or repetitions, hence they are not enclosed in brackets. The input format requires each variable to be on a separate line, represented by the newline token <n>. Therefore, the grammar is structured as '<S>->a <n> b <n> c <n> d <n> e <n> f', ensuring each variable is followed by a newline to match the input specification."}
{"name": "1272_A. Three Friends", "description": "Three friends are going to meet each other. Initially, the first friend stays at the position x = a, the second friend stays at the position x = b and the third friend stays at the position x = c on the coordinate axis Ox.\n\nIn one minute each friend independently from other friends can change the position x by 1 to the left or by 1 to the right (i.e. set x := x - 1 or x := x + 1) or even don't change it.\n\nLet's introduce the total pairwise distance — the sum of distances between each pair of friends. Let a', b' and c' be the final positions of the first, the second and the third friend, correspondingly. Then the total pairwise distance is |a' - b'| + |a' - c'| + |b' - c'|, where |x| is the absolute value of x.\n\nFriends are interested in the minimum total pairwise distance they can reach if they will move optimally. Each friend will move no more than once. So, more formally, they want to know the minimum total pairwise distance they can reach after one minute.\n\nYou have to answer q independent test cases.\n\nInput\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 1000) — the number of test cases.\n\nThe next q lines describe test cases. The i-th test case is given as three integers a, b and c (1 ≤ a, b, c ≤ 10^9) — initial positions of the first, second and third friend correspondingly. The positions of friends can be equal.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> a <s> b <s> c", "<T_1>->a <s> b <s> c"], "constraints": ["1<=q<=1000", "1<=a,b,c<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'q' is used as a counter for the number of test cases, hence it is enclosed in [q]. The grammar is initiated with '<S>->[q] <n> <T_q>', where <T_i> is a counter non-terminal for [q]. Each test case consists of three integers a, b, and c, separated by spaces. The grammar constructs are '<T_i>-><T_i-1> <n> a <s> b <s> c' and '<T_1>->a <s> b <s> c' to parse each test case line, ensuring the correct format for each of the q test cases."}
{"name": "1272_B. Snow Walking Robot", "description": "Recently you have bought a snow walking robot and brought it home. Suppose your home is a cell (0, 0) on an infinite grid.\n\nYou also have the sequence of instructions of this robot. It is written as the string s consisting of characters 'L', 'R', 'U' and 'D'. If the robot is in the cell (x, y) right now, he can move to one of the adjacent cells (depending on the current instruction).\n\n  * If the current instruction is 'L', then the robot can move to the left to (x - 1, y); \n  * if the current instruction is 'R', then the robot can move to the right to (x + 1, y); \n  * if the current instruction is 'U', then the robot can move to the top to (x, y + 1); \n  * if the current instruction is 'D', then the robot can move to the bottom to (x, y - 1). \n\n\n\nYou've noticed the warning on the last page of the manual: if the robot visits some cell (except (0, 0)) twice then it breaks.\n\nSo the sequence of instructions is valid if the robot starts in the cell (0, 0), performs the given instructions, visits no cell other than (0, 0) two or more times and ends the path in the cell (0, 0). Also cell (0, 0) should be visited at most two times: at the beginning and at the end (if the path is empty then it is visited only once). For example, the following sequences of instructions are considered valid: \"UD\", \"RL\", \"UUURULLDDDDLDDRRUU\", and the following are considered invalid: \"U\" (the endpoint is not (0, 0)) and \"UUDD\" (the cell (0, 1) is visited twice).\n\nThe initial sequence of instructions, however, might be not valid. You don't want your robot to break so you decided to reprogram it in the following way: you will remove some (possibly, all or none) instructions from the initial sequence of instructions, then rearrange the remaining instructions as you wish and turn on your robot to move. \n\nYour task is to remove as few instructions from the initial sequence as possible and rearrange the remaining ones so that the sequence is valid. Report the valid sequence of the maximum length you can obtain.\n\nNote that you can choose any order of remaining instructions (you don't need to minimize the number of swaps or any other similar metric).\n\nYou have to answer q independent test cases.\n\nInput\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 2 ⋅ 10^4) — the number of test cases.\n\nThe next q lines contain test cases. The i-th test case is given as the string s consisting of at least 1 and no more than 10^5 characters 'L', 'R', 'U' and 'D' — the initial sequence of instructions.\n\nIt is guaranteed that the sum of |s| (where |s| is the length of s) does not exceed 10^5 over all test cases (∑ |s| ≤ 10^5).", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [LRUD]{1,10^5}", "<T_1>->[LRUD]{1,10^5}"], "constraints": ["1<=q<=2*10^4"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'q' serves as a counter variable for the number of test cases, hence it is enclosed in [q]. The grammar is initiated with '<S>->[q] <n> <T_q>', where <T_i> is a counter non-terminal for [q], representing each test case. Each test case is a string of characters 'L', 'R', 'U', or 'D' with a length between 1 and 10^5, which is represented by the regular expression [LRUD]{1,10^5}. The grammar constructs are laid out as '<S>->[q] <n> <T_q>', '<T_i>-><T_i-1> <n> [LRUD]{1,10^5}', and '<T_1>->[LRUD]{1,10^5}' to systematically parse each test case following the count [q]."}
{"name": "1278_A. Shuffle Hashing", "description": "Polycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:\n\n  1. take the password p, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain p' (p' can still be equal to p); \n  2. generate two random strings, consisting of lowercase Latin letters, s_1 and s_2 (any of these strings can be empty); \n  3. the resulting hash h = s_1 + p' + s_2, where addition is string concatenation. \n\n\n\nFor example, let the password p = \"abacaba\". Then p' can be equal to \"aabcaab\". Random strings s1 = \"zyx\" and s2 = \"kjh\". Then h = \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to p to obtain p', only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password p and the hash h, check that h can be the hash for the password p.\n\nYour program should answer t independent test cases.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe first line of each test case contains a non-empty string p, consisting of lowercase Latin letters. The length of p does not exceed 100.\n\nThe second line of each test case contains a non-empty string h, consisting of lowercase Latin letters. The length of h does not exceed 100.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [a-z]{1,100} <n> [a-z]{1,100}", "<T_1>->[a-z]{1,100} <n> [a-z]{1,100}"], "constraints": ["1<=t<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two strings of lowercase Latin letters, each with a length between 1 and 100. The strings are represented using the regular expression [a-z]{1,100} to specify their length and character range. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [a-z]{1,100} <n> [a-z]{1,100}' and '<T_1>->[a-z]{1,100} <n> [a-z]{1,100}' to systematically parse each test case following the count [t]."}
{"name": "1282_A. Temporarily unavailable", "description": "Polycarp lives on the coordinate axis Ox and travels from the point x=a to x=b. It moves uniformly rectilinearly at a speed of one unit of distance per minute.\n\nOn the axis Ox at the point x=c the base station of the mobile operator is placed. It is known that the radius of its coverage is r. Thus, if Polycarp is at a distance less than or equal to r from the point x=c, then he is in the network coverage area, otherwise — no. The base station can be located both on the route of Polycarp and outside it.\n\nPrint the time in minutes during which Polycarp will not be in the coverage area of the network, with a rectilinear uniform movement from x=a to x=b. His speed — one unit of distance per minute.\n\nInput\n\nThe first line contains a positive integer t (1 ≤ t ≤ 1000) — the number of test cases. In the following lines are written t test cases.\n\nThe description of each test case is one line, which contains four integers a, b, c and r (-10^8 ≤ a,b,c ≤ 10^8, 0 ≤ r ≤ 10^8) — the coordinates of the starting and ending points of the path, the base station, and its coverage radius, respectively.\n\nAny of the numbers a, b and c can be equal (either any pair or all three numbers). The base station can be located both on the route of Polycarp and outside it.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c <s> r", "<T_1>->a <s> b <s> c <s> r"], "constraints": ["1<=t<=1000", "-10^8<=a,b,c<=10^8", "0<=r<=10^8"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of four integers a, b, c, and r, separated by space symbols <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a <s> b <s> c <s> r' and '<T_1>->a <s> b <s> c <s> r' to systematically parse each test case following the count [t]."}
{"name": "1286_A. Garland", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100) --- the number of light bulbs on the garland.\n\nThe second line contains n integers p_1,\\ p_2,\\ ...,\\ p_n (0 <= p_i <= n) --- the number on the i-th bulb, or 0 if it was removed.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=100", "0<=p_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of bulb numbers, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of bulb numbers separated by spaces. Each bulb number 'p_i' is included in the sequence, leading to the rules '<T_i>-><T_i-1> <s> p_i' and '<T_1>->p_1'. This structure ensures the input format is correctly parsed, with 'n' determining the number of bulb numbers listed."}
{"name": "1290_A. Mind Control", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 1000) --- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains three space-separated integers n, m and k (1 <= m <= n <= 3500, 0 <= k <= n - 1) --- the number of elements in the array, your position in line and the number of people whose choices you can fix.\n\nThe second line of each test case contains n positive integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) --- elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3500.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> m <s> k <n> <L_n>", "<T_1>->[n] <s> m <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=1000", "1<=m<=n<=3500", "0<=k<=n-1", "1<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes three variables n, m, and k, followed by a sequence of 'n' integers. The variables n and m are not counters for the sequence, so they are not enclosed in brackets. The sequence of integers is handled by the non-terminal <L_n>, which is a counter-driven rule for [n]. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> m <s> k <n> <L_n>', '<T_1>->[n] <s> m <s> k <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse each test case and the sequence of integers within it."}
{"name": "1291_A. Even But Not Even", "description": "Let's define a number ebne (even but not even) if and only if its sum of digits is divisible by 2 but the number itself is not divisible by 2. For example, 13, 1227, 185217 are ebne numbers, while 12, 2, 177013, 265918 are not. If you're still unsure what ebne numbers are, you can look at the sample notes for more clarification.\n\nYou are given a non-negative integer s, consisting of n digits. You can delete some digits (they are not necessary consecutive/successive) to make the given number ebne. You cannot change the order of the digits, that is, after deleting the digits the remaining digits collapse. The resulting number shouldn't contain leading zeros. You can delete any number of digits between 0 (do not delete any digits at all) and n-1.\n\nFor example, if you are given s=222373204424185217171912 then one of possible ways to make it ebne is: 222373204424185217171912 → 2237344218521717191. The sum of digits of 2237344218521717191 is equal to 70 and is divisible by 2, but number itself is not divisible by 2: it means that the resulting number is ebne.\n\nFind any resulting number that is ebne. If it's impossible to create an ebne number from the given number report about it.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 3000) — the number of digits in the original number.\n\nThe second line of each test case contains a non-negative integer number s, consisting of n digits.\n\nIt is guaranteed that s does not contain leading zeros and the sum of n over all test cases does not exceed 3000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> [0-9]{n}", "<T_1>->[n] <n> [0-9]{n}"], "constraints": ["1<=t<=1000", "1<=n<=3000"]}, "reason": "The grammar starts with the initial non-terminal <S>, which includes the variable 't' as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t]. Each test case consists of a line with 'n' (the number of digits) and a line with 's' (the number itself). Since 'n' is a counter variable for the digits in 's', it is enclosed in [n], and 's' is represented by the regex [0-9]{n} to denote a string of 'n' digits. The grammar rules '<T_i>-><T_i-1> <n> [n] <n> [0-9]{n}' and '<T_1>->[n] <n> [0-9]{n}' ensure that each test case is parsed correctly, with 'n' and 's' following the specified format."}
{"name": "1294_A. Collecting Coins", "description": "Polycarp has three sisters: Alice, Barbara, and Cerene. They're collecting coins. Currently, Alice has a coins, Barbara has b coins and Cerene has c coins. Recently Polycarp has returned from the trip around the world and brought n coins.\n\nHe wants to distribute all these n coins between his sisters in such a way that the number of coins Alice has is equal to the number of coins Barbara has and is equal to the number of coins Cerene has. In other words, if Polycarp gives A coins to Alice, B coins to Barbara and C coins to Cerene (A+B+C=n), then a + A = b + B = c + C.\n\nNote that A, B or C (the number of coins Polycarp gives to Alice, Barbara and Cerene correspondingly) can be 0.\n\nYour task is to find out if it is possible to distribute all n coins between sisters in a way described above.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe next t lines describe test cases. Each test case is given on a new line and consists of four space-separated integers a, b, c and n (1 ≤ a, b, c, n ≤ 10^8) — the number of coins Alice has, the number of coins Barbara has, the number of coins Cerene has and the number of coins Polycarp has.", "grammar": {"productions": ["<S>->t <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c <s> n", "<T_1>->a <s> b <s> c <s> n"], "constraints": ["1<=t<=10^4", "1<=a,b,c,n<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case consists of four variables a, b, c, and n, separated by spaces, hence the rule '<T_i>-><T_i-1> <n> a <s> b <s> c <s> n' is used. The base case '<T_1>->a <s> b <s> c <s> n' ensures the first test case is properly formatted. The constraints reflect the ranges for each variable, ensuring they adhere to the problem specifications."}
{"name": "1295_A. Display The Number", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) --- the number of test cases in the input.\n\nThen the test cases follow, each of them is represented by a separate line containing one integer n (2 <= n <= 10^5) --- the maximum number of segments that can be turned on in the corresponding testcase.\n\nIt is guaranteed that the sum of n over all test cases in the input does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=100", "2<=n<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case is represented by a line containing the variable 'n', which is not a counter variable in this context, so it is written as 'n'. The grammar rules '<T_i>-><T_i-1> <n> n' and '<T_1>->n' are used to handle the sequence of test cases, ensuring each 'n' is on a new line."}
{"name": "1295_D. Same GCDs", "description": "Input\n\nThe first line contains the single integer T (1 <= T <= 50) --- the number of test cases.\n\nNext T lines contain test cases --- one per line. Each line contains two integers a and m (1 <= a < m <= 10^{10}).", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> a <s> m", "<T_1>->a <s> m"], "constraints": ["1<=T<=50", "1<=a<m<=10^10"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable T serves as a counter variable for the number of test cases, hence it is denoted as [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case consists of two integers 'a' and 'm' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a <s> m' and '<T_1>->a <s> m' to systematically parse each test case following the count [T]."}
{"name": "1296_C. Yet Another Walking Robot", "description": "There is a robot on a coordinate plane. Initially, the robot is located at the point (0, 0). Its path is described as a string s of length n consisting of characters 'L', 'R', 'U', 'D'.\n\nEach of these characters corresponds to some move: \n\n  * 'L' (left): means that the robot moves from the point (x, y) to the point (x - 1, y); \n  * 'R' (right): means that the robot moves from the point (x, y) to the point (x + 1, y); \n  * 'U' (up): means that the robot moves from the point (x, y) to the point (x, y + 1); \n  * 'D' (down): means that the robot moves from the point (x, y) to the point (x, y - 1). \n\n\n\nThe company that created this robot asked you to optimize the path of the robot somehow. To do this, you can remove any non-empty substring of the path. But this company doesn't want their customers to notice the change in the robot behavior. It means that if before the optimization the robot ended its path at the point (x_e, y_e), then after optimization (i.e. removing some single substring from s) the robot also ends its path at the point (x_e, y_e).\n\nThis optimization is a low-budget project so you need to remove the shortest possible non-empty substring to optimize the robot's path such that the endpoint of his path doesn't change. It is possible that you can't optimize the path. Also, it is possible that after the optimization the target path is an empty string (i.e. deleted substring is the whole string s).\n\nRecall that the substring of s is such string that can be obtained from s by removing some amount of characters (possibly, zero) from the prefix and some amount of characters (possibly, zero) from the suffix. For example, the substrings of \"LURLLR\" are \"LU\", \"LR\", \"LURLLR\", \"URL\", but not \"RR\" and \"UL\".\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe next 2t lines describe test cases. Each test case is given on two lines. The first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the robot's path. The second line of the test case contains one string s consisting of n characters 'L', 'R', 'U', 'D' — the robot's path.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> [LRUD]{n}", "<T_1>->[n] <n> [LRUD]{n}"], "constraints": ["1<=t<=1000", "1<=n<=2*10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case consists of an integer 'n' (also a counter variable, hence [n]) followed by a string of 'n' characters from the set {'L', 'R', 'U', 'D'}, represented by the regex [LRUD]{n}. The grammar constructs are '<T_i>-><T_i-1> <n> [n] <n> [LRUD]{n}' and '<T_1>->[n] <n> [LRUD]{n}', ensuring each test case is parsed correctly with the specified format."}
{"name": "1296_D. Fight with Monsters", "description": "There are n monsters standing in a row numbered from 1 to n. The i-th monster has h_i health points (hp). You have your attack power equal to a hp and your opponent has his attack power equal to b hp.\n\nYou and your opponent are fighting these monsters. Firstly, you and your opponent go to the first monster and fight it till his death, then you and your opponent go the second monster and fight it till his death, and so on. A monster is considered dead if its hp is less than or equal to 0.\n\nThe fight with a monster happens in turns. \n\n  1. You hit the monster by a hp. If it is dead after your hit, you gain one point and you both proceed to the next monster. \n  2. Your opponent hits the monster by b hp. If it is dead after his hit, nobody gains a point and you both proceed to the next monster. \n\n\n\nYou have some secret technique to force your opponent to skip his turn. You can use this technique at most k times in total (for example, if there are two monsters and k=4, then you can use the technique 2 times on the first monster and 1 time on the second monster, but not 2 times on the first monster and 3 times on the second monster).\n\nYour task is to determine the maximum number of points you can gain if you use the secret technique optimally.\n\nInput\n\nThe first line of the input contains four integers n, a, b and k (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ a, b, k ≤ 10^9) — the number of monsters, your attack power, the opponent's attack power and the number of times you can use the secret technique.\n\nThe second line of the input contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9), where h_i is the health points of the i-th monster.", "grammar": {"productions": ["<S>->[n] <s> a <s> b <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=n<=2*10^5", "1<=a<=10^9", "1<=b<=10^9", "1<=k<=10^9", "1<=h_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables: n, a, b, and k. Among these, 'n' serves as a counter variable for the sequence of monster health points, hence it is enclosed in brackets as [n]. The variables a, b, and k are not counters, so they are written without brackets. The grammar is initiated with '<S>->[n] <s> a <s> b <s> k <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The non-terminal <T_i> generates the sequence of health points h_i separated by spaces, decrementing until it reaches <T_1>, which produces the first health point h_1. This structure accurately reflects the input format where the first line contains four integers and the second line contains n integers representing the health points of the monsters."}
{"name": "129_A. Cookies", "description": "Olga came to visit the twins Anna and Maria and saw that they have many cookies. The cookies are distributed into bags. As there are many cookies, Olga decided that it's no big deal if she steals a bag. However, she doesn't want the sisters to quarrel because of nothing when they divide the cookies. That's why Olga wants to steal a bag with cookies so that the number of cookies in the remaining bags was even, that is, so that Anna and Maria could evenly divide it into two (even 0 remaining cookies will do, just as any other even number). How many ways there are to steal exactly one cookie bag so that the total number of cookies in the remaining bags was even?\n\nInput\n\nThe first line contains the only integer n (1 ≤ n ≤ 100) — the number of cookie bags Anna and Maria have. The second line contains n integers ai (1 ≤ ai ≤ 100) — the number of cookies in the i-th bag.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=a_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of cookie bags, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each cookie count in the bags separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of cookie counts following the count [n]."}
{"name": "12_D. Ball", "description": "Input\n\nThe first line contains one integer N (1 <= N <= 500000). The second line contains N integer numbers Bi, separated by single spaces. The third and the fourth lines contain sequences Ii and Ri in the same format. It is guaranteed that 0 <= Bi, Ii, Ri <= 109.", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> <L_N> <n> <Z_N>", "<T_i>-><T_i-1> <s> B_i", "<T_1>->B_i", "<L_i>-><L_i-1> <s> I_i", "<L_1>->I_i", "<Z_i>-><Z_i-1> <s> R_i", "<Z_1>->R_i"], "constraints": ["1 <= N <= 500000", "0<=B_i,Ii,Ri<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequences Bi, Ii, and Ri, hence it is enclosed in [N]. The grammar is structured to first read [N], followed by three sequences, each separated by a newline <n>. Each sequence is generated using a counter non-terminal (<T_N>, <L_N>, <Z_N>), where <T_i>, <L_i>, and <Z_i> handle the sequences Bi, Ii, and Ri respectively. Each counter non-terminal decrements until it reaches 1, ensuring the correct number of elements in each sequence. The elements within each sequence are separated by a space <s>."}
{"name": "1304_E. 1-Trees and Queries", "description": "Input\n\nThe first line contains an integer n (3 <= n <= 10^5), the number of vertices of the tree.\n\nNext n-1 lines contain two integers u and v (1 <= u,v <= n, u != v) each, which means there is an edge between vertex u and v. All edges are bidirectional and distinct.\n\nNext line contains an integer q (1 <= q <= 10^5), the number of queries Gildong wants to ask.\n\nNext q lines contain five integers x, y, a, b, and k each (1 <= x,y,a,b <= n, x != y, 1 <= k <= 10^9) -- the integers explained in the description. It is guaranteed that the edge between x and y does not exist in the original tree.", "grammar": {"productions": ["<S>->[n] <n> <T_n-1> <n> [q] <n> <L_q>", "<T_i>-><T_i-1> <n> u <s> v", "<T_1>->u <s> v", "<L_i>-><L-i-1> <n> x <s> y <s> a <s> b <s> k", "<L_1>->x <s> y <s> a <s> b <s> k"], "constraints": ["3<=n<=10^5", "1<=u,v<=n", "u!=v", "1<=q<=10^5", "1<=x,y,a,b<=n", "x!=y", "1<=k<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of vertices, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n-1> <n> [q] <n> <L_q>', where <T_i> is a counter non-terminal for the edges (n-1 lines) and <L_i> is a counter non-terminal for the queries (q lines). The edges are represented by 'u' and 'v' separated by a space, and the queries are represented by 'x', 'y', 'a', 'b', and 'k' separated by spaces. The counter non-terminals <T_i> and <L_i> decrement until they reach 1, ensuring the correct number of lines for edges and queries."}
{"name": "1307_A. Cow and Haybales", "description": "The USA Construction Operation (USACO) recently ordered Farmer John to arrange a row of n haybale piles on the farm. The i-th pile contains a_i haybales. \n\nHowever, Farmer John has just left for vacation, leaving Bessie all on her own. Every day, Bessie the naughty cow can choose to move one haybale in any pile to an adjacent pile. Formally, in one day she can choose any two indices i and j (1 ≤ i, j ≤ n) such that |i-j|=1 and a_i>0 and apply a_i = a_i - 1, a_j = a_j + 1. She may also decide to not do anything on some days because she is lazy.\n\nBessie wants to maximize the number of haybales in pile 1 (i.e. to maximize a_1), and she only has d days to do so before Farmer John returns. Help her find the maximum number of haybales that may be in pile 1 if she acts optimally!\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Next 2t lines contain a description of test cases — two lines per test case.\n\nThe first line of each test case contains integers n and d (1 ≤ n,d ≤ 100) — the number of haybale piles and the number of days, respectively. \n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 100) — the number of haybales in each pile.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> d <n> <L_n>", "<T_1>->[n] <s> d <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "1<=d<=100", "0<=a_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is denoted as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two lines: the first line contains 'n' and 'd', and the second line contains 'n' integers. The variable 'n' is also a counter variable for the number of haybale piles, hence it is denoted as [n]. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> d <n> <L_n>', '<T_1>->[n] <s> d <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse the sequence of haybale piles following the count [n]."}
{"name": "1307_B. Cow and Friend", "description": "Bessie has way too many friends because she is everyone's favorite cow! Her new friend Rabbit is trying to hop over so they can play! \n\nMore specifically, he wants to get from (0,0) to (x,0) by making multiple hops. He is only willing to hop from one point to another point on the 2D plane if the Euclidean distance between the endpoints of a hop is one of its n favorite numbers: a_1, a_2, …, a_n. What is the minimum number of hops Rabbit needs to get from (0,0) to (x,0)? Rabbit may land on points with non-integer coordinates. It can be proved that Rabbit can always reach his destination.\n\nRecall that the Euclidean distance between points (x_i, y_i) and (x_j, y_j) is √{(x_i-x_j)^2+(y_i-y_j)^2}.\n\nFor example, if Rabbit has favorite numbers 1 and 3 he could hop from (0,0) to (4,0) in two hops as shown below. Note that there also exists other valid ways to hop to (4,0) in 2 hops (e.g. (0,0) → (2,-√{5}) → (4,0)).\n\n<image> Here is a graphic for the first example. Both hops have distance 3, one of Rabbit's favorite numbers.\n\nIn other words, each time Rabbit chooses some number a_i and hops with distance equal to a_i in any direction he wants. The same number can be used multiple times.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Next 2t lines contain test cases — two lines per test case.\n\nThe first line of each test case contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9) — the number of favorite numbers and the distance Rabbit wants to travel, respectively.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — Rabbit's favorite numbers. It is guaranteed that the favorite numbers are distinct.\n\nIt is guaranteed that the sum of n over all the test cases will not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>", "<T_1>->[n] <s> x <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=1000", "1<=n<=10^5", "1<=x<=10^9", "1<=a_i<=10^9"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two lines: the first line contains 'n' and 'x', and the second line contains 'n' integers. Since 'n' is a counter variable for the sequence of integers, it is enclosed in [n] and the sequence is represented by <L_n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>', '<T_1>->[n] <s> x <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "1310_B. Double Elimination", "description": "Input\n\nFirst input line has two integers n, k --- 2^n teams are competing in the championship. You are a fan of k teams (2 <= n <= 17; 0 <= k <= 2^n).\n\nSecond input line has k distinct integers a_1, ..., a_k --- numbers of teams you're a fan of (1 <= a_i <= 2^n).", "grammar": {"productions": ["<S>->[n] <s> [k] <n> <T_k>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=n<=17", "0<=k<=2^n", "1<=A_i<=2^n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, both serving as counter variables, hence they are enclosed in brackets as [n] and [k]. The grammar is initiated with '<S>->[n] <s> [k] <n> <T_k>', where <T_k> is the counter non-terminal for the sequence of team numbers a_1 to a_k. The non-terminal <T_i> is structured to handle the sequence of team numbers separated by spaces, decrementing until it reaches the first team number. Thus, the grammar is constructed as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' to parse the list of team numbers."}
{"name": "1311_B. WeirdSort", "description": "You are given an array a of length n.\n\nYou are also given a set of distinct positions p_1, p_2, ..., p_m, where 1 ≤ p_i < n. The position p_i means that you can swap elements a[p_i] and a[p_i + 1]. You can apply this operation any number of times for each of the given positions.\n\nYour task is to determine if it is possible to sort the initial array in non-decreasing order (a_1 ≤ a_2 ≤ ... ≤ a_n) using only allowed swaps.\n\nFor example, if a = [3, 2, 1] and p = [1, 2], then we can first swap elements a[2] and a[3] (because position 2 is contained in the given set p). We get the array a = [3, 1, 2]. Then we swap a[1] and a[2] (position 1 is also contained in p). We get the array a = [1, 3, 2]. Finally, we swap a[2] and a[3] again and get the array a = [1, 2, 3], sorted in non-decreasing order.\n\nYou can see that if a = [4, 1, 2, 3] and p = [3, 2] then you cannot sort the array.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThen t test cases follow. The first line of each test case contains two integers n and m (1 ≤ m < n ≤ 100) — the number of elements in a and the number of elements in p. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100). The third line of the test case contains m integers p_1, p_2, ..., p_m (1 ≤ p_i < n, all p_i are distinct) — the set of positions described in the problem statement.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [m] <n> <L_n> <n> <Z_m>", "<T_1>->[n] <s> [m] <n> <L_n> <n> <Z_m>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> p_i", "<Z_1>->p_1"], "constraints": ["1<=t<=100", "1<=m<n<=100", "1<=a_i<=100", "1<=p_i<n"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes two lines: the first line with variables [n] and [m] (both serving as counters), and the second line with a sequence of 'a_i' elements and a sequence of 'p_i' elements. The sequences are handled by counter non-terminals <L_n> and <Z_m> respectively, which generate the elements separated by spaces. The grammar constructs are laid out to systematically parse the input for each test case, ensuring the correct format and constraints are followed."}
{"name": "1311_F. Moving Points", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^5) --- the number of points.\n\nThe second line of the input contains n integers x_1, x_2, ..., x_n (1 <= x_i <= 10^8), where x_i is the initial coordinate of the i-th point. It is guaranteed that all x_i are distinct.\n\nThe third line of the input contains n integers v_1, v_2, ..., v_n (-10^8 <= v_i <= 10^8), where v_i is the speed of the i-th point.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1", "<L_i>-><L_i-1> <s> v_i", "<L_1>->v_1"], "constraints": ["2<=n<=2*10^5", "1<=x_i<=10^8", "-10^8<=v_i<=10^8"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for both the points and their respective coordinates and speeds, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> <L_n>', where <T_n> and <L_n> are counter non-terminals for the sequences of coordinates and speeds, respectively. The non-terminal <T_i> generates the sequence of coordinates 'x_i' separated by spaces <s>, and similarly, <L_i> generates the sequence of speeds 'v_i' separated by spaces <s>. The base cases <T_1> and <L_1> handle the first elements of each sequence. This structure ensures the input format where 'n' points are followed by their coordinates and speeds in separate lines."}
{"name": "1312_A. Two Regular Polygons", "description": "You are given two integers n and m (m < n). Consider a convex regular polygon of n vertices. Recall that a regular polygon is a polygon that is equiangular (all angles are equal in measure) and equilateral (all sides have the same length).\n\n<image> Examples of convex regular polygons \n\nYour task is to say if it is possible to build another convex regular polygon with m vertices such that its center coincides with the center of the initial polygon and each of its vertices is some vertex of the initial polygon.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe next t lines describe test cases. Each test case is given as two space-separated integers n and m (3 ≤ m < n ≤ 100) — the number of vertices in the initial polygon and the number of vertices in the polygon you want to build.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m", "<T_1>->n <s> m"], "constraints": ["1<=t<=10^4", "3<=m<n<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two integers 'n' and 'm' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> m' and '<T_1>->n <s> m' to systematically parse each test case following the count [t]."}
{"name": "1312_C. Adding Powers", "description": "Suppose you are performing the following algorithm. There is an array v_1, v_2, ..., v_n filled with zeroes at start. The following operation is applied to the array several times — at i-th step (0-indexed) you can: \n\n  * either choose position pos (1 ≤ pos ≤ n) and increase v_{pos} by k^i; \n  * or not choose any position and skip this step. \n\n\n\nYou can choose how the algorithm would behave on each step and when to stop it. The question is: can you make array v equal to the given array a (v_j = a_j for each j) after some step?\n\nInput\n\nThe first line contains one integer T (1 ≤ T ≤ 1000) — the number of test cases. Next 2T lines contain test cases — two lines per test case.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 30, 2 ≤ k ≤ 100) — the size of arrays v and a and value k used in the algorithm.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^{16}) — the array you'd like to achieve.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=T<=1000", "1<=n<=30", "2<=k<=100", "0<=a_i<=10^16"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'T' serves as a counter for the number of test cases, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case consists of two lines: the first line contains 'n' and 'k' (with 'n' as a counter variable for the array elements, hence [n]), and the second line contains 'n' integers. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>' and '<T_1>->[n] <s> k <n> <L_n>'. The non-terminal <L_i> is a counter-driven rule for [n], representing each array element 'a_i' separated by a space symbol <s>. The grammar constructs for <L_i> are '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_1'."}
{"name": "1312_D. Count the Arrays", "description": "Input\n\nThe first line contains two integers n and m (2 <= n <= m <= 2 * 10^5).", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["2<=n<=m<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, which are not used as counters in this context, hence they are represented without brackets. The variables are separated by a space token <s>. The grammar is constructed as '<S>->n <s> m' to reflect the input format where two integers n and m are given in a single line separated by a space."}
{"name": "1313_A. Fast Food Restaurant", "description": "Tired of boring office work, Denis decided to open a fast food restaurant.\n\nOn the first day he made a portions of dumplings, b portions of cranberry juice and c pancakes with condensed milk.\n\nThe peculiarity of Denis's restaurant is the procedure of ordering food. For each visitor Denis himself chooses a set of dishes that this visitor will receive. When doing so, Denis is guided by the following rules:\n\n  * every visitor should receive at least one dish (dumplings, cranberry juice, pancakes with condensed milk are all considered to be dishes); \n  * each visitor should receive no more than one portion of dumplings, no more than one portion of cranberry juice and no more than one pancake with condensed milk; \n  * all visitors should receive different sets of dishes. \n\n\n\nWhat is the maximum number of visitors Denis can feed?\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 500) — the number of test cases to solve.\n\nEach of the remaining t lines contains integers a, b and c (0 ≤ a, b, c ≤ 10) — the number of portions of dumplings, the number of portions of cranberry juice and the number of condensed milk pancakes Denis made.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c", "<T_1>->a <s> b <s> c"], "constraints": ["1<=t<=500", "0<=a<=10", "0<=b<=10", "0<=c<=10"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of three integers 'a', 'b', and 'c' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a <s> b <s> c' and '<T_1>->a <s> b <s> c' to systematically parse the sequence of test cases following the count [t]."}
{"name": "1313_C1. Skyscrapers (easy version)", "description": "This is an easier version of the problem. In this version n ≤ 1000\n\nThe outskirts of the capital are being actively built up in Berland. The company \"Kernel Panic\" manages the construction of a residential complex of skyscrapers in New Berlskva. All skyscrapers are built along the highway. It is known that the company has already bought n plots along the highway and is preparing to build n skyscrapers, one skyscraper per plot.\n\nArchitects must consider several requirements when planning a skyscraper. Firstly, since the land on each plot has different properties, each skyscraper has a limit on the largest number of floors it can have. Secondly, according to the design code of the city, it is unacceptable for a skyscraper to simultaneously have higher skyscrapers both to the left and to the right of it.\n\nFormally, let's number the plots from 1 to n. Then if the skyscraper on the i-th plot has a_i floors, it must hold that a_i is at most m_i (1 ≤ a_i ≤ m_i). Also there mustn't be integers j and k such that j < i < k and a_j > a_i < a_k. Plots j and k are not required to be adjacent to i.\n\nThe company wants the total number of floors in the built skyscrapers to be as large as possible. Help it to choose the number of floors for each skyscraper in an optimal way, i.e. in such a way that all requirements are fulfilled, and among all such construction plans choose any plan with the maximum possible total number of floors.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of plots.\n\nThe second line contains the integers m_1, m_2, …, m_n (1 ≤ m_i ≤ 10^9) — the limit on the number of floors for every possible number of floors for a skyscraper on each plot.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> m_i", "<T_1>->m_1"], "constraints": ["1<=n<=1000", "1<=m_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of 'm_i' values, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n], generating each 'm_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> m_i' and '<T_1>->m_1' to systematically parse the sequence of 'm_i' values following the count [n]."}
{"name": "1313_C2. Skyscrapers (hard version)", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 500 000) --- the number of plots.\n\nThe second line contains the integers m_1, m_2, ..., m_n (1 <= m_i <= 10^9) --- the limit on the number of floors for every possible number of floors for a skyscraper on each plot.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> m_i", "<T_1>->m_1"], "constraints": ["1<=n<=500000", "1<=m_i<=10^9"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of plots, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'm_i' represents each limit on the number of floors separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> m_i', and '<T_1>->m_1' to systematically parse the sequence of floor limits following the count [n]."}
{"name": "1315_D. Recommendations", "description": "Input\n\nThe first line of input consists of single integer n --- the number of news categories (1 <= n <= 200 000).\n\nThe second line of input consists of n integers a_i --- the number of publications of i-th category selected by the batch algorithm (1 <= a_i <= 10^9).\n\nThe third line of input consists of n integers t_i --- time it takes for targeted algorithm to find one new publication of category i (1 <= t_i <= 10^5).", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_i", "<L_i>-><L_i-1> <s> t_i", "<L_1>->t_i"], "constraints": ["1<=n<=200000", "1<=a_i<=10^9", "1<=t_i<=10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for both sequences of integers, hence it is enclosed in brackets as [n]. The grammar is structured to first read [n], followed by two sequences of integers, each of length [n]. The first sequence is represented by the non-terminal <T_n>, which generates 'a_i' values separated by spaces, and the second sequence is represented by <L_n>, generating 't_i' values also separated by spaces. The counter non-terminals <T_i> and <L_i> are used to decrement the counter until they reach 1, ensuring the correct number of elements in each sequence. The grammar thus captures the input format where three lines are provided: the first with [n], the second with [n] integers 'a_i', and the third with [n] integers 't_i'."}
{"name": "1316_B. String Modification", "description": "Vasya has a string s of length n. He decides to make the following modification to the string: \n\n  1. Pick an integer k, (1 ≤ k ≤ n). \n  2. For i from 1 to n-k+1, reverse the substring s[i:i+k-1] of s. For example, if string s is qwer and k = 2, below is the series of transformations the string goes through: \n    * qwer (original string) \n    * wqer (after reversing the first substring of length 2) \n    * weqr (after reversing the second substring of length 2) \n    * werq (after reversing the last substring of length 2) \nHence, the resulting string after modifying s with k = 2 is werq. \n\n\n\nVasya wants to choose a k such that the string obtained after the above-mentioned modification is lexicographically smallest possible among all choices of k. Among all such k, he wants to choose the smallest one. Since he is busy attending Felicity 2020, he asks for your help.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds: \n\n  * a is a prefix of b, but a ≠ b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\nInput\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 ≤ t ≤ 5000). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 5000) — the length of the string s.\n\nThe second line of each test case contains the string s of n lowercase latin letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> [a-z]{n}", "<T_1>->[n] <n> [a-z]{n}"], "constraints": ["1<=t<=5000", "1<=n<=5000"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of an integer 'n' (also a counter variable, hence [n]) followed by a string of 'n' lowercase letters. The string is represented using the regular expression [a-z]{n}, ensuring it matches exactly 'n' lowercase letters. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> [a-z]{n}' and '<T_1>->[n] <n> [a-z]{n}' to systematically parse each test case following the count [t]."}
{"name": "131_A. cAPS lOCK", "description": "Input\n\nThe first line of the input data contains a word consisting of uppercase and lowercase Latin letters. The word's length is from 1 to 100 characters, inclusive.", "grammar": {"productions": ["<S>->[a-zA-Z]{1,100}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a single word composed of uppercase and lowercase Latin letters, with a length ranging from 1 to 100 characters. To represent this, the regular expression [a-zA-Z]{1,100} is used, which matches any sequence of Latin letters (both cases) with a length between 1 and 100. The grammar is thus constructed as '<S>->[a-zA-Z]{1,100}', directly capturing the input specification without the need for counter variables or additional non-terminals."}
{"name": "131_D. Subway", "description": "Input\n\nThe first line contains an integer n (3 <= n <= 3000), n is the number of stations (and trains at the same time) in the subway scheme. Then n lines contain descriptions of the trains, one per line. Each line contains a pair of integers xi, yi (1 <= xi, yi <= n) and represents the presence of a passage from station xi to station yi. The stations are numbered from 1 to n in an arbitrary order. It is guaranteed that xi != yi and that no pair of stations contain more than one passage. The passages can be used to travel both ways. It is guaranteed that the given description represents a classic subway scheme.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> yi", "<T_1>->xi <s> yi"], "constraints": ["3<=n<=3000", "1<=xi,yi<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the number of stations and trains, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line describes a train with two integers xi and yi separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> xi <s> yi' and '<T_1>->xi <s> yi' to systematically parse the sequence of train descriptions following the count [n]."}
{"name": "1320_A. Journey Planning", "description": "Tanya wants to go on a journey across the cities of Berland. There are n cities situated along the main railroad line of Berland, and these cities are numbered from 1 to n. \n\nTanya plans her journey as follows. First of all, she will choose some city c_1 to start her journey. She will visit it, and after that go to some other city c_2 > c_1, then to some other city c_3 > c_2, and so on, until she chooses to end her journey in some city c_k > c_{k - 1}. So, the sequence of visited cities [c_1, c_2, ..., c_k] should be strictly increasing.\n\nThere are some additional constraints on the sequence of cities Tanya visits. Each city i has a beauty value b_i associated with it. If there is only one city in Tanya's journey, these beauty values imply no additional constraints. But if there are multiple cities in the sequence, then for any pair of adjacent cities c_i and c_{i + 1}, the condition c_{i + 1} - c_i = b_{c_{i + 1}} - b_{c_i} must hold.\n\nFor example, if n = 8 and b = [3, 4, 4, 6, 6, 7, 8, 9], there are several three possible ways to plan a journey:\n\n  * c = [1, 2, 4]; \n  * c = [3, 5, 6, 8]; \n  * c = [7] (a journey consisting of one city is also valid). \n\n\n\nThere are some additional ways to plan a journey that are not listed above.\n\nTanya wants her journey to be as beautiful as possible. The beauty value of the whole journey is the sum of beauty values over all visited cities. Can you help her to choose the optimal plan, that is, to maximize the beauty value of the journey?\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of cities in Berland.\n\nThe second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 4 ⋅ 10^5), where b_i is the beauty value of the i-th city.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> b_i", "<T_1>->b_1"], "constraints": ["1<=n<=2*10^5", "1<=b_i<=4*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of beauty values, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of beauty values 'b_i' is constructed using the counter non-terminal <T_i>, which generates each 'b_i' separated by a space <s>. The base case <T_1>->b_1 ensures the sequence starts correctly. This structure efficiently parses the input format where 'n' is followed by 'n' integers representing beauty values."}
{"name": "1322_A. Unusual Competitions", "description": "A bracketed sequence is called correct (regular) if by inserting \"+\" and \"1\" you can get a well-formed mathematical expression from it. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are correct, while \")(\", \"(()\" and \"(()))(\" are not.\n\nThe teacher gave Dmitry's class a very strange task — she asked every student to come up with a sequence of arbitrary length, consisting only of opening and closing brackets. After that all the students took turns naming the sequences they had invented. When Dima's turn came, he suddenly realized that all his classmates got the correct bracketed sequence, and whether he got the correct bracketed sequence, he did not know.\n\nDima suspects now that he simply missed the word \"correct\" in the task statement, so now he wants to save the situation by modifying his sequence slightly. More precisely, he can the arbitrary number of times (possibly zero) perform the reorder operation.\n\nThe reorder operation consists of choosing an arbitrary consecutive subsegment (substring) of the sequence and then reordering all the characters in it in an arbitrary way. Such operation takes l nanoseconds, where l is the length of the subsegment being reordered. It's easy to see that reorder operation doesn't change the number of opening and closing brackets. For example for \"))((\" he can choose the substring \")(\" and do reorder \")()(\" (this operation will take 2 nanoseconds).\n\nSince Dima will soon have to answer, he wants to make his sequence correct as fast as possible. Help him to do this, or determine that it's impossible.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^6) — the length of Dima's sequence.\n\nThe second line contains string of length n, consisting of characters \"(\" and \")\" only.", "grammar": {"productions": ["<S>->[n] <n> [()]{n}"], "constraints": ["1<=n<=10^6"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is used both as a counter and to specify the length of a sequence. Consequently, the variable is represented as [n] to indicate its role as a length specifier for the sequence of characters, which consist only of '(' and ')'. This sequence is described using the regular expression [()]{n}, meaning a string of n characters, each of which is either '(' or ')'. Thus, the grammar is constructed to reflect this format: '<S>->[n] <n> [()]{n}'."}
{"name": "1324_C. Frog Jumps", "description": "There is a frog staying to the left of the string s = s_1 s_2 … s_n consisting of n characters (to be more precise, the frog initially stays at the cell 0). Each character of s is either 'L' or 'R'. It means that if the frog is staying at the i-th cell and the i-th character is 'L', the frog can jump only to the left. If the frog is staying at the i-th cell and the i-th character is 'R', the frog can jump only to the right. The frog can jump only to the right from the cell 0.\n\nNote that the frog can jump into the same cell twice and can perform as many jumps as it needs.\n\nThe frog wants to reach the n+1-th cell. The frog chooses some positive integer value d before the first jump (and cannot change it later) and jumps by no more than d cells at once. I.e. if the i-th character is 'L' then the frog can jump to any cell in a range [max(0, i - d); i - 1], and if the i-th character is 'R' then the frog can jump to any cell in a range [i + 1; min(n + 1; i + d)].\n\nThe frog doesn't want to jump far, so your task is to find the minimum possible value of d such that the frog can reach the cell n+1 from the cell 0 if it can jump by no more than d cells at once. It is guaranteed that it is always possible to reach n+1 from 0.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe next t lines describe test cases. The i-th test case is described as a string s consisting of at least 1 and at most 2 ⋅ 10^5 characters 'L' and 'R'.\n\nIt is guaranteed that the sum of lengths of strings over all test cases does not exceed 2 ⋅ 10^5 (∑ |s| ≤ 2 ⋅ 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [LR]{1,2*10^5}", "<T_1>->[LR]{1,2*10^5}"], "constraints": ["1<=t<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case is a string of characters 'L' and 'R' with a length ranging from 1 to 2*10^5. The regular expression [LR]{1,2*10^5} is used to represent the string of characters for each test case. The grammar constructs are laid out as '<S>->[t] <n> <T_t>', '<T_i>-><T_i-1> <n> [LR]{1,2*10^5}', and '<T_1>->[LR]{1,2*10^5}' to systematically parse each test case following the count [t]."}
{"name": "1325_B. CopyCopyCopyCopyCopy", "description": "Input\n\nThe first line contains an integer t --- the number of test cases you need to solve. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 <= n <= 10^5) --- the number of elements in the array a.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 <= a_i <= 10^9) --- the elements of the array a.\n\nThe sum of n across the test cases doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^5", "1<=n<=10^5", "1<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case includes an integer 'n' (also a counter variable, hence [n]) followed by 'n' space-separated integers. The sequence of integers is handled by the counter non-terminal <L_n>, which generates 'n' integers separated by spaces. The grammar rules '<T_i>-><T_i-1> <n> [n] <n> <L_n>' and '<T_1>->[n] <n> <L_n>' manage the test cases, while '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_1' handle the array elements within each test case."}
{"name": "1326_C. Permutation Partitions", "description": "You are given a permutation p_1, p_2, …, p_n of integers from 1 to n and an integer k, such that 1 ≤ k ≤ n. A permutation means that every number from 1 to n is contained in p exactly once.\n\nLet's consider all partitions of this permutation into k disjoint segments. Formally, a partition is a set of segments \\{[l_1, r_1], [l_2, r_2], …, [l_k, r_k]\\}, such that:\n\n  * 1 ≤ l_i ≤ r_i ≤ n for all 1 ≤ i ≤ k; \n  * For all 1 ≤ j ≤ n there exists exactly one segment [l_i, r_i], such that l_i ≤ j ≤ r_i. \n\n\n\nTwo partitions are different if there exists a segment that lies in one partition but not the other.\n\nLet's calculate the partition value, defined as ∑_{i=1}^{k} {max_{l_i ≤ j ≤ r_i} {p_j}}, for all possible partitions of the permutation into k disjoint segments. Find the maximum possible partition value over all such partitions, and the number of partitions with this value. As the second value can be very large, you should find its remainder when divided by 998 244 353.\n\nInput\n\nThe first line contains two integers, n and k (1 ≤ k ≤ n ≤ 200 000) — the size of the given permutation and the number of segments in a partition.\n\nThe second line contains n different integers p_1, p_2, …, p_n (1 ≤ p_i ≤ n) — the given permutation.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=k<=n<=200000", "1<=p_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'k', where 'n' serves as a counter variable for the permutation elements, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'p_i' represents each permutation element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <s> k <n> <T_n>', '<T_i>-><T_i-1> <s> p_i', and '<T_1>->p_1' to systematically parse the sequence of permutation elements following the count [n]."}
{"name": "1326_D1. Prefix-Suffix Palindrome (Easy version)", "description": "This is the easy version of the problem. The difference is the constraint on the sum of lengths of strings and the number of test cases. You can make hacks only if you solve all versions of this task.\n\nYou are given a string s, consisting of lowercase English letters. Find the longest string, t, which satisfies the following conditions: \n\n  * The length of t does not exceed the length of s. \n  * t is a palindrome. \n  * There exists two strings a and b (possibly empty), such that t = a + b ( \"+\" represents concatenation), and a is prefix of s while b is suffix of s. \n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000), the number of test cases. The next t lines each describe a test case.\n\nEach test case is a non-empty string s, consisting of lowercase English letters.\n\nIt is guaranteed that the sum of lengths of strings over all test cases does not exceed 5000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [a-z]{1,5000}", "<T_1>->[a-z]{1,5000}"], "constraints": ["1<=t<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case is a string of lowercase English letters with a length constraint of up to 5000 characters, represented by the regular expression [a-z]{1,5000}. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [a-z]{1,5000}' and '<T_1>->[a-z]{1,5000}' to systematically parse each test case following the count [t]."}
{"name": "1327_C. Game with Chips", "description": "Petya has a rectangular Board of size n × m. Initially, k chips are placed on the board, i-th chip is located in the cell at the intersection of sx_i-th row and sy_i-th column.\n\nIn one action, Petya can move all the chips to the left, right, down or up by 1 cell.\n\nIf the chip was in the (x, y) cell, then after the operation: \n\n  * left, its coordinates will be (x, y - 1); \n  * right, its coordinates will be (x, y + 1); \n  * down, its coordinates will be (x + 1, y); \n  * up, its coordinates will be (x - 1, y). \n\n\n\nIf the chip is located by the wall of the board, and the action chosen by Petya moves it towards the wall, then the chip remains in its current position.\n\nNote that several chips can be located in the same cell.\n\nFor each chip, Petya chose the position which it should visit. Note that it's not necessary for a chip to end up in this position.\n\nSince Petya does not have a lot of free time, he is ready to do no more than 2nm actions.\n\nYou have to find out what actions Petya should do so that each chip visits the position that Petya selected for it at least once. Or determine that it is not possible to do this in 2nm actions.\n\nInput\n\nThe first line contains three integers n, m, k (1 ≤ n, m, k ≤ 200) — the number of rows and columns of the board and the number of chips, respectively.\n\nThe next k lines contains two integers each sx_i, sy_i ( 1 ≤ sx_i ≤ n, 1 ≤ sy_i ≤ m) — the starting position of the i-th chip.\n\nThe next k lines contains two integers each fx_i, fy_i ( 1 ≤ fx_i ≤ n, 1 ≤ fy_i ≤ m) — the position that the i-chip should visit at least once.", "grammar": {"productions": ["<S>->n <s> m <s> [k] <n> <T_k> <n> <L_k>", "<T_i>-><T_i-1> <n> sx_i <s> sy_i", "<T_1>->sx_1 <s> sy_1", "<L_i>-><L_i-1> <n> fx_i <s> fy_i", "<L_1>->fx_1 <s> fy_i"], "constraints": ["1<=n<=200", "1<=m<=200", "1<=k<=200", "1<=sx_i<=n", "1<=sy_i<=m", "1<=fx_i<=n", "1<=fy_i<=m"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, m, and k. Among these, 'k' serves as a counter variable for the number of chips, hence it is enclosed in [k]. The variables 'n' and 'm' are not counters, so they are represented as 'n' and 'm' without brackets. The grammar is initiated with '<S>->n <s> m <s> [k] <n> <T_k> <n> <L_k>'. The non-terminal <T_i> is a counter-driven rule for [k], representing the starting positions of the chips, each specified by 'sx_i' and 'sy_i' separated by a space <s>. Similarly, <L_i> is another counter-driven rule for [k], representing the target positions 'fx_i' and 'fy_i' of the chips. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> sx_i <s> sy_i', '<T_1>->sx_1 <s> sy_1', '<L_i>-><L_i-1> <n> fx_i <s> fy_i', and '<L_1>->fx_1 <s> fy_i' to systematically parse the sequence of starting and target positions for each chip following the count [k]."}
{"name": "1328_F. Make k Equal", "description": "You are given the array a consisting of n elements and the integer k ≤ n.\n\nYou want to obtain at least k equal elements in the array a. In one move, you can make one of the following two operations:\n\n  * Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of a is mn then you choose such index i that a_i = mn and set a_i := a_i + 1); \n  * take one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of a is mx then you choose such index i that a_i = mx and set a_i := a_i - 1). \n\n\n\nYour task is to calculate the minimum number of moves required to obtain at least k equal elements in the array.\n\nInput\n\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the number of elements in a and the required number of equal elements.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=k<=n<=2*10^5", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'k', where 'n' serves as a counter variable for the array elements, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <s> k <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1329_D. Dreamoon Likes Strings", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 200 000), denoting the number of test cases in the input.\n\nFor each test case, there's one line with a non-empty string of lowercase Latin letters a.\n\nThe total sum of lengths of strings in all test cases is at most 200 000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a", "<T_1>->a"], "constraints": ["1<=t<=200000", "1<=a<=200000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case is represented by a string 'a' of lowercase Latin letters, separated by a newline token <n>. The grammar constructs are laid out as '<S>->[t] <n> <T_t>', '<T_i>-><T_i-1> <n> a', and '<T_1>->a' to systematically parse the sequence of test cases following the count [t]."}
{"name": "1330_A. Dreamoon and Ranking Collection", "description": "Dreamoon is a big fan of the Codeforces contests.\n\nOne day, he claimed that he will collect all the places from 1 to 54 after two more rated contests. It's amazing!\n\nBased on this, you come up with the following problem:\n\nThere is a person who participated in n Codeforces rounds. His place in the first round is a_1, his place in the second round is a_2, ..., his place in the n-th round is a_n.\n\nYou are given a positive non-zero integer x.\n\nPlease, find the largest v such that this person can collect all the places from 1 to v after x more rated contests.\n\nIn other words, you need to find the largest v, such that it is possible, that after x more rated contests, for each 1 ≤ i ≤ v, there will exist a contest where this person took the i-th place.\n\nFor example, if n=6, x=2 and a=[3,1,1,5,7,10] then answer is v=5, because if on the next two contest he will take places 2 and 4, then he will collect all places from 1 to 5, so it is possible to get v=5.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 5) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains two integers n, x (1 ≤ n, x ≤ 100). The second line contains n positive non-zero integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>", "<T_1>->[n] <s> x <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=5", "1<=n,x<=100", "1<=a_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is denoted as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes two lines: the first line with variables 'n' and 'x' (both serving as counters, hence [n] and x), and the second line with 'n' integers a_1 to a_n. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>', '<T_1>->[n] <s> x <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse each test case's input format."}
{"name": "1331_D. Again?", "description": "Input\n\nThe only line of the input contains a 7-digit hexadecimal number. The first \"digit\" of the number is letter A, the rest of the \"digits\" are decimal digits 0-9.", "grammar": {"productions": ["<S>->A [0-9]{6}"], "constraints": []}, "reason": "The grammar begins with the starting non-terminal <S>. The input is a 7-digit hexadecimal number where the first digit is 'A' and the remaining six digits are from 0-9. Since the first digit is fixed as 'A' and the rest are variable digits, the grammar is constructed as '<S>->A [0-9]{6}', where [0-9]{6} represents exactly six digits ranging from 0 to 9. This ensures the input adheres to the specified format without any leading characters other than 'A'."}
{"name": "1333_B. Kind Anton", "description": "Once again, Boris needs the help of Anton in creating a task. This time Anton needs to solve the following problem:\n\nThere are two arrays of integers a and b of length n. It turned out that array a contains only elements from the set \\{-1, 0, 1\\}.\n\nAnton can perform the following sequence of operations any number of times:\n\n  1. Choose any pair of indexes (i, j) such that 1 ≤ i < j ≤ n. It is possible to choose the same pair (i, j) more than once. \n  2. Add a_i to a_j. In other words, j-th element of the array becomes equal to a_i + a_j. \n\n\n\nFor example, if you are given array [1, -1, 0], you can transform it only to [1, -1, -1], [1, 0, 0] and [1, -1, 1] by one operation.\n\nAnton wants to predict if it is possible to apply some number (zero or more) of these operations to the array a so that it becomes equal to array b. Can you help him?\n\nInput\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 ≤ t ≤ 10000). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of arrays.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-1 ≤ a_i ≤ 1) — elements of array a. There can be duplicates among elements.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (-10^9 ≤ b_i ≤ 10^9) — elements of array b. There can be duplicates among elements.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=10000", "1<=n<=10^5", "-1<=a_i<=1", "-10^9<=b_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes a counter variable [n] for the length of arrays, followed by two sequences of array elements 'a_i' and 'b_i' separated by spaces and newlines. The sequences are represented by counter non-terminals <L_n> and <Z_n> for 'a_i' and 'b_i' respectively. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>' and '<T_1>->[n] <n> <L_n> <n> <Z_n>' to systematically parse each test case. The sequences 'a_i' and 'b_i' are generated using '<L_i>-><L_i-1> <s> a_i', '<L_1>->a_1', '<Z_i>-><Z_i-1> <s> b_i', and '<Z_1>->b_1' to reflect the input format."}
{"name": "1334_A. Level Statistics", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 500) --- the number of test cases.\n\nThe first line of each test case contains a single integer n (1 <= n <= 100) --- the number of moments of time Polycarp peeked at the stats.\n\nEach of the next n lines contains two integers p_i and c_i (0 <= p_i, c_i <= 1000) --- the number of plays and the number of clears of the level at the i-th moment of time.\n\nNote that the stats are given in chronological order.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <n> p_i <s> c_i", "<L_1>->p_1 <s> c_1"], "constraints": ["1<=T<=500", "1<=n<=100", "0<=p_i,c_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'T' serves as a counter for the number of test cases, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case includes a variable 'n' (also a counter, hence [n]) followed by 'n' lines of pairs 'p_i' and 'c_i'. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <n> p_i <s> c_i', and '<L_1>->p_1 <s> c_1' to systematically parse each test case and the sequence of pairs within each test case."}
{"name": "1334_D. Minimum Euler Cycle", "description": "Input\n\nThe first line contains the single integer T (1 <= T <= 100) --- the number of test cases.\n\nNext T lines contain test cases --- one per line. The first and only line of each test case contains three integers n, l and r (2 <= n <= 10^5, 1 <= l <= r <= n(n - 1) + 1, r - l + 1 <= 10^5) --- the number of vertices in K_n, and segment of the cycle to print.\n\nIt's guaranteed that the total sum of n doesn't exceed 10^5 and the total sum of r - l + 1 doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> l <s> r", "<T_1>->n <s> l <s> r"], "constraints": ["1<=T<=100", "2<=n<=10^5", "1<=l<=r<=n*(n-1)+1,r-l+1<=10^5"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable T serves as a counter variable for the number of test cases, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case consists of three integers n, l, and r separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> l <s> r' and '<T_1>->n <s> l <s> r' to systematically parse each test case following the count [T]."}
{"name": "1335_A. Candies and Two Sisters", "description": "There are two sisters Alice and Betty. You have n candies. You want to distribute these n candies between two sisters in such a way that:\n\n  * Alice will get a (a > 0) candies; \n  * Betty will get b (b > 0) candies; \n  * each sister will get some integer number of candies; \n  * Alice will get a greater amount of candies than Betty (i.e. a > b); \n  * all the candies will be given to one of two sisters (i.e. a+b=n). \n\n\n\nYour task is to calculate the number of ways to distribute exactly n candies between sisters in a way described above. Candies are indistinguishable.\n\nFormally, find the number of ways to represent n as the sum of n=a+b, where a and b are positive integers and a>b.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe only line of a test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^9) — the number of candies you have.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of an integer 'n' followed by a newline <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n' and '<T_1>->n' to systematically parse the sequence of test cases following the count [t]."}
{"name": "1336_A. Linova and Kingdom", "description": "Input\n\nThe first line contains two integers n and k (2<= n<= 2 * 10^5, 1<= k< n) --- the number of cities and industry cities respectively.\n\nEach of the next n-1 lines contains two integers u and v (1<= u,v<= n), denoting there is a road connecting city u and city v.\n\nIt is guaranteed that from any city, you can reach any other city by the roads.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n-1>", "<T_i>-><T_i-1> <n> u <s> v", "<T_1>->u <s> v"], "constraints": ["2<=n<=2*10^5", "1<=k<n", "1<=u,v<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, where n serves as a counter variable for the number of cities, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n-1>'. The non-terminal <T_i> is a counter-driven rule for [n-1], representing each road connection between cities u and v, separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> u <s> v' and '<T_1>->u <s> v' to systematically parse the sequence of road connections following the count [n-1]."}
{"name": "1339_A. Filling Diamonds", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^{4}) --- the number of test cases.\n\nEach of the next t lines contains a single integer n (1 <= n <= 10^{9}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10000", "1<=n<=1000000000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case is represented by the variable 'n' followed by a newline token <n>. The grammar constructs are laid out as '<S>->[t] <n> <T_t>', '<T_i>-><T_i-1> <n> n', and '<T_1>->n' to systematically parse the sequence of test cases following the count [t]."}
{"name": "1342_C. Yet Another Counting Problem", "description": "You are given two integers a and b, and q queries. The i-th query consists of two numbers l_i and r_i, and the answer to it is the number of integers x such that l_i ≤ x ≤ r_i, and ((x mod a) mod b) ≠ ((x mod b) mod a). Calculate the answer for each query.\n\nRecall that y mod z is the remainder of the division of y by z. For example, 5 mod 3 = 2, 7 mod 8 = 7, 9 mod 4 = 1, 9 mod 9 = 0.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains three integers a, b and q (1 ≤ a, b ≤ 200; 1 ≤ q ≤ 500).\n\nThen q lines follow, each containing two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 10^{18}) for the corresponding query.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> [q] <n> <L_q>", "<T_1>->a <s> b <s> [q] <n> <L_q>", "<L_i>-><L_i-1> <n> l_i <s> r_i", "<L_1>->l_1 <s> r_1"], "constraints": ["1<=t<=100", "1<=a,b<=200", "1<=q<=500", "1<=l_i<=r_i<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes three integers a, b, and q, followed by q queries. The variable 'q' is also a counter, enclosed in [q], and the non-terminal <L_q> handles the sequence of queries. Each query consists of two integers l_i and r_i, separated by a space. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a <s> b <s> [q] <n> <L_q>', '<T_1>->a <s> b <s> [q] <n> <L_q>', '<L_i>-><L_i-1> <n> l_i <s> r_i', and '<L_1>->l_1 <s> r_1' to systematically parse the sequence of test cases and queries."}
{"name": "1342_E. Placing Rooks", "description": "Input\n\nThe only line of the input contains two integers n and k (1 <= n <= 200000; 0 <= k <= (n(n - 1))/(2)).", "grammar": {"productions": ["<S>->[n] <s> k"], "constraints": ["1<=n<=200000", "0<=k<=n*(n-1)/2"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and k, where n is a counter variable, hence it is enclosed in [n]. The variable k is not a counter, so it is represented as k. The grammar is initiated with '<S>->[n] <s> k', representing the input format where n and k are two integers separated by a space."}
{"name": "1344_A. Hilbert's Hotel", "description": "Hilbert's Hotel is a very unusual hotel since the number of rooms is infinite! In fact, there is exactly one room for every integer, including zero and negative integers. Even stranger, the hotel is currently at full capacity, meaning there is exactly one guest in every room. The hotel's manager, David Hilbert himself, decides he wants to shuffle the guests around because he thinks this will create a vacancy (a room without a guest).\n\nFor any integer k and positive integer n, let kmod n denote the remainder when k is divided by n. More formally, r=kmod n is the smallest non-negative integer such that k-r is divisible by n. It always holds that 0≤ kmod n≤ n-1. For example, 100mod 12=4 and (-1337)mod 3=1.\n\nThen the shuffling works as follows. There is an array of n integers a_0,a_1,…,a_{n-1}. Then for each integer k, the guest in room k is moved to room number k+a_{kmod n}.\n\nAfter this shuffling process, determine if there is still exactly one guest assigned to each room. That is, there are no vacancies or rooms with multiple guests.\n\nInput\n\nEach test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 10^4) — the number of test cases. Next 2t lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer n (1≤ n≤ 2⋅ 10^5) — the length of the array.\n\nThe second line of each test case contains n integers a_0,a_1,…,a_{n-1} (-10^9≤ a_i≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅ 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^5", "-10^9<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of an integer 'n' followed by 'n' integers a_0 to a_{n-1}. The variable 'n' is also a counter variable, hence enclosed in [n]. The sequence of integers is handled by the non-terminal <L_n>, which constructs the list of 'n' integers separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse each test case."}
{"name": "1348_C. Phoenix and Distribution", "description": "Phoenix has a string s consisting of lowercase Latin letters. He wants to distribute all the letters of his string into k non-empty strings a_1, a_2, ..., a_k such that every letter of s goes to exactly one of the strings a_i. The strings a_i do not need to be substrings of s. Phoenix can distribute letters of s and rearrange the letters within each string a_i however he wants.\n\nFor example, if s =  baba and k=2, Phoenix may distribute the letters of his string in many ways, such as: \n\n  * ba and ba\n  * a and abb\n  * ab and ab\n  * aa and bb\n\n\n\nBut these ways are invalid: \n\n  * baa and ba\n  * b and ba\n  * baba and empty string (a_i should be non-empty) \n\n\n\nPhoenix wants to distribute the letters of his string s into k strings a_1, a_2, ..., a_k to minimize the lexicographically maximum string among them, i. e. minimize max(a_1, a_2, ..., a_k). Help him find the optimal distribution and print the minimal possible value of max(a_1, a_2, ..., a_k).\n\nString x is lexicographically less than string y if either x is a prefix of y and x ≠ y, or there exists an index i (1 ≤ i ≤ min(|x|, |y|)) such that x_i < y_i and for every j (1 ≤ j < i) x_j = y_j. Here |x| denotes the length of the string x.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case consists of two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the length of string s and the number of non-empty strings, into which Phoenix wants to distribute letters of s, respectively.\n\nThe second line of each test case contains a string s of length n consisting only of lowercase Latin letters.\n\nIt is guaranteed that the sum of n over all test cases is ≤ 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> k <n> [a-z]{n}", "<T_1>->[n] <s> k <n> [a-z]{n}"], "constraints": ["1<=t<=1000", "1<=k<=n<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two lines: the first line contains 'n' and 'k', and the second line contains a string of length 'n' consisting of lowercase Latin letters. The string is represented using the regular expression [a-z]{n}. The grammar constructs are laid out as '<S>->[t] <n> <T_t>', '<T_i>-><T_i-1> <n> [n] <s> k <n> [a-z]{n}', and '<T_1>->[n] <s> k <n> [a-z]{n}' to systematically parse each test case following the count [t]."}
{"name": "1348_F. Phoenix and Memory", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 2*10^5) --- the number of friends.\n\nThe i-th of the next n lines contain two integers a_i and b_i (1 <= a_i <= b_i <= n) --- Phoenix's memory of the i-th position from the left.\n\nIt is guaranteed that Phoenix's memory is valid so there is at least one valid ordering.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=b_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the number of friends, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two integers 'a_i' and 'b_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of pairs following the count [n]."}
{"name": "1349_D. Slime and Biscuits", "description": "Input\n\nThe first line contains one integer n\\ (2<= n<= 100 000): the number of people playing the game.\n\nThe second line contains n non-negative integers a_1,a_2,...,a_n\\ (1<= a_1+a_2+...+a_n<= 300 000), where a_i represents the number of biscuits the i-th person own at the beginning.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100000", "1<=sum(a_i)<=300000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of people, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of integers a_i separated by spaces. The counter non-terminal <T_i> is defined to decrement until it reaches <T_1>, which produces the first element a_1. This setup ensures the input format where the first line is the count of people, and the second line lists their respective biscuit counts."}
{"name": "1350_B. Orac and Models", "description": "There are n models in the shop numbered from 1 to n, with sizes s_1, s_2, …, s_n.\n\nOrac will buy some of the models and will arrange them in the order of increasing numbers (i.e. indices, but not sizes).\n\nOrac thinks that the obtained arrangement is beatiful, if for any two adjacent models with indices i_j and i_{j+1} (note that i_j < i_{j+1}, because Orac arranged them properly), i_{j+1} is divisible by i_j and s_{i_j} < s_{i_{j+1}}.\n\nFor example, for 6 models with sizes \\{3, 6, 7, 7, 7, 7\\}, he can buy models with indices 1, 2, and 6, and the obtained arrangement will be beautiful. Also, note that the arrangement with exactly one model is also considered beautiful.\n\nOrac wants to know the maximum number of models that he can buy, and he may ask you these queries many times.\n\nInput\n\nThe first line contains one integer t\\ (1 ≤ t≤ 100): the number of queries.\n\nEach query contains two lines. The first line contains one integer n\\ (1≤ n≤ 100 000): the number of models in the shop, and the second line contains n integers s_1,...,s_n\\ (1≤ s_i≤ 10^9): the sizes of models.\n\nIt is guaranteed that the total sum of n is at most 100 000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> s_i", "<L_1>->s_1"], "constraints": ["1<=t<=100", "1<=n<=100000", "1<=s_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S> which includes the variable 't' as a counter variable, hence it is denoted as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t]. Each query consists of two lines: the first line contains 'n' as a counter variable for the number of models, hence it is denoted as [n], and the second line contains 'n' integers representing the sizes. The grammar constructs are '<T_i>-><T_i-1> <n> [n] <n> <L_n>' for the queries, where <L_i> is a counter non-terminal for [n] that generates the sequence of sizes separated by spaces. The constraints ensure the values of 't', 'n', and 's_i' are within specified limits."}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case is represented by the variable 'n' followed by a newline token <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n' and '<T_1>->n' to systematically parse the sequence of test cases following the count [t]."}
{"name": "1355_B. Young Explorers", "description": "Young wilderness explorers set off to their first expedition led by senior explorer Russell. Explorers went into a forest, set up a camp and decided to split into groups to explore as much interesting locations as possible. Russell was trying to form groups, but ran into some difficulties...\n\nMost of the young explorers are inexperienced, and sending them alone would be a mistake. Even Russell himself became senior explorer not long ago. Each of young explorers has a positive integer parameter e_i — his inexperience. Russell decided that an explorer with inexperience e can only join the group of e or more people.\n\nNow Russell needs to figure out how many groups he can organize. It's not necessary to include every explorer in one of the groups: some can stay in the camp. Russell is worried about this expedition, so he asked you to help him.\n\nInput\n\nThe first line contains the number of independent test cases T(1 ≤ T ≤ 2 ⋅ 10^5). Next 2T lines contain description of test cases.\n\nThe first line of description of each test case contains the number of young explorers N (1 ≤ N ≤ 2 ⋅ 10^5).\n\nThe second line contains N integers e_1, e_2, …, e_N (1 ≤ e_i ≤ N), where e_i is the inexperience of the i-th explorer.\n\nIt's guaranteed that sum of all N doesn't exceed 3 ⋅ 10^5.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [N] <n> <L_N>", "<T_1>->[N] <n> <L_N>", "<L_i>-><L_i-1> <s> e_i", "<L_1>->e_1"], "constraints": ["1<=T<=2*10^5", "1<=N<=2*10^5", "1<=e_i<=N"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'T' serves as a counter for the number of test cases, hence it is enclosed in brackets as [T]. The grammar is initiated with '<S>->[T] <n> <T_T>', where <T_T> is a counter non-terminal for [T]. Each test case includes a variable 'N' (enclosed as [N] since it's a counter) and a sequence of 'e_i' values. The sequence is handled by another counter non-terminal <L_N>, which generates 'e_i' values separated by spaces. The grammar rules '<T_i>-><T_i-1> <n> [N] <n> <L_N>' and '<T_1>->[N] <n> <L_N>' manage the test cases, while '<L_i>-><L_i-1> <s> e_i' and '<L_1>->e_1' handle the sequence of 'e_i' values."}
{"name": "1355_D. Game With Array", "description": "Petya and Vasya are competing with each other in a new interesting game as they always do.\n\nAt the beginning of the game Petya has to come up with an array of N positive integers. Sum of all elements in his array should be equal to S. Then Petya has to select an integer K such that 0 ≤ K ≤ S.\n\nIn order to win, Vasya has to find a non-empty subarray in Petya's array such that the sum of all selected elements equals to either K or S - K. Otherwise Vasya loses.\n\nYou are given integers N and S. You should determine if Petya can win, considering Vasya plays optimally. If Petya can win, help him to do that.\n\nInput\n\nThe first line contains two integers N and S (1 ≤ N ≤ S ≤ 10^{6}) — the required length of the array and the required sum of its elements.", "grammar": {"productions": ["<S>->N <s> S"], "constraints": ["1<=N<=S<=10^6"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, N and S, which are not used as counters but simply represent integers. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->N <s> S', where <s> denotes a space separating the two integers. This format directly reflects the input specification where N and S are given as two integers separated by a space."}
{"name": "1358_D. The Best Vacation", "description": "Input\n\nThe first line of input contains two integers n and x (1 <= n <= 2 * 10^5) --- the number of months in the year and the number of days you can spend with your friend.\n\nThe second line contains n integers d_1, d_2, ..., d_n, d_i is the number of days in the i-th month (1 <= d_i <= 10^6).\n\nIt is guaranteed that 1 <= x <= d_1 + d_2 + ... + d_n.", "grammar": {"productions": ["<S>->[n] <s> x <n> <T_n>", "<T_i>-><T_i-1> <s> d_i", "<T_1>->d_1"], "constraints": ["1<=n<=2*10^5", "1<=x<=d_i", "1<=d_i<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'x', where 'n' serves as a counter variable for the sequence of days in each month, hence it is enclosed in [n]. The grammar is structured as '<S>->[n] <s> x <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of days for each month is represented by 'd_i', which is separated by a space <s>. The grammar rules '<T_i>-><T_i-1> <s> d_i' and '<T_1>->d_1' are used to parse the sequence of days for each month, following the count [n]."}
{"name": "1359_C. Mixing Water", "description": "There are two infinite sources of water:\n\n  * hot water of temperature h; \n  * cold water of temperature c (c < h). \n\n\n\nYou perform the following procedure of alternating moves:\n\n  1. take one cup of the hot water and pour it into an infinitely deep barrel; \n  2. take one cup of the cold water and pour it into an infinitely deep barrel; \n  3. take one cup of the hot water ... \n  4. and so on ... \n\n\n\nNote that you always start with the cup of hot water.\n\nThe barrel is initially empty. You have to pour at least one cup into the barrel. The water temperature in the barrel is an average of the temperatures of the poured cups.\n\nYou want to achieve a temperature as close as possible to t. So if the temperature in the barrel is t_b, then the absolute difference of t_b and t (|t_b - t|) should be as small as possible.\n\nHow many cups should you pour into the barrel, so that the temperature in it is as close as possible to t? If there are multiple answers with the minimum absolute difference, then print the smallest of them.\n\nInput\n\nThe first line contains a single integer T (1 ≤ T ≤ 3 ⋅ 10^4) — the number of testcases.\n\nEach of the next T lines contains three integers h, c and t (1 ≤ c < h ≤ 10^6; c ≤ t ≤ h) — the temperature of the hot water, the temperature of the cold water and the desired temperature in the barrel.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> h <s> c <s> t", "<T_1>->h <s> c <s> t"], "constraints": ["1<=T<=3*10^4", "1<=c<h<=10^6", "c<=t<=h"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'T' is used as a counter variable for the number of test cases, hence it is enclosed in [T]. The grammar is structured as '<S>->[T] <n> <T_T>', where <T_i> is a counter non-terminal for [T]. Each test case consists of three integers h, c, and t, separated by spaces. The grammar rules '<T_i>-><T_i-1> <n> h <s> c <s> t' and '<T_1>->h <s> c <s> t' are used to parse each test case line, ensuring the correct format is followed for all test cases."}
{"name": "1359_D. Yet Another Yet Another Task", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 10^5) --- the number of cards.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-30 <= a_i <= 30) --- the values on the cards.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "-30<=a_i<=30"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the array elements, hence it is denoted as [n] in the grammar. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "135_A. Replacement", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 105), which represents how many numbers the array has. The next line contains n space-separated integers --- the array's description. All elements of the array lie in the range from 1 to 109, inclusive.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> integer", "<T_1>->integer"], "constraints": ["1<=n<=10^5", "1<=integer<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the array elements, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter-driven rule for [n], representing each array element separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> integer' and '<T_1>->integer' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1360_E. Polygon", "description": "Polygon is not only the best platform for developing problems but also a square matrix with side n, initially filled with the character 0.\n\nOn the polygon, military training was held. The soldiers placed a cannon above each cell in the first row and a cannon to the left of each cell in the first column. Thus, exactly 2n cannons were placed.\n\n<image> Initial polygon for n=4.\n\nCannons shoot character 1. At any moment of time, no more than one cannon is shooting. When a 1 flies out of a cannon, it flies forward (in the direction of the shot) until it collides with a polygon border or another 1. After that, it takes the cell in which it was before the collision and remains there. Take a look at the examples for better understanding.\n\nMore formally: \n\n  * if a cannon stands in the row i, to the left of the first column, and shoots with a 1, then the 1 starts its flight from the cell (i, 1) and ends in some cell (i, j); \n  * if a cannon stands in the column j, above the first row, and shoots with a 1, then the 1 starts its flight from the cell (1, j) and ends in some cell (i, j). \n\n\n\nFor example, consider the following sequence of shots:\n\n<image>\n\n1. Shoot the cannon in the row 2. 2. Shoot the cannon in the row 2. 3. Shoot the cannon in column 3.\n\nYou have a report from the military training on your desk. This report is a square matrix with side length n consisting of 0 and 1. You wonder if the training actually happened. In other words, is there a sequence of shots such that, after the training, you get the given matrix?\n\nEach cannon can make an arbitrary number of shots. Before the training, each cell of the polygon contains 0.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nEach test case starts with a line containing an integer n (1 ≤ n ≤ 50) — the size of the polygon.\n\nThis is followed by n lines of length n, consisting of 0 and 1 — the polygon matrix after the training.\n\nThe total area of the matrices in all test cases in one test does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <n> [01]{n}", "<L_1>->[01]{n}"], "constraints": ["1<=t<=1000", "1<=n<=50"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. Each test case includes an integer 'n' and a matrix of size n x n, where 'n' is also a counter variable, so it is enclosed in [n]. The grammar is structured to first read 't', followed by 't' test cases, each consisting of 'n' and then 'n' lines of binary strings. The binary strings are represented using the regex [01]{n} to denote each line of the matrix. The non-terminal <T_i> handles the repetition of test cases, and <L_i> handles the repetition of lines within each test case. The grammar ensures that each test case is separated by a newline and each line of the matrix is also separated by a newline."}
{"name": "1362_C. Johnny and Another Rating Drop", "description": "The last contest held on Johnny's favorite competitive programming platform has been received rather positively. However, Johnny's rating has dropped again! He thinks that the presented tasks are lovely, but don't show the truth about competitors' skills.\n\nThe boy is now looking at the ratings of consecutive participants written in a binary system. He thinks that the more such ratings differ, the more unfair is that such people are next to each other. He defines the difference between two numbers as the number of bit positions, where one number has zero, and another has one (we suppose that numbers are padded with leading zeros to the same length). For example, the difference of 5 = 101_2 and 14 = 1110_2 equals to 3, since 0101 and 1110 differ in 3 positions. Johnny defines the unfairness of the contest as the sum of such differences counted for neighboring participants.\n\nJohnny has just sent you the rating sequence and wants you to find the unfairness of the competition. You have noticed that you've got a sequence of consecutive integers from 0 to n. That's strange, but the boy stubbornly says that everything is right. So help him and find the desired unfairness for received numbers.\n\nInput\n\nThe input consists of multiple test cases. The first line contains one integer t (1 ≤ t ≤ 10 000) — the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains a single integer n (1 ≤ n ≤ 10^{18}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10000", "1<=n<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case is represented by a single integer 'n', which is not a counter variable, so it is written as 'n' without brackets. The grammar rules '<T_i>-><T_i-1> <n> n' and '<T_1>->n' ensure that each test case is processed on a new line, following the count [t]."}
{"name": "1363_B. Subsequence Hate", "description": "Shubham has a binary string s. A binary string is a string containing only characters \"0\" and \"1\".\n\nHe can perform the following operation on the string any amount of times: \n\n  * Select an index of the string, and flip the character at that index. This means, if the character was \"0\", it becomes \"1\", and vice versa. \n\n\n\nA string is called good if it does not contain \"010\" or \"101\" as a subsequence — for instance, \"1001\" contains \"101\" as a subsequence, hence it is not a good string, while \"1000\" doesn't contain neither \"010\" nor \"101\" as subsequences, so it is a good string.\n\nWhat is the minimum number of operations he will have to perform, so that the string becomes good? It can be shown that with these operations we can make any string good.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters.\n\nInput\n\nThe first line of the input contains a single integer t (1≤ t ≤ 100) — the number of test cases.\n\nEach of the next t lines contains a binary string s (1 ≤ |s| ≤ 1000).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [01]{1,1000}", "<T_1>->[01]{1,1000}"], "constraints": ["1<=t<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case is a binary string of length 1 to 1000, represented by the regular expression [01]{1,1000}. The grammar constructs are laid out as '<S>->[t] <n> <T_t>', '<T_i>-><T_i-1> <n> [01]{1,1000}', and '<T_1>->[01]{1,1000}' to systematically parse each test case following the count [t]."}
{"name": "1364_A. XXXXX", "description": "Ehab loves number theory, but for some reason he hates the number x. Given an array a, find the length of its longest subarray such that the sum of its elements isn't divisible by x, or determine that such subarray doesn't exist.\n\nAn array a is a subarray of an array b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 5) — the number of test cases you need to solve. The description of the test cases follows.\n\nThe first line of each test case contains 2 integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^4) — the number of elements in the array a and the number that Ehab hates.\n\nThe second line contains n space-separated integers a_1, a_2, …, a_{n} (0 ≤ a_i ≤ 10^4) — the elements of the array a.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>", "<T_1>->[n] <s> x <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=5", "1<=n<=10^5", "1<=x<=10^4", "0<=a_i<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes two integers 'n' and 'x' followed by 'n' space-separated integers 'a_i'. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>' and '<T_1>->[n] <s> x <n> <L_n>' to systematically parse each test case. The non-terminal <L_i> is used to represent the sequence of 'n' integers 'a_i' separated by spaces, with '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_1'."}
{"name": "1365_C. Rotation Matching", "description": "After the mysterious disappearance of Ashish, his two favourite disciples Ishika and Hriday, were each left with one half of a secret message. These messages can each be represented by a permutation of size n. Let's call them a and b.\n\nNote that a permutation of n elements is a sequence of numbers a_1, a_2, …, a_n, in which every number from 1 to n appears exactly once. \n\nThe message can be decoded by an arrangement of sequence a and b, such that the number of matching pairs of elements between them is maximum. A pair of elements a_i and b_j is said to match if: \n\n  * i = j, that is, they are at the same index. \n  * a_i = b_j \n\n\n\nHis two disciples are allowed to perform the following operation any number of times: \n\n  * choose a number k and cyclically shift one of the permutations to the left or right k times. \n\n\n\nA single cyclic shift to the left on any permutation c is an operation that sets c_1:=c_2, c_2:=c_3, …, c_n:=c_1 simultaneously. Likewise, a single cyclic shift to the right on any permutation c is an operation that sets c_1:=c_n, c_2:=c_1, …, c_n:=c_{n-1} simultaneously.\n\nHelp Ishika and Hriday find the maximum number of pairs of elements that match after performing the operation any (possibly zero) number of times.\n\nInput\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the size of the arrays.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the elements of the first permutation.\n\nThe third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ n) — the elements of the second permutation.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=n", "1<=b_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter for the permutations, hence it is enclosed in brackets as [n]. The grammar is structured to first read 'n', followed by two sequences of 'n' elements each, representing the permutations 'a' and 'b'. Each sequence is generated using a counter non-terminal (<T_n> for permutation 'a' and <L_n> for permutation 'b'), where each element is separated by a space <s>. The grammar rules '<T_i>-><T_i-1> <s> a_i' and '<L_i>-><L_i-1> <s> b_i' ensure the sequences are built incrementally, with base cases '<T_1>->a_1' and '<L_1>->b_1' terminating the recursion. This setup accurately reflects the input format where two permutations of size 'n' are provided."}
{"name": "1366_B. Shuffle", "description": "You are given an array consisting of n integers a_1, a_2, ..., a_n. Initially a_x = 1, all other elements are equal to 0.\n\nYou have to perform m operations. During the i-th operation, you choose two indices c and d such that l_i ≤ c, d ≤ r_i, and swap a_c and a_d.\n\nCalculate the number of indices k such that it is possible to choose the operations so that a_k = 1 in the end.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Then the description of t testcases follow.\n\nThe first line of each test case contains three integers n, x and m (1 ≤ n ≤ 10^9; 1 ≤ m ≤ 100; 1 ≤ x ≤ n).\n\nEach of next m lines contains the descriptions of the operations; the i-th line contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> x <s> [m] <n> <L_m>", "<T_1>->n <s> x <s> [m] <n> <L_m>", "<L_i>-><L_i-1> <n> l_i <s> r_i", "<L_1>->l_1 <s> r_1"], "constraints": ["1<=t<=100", "1<=n<=10^9", "1<=m<=100", "1<=x<=n", "1<=l_i<=r_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes three integers n, x, and m, followed by m operations. The variable 'm' is also a counter, hence it is enclosed in brackets as [m]. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> x <s> [m] <n> <L_m>' and '<T_1>->n <s> x <s> [m] <n> <L_m>'. The non-terminal <L_i> is a counter-driven rule for [m], representing each operation with two integers l_i and r_i separated by a space. The grammar systematically parses the sequence of operations following the count [m]."}
{"name": "1367_B. Even Array", "description": "You are given an array a[0 … n-1] of length n which consists of non-negative integers. Note that array indices start from zero.\n\nAn array is called good if the parity of each index matches the parity of the element at that index. More formally, an array is good if for all i (0 ≤ i ≤ n - 1) the equality i mod 2 = a[i] mod 2 holds, where x mod 2 is the remainder of dividing x by 2.\n\nFor example, the arrays [0, 5, 2, 1] and [0, 17, 0, 3] are good, and the array [2, 4, 6, 7] is bad, because for i=1, the parities of i and a[i] are different: i mod 2 = 1 mod 2 = 1, but a[i] mod 2 = 4 mod 2 = 0.\n\nIn one move, you can take any two elements of the array and swap them (these elements are not necessarily adjacent).\n\nFind the minimum number of moves in which you can make the array a good, or say that this is not possible.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases in the test. Then t test cases follow.\n\nEach test case starts with a line containing an integer n (1 ≤ n ≤ 40) — the length of the array a.\n\nThe next line contains n integers a_0, a_1, …, a_{n-1} (0 ≤ a_i ≤ 1000) — the initial array.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=1000", "1<=n<=40", "0<=a_i<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes an integer 'n' (also a counter variable for the array length, hence [n]) followed by the array elements. The array elements are represented by the non-terminal <L_n>, which is a counter-driven rule for [n], with each element 'a_i' separated by a space <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse the sequence of test cases and array elements."}
{"name": "1369_C. RationalLee", "description": "Lee just became Master in Codeforces, and so, he went out to buy some gifts for his friends. He bought n integers, now it's time to distribute them between his friends rationally...\n\nLee has n integers a_1, a_2, …, a_n in his backpack and he has k friends. Lee would like to distribute all integers in his backpack between his friends, such that the i-th friend will get exactly w_i integers and each integer will be handed over to exactly one friend.\n\nLet's define the happiness of a friend as the sum of the maximum and the minimum integer he'll get.\n\nLee would like to make his friends as happy as possible, in other words, he'd like to maximize the sum of friends' happiness. Now he asks you to calculate the maximum sum of friends' happiness.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nNext 3t lines contain test cases — one per three lines.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ n) — the number of integers Lee has and the number of Lee's friends.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9) — the integers Lee has.\n\nThe third line contains k integers w_1, w_2, …, w_k (1 ≤ w_i ≤ n; w_1 + w_2 + … + w_k = n) — the number of integers Lee wants to give to each friend. \n\nIt's guaranteed that the sum of n over test cases is less than or equal to 2 ⋅ 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [k] <n> <L_n> <n> <Z_k>", "<T_1>->[n] <s> [k] <n> <L_n> <n> <Z_k>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> w_i", "<Z_1>->w_1"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^5", "1<=k<=n", "-10^9 <=a_i<=10^9", "1<=w_i<=n", "w_1 + w_2 + … + w_k = n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of three lines: the first line contains two variables 'n' and 'k', both serving as counters, hence enclosed in [n] and [k] respectively, followed by a newline <n>. The second line contains 'n' integers, represented by the non-terminal <L_n>, and the third line contains 'k' integers, represented by the non-terminal <Z_k>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> [k] <n> <L_n> <n> <Z_k>' and '<T_1>->[n] <s> [k] <n> <L_n> <n> <Z_k>'. The non-terminals <L_i> and <Z_i> are used to represent the sequences of integers for 'a_i' and 'w_i' respectively, each separated by a space <s>."}
{"name": "1369_D. TediousLee", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases.\n\nNext t lines contain test cases --- one per line.\n\nThe first line of each test case contains one integer n (1 <= n <= 2 * 10^6) --- the level of Lee's RDB.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^6"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case is represented by the variable 'n' followed by a newline token <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n' and '<T_1>->n' to systematically parse the sequence of test cases following the count [t]."}
{"name": "1369_F. BareLee", "description": "Input\n\nThe first line contains the integer t (1 <= t <= 10^5) --- the number of rounds the game has. \n\nThen t lines follow, each contains two integers s_i and e_i (1 <= s_i <= e_i <= 10^{18}) --- the i-th round's information.\n\nThe rounds are played in the same order as given in input, s_i and e_i for all rounds are known to everyone before the game starts.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> s_i <s> e_i", "<T_1>->s_i <s> e_i"], "constraints": ["1<=t<=10^5", "1<=s_i<=e_i<=10^18"]}, "reason": "The grammar begins with the starting non-terminal <S>. The variable 't' serves as a counter variable for the number of rounds, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each round's information consists of two integers 's_i' and 'e_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> s_i <s> e_i' and '<T_1>->s_i <s> e_i' to systematically parse the sequence of rounds following the count [t]."}
{"name": "136_A. Presents", "description": "Little Petya very much likes gifts. Recently he has received a new laptop as a New Year gift from his mother. He immediately decided to give it to somebody else as what can be more pleasant than giving somebody gifts. And on this occasion he organized a New Year party at his place and invited n his friends there.\n\nIf there's one thing Petya likes more that receiving gifts, that's watching others giving gifts to somebody else. Thus, he safely hid the laptop until the next New Year and made up his mind to watch his friends exchanging gifts while he does not participate in the process. He numbered all his friends with integers from 1 to n. Petya remembered that a friend number i gave a gift to a friend number pi. He also remembered that each of his friends received exactly one gift.\n\nNow Petya wants to know for each friend i the number of a friend who has given him a gift.\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the quantity of friends Petya invited to the party. The second line contains n space-separated integers: the i-th number is pi — the number of a friend who gave a gift to friend number i. It is guaranteed that each friend received exactly one gift. It is possible that some friends do not share Petya's ideas of giving gifts to somebody else. Those friends gave the gifts to themselves.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=100", "1<=p_i<=n", "p_i!=p_j"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of friends, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n], representing the sequence of integers p_i separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> p_i' and '<T_1>->p_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "1370_C. Number Game", "description": "Ashishgup and FastestFinger play a game. \n\nThey start with a number n and play in turns. In each turn, a player can make any one of the following moves:\n\n  * Divide n by any of its odd divisors greater than 1. \n  * Subtract 1 from n if n is greater than 1. \n\n\n\nDivisors of a number include the number itself.\n\nThe player who is unable to make a move loses the game.\n\nAshishgup moves first. Determine the winner of the game if both of them play optimally.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains a single integer — n (1 ≤ n ≤ 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=100", "1<=n<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t], generating each test case's integer 'n' followed by a newline <n>. The rules '<T_i>-><T_i-1> <n> n' and '<T_1>->n' ensure that each test case's integer is properly formatted and separated by newlines."}
{"name": "1370_D. Odd-Even Subsequence", "description": "Input\n\nThe first line contains two integers n and k (2 <= k <= n <= 2 * 10^5) --- the size of the array a and the size of the subsequence.\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) --- the elements of the array a.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=k<=n<=2*10^5", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'k', where 'n' serves as a counter variable for the array elements, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <s> k <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1371_B. Magical Calendar", "description": "A competitive eater, Alice is scheduling some practices for an eating contest on a magical calendar. The calendar is unusual because a week contains not necessarily 7 days!\n\nIn detail, she can choose any integer k which satisfies 1 ≤ k ≤ r, and set k days as the number of days in a week.\n\nAlice is going to paint some n consecutive days on this calendar. On this calendar, dates are written from the left cell to the right cell in a week. If a date reaches the last day of a week, the next day's cell is the leftmost cell in the next (under) row.\n\nShe wants to make all of the painted cells to be connected by side. It means, that for any two painted cells there should exist at least one sequence of painted cells, started in one of these cells, and ended in another, such that any two consecutive cells in this sequence are connected by side.\n\nAlice is considering the shape of the painted cells. Two shapes are the same if there exists a way to make them exactly overlapped using only parallel moves, parallel to the calendar's sides.\n\nFor example, in the picture, a week has 4 days and Alice paints 5 consecutive days. [1] and [2] are different shapes, but [1] and [3] are equal shapes.\n\n<image>\n\nAlice wants to know how many possible shapes exists if she set how many days a week has and choose consecutive n days and paints them in calendar started in one of the days of the week. As was said before, she considers only shapes, there all cells are connected by side.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case, the only line contains two integers n, r (1 ≤ n ≤ 10^9, 1 ≤ r ≤ 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> r", "<T_1>->n <s> r"], "constraints": ["1<=t<=1000", "1<=n<=10^9", "1<=r<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two integers 'n' and 'r' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> r' and '<T_1>->n <s> r' to systematically parse each test case following the count [t]."}
{"name": "1371_C. A Cookie for You", "description": "Anna is a girl so brave that she is loved by everyone in the city and citizens love her cookies. She is planning to hold a party with cookies. Now she has a vanilla cookies and b chocolate cookies for the party.\n\nShe invited n guests of the first type and m guests of the second type to the party. They will come to the party in some order. After coming to the party, each guest will choose the type of cookie (vanilla or chocolate) to eat. There is a difference in the way how they choose that type:\n\nIf there are v vanilla cookies and c chocolate cookies at the moment, when the guest comes, then\n\n  * if the guest of the first type: if v>c the guest selects a vanilla cookie. Otherwise, the guest selects a chocolate cookie. \n  * if the guest of the second type: if v>c the guest selects a chocolate cookie. Otherwise, the guest selects a vanilla cookie. \n\n\n\nAfter that:\n\n  * If there is at least one cookie of the selected type, the guest eats one. \n  * Otherwise (there are no cookies of the selected type), the guest gets angry and returns to home. \n\n\n\nAnna wants to know if there exists some order of guests, such that no one guest gets angry. Your task is to answer her question.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case, the only line contains four integers a, b, n, m (0 ≤ a,b,n,m ≤ 10^{18}, n+m ≠ 0).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> n <s> m", "<T_1>->a <s> b <s> n <s> m"], "constraints": ["1<=t<=1000", "0<=a,b,n,m<=10^18"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t]. Each test case consists of four integers a, b, n, and m, separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a <s> b <s> n <s> m' and '<T_1>->a <s> b <s> n <s> m' to systematically parse each test case following the count [t]."}
{"name": "1372_B. Omkar and Last Class of Math", "description": "In Omkar's last class of math, he learned about the least common multiple, or LCM. LCM(a, b) is the smallest positive integer x which is divisible by both a and b.\n\nOmkar, having a laudably curious mind, immediately thought of a problem involving the LCM operation: given an integer n, find positive integers a and b such that a + b = n and LCM(a, b) is the minimum value possible.\n\nCan you help Omkar solve his ludicrously challenging math problem?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10). Description of the test cases follows.\n\nEach test case consists of a single integer n (2 ≤ n ≤ 10^{9}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10", "2<=n<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t], generating each test case followed by a newline. Each test case consists of a single integer 'n', which is not a counter variable, so it is written as 'n' without brackets. The grammar rules '<T_i>-><T_i-1> <n> n' and '<T_1>->n' ensure that each test case is processed sequentially, with 'n' being the input for each case."}
{"name": "1372_C. Omkar and Baseball", "description": "Patrick likes to play baseball, but sometimes he will spend so many hours hitting home runs that his mind starts to get foggy! Patrick is sure that his scores across n sessions follow the identity permutation (ie. in the first game he scores 1 point, in the second game he scores 2 points and so on). However, when he checks back to his record, he sees that all the numbers are mixed up! \n\nDefine a special exchange as the following: choose any subarray of the scores and permute elements such that no element of subarray gets to the same position as it was before the exchange. For example, performing a special exchange on [1,2,3] can yield [3,1,2] but it cannot yield [3,2,1] since the 2 is in the same position. \n\nGiven a permutation of n integers, please help Patrick find the minimum number of special exchanges needed to make the permutation sorted! It can be proved that under given constraints this number doesn't exceed 10^{18}.\n\nAn array a is a subarray of an array b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the given permutation.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (1 ≤ a_{i} ≤ n) — the initial permutation.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=2*10^5", "1<=a_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case includes an integer 'n' and a permutation of 'n' integers. Since 'n' is a counter variable for the permutation elements, it is enclosed in brackets as [n], leading to the rule '<T_i>-><T_i-1> <n> [n] <n> <L_n>', where <L_n> is a counter non-terminal for [n]. The permutation elements are represented as 'a_i' separated by spaces, leading to the rules '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_1'. This structure ensures the grammar accurately reflects the input format with multiple test cases and permutations."}
{"name": "1373_C. Pluses and Minuses", "description": "You are given a string s consisting only of characters + and -. You perform some process with this string. This process can be described by the following pseudocode: \n    \n    \n    res = 0  \n    for init = 0 to inf  \n        cur = init  \n        ok = true  \n        for i = 1 to |s|  \n            res = res + 1  \n            if s[i] == '+'  \n                cur = cur + 1  \n            else  \n                cur = cur - 1  \n            if cur < 0  \n                ok = false  \n                break  \n        if ok  \n            break  \n    \n\nNote that the inf denotes infinity, and the characters of the string are numbered from 1 to |s|.\n\nYou have to calculate the value of the res after the process ends.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe only lines of each test case contains string s (1 ≤ |s| ≤ 10^6) consisting only of characters + and -.\n\nIt's guaranteed that sum of |s| over all test cases doesn't exceed 10^6.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [+-]{1,10^6}", "<T_1>->[+-]{1,10^6}"], "constraints": ["1<=t<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t]. Each test case consists of a string of '+' and '-' characters, which is represented using the regular expression [+-]{1,10^6} to specify the allowed characters and their length range. The grammar rules '<T_i>-><T_i-1> <n> [+-]{1,10^6}' and '<T_1>->[+-]{1,10^6}' ensure that each test case string is properly parsed following the counter [t]."}
{"name": "1374_A. Required Remainder", "description": "You are given three integers x, y and n. Your task is to find the maximum integer k such that 0 ≤ k ≤ n that k mod x = y, where mod is modulo operation. Many programming languages use percent operator % to implement it.\n\nIn other words, with given x, y and n you need to find the maximum possible integer from 0 to n that has the remainder y modulo x.\n\nYou have to answer t independent test cases. It is guaranteed that such k exists for each test case.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 5 ⋅ 10^4) — the number of test cases. The next t lines contain test cases.\n\nThe only line of the test case contains three integers x, y and n (2 ≤ x ≤ 10^9;~ 0 ≤ y < x;~ y ≤ n ≤ 10^9).\n\nIt can be shown that such k always exists under the given constraints.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x <s> y <s> n", "<T_1>->x <s> y <s> n"], "constraints": ["1<=t<=5*10^4", "2<=x<=10^9", "0<=y<=x", "y<=n<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of three integers x, y, and n separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> x <s> y <s> n' and '<T_1>->x <s> y <s> n' to systematically parse each test case following the count [t]."}
{"name": "1379_A. Acacius and String", "description": "Acacius is studying strings theory. Today he came with the following problem.\n\nYou are given a string s of length n consisting of lowercase English letters and question marks. It is possible to replace question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once?\n\nEach question mark should be replaced with exactly one lowercase English letter. For example, string \"a?b?c\" can be transformed into strings \"aabbc\" and \"azbzc\", but can't be transformed into strings \"aabc\", \"a?bbc\" and \"babbc\".\n\nOccurrence of a string t of length m in the string s of length n as a substring is a index i (1 ≤ i ≤ n - m + 1) such that string s[i..i+m-1] consisting of m consecutive symbols of s starting from i-th equals to string t. For example string \"ababa\" has two occurrences of a string \"aba\" as a substring with i = 1 and i = 3, but there are no occurrences of a string \"aba\" in the string \"acba\" as a substring.\n\nPlease help Acacius to check if it is possible to replace all question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once.\n\nInput\n\nFirst line of input contains an integer T (1 ≤ T ≤ 5000), number of test cases. T pairs of lines with test case descriptions follow.\n\nThe first line of a test case description contains a single integer n (7 ≤ n ≤ 50), length of a string s.\n\nThe second line of a test case description contains string s of length n consisting of lowercase English letters and question marks.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> [a-z?]{n}", "<T_1>->[n] <n> [a-z?]{n}"], "constraints": ["1<=T<=5000", "7<=n<=50", "1<=i<=(n - m + 1)"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'T' is used as a counter for the number of test cases, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>', where <T_T> is a counter non-terminal for [T]. Each test case consists of an integer 'n' and a string 's' of length 'n' composed of lowercase English letters and question marks. Since 'n' is a counter variable for the string length, it is enclosed in [n]. The string 's' is represented using the regular expression [a-z?]{n}, indicating a sequence of 'n' characters, each being a lowercase letter or a question mark. The grammar rules '<T_i>-><T_i-1> <n> [n] <n> [a-z?]{n}' and '<T_1>->[n] <n> [a-z?]{n}' are used to parse each test case, ensuring the correct format and constraints are followed."}
{"name": "1380_F. Strange Addition", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 5 * 10^5) --- the length of the number c and the number of updates.\n\nThe second line contains a string c, consisting of exactly n digits from 0 to 9.\n\nEach of the next m lines contains two integers x and d (1 <= x <= n, 0 <= d <= 9) --- the descriptions of updates.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> [0-9]{n} <n> <T_m>", "<T_i>->x <s> d", "<L_1>->x <s> d"], "constraints": ["1<=n,m<=5*10^5", "1<=x<=n", "0<=d<=9"]}, "reason": "The grammar starts with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> [0-9]{n} <n> <T_m>', where [0-9]{n} represents a string of exactly n digits. The non-terminal <T_i> is used to handle the m updates, each consisting of two integers x and d separated by a space. The grammar constructs are laid out as '<T_i>->x <s> d' to parse each update line, ensuring the format matches the input specification."}
{"name": "1389_C. Good String", "description": "Let's call left cyclic shift of some string t_1 t_2 t_3 ... t_{n - 1} t_n as string t_2 t_3 ... t_{n - 1} t_n t_1.\n\nAnalogically, let's call right cyclic shift of string t as string t_n t_1 t_2 t_3 ... t_{n - 1}.\n\nLet's say string t is good if its left cyclic shift is equal to its right cyclic shift.\n\nYou are given string s which consists of digits 0–9.\n\nWhat is the minimum number of characters you need to erase from s to make it good?\n\nInput\n\nThe first line contains single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nNext t lines contains test cases — one per line. The first and only line of each test case contains string s (2 ≤ |s| ≤ 2 ⋅ 10^5). Each character s_i is digit 0–9.\n\nIt's guaranteed that the total length of strings doesn't exceed 2 ⋅ 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [0-9]{2,2*10^5}", "<T_1>->[0-9]{2,2*10^5}"], "constraints": ["1<=t<=1000"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case is a string of digits with length between 2 and 2*10^5, represented by the regular expression [0-9]{2,2*10^5}. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [0-9]{2,2*10^5}' and '<T_1>->[0-9]{2,2*10^5}' to systematically parse each test case string following the count [t]."}
{"name": "1392_A. Omkar and Password", "description": "Lord Omkar has permitted you to enter the Holy Church of Omkar! To test your worthiness, Omkar gives you a password which you must interpret!\n\nA password is an array a of n positive integers. You apply the following operation to the array: pick any two adjacent numbers that are not equal to each other and replace them with their sum. Formally, choose an index i such that 1 ≤ i < n and a_{i} ≠ a_{i+1}, delete both a_i and a_{i+1} from the array and put a_{i}+a_{i+1} in their place. \n\nFor example, for array [7, 4, 3, 7] you can choose i = 2 and the array will become [7, 4+3, 7] = [7, 7, 7]. Note that in this array you can't apply this operation anymore.\n\nNotice that one operation will decrease the size of the password by 1. What is the shortest possible length of the password after some number (possibly 0) of operations?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the password.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (1 ≤ a_{i} ≤ 10^9) — the initial contents of your password.\n\nThe sum of n over all test cases will not exceed 2 ⋅ 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_1", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=2*10^5", "1<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes an integer 'n' (also a counter variable, hence [n]) followed by a sequence of 'n' integers. The sequence is handled by another counter non-terminal <L_n>, which generates 'n' integers separated by spaces. The grammar constructs are '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> a_1', and '<L_1>->a_1' to systematically parse each test case."}
{"name": "1392_C. Omkar and Waterslide", "description": "Omkar is building a waterslide in his water park, and he needs your help to ensure that he does it as efficiently as possible.\n\nOmkar currently has n supports arranged in a line, the i-th of which has height a_i. Omkar wants to build his waterslide from the right to the left, so his supports must be nondecreasing in height in order to support the waterslide. In 1 operation, Omkar can do the following: take any contiguous subsegment of supports which is nondecreasing by heights and add 1 to each of their heights. \n\nHelp Omkar find the minimum number of operations he needs to perform to make his supports able to support his waterslide!\n\nAn array b is a subsegment of an array c if b can be obtained from c by deletion of several (possibly zero or all) elements from the beginning and several (possibly zero or all) elements from the end.\n\nAn array b_1, b_2, ..., b_n is called nondecreasing if b_i≤ b_{i+1} for every i from 1 to n-1.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of supports Omkar has.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (0 ≤ a_{i} ≤ 10^9) — the heights of the supports.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=2*10^5", "0<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes an integer 'n' (also a counter variable, hence [n]) followed by a sequence of 'n' integers a_i. The sequence is handled by another counter non-terminal <L_n>, which constructs the list of integers separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse each test case's input format."}
{"name": "1395_A. Boboniu Likes to Color Balls", "description": "Input\n\nThe first line contains one integer T (1<= T<= 100) denoting the number of test cases.\n\nFor each of the next T cases, the first line contains four integers r, g, b and w (0<= r,g,b,w<= 10^9).", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>->r <s> g <s> b <s> w <n> <T_i-1>", "<T_1>->r <s> g <s> b <s> w"], "constraints": ["1<=T<=100", "0<=r,g,b,w<=10^9"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'T' serves as a counter variable for the number of test cases, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case consists of four integers 'r', 'g', 'b', and 'w' separated by spaces <s> and followed by a newline <n>. The grammar constructs are laid out as '<T_i>->r <s> g <s> b <s> w <n> <T_i-1>' and '<T_1>->r <s> g <s> b <s> w' to systematically parse each test case following the count [T]."}
{"name": "1396_A. Multiples of Length", "description": "You are given an array a of n integers.\n\nYou want to make all elements of a equal to zero by doing the following operation exactly three times:\n\n  * Select a segment, for each number in this segment we can add a multiple of len to it, where len is the length of this segment (added integers can be different). \n\n\n\nIt can be proven that it is always possible to make all elements of a equal to zero.\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 100 000): the number of elements of the array.\n\nThe second line contains n elements of an array a separated by spaces: a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000000", "-10^9<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter for the array elements, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the array elements. The array elements 'a_i' are separated by spaces, represented by <s>. The counter non-terminal <T_i> is defined to decrement until it reaches 1, with '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to parse the sequence of array elements following the count [n]."}
{"name": "1397_C. Multiples of Length", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100 000): the number of elements of the array.\n\nThe second line contains n elements of an array a separated by spaces: a_1, a_2, ..., a_n (-10^9 <= a_i <= 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100000", "-10^9<=a_i<=10^9"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'n' is used as a counter variable for the array elements, thus it is denoted as [n] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1399_A. Remove Smallest", "description": "You are given the array a consisting of n positive (greater than zero) integers.\n\nIn one move, you can choose two indices i and j (i ≠ j) such that the absolute difference between a_i and a_j is no more than one (|a_i - a_j| ≤ 1) and remove the smallest of these two elements. If two elements are equal, you can remove any of them (but exactly one).\n\nYour task is to find if it is possible to obtain the array consisting of only one element using several (possibly, zero) such moves or not.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 50) — the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[T] <n> <L_T>", "<L_i>-><L_i-1> <n> [N] <n> <Z_N>", "<L_1>->[N] <n> <Z_N>", "<Z_i>-><Z_i-1> <s> A_i", "<Z_1>->A_1"], "constraints": ["1<=T<=1000", "1<=N<=50", "1<=A_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is denoted as [T]. The grammar is initiated with '<S>->[T] <n> <L_T>', where <L_T> is a counter non-terminal for the test cases. Each test case includes a variable 'n' which is the length of the array and serves as a counter, hence it is denoted as [N]. The array elements 'a_i' are represented by the non-terminal <Z_N>, which is a counter non-terminal for the array elements. The grammar constructs are laid out as '<L_i>-><L_i-1> <n> [N] <n> <Z_N>', '<L_1>->[N] <n> <Z_N>', '<Z_i>-><Z_i-1> <s> A_i', and '<Z_1>->A_1' to systematically parse the sequence of test cases and array elements."}
{"name": "1399_B. Gifts Fixing", "description": "You have n gifts and you want to give all of them to children. Of course, you don't want to offend anyone, so all gifts should be equal between each other. The i-th gift consists of a_i candies and b_i oranges.\n\nDuring one move, you can choose some gift 1 ≤ i ≤ n and do one of the following operations:\n\n  * eat exactly one candy from this gift (decrease a_i by one); \n  * eat exactly one orange from this gift (decrease b_i by one); \n  * eat exactly one candy and exactly one orange from this gift (decrease both a_i and b_i by one). \n\n\n\nOf course, you can not eat a candy or orange if it's not present in the gift (so neither a_i nor b_i can become less than zero).\n\nAs said above, all gifts should be equal. This means that after some sequence of moves the following two conditions should be satisfied: a_1 = a_2 = ... = a_n and b_1 = b_2 = ... = b_n (and a_i equals b_i is not necessary).\n\nYour task is to find the minimum number of moves required to equalize all the given gifts.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 50) — the number of gifts. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the number of candies in the i-th gift. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9), where b_i is the number of oranges in the i-th gift.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=1000", "1<=n<=50", "1<=a_i<=10^9", "1<=b_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. Each test case includes a variable 'n' which acts as a counter for the number of gifts, thus it is represented as [n]. The grammar then proceeds with '<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>' and '<T_1>->[n] <n> <L_n> <n> <Z_n>', where <L_n> and <Z_n> are counter non-terminals for the sequences of 'a_i' and 'b_i' respectively. The sequences are constructed using '<L_i>-><L_i-1> <s> a_i', '<L_1>->a_1', '<Z_i>-><Z_i-1> <s> b_i', and '<Z_1>->b_1' to parse the lists of candies and oranges for each gift."}
{"name": "1399_C. Boats Competition", "description": "There are n people who want to participate in a boat competition. The weight of the i-th participant is w_i. Only teams consisting of two people can participate in this competition. As an organizer, you think that it's fair to allow only teams with the same total weight.\n\nSo, if there are k teams (a_1, b_1), (a_2, b_2), ..., (a_k, b_k), where a_i is the weight of the first participant of the i-th team and b_i is the weight of the second participant of the i-th team, then the condition a_1 + b_1 = a_2 + b_2 = ... = a_k + b_k = s, where s is the total weight of each team, should be satisfied.\n\nYour task is to choose such s that the number of teams people can create is the maximum possible. Note that each participant can be in no more than one team.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 50) — the number of participants. The second line of the test case contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ n), where w_i is the weight of the i-th participant.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> w_i", "<L_1>->w_1"], "constraints": ["1<=t<=1000", "1<=n<=50", "1<=w_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes an integer 'n' (enclosed in [n] as it serves as a counter for the number of participants) followed by a sequence of weights 'w_i' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> w_i', and '<L_1>->w_1' to systematically parse each test case and the sequence of weights following the count [n]."}
{"name": "1399_E1. Weights Division (easy version)", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and S (2 <= n <= 10^5; 1 <= S <= 10^{16}) --- the number of vertices in the tree and the maximum possible sum of weights you have to obtain. The next n-1 lines describe edges of the tree. The edge i is described as three integers v_i, u_i and w_i (1 <= v_i, u_i <= n; 1 <= w_i <= 10^6), where v_i and u_i are vertices the edge i connects and w_i is the weight of this edge.\n\nIt is guaranteed that the sum of n does not exceed 10^5 (sum n <= 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> S <n> <L_n-1>", "<T_1>->[n] <s> S <n> <L_n-1>", "<L_i>-><L_i-1> <n> v_i <s> u_i <s> w_i", "<L_1>->v_1 <s> u_1 <s> w_1"], "constraints": ["1<=t<=2*10^4", "2<=n<=10^5", "1<=S<=10^16", "1<=v_i,u_i<=n", "1<=w_i<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case includes variables 'n' and 'S', where 'n' is a counter for the number of vertices and 'S' is a variable. The grammar continues with '<T_i>-><T_i-1> <n> [n] <s> S <n> <L_n-1>', where <L_n-1> is a counter non-terminal for the edges, which are described by three variables each: 'v_i', 'u_i', and 'w_i'. The grammar ensures that each edge is represented with its respective variables separated by spaces. The constraints are derived from the input specifications, ensuring all variables adhere to their defined ranges."}
{"name": "139_A. Petr and Book", "description": "One Sunday Petr went to a bookshop and bought a new book on sports programming. The book had exactly n pages.\n\nPetr decided to start reading it starting from the next day, that is, from Monday. Petr's got a very tight schedule and for each day of the week he knows how many pages he will be able to read on that day. Some days are so busy that Petr will have no time to read whatsoever. However, we know that he will be able to read at least one page a week.\n\nAssuming that Petr will not skip days and will read as much as he can every day, determine on which day of the week he will read the last page of the book.\n\nInput\n\nThe first input line contains the single integer n (1 ≤ n ≤ 1000) — the number of pages in the book.\n\nThe second line contains seven non-negative space-separated integers that do not exceed 1000 — those integers represent how many pages Petr can read on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday correspondingly. It is guaranteed that at least one of those numbers is larger than zero.", "grammar": {"productions": ["<S>->n <n> a <s> b <s> c <s> d <s> e <s> f <s> g"], "constraints": ["1<=n<=1000", "0<=a<=1000", "0<=b<=1000", "0<=c<=1000", "0<=d<=1000", "0<=e<=1000", "0<=f<=1000", "0<=g<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is not a counter variable, so it is represented as 'n'. The second line consists of seven space-separated integers (a, b, c, d, e, f, g), none of which are counter variables, hence they are represented directly. The grammar is structured as '<S>->n <n> a <s> b <s> c <s> d <s> e <s> f <s> g' to reflect the input format where 'n' is followed by seven integers separated by spaces."}
{"name": "1400_F. x-prime Substrings", "description": "Input\n\nThe first line contains a string s (1 <= |s| <= 1000). s contains only digits from 1 to 9 inclusive.\n\nThe second line contains an integer x (1 <= x <= 20).", "grammar": {"productions": ["<S>->[1-9]{1,1000} <n> x"], "constraints": ["1<=x<=20"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 's' is a string of digits from 1 to 9 with a length between 1 and 1000, so it is represented using the regular expression [1-9]{1,1000}. The variable 'x' is an integer and does not serve as a counter, so it is written as 'x' without brackets. The grammar is structured as '<S>->[1-9]{1,1000} <n> x' to reflect the input format where the string 's' is followed by a newline and then the integer 'x'."}
{"name": "1401_C. Mere Array", "description": "You are given an array a_1, a_2, ..., a_n where all a_i are integers and greater than 0.\n\nIn one operation, you can choose two different indices i and j (1 ≤ i, j ≤ n). If gcd(a_i, a_j) is equal to the minimum element of the whole array a, you can swap a_i and a_j. gcd(x, y) denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers x and y.\n\nNow you'd like to make a non-decreasing using the operation any number of times (possibly zero). Determine if you can do this.\n\nAn array a is non-decreasing if and only if a_1 ≤ a_2 ≤ … ≤ a_n.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10^5) — the length of array a.\n\nThe second line of each test case contains n positive integers a_1, a_2, … a_n (1 ≤ a_i ≤ 10^9) — the array itself.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^4", "1<=n<=10^5", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes a line with 'n' (also a counter variable, hence [n]) followed by a sequence of 'n' integers. The sequence is handled by the non-terminal <L_n>, which constructs the array elements separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse each test case and its corresponding array elements."}
{"name": "1406_A. Subset Mex", "description": "Given a set of integers (it can contain equal elements).\n\nYou have to split it into two subsets A and B (both of them can contain equal elements or be empty). You have to maximize the value of mex(A)+mex(B).\n\nHere mex of a set denotes the smallest non-negative integer that doesn't exist in the set. For example: \n\n  * mex(\\{1,4,0,2,2,1\\})=3 \n  * mex(\\{3,3,2,1,3,0,0\\})=4 \n  * mex(∅)=0 (mex for empty set) \n\n\n\nThe set is splitted into two subsets A and B if for any integer number x the number of occurrences of x into this set is equal to the sum of the number of occurrences of x into A and the number of occurrences of x into B.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1≤ t≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1≤ n≤ 100) — the size of the set.\n\nThe second line of each testcase contains n integers a_1,a_2,... a_n (0≤ a_i≤ 100) — the numbers in the set.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "0<=a_i<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is used to handle each test case, which includes a counter variable [n] for the size of the set and a sequence of integers a_i. The grammar constructs are '<T_i>-><T_i-1> <n> [n] <n> <L_n>' for each test case, where <L_n> generates the sequence of integers a_i separated by spaces. The sequence is generated using '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_1' to ensure proper formatting and counting."}
{"name": "1406_B. Maximum Product", "description": "You are given an array of integers a_1,a_2,…,a_n. Find the maximum possible value of a_ia_ja_ka_la_t among all five indices (i, j, k, l, t) (i<j<k<l<t).\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1≤ t≤ 2 ⋅ 10^4) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (5≤ n≤ 10^5) — the size of the array.\n\nThe second line of each test case contains n integers a_1,a_2,…,a_n (-3× 10^3≤ a_i≤ 3× 10^3) — given array.\n\nIt's guaranteed that the sum of n over all test cases does not exceed 2⋅ 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=2*10^4", "5<=n<=10^5", "-3*10^3<=a_i<=3*10^3"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case includes a variable 'n' which is also a counter for the array elements, hence it is enclosed in [n] and represented by the non-terminal <L_n>. The array elements 'a_i' are listed in sequence, each separated by a space <s>, controlled by the counter non-terminal <L_i>. The grammar constructs are '<S>->[t] <n> <T_t>', '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse the input for multiple test cases and their respective arrays."}
{"name": "1406_C. Link Cut Centroids", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1<= t<= 10^4) --- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (3<= n<= 10^5) --- the number of vertices.\n\nEach of the next n-1 lines contains two integers x, y (1<= x,y<= n). It means, that there exists an edge connecting vertices x and y.\n\nIt's guaranteed that the given graph is a tree.\n\nIt's guaranteed that the sum of n for all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n-1>", "<T_1>->[n] <n> <L_n-1>", "<L_i>-><L_i-1> <n> x <s> y", "<L_1>->x <s> y"], "constraints": ["1<=t<=10^4", "3<=n<=10^5", "1<=x,y<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes an integer 'n' and 'n-1' lines of pairs (x, y). The variable 'n' is also a counter for the number of vertices, hence it is enclosed in [n]. The non-terminal <L_i> is used to generate 'n-1' lines of pairs (x, y), each separated by a newline <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n-1>', '<T_1>->[n] <n> <L_n-1>', '<L_i>-><L_i-1> <n> x <s> y', and '<L_1>->x <s> y' to systematically parse the sequence of test cases and their respective edges."}
{"name": "1408_A. Circle Coloring", "description": "Input\n\nThe first line of input contains one integer t (1 <= t <= 100): the number of test cases.\n\nThe first line of each test case contains one integer n (3 <= n <= 100): the number of elements in the given sequences.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 100).\n\nThe third line contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 100).\n\nThe fourth line contains n integers c_1, c_2, ..., c_n (1 <= c_i <= 100).\n\nIt is guaranteed that a_i != b_i, a_i != c_i, b_i != c_i for all i.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><n> <T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=100", "3<=n<=100", "1<=a_i<=100", "1<=b_i<=100", "1<=c_i<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t]. Each test case includes an integer 'n' (also a counter variable, hence [n]) followed by three sequences of 'n' integers each. The sequences are represented using counter non-terminals <L_n> and <Z_n> for the second and third sequences, respectively. The grammar ensures that each sequence is correctly parsed with elements separated by spaces, and newlines separate different parts of the input. The constraints are derived from the input specifications, ensuring all variables adhere to their defined ranges."}
{"name": "1409_D. Decrease the Sum of Digits", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers n and s (1 <= n <= 10^{18}; 1 <= s <= 162).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> s", "<T_1>->n <s> s"], "constraints": ["1<=t<=2*10^4", "1<=n<=10^18", "1<=s<=162"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal that generates each test case. Each test case consists of two integers 'n' and 's' separated by a space, represented as 'n <s> s'. The counter non-terminal <T_i> is defined to decrement until it reaches 1, generating each test case in sequence. The grammar ensures that each test case is on a new line, denoted by <n>."}
{"name": "1417_A. Copy-paste", "description": "— Hey folks, how do you like this problem?\n\n— That'll do it. \n\nBThero is a powerful magician. He has got n piles of candies, the i-th pile initially contains a_i candies. BThero can cast a copy-paste spell as follows: \n\n  1. He chooses two piles (i, j) such that 1 ≤ i, j ≤ n and i ≠ j. \n  2. All candies from pile i are copied into pile j. Formally, the operation a_j := a_j + a_i is performed. \n\n\n\nBThero can cast this spell any number of times he wants to — but unfortunately, if some pile contains strictly more than k candies, he loses his magic power. What is the maximum number of times BThero can cast the spell without losing his power?\n\nInput\n\nThe first line contains one integer T (1 ≤ T ≤ 500) — the number of test cases.\n\nEach test case consists of two lines: \n\n  * the first line contains two integers n and k (2 ≤ n ≤ 1000, 2 ≤ k ≤ 10^4); \n  * the second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k). \n\n\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000, and the sum of k over all test cases does not exceed 10^4.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=T<=500", "2<=n<=1000", "2<=k<=10^4", "1<=a_i<=k"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'T' serves as a counter variable for the number of test cases, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case consists of two lines: the first line contains two integers 'n' and 'k', and the second line contains 'n' integers. Since 'n' serves as a counter variable for the array elements, it is enclosed in [n], leading to the rule '<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>'. The non-terminal <L_i> is a counter-driven rule for [n], representing each array element 'a_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_1>->[n] <s> k <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "1419_C. Killjoy", "description": "A new agent called Killjoy invented a virus COVID-2069 that infects accounts on Codeforces. Each account has a rating, described by an integer (it can possibly be negative or very large).\n\nKilljoy's account is already infected and has a rating equal to x. Its rating is constant. There are n accounts except hers, numbered from 1 to n. The i-th account's initial rating is a_i. Any infected account (initially the only infected account is Killjoy's) instantly infects any uninfected account if their ratings are equal. This can happen at the beginning (before any rating changes) and after each contest. If an account is infected, it can not be healed.\n\nContests are regularly held on Codeforces. In each contest, any of these n accounts (including infected ones) can participate. Killjoy can't participate. After each contest ratings are changed this way: each participant's rating is changed by an integer, but the sum of all changes must be equal to zero. New ratings can be any integer.\n\nFind out the minimal number of contests needed to infect all accounts. You can choose which accounts will participate in each contest and how the ratings will change.\n\nIt can be proven that all accounts can be infected in some finite number of contests.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next 2t lines contain the descriptions of all test cases.\n\nThe first line of each test case contains two integers n and x (2 ≤ n ≤ 10^3, -4000 ≤ x ≤ 4000) — the number of accounts on Codeforces and the rating of Killjoy's account.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-4000 ≤ a_i ≤ 4000) — the ratings of other accounts.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>", "<T_1>->[n] <s> x <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "2<=n<=10^3", "-4000<=x<=4000", "-4000<=a_i<=4000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes 'n' and 'x' on the first line, followed by 'n' integers on the second line. The variable 'n' is also a counter for the number of accounts, so it is enclosed in [n]. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>', '<T_1>->[n] <s> x <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse the sequence of accounts for each test case."}
{"name": "141_C. Queue", "description": "Input\n\nThe first input line contains integer n --- the number of people in the queue (1 <= n <= 3000). Then n lines contain descriptions of the people as \"namei ai\" (one description on one line), where namei is a non-empty string consisting of lowercase Latin letters whose length does not exceed 10 characters (the i-th person's name), ai is an integer (0 <= ai <= n - 1), that represents the number of people who are higher and stand in the queue in front of person i. It is guaranteed that all names are different.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,10} <s> a_i", "<T_1>->[a-z]{1,10} <s> a_i"], "constraints": ["1<=n<=3000", "0<=ai<=n-1"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of people in the queue, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains a name (represented by the regex [a-z]{1,10}) and an integer 'a_i', separated by a space <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [a-z]{1,10} <s> a_i' and '<T_1>->[a-z]{1,10} <s> a_i' to systematically parse each person's description in the queue."}
{"name": "1421_A. XORwice", "description": "In order to celebrate Twice's 5th anniversary, Tzuyu and Sana decided to play a game.\n\nTzuyu gave Sana two integers a and b and a really important quest.\n\nIn order to complete the quest, Sana has to output the smallest possible value of (a ⊕ x) + (b ⊕ x) for any given x, where ⊕ denotes the [bitwise XOR operation](http://en.wikipedia.org/wiki/Bitwise_operation#XOR). \n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^{4}). Description of the test cases follows.\n\nThe only line of each test case contains two integers a and b (1 ≤ a, b ≤ 10^{9}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=10^4", "1<=a<=10^9", "1<=b<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two integers 'a' and 'b' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a <s> b' and '<T_1>->a <s> b' to systematically parse each test case following the count [t]."}
{"name": "1424_F. Coins", "description": "Input\n\nThe first line of input contains two integer numbers n and k (1 <= n <= 10^{9}, 0 <= k <= 2*10^5), where n denotes total number of pirates and k is the number of pirates that have any coins.\n\nThe next k lines of input contain integers a_i and b_i (1 <= a_i <= n, 1 <= b_i <= 10^{9}), where a_i denotes the index of the pirate sitting at the round table (n and 1 are neighbours) and b_i the total number of coins that pirate a_i has at the start of the game.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_k>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=n<=10^9", "0<=k<=2*10^5", "1<=a_i<=n", "1<=b_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, where n serves as a counter variable, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_k>'. The non-terminal <T_i> is a counter-driven rule for [k], representing each line of input that contains two integers a_i and b_i separated by a space. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of pirate indices and their corresponding coins."}
{"name": "1424_G. Years", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10^5) --- the number of people.\n\nEach of the following n lines contain two integers b and d (1 <= b < d <= 10^9) representing birth and death year (respectively) of each individual.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> b <s> d", "<T_1>->b <s> d"], "constraints": ["1<=n<=10^5", "1<=b<d<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of people, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n]. Each person's data consists of two integers, 'b' and 'd', separated by a space <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> b <s> d' and '<T_1>->b <s> d' to systematically parse the sequence of birth and death years for each individual following the count [n]."}
{"name": "1426_C. Increase and Copy", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 1000) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 10^9) --- the lower bound on the sum of the array.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=1000", "1<=n<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal that generates each test case. Each test case consists of an integer 'n', which is not a counter variable and thus is not enclosed in brackets. The grammar rules '<T_i>-><T_i-1> <n> n' and '<T_1>->n' ensure that each test case is followed by a newline and contains the integer 'n'."}
{"name": "1427_D. Unshuffling a Deck", "description": "Input\n\nThe first line of the input contains one integer n (1<= n<= 52) --- the number of cards in the deck.\n\nThe second line contains n integers c_1, c_2, ..., c_n --- the cards in the deck. The first card is c_1, the second is c_2 and so on.\n\nIt is guaranteed that for all i=1,...,n there is exactly one jin\\{1,...,n\\} such that c_j = i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1"], "constraints": ["1<=n<=52", "1<=c_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of cards, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'c_i' represents each card in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> c_i' and '<T_1>->c_1' to systematically parse the sequence of cards following the count [n]."}
{"name": "1428_A. Box is Pull", "description": "Wabbit is trying to move a box containing food for the rest of the zoo in the coordinate plane from the point (x_1,y_1) to the point (x_2,y_2).\n\nHe has a rope, which he can use to pull the box. He can only pull the box if he stands exactly 1 unit away from the box in the direction of one of two coordinate axes. He will pull the box to where he is standing before moving out of the way in the same direction by 1 unit. \n\n<image>\n\nFor example, if the box is at the point (1,2) and Wabbit is standing at the point (2,2), he can pull the box right by 1 unit, with the box ending up at the point (2,2) and Wabbit ending at the point (3,2).\n\nAlso, Wabbit can move 1 unit to the right, left, up, or down without pulling the box. In this case, it is not necessary for him to be in exactly 1 unit away from the box. If he wants to pull the box again, he must return to a point next to the box. Also, Wabbit can't move to the point where the box is located.\n\nWabbit can start at any point. It takes 1 second to travel 1 unit right, left, up, or down, regardless of whether he pulls the box while moving.\n\nDetermine the minimum amount of time he needs to move the box from (x_1,y_1) to (x_2,y_2). Note that the point where Wabbit ends up at does not matter.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000): the number of test cases. The description of the test cases follows.\n\nEach of the next t lines contains four space-separated integers x_1, y_1, x_2, y_2 (1 ≤ x_1, y_1, x_2, y_2 ≤ 10^9), describing the next test case.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x1 <s> y1 <s> x2 <s> y2", "<T_1>->x1 <s> y1 <s> x2 <s> y2"], "constraints": ["1<=t<=1000", "1<=x1,y1,x2,y2<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal that generates each test case. Each test case consists of four integers separated by spaces, represented as 'x1 <s> y1 <s> x2 <s> y2'. The counter non-terminal <T_i> is defined to recursively generate each test case line until it reaches the base case <T_1>. This ensures the grammar correctly models the input format with multiple test cases."}
{"name": "1428_D. Bouncing Boomerangs", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 10^5).\n\nThe next line contains n integers a_1,a_2,...,a_n (0 <= a_i <= 3).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "0<=a_i<=3"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of integers 'a_i' is represented by the non-terminal <T_i>, which decrements until it reaches <T_1>, ensuring the correct number of integers are parsed. Each integer 'a_i' is separated by a space symbol <s>. The grammar constructs are '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "1433_C. Dominant Piranha", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (2 <= n <= 3 * 10^5) --- the number of piranhas in the aquarium. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i is the size of the i-th piranha.\n\nIt is guaranteed that the sum of n does not exceed 3 * 10^5 (sum n <= 3 * 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_i"], "constraints": ["1<=t<=2*10^4", "2<=n<=3*10^5", "1<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case includes a variable 'n' which is also a counter for the number of piranhas, thus enclosed as [n], followed by a sequence of integers a_i. The sequence is handled by the counter non-terminal <L_n>, which generates each a_i separated by a space. The grammar rules '<T_i>-><T_i-1> <n> [n] <n> <L_n>' and '<T_1>->[n] <n> <L_n>' manage the repetition of test cases, while '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_i' handle the sequence of integers within each test case."}
{"name": "1436_C. Binary Search", "description": "Input\n\nThe only line of input contains integers n, x and pos (1 <= x <= n <= 1000, 0 <= pos <= n - 1) --- the required length of the permutation, the number to search, and the required position of that number, respectively.", "grammar": {"productions": ["<S>->n <s> x <s> pos"], "constraints": ["1<=x<=n<=1000", "0<=pos<=n-1"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, x, and pos. None of these variables serve as counter variables, so they are not enclosed in brackets. The input format requires these three integers to be separated by spaces, hence the grammar is constructed as '<S>->n <s> x <s> pos' to reflect this structure."}
{"name": "1437_A. Marketing Scheme", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first and only line of each test case contains two integers l and r (1 <= l <= r <= 10^9) --- the range of the number of cans customers can buy.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> l <s> r", "<T_1>->l <s> r"], "constraints": ["1<=t<=1000", "1<=l<=r<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case consists of two integers 'l' and 'r' separated by a space, represented by '<T_i>-><T_i-1> <n> l <s> r' for multiple test cases and '<T_1>->l <s> r' for the first test case. This ensures the grammar correctly parses the input format where each test case is on a new line."}
{"name": "1438_C. Engineer Artem", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 <= t <= 10). Description of the test cases follows.\n\nThe first line of each test case contains two integers n, m (1 <= n <= 100, 1 <= m <= 100) --- the number of rows and columns, respectively.\n\nThe following n lines each contain m integers. The j-th integer in the i-th line is a_{i,j} (1 <= a_{i,j} <= 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [m] <n> <L_n>", "<T_1>->[n] <s> [m] <n> <L_n>", "<L_i>-><L_i-1> <n> <Z_m>", "<L_1>-><Z_m>", "<Z_i>-><Z_i-1> <s> a_{i,j}", "<Z_1>->a_{i,j}"], "constraints": ["1<=t<=10", "1<=n<=100", "1<=m<=100", "1<=a_{i,j}<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes variables 'n' and 'm', both serving as counters for rows and columns respectively, hence enclosed in [n] and [m]. The grammar then proceeds with '<T_i>-><T_i-1> <n> [n] <s> [m] <n> <L_n>', where <L_n> is a counter non-terminal for the rows, each containing 'm' integers. The integers are represented by the non-terminal <Z_m>, which is a counter for the columns. The grammar constructs are laid out to systematically parse the sequence of test cases, rows, and columns."}
{"name": "143_A. Help Vasilisa the Wise 2", "description": "Input\n\nThe input contains numbers written on the edges of the lock of the box. The first line contains space-separated integers r1 and r2 that define the required sums of numbers in the rows of the square. The second line contains space-separated integers c1 and c2 that define the required sums of numbers in the columns of the square. The third line contains space-separated integers d1 and d2 that define the required sums of numbers on the main and on the side diagonals of the square (1 <= r1, r2, c1, c2, d1, d2 <= 20). Correspondence between the above 6 variables and places where they are written is shown on the picture below. For more clarifications please look at the second sample test that demonstrates the example given in the problem statement.\n\n<image>", "grammar": {"productions": ["<S>->r1 <s> r2 <n> c1 <s> c2 <n> d1 <s> d2"], "constraints": ["1<=r1,r2,c1,c2,d1,d2<=20"]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of three lines, each containing two integers separated by a space. The variables r1, r2, c1, c2, d1, and d2 are not used as counters, so they are not enclosed in brackets. The grammar is structured to represent each line with the respective variables separated by a space <s> and followed by a newline <n>. The grammar is thus constructed as '<S>->r1 <s> r2 <n> c1 <s> c2 <n> d1 <s> d2' to accurately reflect the input format."}
{"name": "1442_A. Extreme Subtraction", "description": "Input\n\nThe first line contains one positive integer t (1 <= t <= 30000) --- the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 <= n <= 30000) --- the number of elements in the array.\n\nThe second line of each test case contains n integers a_1 ... a_n (1 <= a_i <= 10^6).\n\nThe sum of n over all test cases does not exceed 30000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=30000", "1<=n<=30000", "1<=a_i<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case includes a variable 'n', which is also a counter for the number of elements in the array, hence it is enclosed in [n]. The array elements are represented by <L_n>, a counter non-terminal for [n], which generates 'a_i' elements separated by spaces. The grammar rules '<T_i>-><T_i-1> <n> [n] <n> <L_n>' and '<T_1>->[n] <n> <L_n>' handle the sequence of test cases, while '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_1' manage the array elements within each test case."}
{"name": "1443_A. Kids Seating", "description": "Today the kindergarten has a new group of n kids who need to be seated at the dinner table. The chairs at the table are numbered from 1 to 4n. Two kids can't sit on the same chair. It is known that two kids who sit on chairs with numbers a and b (a ≠ b) will indulge if: \n\n  1. gcd(a, b) = 1 or, \n  2. a divides b or b divides a. \n\n\n\ngcd(a, b) — the maximum number x such that a is divisible by x and b is divisible by x.\n\nFor example, if n=3 and the kids sit on chairs with numbers 2, 3, 4, then they will indulge since 4 is divided by 2 and gcd(2, 3) = 1. If kids sit on chairs with numbers 4, 6, 10, then they will not indulge.\n\nThe teacher really doesn't want the mess at the table, so she wants to seat the kids so there are no 2 of the kid that can indulge. More formally, she wants no pair of chairs a and b that the kids occupy to fulfill the condition above.\n\nSince the teacher is very busy with the entertainment of the kids, she asked you to solve this problem.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing an integer n (1 ≤ n ≤ 100) — the number of kids.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "-10^9<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case consists of an integer 'n' (not a counter variable, hence not enclosed in brackets) followed by a newline. The grammar rules '<T_i>-><T_i-1> <n> a_i' and '<T_1>->a_1' are used to generate each test case, where 'a_i' represents the integer input for each test case. The constraints are set for 't', 'n', and 'a_i' to ensure they fall within specified ranges."}
{"name": "1443_B. Saving the City", "description": "Bertown is a city with n buildings in a straight line.\n\nThe city's security service discovered that some buildings were mined. A map was compiled, which is a string of length n, where the i-th character is \"1\" if there is a mine under the building number i and \"0\" otherwise.\n\nBertown's best sapper knows how to activate mines so that the buildings above them are not damaged. When a mine under the building numbered x is activated, it explodes and activates two adjacent mines under the buildings numbered x-1 and x+1 (if there were no mines under the building, then nothing happens). Thus, it is enough to activate any one mine on a continuous segment of mines to activate all the mines of this segment. For manual activation of one mine, the sapper takes a coins. He can repeat this operation as many times as you want.\n\nAlso, a sapper can place a mine under a building if it wasn't there. For such an operation, he takes b coins. He can also repeat this operation as many times as you want.\n\nThe sapper can carry out operations in any order.\n\nYou want to blow up all the mines in the city to make it safe. Find the minimum number of coins that the sapper will have to pay so that after his actions there are no mines left in the city.\n\nInput\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10^5) — the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing two integers a and b (1 ≤ a, b ≤ 1000) — the cost of activating and placing one mine, respectively.\n\nThe next line contains a map of mines in the city — a string consisting of zeros and ones.\n\nThe sum of the string lengths for all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> [m] <n> <L_m>", "<T_i>-><T_i-1> <s> v_i", "<T_1>->v_1", "<L_i>-><L_i-1> <n> type <s> l <s> r", "<L_1>->type <s> l <s> r"], "constraints": ["1<=n<=10^5", "1<=v_i<=10^9", "1<=m<=10^5", "1<=l<=r<=n", "1<=type<=2"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. Each test case includes two integers 'a' and 'b', which are not counters, so they are written as 'a' and 'b'. The map of mines is a string of '0's and '1's, whose length is determined by the sum of string lengths for all test cases, but since it's not a counter variable here, it's represented directly with a regex [01]{n} where 'n' is the length of the string. The grammar is structured to first specify the number of test cases, followed by the details of each test case, including the cost values and the mine map string. Thus, the grammar is constructed as '<S>->[t] <n> <T_t>', where <T_i> generates each test case's details, including 'a', 'b', and the mine map string."}
{"name": "1444_A. Division", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 50) --- the number of pairs.\n\nEach of the following t lines contains two integers p_i and q_i (1 <= p_i <= 10^{18}; 2 <= q_i <= 10^{9}) --- the i-th pair of integers.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> p_i <s> q_i", "<T_1>->p_1 <s> q_1"], "constraints": ["1<=t<=50", "1<=p_i<=10^18", "2<=q_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, t, which serves as a counter variable for the number of pairs, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each pair consists of p_i and q_i separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> p_i <s> q_i' and '<T_1>->p_1 <s> q_1' to systematically parse the sequence of pairs following the count [t]."}
{"name": "1445_A. Array Rearrangment", "description": "You are given two arrays a and b, each consisting of n positive integers, and an integer x. Please determine if one can rearrange the elements of b so that a_i + b_i ≤ x holds for each i (1 ≤ i ≤ n).\n\nInput\n\nThe first line of input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. t blocks follow, each describing an individual test case.\n\nThe first line of each test case contains two integers n and x (1 ≤ n ≤ 50; 1 ≤ x ≤ 1000) — the length of arrays a and b, and the parameter x, described in the problem statement.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_1 ≤ a_2 ≤ ... ≤ a_n ≤ x) — the elements of array a in non-descending order.\n\nThe third line of each test case contains n integers b_1, b_2, …, b_n (1 ≤ b_1 ≤ b_2 ≤ ... ≤ b_n ≤ x) — the elements of array b in non-descending order.\n\nTest cases are separated by a blank line.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> <n> [n] <s> x <n> <L_n> <n> <M_n>", "<T_1>->[n] <s> x <n> <L_n> <n> <M_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<M_i>-><M_i-1> <s> b_i", "<M_1>->b_1"], "constraints": ["1<=t<=100", "1<=n<=50", "1<=x<=1000", "1<=a_i<=x", "a_i<=a_i+1", "1<=b_i<=x", "b_i<=b_i+1"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes two lines: the first line contains 'n' and 'x', and the second and third lines contain the elements of arrays 'a' and 'b' respectively. The arrays 'a' and 'b' each have 'n' elements, so 'n' is also a counter variable, enclosed in [n]. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> <n> [n] <s> x <n> <L_n> <n> <M_n>', '<T_1>->[n] <s> x <n> <L_n> <n> <M_n>', '<L_i>-><L_i-1> <s> a_i', '<L_1>->a_1', '<M_i>-><M_i-1> <s> b_i', and '<M_1>->b_1' to systematically parse the sequence of test cases and their respective array elements."}
{"name": "1445_B. Elimination", "description": "Input\n\nYou need to process t test cases.\n\nThe first line contains an integer t (1 <= t <= 3025) --- the number of test cases. Then descriptions of t test cases follow.\n\nThe first line of each test case contains four integers a, b, c, d (0 <= a,\\,b,\\,c,\\,d <= 9; d <= a; b <= c). \n\nOne can show that for any test case satisfying the constraints above, there is at least one olympiad scenario possible.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c <s> d", "<T_1>->a <s> b <s> c <s> d"], "constraints": ["1<=t<=3025", "0<=a<=9", "0<=b<=9", "0<=c<=9", "0<=d<=9", "d<=a,b<=c"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case consists of four integers a, b, c, and d, separated by spaces. The counter non-terminal <T_i> is defined to decrement until it reaches 1, with each step adding a new test case line. The grammar ensures that each test case is formatted correctly with the four integers separated by spaces, following the initial count of test cases."}
{"name": "1445_C. Division", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 50) --- the number of pairs.\n\nEach of the following t lines contains two integers p_i and q_i (1 <= p_i <= 10^{18}; 2 <= q_i <= 10^{9}) --- the i-th pair of integers.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> p_i <s> q_i", "<T_1>->p_1 <s> q_1"], "constraints": ["1<=t<=50", "1<=p_i<=10^18", "2<=q_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of pairs, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each pair consists of 'p_i' and 'q_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> p_i <s> q_i' and '<T_1>->p_1 <s> q_1' to systematically parse the sequence of pairs following the count [t]."}
{"name": "144_A. Arrival of the General", "description": "A Ministry for Defense sent a general to inspect the Super Secret Military Squad under the command of the Colonel SuperDuper. Having learned the news, the colonel ordered to all n squad soldiers to line up on the parade ground.\n\nBy the military charter the soldiers should stand in the order of non-increasing of their height. But as there's virtually no time to do that, the soldiers lined up in the arbitrary order. However, the general is rather short-sighted and he thinks that the soldiers lined up correctly if the first soldier in the line has the maximum height and the last soldier has the minimum height. Please note that the way other solders are positioned does not matter, including the case when there are several soldiers whose height is maximum or minimum. Only the heights of the first and the last soldier are important.\n\nFor example, the general considers the sequence of heights (4, 3, 4, 2, 1, 1) correct and the sequence (4, 3, 1, 2, 2) wrong.\n\nWithin one second the colonel can swap any two neighboring soldiers. Help him count the minimum time needed to form a line-up which the general will consider correct.\n\nInput\n\nThe first input line contains the only integer n (2 ≤ n ≤ 100) which represents the number of soldiers in the line. The second line contains integers a1, a2, ..., an (1 ≤ ai ≤ 100) the values of the soldiers' heights in the order of soldiers' heights' increasing in the order from the beginning of the line to its end. The numbers are space-separated. Numbers a1, a2, ..., an are not necessarily different.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=a_i<=100", "a_i!=a_j"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of soldiers, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of soldiers' heights. The sequence is constructed using '<T_i>-><T_i-1> <s> a_i' for each subsequent height, starting with '<T_1>->a_1'. This ensures the input format where 'n' is followed by 'n' space-separated integers representing the soldiers' heights."}
{"name": "1450_D. Rating Compression", "description": "Input\n\nThe first line contains a single integer t (1<= t<= 10^4) --- the number of test cases.\n\nThe first line of the description of each test case contains a single integer n (1<= n<= 3* 10^5) --- the length of the array.\n\nThe second line of the description of each test case contains n integers a_1,...,a_n (1<= a_i<= n) --- the elements of the array.\n\nIt is guaranteed, that the sum of n for all test cases does not exceed 3* 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->n <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10000", "1<=n<=3*10^5", "1<=a_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes a line with [n] (another counter variable for the array length) followed by a line with 'n' integers. The array elements are represented by <L_n>, a counter non-terminal for [n], where each element 'a_i' is separated by a space <s>. The grammar constructs are '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->n <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse each test case and the sequence of array elements."}
{"name": "1455_F. String and Operations", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nEach test case consists of two lines. The first line contains two integers n and k (1 <= n <= 500; 2 <= k <= 26). \n\nThe second line contains a string s consisting of n characters. Each character is one of the k first letters of the Latin alphabet (in lower case).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> k <n> [a-z]{n}", "<T_1>->[n] <s> k <n> [a-z]{n}"], "constraints": ["1<=t<=1000", "1<=n<=500", "2<=k<=26"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two lines: the first line contains two integers 'n' and 'k', and the second line contains a string 's' of length 'n' consisting of the first 'k' letters of the Latin alphabet. The string 's' is represented using the regular expression [a-z]{n} to ensure it matches exactly 'n' characters from the specified range. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> k <n> [a-z]{n}' and '<T_1>->[n] <s> k <n> [a-z]{n}' to systematically parse each test case following the count [t]."}
{"name": "1458_B. Glass Half Spilled", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100) --- the number of glasses.\n\nThe following n lines describe the glasses. The i-th of these lines contains two integers a_i and b_i (0 <= b_i <= a_i <= 100, a_i > 0) --- capacity, and water amount currently contained for the glass i, respectively.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_i <s> b_i"], "constraints": ["1<=n<=100", "0<=b_i<=a_i<=100", "a_i>0"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of glasses, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two integers 'a_i' and 'b_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_i <s> b_i' to systematically parse the sequence of pairs (a_i, b_i) following the count [n]."}
{"name": "1461_E. Water Level", "description": "Input\n\nThe first line of the input contains six integers k, l, r, t, x and y (1 <= l <= k <= r <= 10^{18}; 1 <= t <= 10^{18}; 1 <= x <= 10^6; 1 <= y <= 10^{18}) --- initial water level, the required range, the number of days, daily water usage and the exact amount of water that can be added, respectively.", "grammar": {"productions": ["<S>->k <s> l <s> r <s> t <s> x <s> y"], "constraints": ["1<=l<=k<=r<=10^18", "1<=t<=10^18", "1<=x<=10^6", "1<=y<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes six variables: k, l, r, t, x, and y. None of these variables serve as counter variables, so they are not enclosed in brackets. The grammar is structured to represent the input format where these six integers are separated by spaces, denoted as <s>. Thus, the grammar is constructed as '<S>->k <s> l <s> r <s> t <s> x <s> y'."}
{"name": "1463_B. Find The Array", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nEach test case consists of two lines. The first line contains one integer n (2 <= n <= 50).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_i"], "constraints": ["1<=t<=1000", "2<=n<=50", "1<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two lines: the first line contains the variable 'n' (enclosed in [n] as it serves as a counter for the array elements), and the second line contains the array elements a_1 to a_n. The array elements are represented by the non-terminal <L_n>, which is a counter-driven rule for [n], with each element separated by a space <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_i' to systematically parse each test case and the sequence of array elements following the count [n]."}
{"name": "146_B. Lucky Mask", "description": "Input\n\nThe only line contains two integers a and b (1 <= a, b <= 105). It is guaranteed that number b is lucky.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=10^5", "1<=b<=10^5"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space. Neither 'a' nor 'b' serve as counter variables in this context, so they are not enclosed in brackets."}
{"name": "1474_B. Different Divisors", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 3000) --- the number of test cases.\n\nThe first line of each test case contains a single integer d (1 <= d <= 10000).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> d", "<T_1>->d"], "constraints": ["1<=t<=3000", "1<=d<=10000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, t, which serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t]. Each test case consists of a single integer d, which is not a counter variable, so it is represented as 'd'. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> d' and '<T_1>->d' to systematically parse each test case following the count [t]."}
{"name": "1475_D. Cleaning the Phone", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and m (1 <= n <= 2 * 10^5, 1 <= m <= 10^9) --- the number of applications on Polycarp's phone and the number of memory units to be freed.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) --- the number of memory units used by applications.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 2) --- the convenience points of each application.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5.", "grammar": {"productions": ["<S>->t <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> m <n> <A_n> <n> <B_n>", "<T_1>->[n] <s> m <n> <A_n> <n> <B_n>", "<A_i>-><A_i-1> <s> a_i", "<A_1>->a_1", "<B_i>-><B_i-1> <s> b_i", "<B_1>->b_1"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^5", "1<=m<=10^9", "1<=a_i<=10^9", "1<=b_i<=2"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is represented as [t]. The grammar is structured as '<S>->t <n> <T_t>', where <T_t> is the counter non-terminal for [t]. Each test case includes two lines: the first line contains [n] and 'm', where [n] is a counter variable for the number of applications, and the second line contains a sequence of integers a_i and b_i, each separated by a space. The non-terminals <A_n> and <B_n> are used to generate the sequences of a_i and b_i respectively, with each element separated by a space. The grammar ensures the correct parsing of multiple test cases, each with their respective sequences of integers."}
{"name": "1481_B. New Colony", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nEach test case consists of two lines. The first line in each test case contains two integers n and k (1 <= n <= 100; 1 <= k <= 10^9) --- the number of mountains and the number of boulders.\n\nThe second line contains n integers h_1, h_2, ..., h_n (1 <= h_i <= 100) --- the height of the mountains.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 100.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> h_i", "<L_1>->h_1"], "constraints": ["1<=t<=100", "1<=n<=100", "1<=k<=10^9", "1<=h_i<=100", "sum of n over all test cases does not exceed 100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two lines: the first line contains 'n' and 'k' separated by a space, and the second line contains 'n' integers separated by spaces. The variable 'n' in the test cases is also a counter for the number of mountains, hence it is enclosed in [n]. The non-terminal <L_i> is used to represent the sequence of mountain heights, which are separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>', '<T_1>->[n] <s> k <n> <L_n>', '<L_i>-><L_i-1> <s> h_i', and '<L_1>->h_1' to systematically parse each test case and the sequence of mountain heights."}
{"name": "148_B. Escape", "description": "Input\n\nThe input data contains integers vp, vd, t, f and c, one per line (1 <= vp, vd <= 100, 1 <= t, f <= 10, 1 <= c <= 1000).", "grammar": {"productions": ["<S>->vp <n> vd <n> t <n> f <n> c"], "constraints": ["1<=vp,vd<=100", "1<=t,f<=10", "1<=c<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes five variables: vp, vd, t, f, and c, none of which serve as counter variables. Therefore, they are not enclosed in brackets. The input format specifies each variable on a separate line, denoted by the newline token <n>. Thus, the grammar is constructed as '<S>->vp <n> vd <n> t <n> f <n> c' to represent the sequence of variables each followed by a newline."}
{"name": "1490_D. Permutation Transformation", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) --- the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains an integer n (1 <= n <= 100) --- the length of the permutation.\n\nThis is followed by n numbers a_1, a_2, ..., a_n --- permutation a.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "1<=a_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case includes an integer 'n' (also a counter variable, hence [n]) followed by a permutation of 'n' numbers. The permutation is represented by the non-terminal <L_n>, which generates 'n' numbers separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [n] <n> <L_n>', '<T_1>->[n] <n> <L_n>', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse each test case and its permutation."}
{"name": "1490_G. Old Floppy Drive ", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of each test case consists of two positive integers n, m (1 <= n, m <= 2 * 10^5) --- the number of numbers on the disk and the number of asked questions.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-10^9 <= a_i <= 10^9).\n\nThe third line of each test case contains m positive integers x_1, x_2, ..., x_m (1 <= x <= 10^9).\n\nIt is guaranteed that the sums of n and m over all test cases do not exceed 2 * 10^5.", "grammar": {"productions": ["<S>->t <n> <T_t>", "<T_i>->[n] <s> [m] <n> <L_n> <n> <Z_m>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> x_i", "<Z_1>->x_1"], "constraints": ["1<=t<=10000", "1<=n,m<=200000", "-1000000000<=a_i<=1000000000", "1<=x_i<=1000000000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. For each test case, there are two counter variables, [n] and [m], which are used to define the sequences of integers and questions respectively. The grammar includes non-terminals <T_i>, <L_i>, and <Z_i> to handle the sequences for each test case. The non-terminal <T_i> is used to repeat the structure for each test case, <L_i> handles the sequence of 'n' integers, and <Z_i> handles the sequence of 'm' questions. The sequences are separated by spaces and newlines as specified."}
{"name": "1495_D. BFS Trees", "description": "Input\n\nThe first line contains two integers n, m (1 <= n <= 400, 0 <= m <= 600) --- the number of vertices and the number of edges in the graph.\n\nThe i-th of the next m lines contains two integers a_i, b_i (1 <= a_i, b_i <= n, a_i < b_i), representing an edge connecting a_i and b_i.\n\nIt is guaranteed that all edges are distinct and the graph is connected.", "grammar": {"productions": ["<S>->[n] <s> [m] <n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=n<=400", "0<=m<=600", "1<=a_i<b_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'm', both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>', where <T_m> is a counter non-terminal for the variable [m]. The non-terminal <T_i> is designed to handle each edge description, which consists of two integers 'a_i' and 'b_i' separated by a space. The grammar constructs are '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1', ensuring the correct parsing of each edge in the sequence defined by [m]."}
{"name": "149_A. Business trip", "description": "What joy! Petya's parents went on a business trip for the whole year and the playful kid is left all by himself. Petya got absolutely happy. He jumped on the bed and threw pillows all day long, until... \n\nToday Petya opened the cupboard and found a scary note there. His parents had left him with duties: he should water their favourite flower all year, each day, in the morning, in the afternoon and in the evening. \"Wait a second!\" — thought Petya. He know for a fact that if he fulfills the parents' task in the i-th (1 ≤ i ≤ 12) month of the year, then the flower will grow by ai centimeters, and if he doesn't water the flower in the i-th month, then the flower won't grow this month. Petya also knows that try as he might, his parents won't believe that he has been watering the flower if it grows strictly less than by k centimeters. \n\nHelp Petya choose the minimum number of months when he will water the flower, given that the flower should grow no less than by k centimeters.\n\nInput\n\nThe first line contains exactly one integer k (0 ≤ k ≤ 100). The next line contains twelve space-separated integers: the i-th (1 ≤ i ≤ 12) number in the line represents ai (0 ≤ ai ≤ 100).", "grammar": {"productions": ["<S>->k <n> a1 <s> a2 <s> a3 <s> a4 <s> a5 <s> a6 <s> a7 <s> a8 <s> a9 <s> a10 <s> a11 <s> a12"], "constraints": ["0<=k<=100", "0<=a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'k' is not a counter variable, so it is represented as 'k'. The next line contains twelve space-separated integers, each representing a month's growth. Since these are fixed and not counter variables, they are represented directly as 'a1' to 'a12' separated by space tokens <s>. The grammar is constructed as '<S>->k <n> a1 <s> a2 <s> a3 <s> a4 <s> a5 <s> a6 <s> a7 <s> a8 <s> a9 <s> a10 <s> a11 <s> a12' to reflect the input format where 'k' is followed by twelve integers separated by spaces."}
{"name": "149_D. Coloring Brackets", "description": "Input\n\nThe first line contains the single string s (2 <= |s| <= 700) which represents a correct bracket sequence.", "grammar": {"productions": ["<S>->[s] <n> [()]{s}"], "constraints": ["2<=s<=700"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, s, which is used both as a counter and to specify the length of a string. Consequently, the variable is represented as [s] to indicate its role as a length specifier for the sequence of characters, which consist only of '(' and ')'. This sequence is described using the regular expression [()]{s}, meaning a string of s characters, each of which is either '(' or ')'. Thus, the grammar is constructed to reflect this format: '<S>->[s] <n> [()]{s}'."}
{"name": "14_E. Camels", "description": "Input\n\nThe first line contains a pair of integers n and t (3 <= n <= 20, 1 <= t <= 10).", "grammar": {"productions": ["<S>->n <s> t"], "constraints": ["3<=n<=20", "1<=t<=10"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and t, but neither serves as a counter variable in this context, so they are represented simply as 'n' and 't'. The variables are separated by a space symbol denoted as <s>. The grammar is constructed as '<S>->n <s> t' to reflect the input format where 'n' and 't' are two integers separated by a space."}
{"name": "1508_B. Almost Sorted", "description": "Input\n\nThe first line contains a single integer t (1<= t<= 1000) --- the number of test cases.\n\nEach test case consists of a single line containing two integers n and k (1 <= n <= 10^5, 1 <= k <= 10^{18}).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> k", "<T_1>->n <s> k"], "constraints": ["1<=t<=1000", "1<=n<=10^5", "1<=k<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two integers 'n' and 'k' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> k' and '<T_1>->n <s> k' to systematically parse each test case following the count [t]."}
{"name": "1508_C. Complete the MST", "description": "Input\n\nThe first line contains two integers n and m (2 <= n <= 2 * 10^5, 0 <= m <= min(2 * 10^5, (n(n-1))/(2) - 1)) --- the number of nodes and the number of pre-assigned edges. The inputs are given so that there is at least one unassigned edge.\n\nThe i-th of the following m lines contains three integers u_i, v_i, and w_i (1 <= u_i, v_i <= n, u != v, 1 <= w_i < 2^{30}), representing the edge from u_i to v_i has been pre-assigned with the weight w_i. No edge appears in the input more than once.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> u_i <s> v_i <s> w_i", "<T_1>->u_1 <s> v_1 <s> w_1"], "constraints": ["2<=n<=2*10^5", "0<=m<=min(2*10^5,(n*(n-1)/2)-1)", "1<=u_i,v_i<=n", "u_i!=v_i", "1<=w_i<2^30"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'm', both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>', where <T_m> is a counter non-terminal for the variable [m]. The non-terminal <T_i> is structured to represent each line of input, which contains three integers 'u_i', 'v_i', and 'w_i' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> u_i <s> v_i <s> w_i' and '<T_1>->u_1 <s> v_1 <s> w_1' to systematically parse each line of input following the count [m]."}
{"name": "1512_G. Short Task", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4). Then t test cases follow.\n\nEach test case is characterized by one integer c (1 <= c <= 10^7).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> c", "<T_1>->c"], "constraints": ["1<=t<=10^4", "1<=c<=10^7"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case is represented by the variable 'c' followed by a newline <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> c' and '<T_1>->c' to systematically parse the sequence of test cases following the count [t]."}
{"name": "1513_C. Add One", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 2 * 10^5) --- the number of test cases.\n\nThe only line of each test case contains two integers n (1 <= n <= 10^9) and m (1 <= m <= 2 * 10^5) --- the initial number and the number of operations.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m", "<T_1>->n <s> m"], "constraints": ["1<=t<=2*10^5", "1<=n<=10^9", "1<=m<=2*10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two integers 'n' and 'm' separated by a space <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> m' and '<T_1>->n <s> m' to systematically parse each test case following the count [t]."}
{"name": "1514_B. AND 0, Sum Big", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10) --- the number of test cases you need to solve.\n\nEach test case consists of a line containing two integers n and k (1 <= n <= 10^{5}, 1 <= k <= 20).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> k", "<T_1>->n <s> k"], "constraints": ["1<=t<=10", "1<=n<=10^5", "1<=k<=20"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two integers 'n' and 'k' separated by a space. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> k' and '<T_1>->n <s> k' to systematically parse each test case following the count [t]."}
{"name": "1519_A. Red and Blue Beans", "description": "Input\n\nThe first line contains the single integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first and only line of each test case contains three integers r, b, and d (1 <= r, b <= 10^9; 0 <= d <= 10^9) --- the number of red and blue beans and the maximum absolute difference in each packet.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> r <s> b <s> d", "<T_1>->r <s> b <s> d"], "constraints": ["1<=t<=1000", "1<=r,b<=10^9", "0<=d<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of three integers 'r', 'b', and 'd' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> r <s> b <s> d' and '<T_1>->r <s> b <s> d' to systematically parse each test case following the count [t]."}
{"name": "1519_B. The Cake Is a Lie", "description": "Input\n\nThe first line contains the single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe first and only line of each test case contains three integers n, m, and k (1 <= n, m <= 100; 0 <= k <= 10^4) --- the sizes of grid and the exact amount of money you need to spend.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m <s> k", "<T_1>->n <s> m <s> k"], "constraints": ["1<=t<=100", "1<=n,m<=100", "0<=k<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_i> is a counter non-terminal for [t]. Each test case consists of three integers n, m, and k, separated by spaces. The grammar rules '<T_i>-><T_i-1> <n> n <s> m <s> k' and '<T_1>->n <s> m <s> k' ensure that each test case is formatted correctly with the three integers. The variables n, m, and k are not counters, so they are not enclosed in brackets."}
{"name": "1523_D. Love-Hate", "description": "Input\n\nThe first line contains three integers n, m and p (1 <= n <= 2 * 10^5, 1 <= p <= m <= 60, 1 <= p <= 15), which is the number of trader friends, the number of currencies, the maximum number of currencies each friend can like.\n\nEach of the next n lines contain m characters. The j-th character of i-th line is 1 if friend i likes the currency j and 0 otherwise. It is guaranteed that the number of ones in each line does not exceed p.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [p] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_m>", "<T_1>-><L_m>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["1<=n<=2*10^5", "1<=p<=m", "1<=m<=60", "1<=p<=15"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables n, m, and p are all counter variables, hence they are enclosed in brackets as [n], [m], and [p]. The grammar is structured as '<S>->[n] <s> [m] <s> [p] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. Each line following the first line is represented by <T_i>, which includes <L_m>, a counter non-terminal for [m], representing each character in the line. The characters are either '0' or '1', represented by the regex [01]{1}. The grammar ensures that each line has exactly m characters and that the number of '1's does not exceed p, as specified in the constraints."}
{"name": "1525_D. Armchairs", "description": "Input\n\nThe first line contains one integer n (2 <= n <= 5000) --- the number of armchairs.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 1). a_i = 1 means that the i-th armchair is initially occupied, a_i = 0 means that it is initially free. The number of occupied armchairs is at most n/2.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> [01]{1}", "<T_1>->[01]{1}"], "constraints": ["2<=n<=5000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each element in the sequence is either '0' or '1', represented by the regular expression [01]{1}. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> [01]{1}' and '<T_1>->[01]{1}' to systematically parse the sequence of integers following the count [n]."}
{"name": "1534_D. Lost Tree", "description": "Input\n\nThe first line of input contains the integer n (2 <= n <= 2 000), the number of nodes in the tree.\n\nYou will then begin interaction.", "grammar": {"productions": ["<S>->[n]"], "constraints": ["2<=n<=2000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable to specify the number of nodes in the tree, hence it is enclosed in brackets as [n]. The grammar is constructed as '<S>->[n]' to represent the input format where only the integer 'n' is provided."}
{"name": "1539_D. PriceFixed", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100 000) --- the number of products.\n\nEach of next n lines contains a product description. Each description consists of two integers a_i and b_i (1 <= a_i <= 10^{14}, 1 <= b_i <= 10^{14}) --- the required number of the i-th product and how many products you need to buy to get the discount on the i-th product. \n\nThe sum of all a_i does not exceed 10^{14}.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_i <s> b_i"], "constraints": ["1<=n<=100000", "1<=a_i<=10^14", "1<=b_i<=10^14"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of product descriptions, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n]. Each product description consists of two integers 'a_i' and 'b_i' separated by a space, represented as 'a_i <s> b_i'. The grammar constructs are '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_i <s> b_i' to systematically parse each product description following the count [n]."}
{"name": "1542_B. Plus and Multiply", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1<= t<= 10^5) --- the number of test cases. The description of the test cases follows.\n\nThe only line describing each test case contains three integers n, a, b (1<= n,a,b<= 10^9) separated by a single space.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> a <s> b", "<T_1>->n <s> a <s> b"], "constraints": ["1<=t<=10^5", "1<=n,a,b<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of three integers 'n', 'a', and 'b' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> n <s> a <s> b' and '<T_1>->n <s> a <s> b' to systematically parse each test case following the count [t]."}
{"name": "1543_A. Exciting Bets", "description": "Input\n\nThe first line of input contains a single integer t (1<= t<= 5* 10^3) --- the number of test cases.\n\nThe first and the only line of each test case contains two integers a and b (0<= a, b<= 10^{18}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=5*10^3", "0<=a,b<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' is used as a counter variable for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is initiated with '<S>->[t] <n> <T_t>'. The non-terminal <T_i> is a counter-driven rule for [t], where each test case consists of two integers 'a' and 'b' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a <s> b' and '<T_1>->a <s> b' to systematically parse each test case following the count [t]."}
{"name": "1543_B. Customising the Track", "description": "Input\n\nThe first line of input contains a single integer t (1<= t<= 10 000) --- the number of test cases.\n\nThe first line of each test case contains a single integer n (1<= n<= 2* 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (0<= a_i<= 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2* 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_i"], "constraints": ["1<=t<=10000", "1<=n<=2*10^5", "0<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter variable for the number of test cases, hence it is enclosed in [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case includes a variable 'n' which also acts as a counter for the array elements, hence it is enclosed in [n]. The array elements are represented by <L_n>, a counter non-terminal for [n], which generates the sequence of integers a_i separated by spaces. The grammar rules '<T_i>-><T_i-1> <n> [n] <n> <L_n>' and '<T_1>->[n] <n> <L_n>' handle the repetition of test cases, while '<L_i>-><L_i-1> <s> a_i' and '<L_1>->a_i' manage the array elements within each test case."}
{"name": "155_A. I_love_%username%", "description": "Vasya adores sport programming. He can't write programs but he loves to watch the contests' progress. Vasya even has a favorite coder and Vasya pays special attention to him.\n\nOne day Vasya decided to collect the results of all contests where his favorite coder participated and track the progress of his coolness. For each contest where this coder participated, he wrote out a single non-negative number — the number of points his favorite coder earned in the contest. Vasya wrote out the points for the contest in the order, in which the contests run (naturally, no two contests ran simultaneously).\n\nVasya considers a coder's performance in a contest amazing in two situations: he can break either his best or his worst performance record. First, it is amazing if during the contest the coder earns strictly more points that he earned on each past contest. Second, it is amazing if during the contest the coder earns strictly less points that he earned on each past contest. A coder's first contest isn't considered amazing. Now he wants to count the number of amazing performances the coder had throughout his whole history of participating in contests. But the list of earned points turned out long and Vasya can't code... That's why he asks you to help him.\n\nInput\n\nThe first line contains the single integer n (1 ≤ n ≤ 1000) — the number of contests where the coder participated.\n\nThe next line contains n space-separated non-negative integer numbers — they are the points which the coder has earned. The points are given in the chronological order. All points do not exceed 10000.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p", "<T_1>->p"], "constraints": ["1<=n<=1000", "0<=p<=10000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of contests, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence of points 'p' separated by spaces <s>. The counter non-terminal <T_i> is defined to decrement until it reaches 1, producing the sequence of points. The grammar rules are '<T_i>-><T_i-1> <s> p' and '<T_1>->p', ensuring the correct parsing of the input format."}
{"name": "155_C. Hometask", "description": "Input\n\nThe first line contains a non-empty string s, consisting of lowercase Latin letters --- that's the initial sentence in N-ish, written by Sergey. The length of string s doesn't exceed 105.\n\nThe next line contains integer k (0 <= k <= 13) --- the number of forbidden pairs of letters.\n\nNext k lines contain descriptions of forbidden pairs of letters. Each line contains exactly two different lowercase Latin letters without separators that represent the forbidden pairs. It is guaranteed that each letter is included in no more than one pair.", "grammar": {"productions": ["<S>->[a-z]{1,10^5} <n> [k] <n> <T_k>", "<T_i>-><T_i-1> <n> [a-z]{1}[a-z]{2}", "<T_1>->[a-z]{2}"], "constraints": ["0<=k<=13"]}, "reason": "The grammar starts with the initial non-terminal <S>. The first line contains a string 's' which is represented using a regex expression [a-z]{1,10^5} to denote a string of lowercase Latin letters with a length up to 10^5. The second line contains an integer 'k', which serves as a counter variable for the forbidden pairs, hence it is enclosed in [k]. The grammar is structured as '<S>->[a-z]{1,10^5} <n> [k] <n> <T_k>', where <T_k> is a counter non-terminal for [k]. Each forbidden pair is described in subsequent lines, each consisting of exactly two lowercase Latin letters, represented by the regex [a-z]{2}. Thus, the grammar rules '<T_i>-><T_i-1> <n> [a-z]{2}' and '<T_1>->[a-z]{2}' are used to parse these pairs."}
{"name": "159_D. Palindrome pairs", "description": "Input\n\nThe first line of input contains a non-empty string s which consists of lowercase letters ('a'...'z'), s contains at most 2000 characters.", "grammar": {"productions": ["<S>->[a-z]{1,2000}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a string 's' composed of lowercase letters ('a' to 'z') with a maximum length of 2000 characters. Since the string's length is variable and can be up to 2000 characters, the regular expression [a-z]{1,2000} is used to represent the string directly. The grammar is thus simplified to '<S>->[a-z]{1,2000}', capturing the entire input in one production rule without the need for counter variables or additional non-terminals."}
{"name": "161_B. Discounts", "description": "Input\n\nThe first input line contains two integers n and k (1 <= k <= n <= 103) --- the number of items in the supermarket and the number of carts, correspondingly. Next n lines describe the items as \"ci ti\" (without the quotes), where ci (1 <= ci <= 109) is an integer denoting the price of the i-th item, ti (1 <= ti <= 2) is an integer representing the type of item i (1 for a stool and 2 for a pencil). The numbers in the lines are separated by single spaces.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <n> c_i <s> t_i", "<T_1>->c_1 <s> t_1"], "constraints": ["1<=k<=n<=10^3", "1<=c_i<=10^9", "1<=t_i<=2"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, where [n] serves as a counter variable for the number of items, hence enclosed in brackets. The grammar is initiated with '<S>->[n] <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each item is described by 'c_i' and 't_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> c_i <s> t_i' and '<T_1>->c_1 <s> t_1' to systematically parse the sequence of items following the count [n]."}
{"name": "171_D. Broken checker", "description": "Input\n\nThe only line of the input contains an integer between 1 and 5, inclusive. All tests for this problem are different. The contents of the test case doesn't need to be equal to its index.", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a single integer N, which is not a counter variable but a direct input value. Therefore, it is represented simply as 'N' without brackets. The grammar is straightforward, defined as '<S>->N', reflecting the input format where only one integer is provided."}
{"name": "173_B. Chamber of Secrets", "description": "Input\n\nThe first line of the input contains two integer numbers n and m (2 <= n, m <= 1000). Each of the next n lines contains m characters. Each character is either \".\" or \"#\" and represents one cell of the Chamber grid. It's \".\" if the corresponding cell is empty and \"#\" if it's a regular column.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> [.#]{m}", "<T_1>->[.#]{1}"], "constraints": ["2<=n,m<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'm', both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n>', where <T_i> is a counter non-terminal for [n], representing each line of the grid. Each line consists of 'm' characters, each being either '.' or '#', which is represented by the regular expression [.#]{m}. The grammar constructs are '<S>->[n] <s> [m] <n> <T_n>', '<T_i>-><T_i-1> <n> [.#]{m}', and '<T_1>->[.#]{m}' to systematically parse the grid lines following the counts [n] and [m]."}
{"name": "175_A. Robot Bicorn Attack", "description": "Input\n\nThe only line of input contains non-empty string s obtained by Vasya. The string consists of digits only. The string length does not exceed 30 characters.", "grammar": {"productions": ["<S>->[0-9]{1,30}"], "constraints": ["1<=s.length()<=30"]}, "reason": "The grammar starts with the start non-terminal <S>. The input is a string 's' consisting of digits only, with a length not exceeding 30 characters. Since the string's length is variable and constrained, it is represented using a regular expression [0-9]{1,30}, which matches any sequence of digits from 1 to 30 characters in length. Thus, the grammar is simply '<S>->[0-9]{1,30}', directly capturing the input specification without the need for counter non-terminals or additional variables."}
{"name": "177_D1. Encrypting Messages", "description": "Input\n\nThe first input line contains three integers n, m and c, separated by single spaces. \n\nThe second input line contains n integers ai (0 <= ai < c), separated by single spaces --- the original message. \n\nThe third input line contains m integers bi (0 <= bi < c), separated by single spaces --- the encryption key.\n\nThe input limitations for getting 30 points are: \n\n  * 1 <= m <= n <= 103\n  * 1 <= c <= 103\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 <= m <= n <= 105\n  * 1 <= c <= 103", "grammar": {"productions": ["<S>->[n] <s> [m] <s> c <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=m<=n<=10^5", "1<=c<=10^3", "0<=a_i<c", "0<=b_i<c"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: n, m, and c. Both n and m serve as counter variables, hence they are enclosed in brackets as [n] and [m]. The variable c does not act as a counter, so it remains as 'c'. The grammar is structured as '<S>->[n] <s> [m] <s> c <n> <T_n> <n> <L_m>', where <T_n> and <L_m> are counter non-terminals for [n] and [m] respectively. The <T_i> non-terminal generates the sequence of 'a_i' values separated by spaces, and <L_i> generates the sequence of 'b_i' values, also separated by spaces. The constraints ensure the variables adhere to specified ranges and conditions."}
{"name": "180_C. Letter", "description": "Input\n\nThe only line of the input contains a non-empty string consisting of uppercase and lowercase letters. The string's length does not exceed 105.", "grammar": {"productions": ["<S>->[a-zA-Z]{1,105}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a single string of uppercase and lowercase letters with a maximum length of 105 characters. Since the string's content is defined by a regular expression [a-zA-Z]{1,105}, the grammar directly uses this regex to represent the input format, ensuring it captures all valid strings within the specified length range. Thus, the grammar is constructed as '<S>->[a-zA-Z]{1,105}'."}
{"name": "180_D. Name", "description": "Input\n\nThe first line contains a non-empty string s (1 <= |s| <= 5000), where |s| is its length. The second line contains a non-empty string t (1 <= |t| <= 5000), where |t| is its length. Both strings consist of lowercase Latin letters.", "grammar": {"productions": ["<S>->[a-z]{1,5000} <n> [a-z]{1,5000}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 's' and 't', which are both strings of lowercase Latin letters with lengths between 1 and 5000. Since these variables are not counters but rather strings with specified lengths, they are represented using regex expressions '[a-z]{1,5000}' to denote their character range and length constraints. The grammar is structured as '<S>->[a-z]{1,5000} <n> [a-z]{1,5000}', reflecting the input format where two strings are given on separate lines."}
{"name": "181_B. Number of Triplets", "description": "Input\n\nThe first line contains a single integer n (3 <= n <= 3000) --- the number of points. \n\nNext n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 <= xi, yi <= 1000).\n\nIt is guaranteed that all given points are different.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["3<=n<=3000", "-1000<=x_i<=1000", "-1000<=y_i<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of points, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates 'n' lines of coordinates. Each line consists of two integers 'x_i' and 'y_i' separated by a space <s>. The counter non-terminal <T_i> is defined to decrement until it reaches 1, generating each subsequent line of coordinates. The grammar ensures that all points are distinct by generating each pair of coordinates individually."}
{"name": "191_A. Dynasty Puzzles", "description": "Input\n\nThe first line contains integer n (1 <= n <= 5·105) --- the number of names in Vasya's list. Next n lines contain n abbreviated names, one per line. An abbreviated name is a non-empty sequence of lowercase Latin letters. Its length does not exceed 10 characters.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,10}", "<T_1>->[a-z]{1,10}"], "constraints": ["1<=n<=500000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of names, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each name is represented by a sequence of lowercase Latin letters of length 1 to 10, denoted by the regular expression [a-z]{1,10}. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <n> [a-z]{1,10}', and '<T_1>->[a-z]{1,10}' to systematically parse the sequence of names following the count [n]."}
{"name": "196_A. Lexicographically Maximum Subsequence", "description": "Input\n\nThe single line contains a non-empty string s, consisting only of lowercase English letters. The string's length doesn't exceed 105.", "grammar": {"productions": ["<S>->[a-z]{1,105}"], "constraints": ["The string's length is a positive integer that doesn't exceed 105."]}, "reason": "The grammar starts with the start non-terminal <S>. The input is a single line containing a non-empty string 's' consisting only of lowercase English letters, with a length constraint of up to 105 characters. Since the string's length is variable and can be up to 105, the grammar uses a regular expression [a-z]{1,105} to represent the string, where [a-z] denotes any lowercase English letter and {1,105} specifies the length range from 1 to 105 characters. Thus, the grammar is constructed as '<S>->[a-z]{1,105}' to directly capture the input format."}
{"name": "199_A. Hexadecimal's theorem", "description": "Recently, a chaotic virus Hexadecimal advanced a new theorem which will shake the Universe. She thinks that each Fibonacci number can be represented as sum of three not necessary different Fibonacci numbers.\n\nLet's remember how Fibonacci numbers can be calculated. F0 = 0, F1 = 1, and all the next numbers are Fi = Fi - 2 + Fi - 1.\n\nSo, Fibonacci numbers make a sequence of numbers: 0, 1, 1, 2, 3, 5, 8, 13, ...\n\nIf you haven't run away from the PC in fear, you have to help the virus. Your task is to divide given Fibonacci number n by three not necessary different Fibonacci numbers or say that it is impossible.\n\nInput\n\nThe input contains of a single integer n (0 ≤ n < 10^9) — the number that should be represented by the rules described above. It is guaranteed that n is a Fibonacci number.", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is given as input, which is a single integer representing a Fibonacci number. Since 'n' is not used as a counter variable in this context, it is not enclosed in brackets. The grammar is simply defined as '<S>->n', reflecting the input format where 'n' is the sole input value."}
{"name": "19_B. Checkout Assistant", "description": "Input\n\nThe first input line contains number n (1 <= n <= 2000). In each of the following n lines each item is described by a pair of numbers ti, ci (0 <= ti <= 2000, 1 <= ci <= 109). If ti is 0, Bob won't be able to steal anything, while the checkout assistant is occupied with item i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> ti <s> ci", "<T_1>->ti <s> ci"], "constraints": ["1<=n<=2000", "0<=ti<=2000", "1<=ci<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n]. Each line following the first contains two variables, 'ti' and 'ci', separated by a space. The grammar constructs are '<T_i>-><T_i-1> <n> ti <s> ci' and '<T_1>->ti <s> ci' to parse each pair of numbers in the subsequent lines, ensuring the format adheres to the input specification."}
{"name": "201_A. Clear Symmetry", "description": "Input\n\nThe only line contains a single integer x (1 <= x <= 100) --- the required sharpness of the matrix.", "grammar": {"productions": ["<S>->x"], "constraints": ["1<=x<=100"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, x, which is not a counter variable, so it is represented simply as 'x'. The grammar is constructed as '<S>->x' to reflect the input format where a single integer x is provided."}
{"name": "201_E. Thoroughly Bureaucratic Organization", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 1000) --- the number of test cases. Each of the following t lines contains two integers n and m (1 <= n, m <= 109) --- the number of people who have got an appointment at TBO and the number of empty lines in the request form, correspondingly.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m", "<T_1>->n <s> m"], "constraints": ["1<=t<=1000", "1<=n,m<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 't' serves as a counter for the number of test cases, hence it is enclosed in brackets as [t]. The grammar is structured as '<S>->[t] <n> <T_t>', where <T_t> is a counter non-terminal for [t]. Each test case consists of two integers 'n' and 'm' separated by a space, represented as 'n <s> m'. The counter non-terminal <T_i> is defined to handle each test case line, decrementing until it reaches the first test case. Thus, the grammar includes '<T_i>-><T_i-1> <n> n <s> m' and '<T_1>->n <s> m' to systematically parse each test case line following the count [t]."}
{"name": "205_A. Little Elephant and Rozdil", "description": "The Little Elephant loves Ukraine very much. Most of all he loves town Rozdol (ukr. \"Rozdil\").\n\nHowever, Rozdil is dangerous to settle, so the Little Elephant wants to go to some other town. The Little Elephant doesn't like to spend much time on travelling, so for his journey he will choose a town that needs minimum time to travel to. If there are multiple such cities, then the Little Elephant won't go anywhere.\n\nFor each town except for Rozdil you know the time needed to travel to this town. Find the town the Little Elephant will go to or print \"Still Rozdil\", if he stays in Rozdil.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of cities. The next line contains n integers, separated by single spaces: the i-th integer represents the time needed to go from town Rozdil to the i-th town. The time values are positive integers, not exceeding 10^9.\n\nYou can consider the cities numbered from 1 to n, inclusive. Rozdil is not among the numbered cities.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of integers representing travel times, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n], generating the sequence of integers separated by spaces. Each integer in the sequence is represented by 'a_i', and the grammar rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' ensure the correct formation of the sequence. The constraints reflect the limits on 'n' and each 'a_i'."}
{"name": "20_B. Equation", "description": "Input\n\nThe first line contains three integer numbers A, B and C ( - 105 <= A, B, C <= 105). Any coefficient may be equal to 0.", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["-10^5<=A<=10^5", "-10^5<=B<=10^5", "-10^5<=C<=10^5"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'A', 'B', and 'C', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B <s> C', representing the input format where 'A', 'B', and 'C' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets."}
{"name": "215_A. Bicycle Chain", "description": "Input\n\nThe first input line contains integer n (1 <= n <= 50) --- the number of stars on the bicycle's pedal axle. The second line contains n integers a1, a2, ..., an (1 <= ai <= 104) in the order of strict increasing.\n\nThe third input line contains integer m (1 <= m <= 50) --- the number of stars on the rear wheel axle. The fourth line contains m integers b1, b2, ..., bm (1 <= bi <= 104) in the order of strict increasing.\n\nIt is guaranteed that there exists at least one gear (i, j), that its gear ratio is an integer. The numbers on the lines are separated by spaces.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> [m] <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=50", "1<=a_i<=10^4", "1<=m<=50", "1<=b_ii<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter for the sequence of integers 'a1, a2, ..., an', hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> [m] <n> <L_m>', where <T_n> and <L_m> are counter non-terminals for the sequences of 'a_i' and 'b_i' respectively. The sequences are constructed using the rules '<T_i>-><T_i-1> <s> a_i' and '<L_i>-><L_i-1> <s> b_i', with base cases '<T_1>->a_1' and '<L_1>->b_1' to handle the termination of the sequences. This structure ensures the input is parsed correctly with the specified constraints."}
{"name": "219_A. k-String", "description": "A string is called a k-string if it can be represented as k concatenated copies of some string. For example, the string \"aabaabaabaab\" is at the same time a 1-string, a 2-string and a 4-string, but it is not a 3-string, a 5-string, or a 6-string and so on. Obviously any string is a 1-string.\n\nYou are given a string s, consisting of lowercase English letters and a positive integer k. Your task is to reorder the letters in the string s in such a way that the resulting string is a k-string.\n\nInput\n\nThe first input line contains integer k (1 ≤ k ≤ 1000). The second line contains s, all characters in s are lowercase English letters. The string length s satisfies the inequality 1 ≤ |s| ≤ 1000, where |s| is the length of string s.", "grammar": {"productions": ["<S>->[k] <n> [a-z]{1,1000}"], "constraints": ["1<=k<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'k' is a counter variable, hence it is enclosed in [k]. The second part of the input is a string 's' consisting of lowercase English letters, which is represented using the regular expression [a-z]{1,1000} to specify its length range. The grammar is structured as '<S>->[k] <n> [a-z]{1,1000}' to reflect the input format where 'k' is an integer followed by a newline and then the string 's'."}
{"name": "219_B. Special Offer! Super Price 999 Bourles!", "description": "Input\n\nThe first line contains two integers p and d (1 <= p <= 1018; 0 <= d < p) --- the initial price of scissors and the maximum possible price reduction.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.", "grammar": {"productions": ["<S>->p <s> d"], "constraints": ["1<=p<=10^18", "0<=d<p"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'p' and 'd', which are separated by a space symbol denoted as <s>. Since neither 'p' nor 'd' serves as a counter variable, they are not enclosed in brackets. The grammar is constructed as '<S>->p <s> d', representing the input format where 'p' and 'd' are two integers separated by a space."}
{"name": "224_A. Parallelepiped", "description": "You've got a rectangular parallelepiped with integer edge lengths. You know the areas of its three faces that have a common vertex. Your task is to find the sum of lengths of all 12 edges of this parallelepiped.\n\nInput\n\nThe first and the single line contains three space-separated integers — the areas of the parallelepiped's faces. The area's values are positive ( > 0) and do not exceed 10^4. It is guaranteed that there exists at least one parallelepiped that satisfies the problem statement.", "grammar": {"productions": ["<S>->n <s> m <s> d"], "constraints": ["0<n<=10^4", "0<m<=10^4", "0<d<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables, 'n', 'm', and 'd', which represent the areas of the parallelepiped's faces. Since none of these variables serve as counters, they are not enclosed in brackets. The grammar is structured as '<S>->n <s> m <s> d', reflecting the input format where the three integers are separated by spaces. The constraints ensure that each area is positive and does not exceed 10^4."}
{"name": "225_E. Unsolvable", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 40).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=40"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is used as a counter variable, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n]' to represent the input format where a single integer n is given."}
{"name": "227_C. Flying Saucer Segments", "description": "Input\n\nThe first line contains two space-separated integers: n and m (1 <= n, m <=10^9) --- the number of aliens on the saucer and the number, modulo which you should print the answer, correspondingly.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=n,m<=10^9"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and m, which are not used as counter variables in this context, hence they are not enclosed in brackets. The variables are separated by a space symbol <s>, leading to the grammar structure '<S>->n <s> m', representing the input format where 'n' and 'm' are two integers separated by a space."}
{"name": "228_A. Is your horseshoe on the other hoof?", "description": "Input\n\nThe first line contains four space-separated integers s1, s2, s3, s4 (1 <= s1, s2, s3, s4 <= 109) --- the colors of horseshoes Valera has.\n\nConsider all possible colors indexed with integers.", "grammar": {"productions": ["<S>->s1 <s> s2 <s> s3 <s> s4"], "constraints": ["1<=s1,s2,s3,s4<=10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines four variables, 's1', 's2', 's3', and 's4', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->s1 <s> s2 <s> s3 <s> s4', representing the input format where 's1', 's2', 's3', and 's4' are four integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets."}
{"name": "231_A. Team", "description": "One day three best friends Petya, Vasya and Tonya decided to form a team and take part in programming contests. Participants are usually offered several problems during programming contests. Long before the start the friends decided that they will implement a problem if at least two of them are sure about the solution. Otherwise, the friends won't write the problem's solution.\n\nThis contest offers n problems to the participants. For each problem we know, which friend is sure about the solution. Help the friends find the number of problems for which they will write a solution.\n\nInput\n\nThe first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of problems in the contest. Then n lines contain three integers each, each integer is either 0 or 1. If the first number in the line equals 1, then Petya is sure about the problem's solution, otherwise he isn't sure. The second number shows Vasya's view on the solution, the third number shows Tonya's view. The numbers on the lines are separated by spaces.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> [01]{1} <s> [01]{1} <s> [01]{1}", "<T_1>->[01]{1} <s> [01]{1} <s> [01]{1}"], "constraints": ["1<=N<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the number of problems, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each line contains three integers (0 or 1) separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [01]{1} <s> [01]{1} <s> [01]{1}' and '<T_1>->[01]{1} <s> [01]{1} <s> [01]{1}' to systematically parse each line of the input."}
{"name": "233_A. Perfect Permutation", "description": "A permutation is a sequence of integers p1, p2, ..., pn, consisting of n distinct positive integers, each of them doesn't exceed n. Let's denote the i-th element of permutation p as pi. We'll call number n the size of permutation p1, p2, ..., pn.\n\nNickolas adores permutations. He likes some permutations more than the others. He calls such permutations perfect. A perfect permutation is such permutation p that for any i (1 ≤ i ≤ n) (n is the permutation size) the following equations hold ppi = i and pi ≠ i. Nickolas asks you to print any perfect permutation of size n for the given n.\n\nInput\n\nA single line contains a single integer n (1 ≤ n ≤ 100) — the permutation size.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a single integer input, which does not serve as a counter variable for any sequence or repetition. Therefore, it is represented simply as 'n' without brackets. The grammar is straightforward, defined as '<S>->n', reflecting the input format where only a single integer 'n' is provided."}
{"name": "233_C. Cycles", "description": "Input\n\nA single line contains an integer k (1 <= k <= 105) --- the number of cycles of length 3 in the required graph.", "grammar": {"productions": ["<S>->k"], "constraints": ["1<=k<=10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'k' is not used as a counter variable in this context, so it is represented simply as 'k'. The grammar is straightforward, consisting of a single line with the integer 'k', hence the grammar is defined as '<S>->k'."}
{"name": "236_A. Boy or Girl", "description": "Those days, many boys use beautiful girls' photos as avatars in forums. So it is pretty hard to tell the gender of a user at the first glance. Last year, our hero went to a forum and had a nice chat with a beauty (he thought so). After that they talked very often and eventually they became a couple in the network. \n\nBut yesterday, he came to see \"her\" in the real world and found out \"she\" is actually a very strong man! Our hero is very sad and he is too tired to love again now. So he came up with a way to recognize users' genders by their user names.\n\nThis is his method: if the number of distinct characters in one's user name is odd, then he is a male, otherwise she is a female. You are given the string that denotes the user name, please help our hero to determine the gender of this user by his method.\n\nInput\n\nThe first line contains a non-empty string, that contains only lowercase English letters — the user name. This string contains at most 100 letters.", "grammar": {"productions": ["<S>->[a-z]{1,100}"], "constraints": []}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a single line containing a non-empty string of lowercase English letters, which can be up to 100 characters long. Since the variable is not a counter but a string of characters, it is represented using a regular expression [a-z]{1,100} to denote the range of allowed characters and their length. Thus, the grammar is constructed as '<S>->[a-z]{1,100}' to directly parse the input string."}
{"name": "236_C. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <=10^6 --- the n mentioned in the statement.", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^6"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is used as a counter variable, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n]' to represent the input format where 'n' is the only integer provided in the first line."}
{"name": "237_E. Build String", "description": "Input\n\nThe first line of the input contains string t --- the string that you need to build.\n\nThe second line contains a single integer n (1 <= n <= 100) --- the number of strings to which you are allowed to apply the described operation. Each of the next n lines contains a string and an integer. The i-th line contains space-separated string si and integer ai (0 <= ai <= 100). Number ai represents the maximum number of characters that can be deleted from string si.\n\nAll strings in the input only consist of lowercase English letters. All strings are non-empty. The lengths of all strings do not exceed 100 characters.", "grammar": {"productions": ["<S>->[a-z]{1,100} <n> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,100} <s> a_i", "<T_1>->[a-z]{1,100} <s> a_1"], "constraints": ["1<=n<=100", "0<=ai<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The first line contains a string 't' which is represented by the regex [a-z]{1,100} to denote it consists of lowercase English letters with a length between 1 and 100. The second line contains a variable 'n' which serves as a counter variable for the number of strings and their associated integers, hence it is enclosed in [n]. The grammar is structured as '<S>->[a-z]{1,100} <n> [n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. Each subsequent line under <T_i> includes a string represented by [a-z]{1,100} and an integer 'a_i' separated by a space <s>, following the pattern '<T_i>-><T_i-1> <n> [a-z]{1,100} <s> a_i' and terminating with '<T_1>->[a-z]{1,100} <s> a_1'."}
{"name": "242_C. King's Path", "description": "Input\n\nThe first line contains four space-separated integers x0, y0, x1, y1 (1 <= x0, y0, x1, y1 <= 109), denoting the initial and the final positions of the king.\n\nThe second line contains a single integer n (1 <= n <= 105), denoting the number of segments of allowed cells. Next n lines contain the descriptions of these segments. The i-th line contains three space-separated integers ri, ai, bi (1 <= ri, ai, bi <= 109, ai <= bi), denoting that cells in columns from number ai to number bi inclusive in the ri-th row are allowed. Note that the segments of the allowed cells can intersect and embed arbitrarily.\n\nIt is guaranteed that the king's initial and final position are allowed cells. It is guaranteed that the king's initial and the final positions do not coincide. It is guaranteed that the total length of all given segments doesn't exceed 105.", "grammar": {"productions": ["<S>->x0 <s> y0 <s> x1 <s> y1 <n> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> r_i <s> a_i <s> b_i", "<T_1>->r_1 <s> a_1 <s> b_1"], "constraints": ["1<=x0,y0,x1,y1<=109^", "1<=n<=10^5", "1<=r_i,a_i,b_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables x0, y0, x1, and y1, which are not counter variables, so they are written directly. These are followed by a newline <n>. The variable n serves as a counter for the number of segments, hence it is enclosed in [n]. The grammar is initiated with '<S>->x0 <s> y0 <s> x1 <s> y1 <n> [n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each segment is represented by r_i, a_i, and b_i separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> r_i <s> a_i <s> b_i' and '<T_1>->r_1 <s> a_1 <s> b_1' to systematically parse the sequence of segments following the count [n]."}
{"name": "245_E. Mishap in Club", "description": "Input\n\nThe only line of the input contains a sequence of characters \"+\" and \"-\", the characters are written one after another without any separators. The characters are written in the order, in which the corresponding events occurred. The given sequence has length from 1 to 300 characters, inclusive.", "grammar": {"productions": ["<S>->[+-]{1,300}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a sequence of '+' and '-' characters, with a length ranging from 1 to 300 characters. Since the sequence length is variable and the characters are limited to '+' and '-', the regular expression [+-]{1,300} is used to represent the input format. Thus, the grammar is constructed as '<S>->[+-]{1,300}' to directly capture the sequence without any additional non-terminals or counters."}
{"name": "248_A. Cupboards", "description": "Input\n\nThe first input line contains a single integer n --- the number of cupboards in the kitchen (2 <= n <= 104). Then follow n lines, each containing two integers li and ri (0 <= li, ri <= 1). Number li equals one, if the left door of the i-th cupboard is opened, otherwise number li equals zero. Similarly, number ri equals one, if the right door of the i-th cupboard is opened, otherwise number ri equals zero.\n\nThe numbers in the lines are separated by single spaces.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_i <s> r_i"], "constraints": ["2<=n<=10^4", "0<=li,ri<=1"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of cupboards, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two integers 'l_i' and 'r_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> l_i <s> r_i' and '<T_1>->l_i <s> r_i' to systematically parse the sequence of cupboard states following the count [n]."}
{"name": "255_D. Mr. Bender and Square", "description": "Input\n\nThe first line contains four space-separated integers n, x, y, c (1 <= n, c <=10^9; 1 <= x, y <= n; c <= n2).", "grammar": {"productions": ["<S>->n <s> x <s> y <s> c"], "constraints": ["1<=n,c<=10^9", "1<=x,y<=n", "c<=n^2"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes four variables: n, x, y, and c, none of which serve as counter variables. Therefore, they are not enclosed in brackets. The input format specifies these variables separated by spaces, leading to the grammar structure '<S>->n <s> x <s> y <s> c'."}
{"name": "259_C. Little Elephant and Bits", "description": "Input\n\nThe single line contains integer a, written in the binary notation without leading zeroes. This number contains more than 1 and at most 105 digits.", "grammar": {"productions": ["<S>->[01]{1,10^5}"], "constraints": ["The length of 'a'>1 and<=105"]}, "reason": "The grammar begins with the starting non-terminal <S>. The input is a single line containing an integer 'a' in binary notation without leading zeroes, which can have between 2 and 10^5 digits. Since the variable 'a' is directly represented by a sequence of binary digits (0 or 1) and its length is specified, it is replaced by the regular expression [01]{1,10^5} to capture the range of possible digits. Thus, the grammar is constructed as '<S>->[01]{1,10^5}', where the regular expression ensures the input adheres to the binary format and length constraints."}
{"name": "25_D. Roads not only in Berland", "description": "Input\n\nThe first line contains integer n (2 <= n <= 1000) --- amount of cities in Berland and neighboring countries. Next n - 1 lines contain the description of roads. Each road is described by two space-separated integers ai, bi (1 <= ai, bi <= n, ai != bi) --- pair of cities, which the road connects. It can't be more than one road between a pair of cities. No road connects the city with itself.", "grammar": {"productions": ["<S>->[n] <n> <T_n-1>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["2<=n<=1000", "1<=A_i, B_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of cities, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n-1>', where <T_i> is a counter non-terminal for the roads described in the next n-1 lines. Each road is described by two integers 'A_i' and 'B_i' separated by a space, hence the rules '<T_i>-><T_i-1> <n> A_i <s> B_i' and '<T_1>->A_1 <s> B_1' are used to parse each road description line."}
{"name": "260_B. Ancient Prophesy", "description": "Input\n\nThe first line contains the Prophesy: a non-empty string that only consists of digits and characters \"-\". The length of the Prophesy doesn't exceed 105 characters.", "grammar": {"productions": ["<S>->[0-9-]{1,10^5}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input is a non-empty string consisting of digits and '-' characters, with a maximum length of 10^5. Since the variable is not a counter but a string with specific characters, it is directly represented using a regular expression [0-9-]{1,10^5} to denote the allowed characters and their length range. Thus, the grammar is constructed as '<S>->[0-9-]{1,10^5}' to capture the entire input string in one go."}
{"name": "263_A. Beautiful Matrix", "description": "You've got a 5 × 5 matrix, consisting of 24 zeroes and a single number one. Let's index the matrix rows by numbers from 1 to 5 from top to bottom, let's index the matrix columns by numbers from 1 to 5 from left to right. In one move, you are allowed to apply one of the two following transformations to the matrix:\n\n  1. Swap two neighboring matrix rows, that is, rows with indexes i and i + 1 for some integer i (1 ≤ i < 5). \n  2. Swap two neighboring matrix columns, that is, columns with indexes j and j + 1 for some integer j (1 ≤ j < 5). \n\n\n\nYou think that a matrix looks beautiful, if the single number one of the matrix is located in its middle (in the cell that is on the intersection of the third row and the third column). Count the minimum number of moves needed to make the matrix beautiful.\n\nInput\n\nThe input consists of five lines, each line contains five integers: the j-th integer in the i-th line of the input represents the element of the matrix that is located on the intersection of the i-th row and the j-th column. It is guaranteed that the matrix consists of 24 zeroes and a single number one.", "grammar": {"productions": ["<S>-><T_5,1>", "<T_i,1>-><T_i-1,1> <n> <L_5,0>|<T_i-1,0> <n> <L_5,1>", "<T_i,0>-><T_i-1,0> <n> <L_5,0>", "<T_1,1>-><L_5,1>", "<T_1,0>-><L_5,0>", "<L_i,1>-><L_i-1,1> <s> 0|<L_i-1,0> <s> 1", "<L_i,0>-><L_i-1,0> <s> 0", "<L_1,1>->1", "<L_1,0>->0"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a 5x5 matrix, which is represented using two counter variables: one for rows (i) and one for columns (j). The rows are indexed from 1 to 5, and each row contains 5 elements. The grammar uses <T_i,1> and <T_i,0> to represent rows that may or may not contain the single '1' in the matrix. Similarly, <L_i,1> and <L_i,0> are used to represent columns that may or may not contain the '1'. The grammar is structured to ensure that each row is followed by a newline <n>, and each element within a row is separated by a space <s>. The rules <T_i,1> and <T_i,0> handle the propagation of the '1' or '0' state through the rows, while <L_i,1> and <L_i,0> handle the propagation through the columns. The terminal rules <T_1,1>, <T_1,0>, <L_1,1>, and <L_1,0> ensure the base cases are correctly handled."}
{"name": "265_A. Colorful Stones (Simplified Edition)", "description": "There is a sequence of colorful stones. The color of each stone is one of red, green, or blue. You are given a string s. The i-th (1-based) character of s represents the color of the i-th stone. If the character is \"R\", \"G\", or \"B\", the color of the corresponding stone is red, green, or blue, respectively.\n\nInitially Squirrel Liss is standing on the first stone. You perform instructions one or more times.\n\nEach instruction is one of the three types: \"RED\", \"GREEN\", or \"BLUE\". After an instruction c, if Liss is standing on a stone whose colors is c, Liss will move one stone forward, else she will not move.\n\nYou are given a string t. The number of instructions is equal to the length of t, and the i-th character of t represents the i-th instruction.\n\nCalculate the final position of Liss (the number of the stone she is going to stand on in the end) after performing all the instructions, and print its 1-based position. It is guaranteed that Liss don't move out of the sequence.\n\nInput\n\nThe input contains two lines. The first line contains the string s (1 ≤ |s| ≤ 50). The second line contains the string t (1 ≤ |t| ≤ 50). The characters of each string will be one of \"R\", \"G\", or \"B\". It is guaranteed that Liss don't move out of the sequence.", "grammar": {"productions": ["<S>->[RGB]{1,50} <n> [RGB]{1,50}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of two strings, 's' and 't', each composed of characters 'R', 'G', or 'B'. Since both strings have lengths between 1 and 50, they are represented using the regular expression [RGB]{1,50}, which specifies a sequence of 1 to 50 characters, each being 'R', 'G', or 'B'. The grammar is structured as '<S>->[RGB]{1,50} <n> [RGB]{1,50}', where <n> denotes a newline separating the two strings. This format accurately captures the input structure where two strings are provided on consecutive lines, each adhering to the specified character set and length constraints."}
{"name": "266_A. Stones on the Table", "description": "There are n stones on the table in a row, each of them can be red, green or blue. Count the minimum number of stones to take from the table so that any two neighboring stones had different colors. Stones in a row are considered neighboring if there are no other stones between them.\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 50) — the number of stones on the table. \n\nThe next line contains string s, which represents the colors of the stones. We'll consider the stones in the row numbered from 1 to n from left to right. Then the i-th character s equals \"R\", if the i-th stone is red, \"G\", if it's green and \"B\", if it's blue.", "grammar": {"productions": ["<S>->[N] <n> [RGB]{N}"], "constraints": ["1<=N<=50"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, N, which serves as a counter variable for the number of stones, hence it is enclosed in [N]. The next line contains a string representing the colors of the stones, which can only be 'R', 'G', or 'B'. This string is represented using the regular expression [RGB]{N}, where N is the counter variable specifying the length of the string. Thus, the grammar is constructed as '<S>->[N] <n> [RGB]{N}' to reflect the input format where N is the number of stones and the subsequent line is a string of N characters from the set {'R', 'G', 'B'}."}
{"name": "266_B. Queue at the School", "description": "During the break the schoolchildren, boys and girls, formed a queue of n people in the canteen. Initially the children stood in the order they entered the canteen. However, after a while the boys started feeling awkward for standing in front of the girls in the queue and they started letting the girls move forward each second. \n\nLet's describe the process more precisely. Let's say that the positions in the queue are sequentially numbered by integers from 1 to n, at that the person in the position number 1 is served first. Then, if at time x a boy stands on the i-th position and a girl stands on the (i + 1)-th position, then at time x + 1 the i-th position will have a girl and the (i + 1)-th position will have a boy. The time is given in seconds.\n\nYou've got the initial position of the children, at the initial moment of time. Determine the way the queue is going to look after t seconds.\n\nInput\n\nThe first line contains two integers n and t (1 ≤ n, t ≤ 50), which represent the number of children in the queue and the time after which the queue will transform into the arrangement you need to find. \n\nThe next line contains string s, which represents the schoolchildren's initial arrangement. If the i-th position in the queue contains a boy, then the i-th character of string s equals \"B\", otherwise the i-th character equals \"G\".", "grammar": {"productions": ["<S>->[N] <s> T <n> [BG]{N}"], "constraints": ["1<=N,T<=50"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and t, where n serves as a counter variable for the length of the string, hence it is enclosed in [N]. The variable t is not a counter, so it remains as T. The input format specifies that after n and t, there is a string of length n consisting of 'B' and 'G' characters. This string is represented using the regular expression [BG]{N}, where N is the counter variable [N]. Thus, the grammar is constructed as '<S>->[N] <s> T <n> [BG]{N}' to reflect the input structure."}
{"name": "268_A. Games", "description": "Manao works on a sports TV. He's spent much time watching the football games of some country. After a while he began to notice different patterns. For example, each team has two sets of uniforms: home uniform and guest uniform. When a team plays a game at home, the players put on the home uniform. When a team plays as a guest on somebody else's stadium, the players put on the guest uniform. The only exception to that rule is: when the home uniform color of the host team matches the guests' uniform, the host team puts on its guest uniform as well. For each team the color of the home and guest uniform is different.\n\nThere are n teams taking part in the national championship. The championship consists of n·(n - 1) games: each team invites each other team to its stadium. At this point Manao wondered: how many times during the championship is a host team going to put on the guest uniform? Note that the order of the games does not affect this number.\n\nYou know the colors of the home and guest uniform for each team. For simplicity, the colors are numbered by integers in such a way that no two distinct colors have the same number. Help Manao find the answer to his question.\n\nInput\n\nThe first line contains an integer n (2 ≤ n ≤ 30). Each of the following n lines contains a pair of distinct space-separated integers hi, ai (1 ≤ hi, ai ≤ 100) — the colors of the i-th team's home and guest uniforms, respectively.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> h_i <s> a_i", "<T_1>->h_1 <s> a_1"], "constraints": ["2<=n<=30", "1<=h_i,a_i<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of teams, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. Each team's home and guest uniform colors are represented by 'h_i' and 'a_i', separated by a space <s>. The counter non-terminal <T_i> is defined to decrement until it reaches 1, with each step adding a new line <n> followed by 'h_i' and 'a_i'. The base case <T_1> directly outputs 'h_1' and 'a_1' separated by a space. This structure ensures the input format matches the specification, where each of the n teams has a line with their uniform colors."}
{"name": "268_B. Buttons", "description": "Input\n\nA single line contains integer n (1 <= n <= 2000) --- the number of buttons the lock has.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=2000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is the only input and does not serve as a counter variable in this context, hence it is represented simply as 'n'. The grammar is straightforward, consisting of the start symbol producing 'n' directly, reflecting the input format where a single integer is provided."}
{"name": "26_B. Regular Bracket Sequence", "description": "Input\n\nInput consists of a single line with non-empty string of «(» and «)» characters. Its length does not exceed 106.", "grammar": {"productions": ["<S>->[()]{1,1000000}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a single line with a non-empty string of '(' and ')' characters, and its length does not exceed 10^6. Since the string is composed solely of these two characters and its length is variable, the grammar is represented using a regular expression [()]{1,1000000} to capture the range of possible lengths. Thus, the grammar is constructed as '<S>->[()]{1,1000000}' to directly match the input format."}
{"name": "270_D. Greenhouse Effect", "description": "Input\n\nThe first line of input contains two space-separated integers n and m (1 <= n, m <= 5000, n >= m), the number of plants and the number of different species. Each of the following n lines contain two space-separated numbers: one integer number si (1 <= si <= m), and one real number xi (0 <= xi <= 109), the species and position of the i-th plant. Each xi will contain no more than 6 digits after the decimal point.\n\nIt is guaranteed that all xi are different; there is at least one plant of each species; the plants are given in order \"from left to the right\", that is in the ascending order of their xi coordinates (xi < xi + 1, 1 <= i < n).", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> si <s> xi", "<T_1>->si <s> xi"], "constraints": ["1<=n,m<=5000", "n>=m", "1<=si<=m", "0<=xi<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two space-separated values, si and xi. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> si <s> xi' and '<T_1>->si <s> xi' to systematically parse the sequence of plant data following the count [n]."}
{"name": "271_A. Beautiful Year", "description": "It seems like the year of 2013 came only yesterday. Do you know a curious fact? The year of 2013 is the first year after the old 1987 with only distinct digits.\n\nNow you are suggested to solve the following problem: given a year number, find the minimum year number which is strictly larger than the given one and has only distinct digits.\n\nInput\n\nThe single line contains integer y (1000 ≤ y ≤ 9000) — the year number.", "grammar": {"productions": ["<S>->Y"], "constraints": ["1000<=Y<=9000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'y' is not a counter variable, so it is represented simply as 'y'. The grammar is constructed as '<S>->y', reflecting the input format where a single integer 'y' is provided. The constraints specify that 'y' must be between 1000 and 9000, inclusive."}
{"name": "272_A. Dima and Friends", "description": "Dima and his friends have been playing hide and seek at Dima's place all night. As a result, Dima's place got messy. In the morning they decided that they need to clean the place.\n\nTo decide who exactly would clean the apartment, the friends want to play a counting-out game. First, all the guys stand in a circle, and then each of them shows some number of fingers on one hand (one to five), and then the boys count in a circle, starting from Dima, the number of people, respective to the total number of fingers shown. The person on who the countdown stops will clean the apartment.\n\nFor example, if Dima and one of his friends played hide and seek, and 7 fingers were shown during the counting-out, then Dima would clean the place. If there were 2 or say, 8 fingers shown, then his friend would clean the place.\n\nDima knows how many fingers each of his friends will show during the counting-out. Now he is interested in the number of ways to show some number of fingers on one hand (one to five), so that he did not have to clean the place. Help Dima.\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of Dima's friends. Dima himself isn't considered to be his own friend. The second line contains n positive integers, not exceeding 5, representing, how many fingers the Dima's friends will show. \n\nThe numbers in the lines are separated by a single space.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=a_i<=5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the number of friends, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence of fingers shown by each friend. Each friend's finger count is represented by 'a_i' and separated by a space symbol <s>. The grammar rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' are used to parse the sequence of finger counts, decrementing the counter until it reaches 1."}
{"name": "272_B. Dima and Sequence", "description": "Input\n\nThe first line contains integer n (1 <= n <= 105). The second line contains n positive integers a1, a2, ..., an (1 <= ai <= 109).\n\nThe numbers in the lines are separated by single spaces.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'n' is used as a counter variable for the array elements, thus it is denoted as [n] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "278_B. New Problem", "description": "Input\n\nThe first line contains integer n (1 <= n <= 30) --- the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,20}", "<T_1>->[a-z]{1,20}"], "constraints": ["1<=n<=30"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of titles, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each title is represented by a sequence of lowercase English letters with a length from 1 to 20, denoted by the regex [a-z]{1,20}. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <n> [a-z]{1,20}', and '<T_1>->[a-z]{1,20}' to systematically parse the sequence of titles following the count [n]."}
{"name": "27_E. Number With The Given Amount Of Divisors", "description": "Input\n\nThe first line of the input contains integer n (1 <= n <= 1000).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=1000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is not used as a counter variable in this context, hence it is represented simply as 'n'. The grammar is constructed as '<S>->n' to reflect the input format where only the integer n is provided."}
{"name": "281_A. Word Capitalization", "description": "Input\n\nA single line contains a non-empty word. This word consists of lowercase and uppercase English letters. The length of the word will not exceed 103.", "grammar": {"productions": ["<S>->[a-zA-Z]{1,10^3}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a single word composed of lowercase and uppercase English letters, with a length not exceeding 10^3. Since the word's length is variable and not fixed, a regular expression [a-zA-Z]{1,10^3} is used to represent the word, capturing all possible combinations of letters within the specified length range. This approach efficiently models the input without the need for counter variables or additional non-terminals, as the entire word is described by the regex pattern."}
{"name": "282_A. Bit++", "description": "The classic programming language of Bitland is Bit++. This language is so peculiar and complicated.\n\nThe language is that peculiar as it has exactly one variable, called x. Also, there are two operations:\n\n  * Operation ++ increases the value of variable x by 1. \n  * Operation -- decreases the value of variable x by 1. \n\n\n\nA statement in language Bit++ is a sequence, consisting of exactly one operation and one variable x. The statement is written without spaces, that is, it can only contain characters \"+\", \"-\", \"X\". Executing a statement means applying the operation it contains.\n\nA programme in Bit++ is a sequence of statements, each of them needs to be executed. Executing a programme means executing all the statements it contains.\n\nYou're given a programme in language Bit++. The initial value of x is 0. Execute the programme and find its final value (the value of the variable when this programme is executed).\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 150) — the number of statements in the programme.\n\nNext n lines contain a statement each. Each statement contains exactly one operation (++ or --) and exactly one variable x (denoted as letter «X»). Thus, there are no empty statements. The operation and the variable can be written in any order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> <C>", "<T_1>-><C>", "<C>->++X|--X|X++|X--"], "constraints": ["1<=n<=150"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of statements, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. Each statement is represented by the non-terminal <C>, which can be one of the four possible forms: '++X', '--X', 'X++', or 'X--'. The counter non-terminal <T_i> is used to generate each statement in sequence, separated by a newline token <n>. The grammar ensures that each statement is correctly parsed according to the given format."}
{"name": "283_D. Cows and Cool Sequences", "description": "Input\n\nThe first line contains a single integer, n (2 <= n <= 5000). The next line contains n space-separated integers, a1, a2, ..., an (1 <= ai <= 1015).\n\nPlease do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=5000", "1<=a_i<=10^15"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of integers is represented by <T_i>, which recursively includes each integer 'a_i' separated by a space <s>, decrementing until <T_1> which represents the first integer 'a_1'. This structure ensures the input format of 'n' followed by 'n' space-separated integers is correctly parsed."}
{"name": "284_B. Cows and Poker Game", "description": "Input\n\nThe first line contains a single integer, n (2 <= n <= 2·105). The second line contains n characters, each either \"A\", \"I\", or \"F\". The i-th character is \"A\" if the i-th player's status is \"ALLIN\", \"I\" if the i-th player's status is \"IN\", or \"F\" if the i-th player's status is \"FOLDED\".", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> [AIF]{1}", "<T_1>->[AIF]{1}"], "constraints": ["2<=n<=2*10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of characters, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of characters consists of 'A', 'I', or 'F', each represented by the regex [AIF]{1}. The counter non-terminal <T_i> is defined to decrement until it reaches 1, constructing the sequence as '<T_i>-><T_i-1> [AIF]{1}' and '<T_1>->[AIF]{1}'."}
{"name": "287_D. Shifting", "description": "Input\n\nA single line contains integer n (2 <= n <= 106).", "grammar": {"productions": ["<S>->n"], "constraints": ["2<=n<=10^6"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is not used as a counter variable in this context, hence it is represented simply as 'n'. The grammar is constructed as '<S>->n' to reflect the input format where a single integer n is provided. The constraints specify that n must be between 2 and 10^6."}
{"name": "288_B. Polo the Penguin and Houses ", "description": "Input\n\nThe single line contains two space-separated integers n and k (1 <= n <= 1000, 1 <= k <= min(8, n)) --- the number of the houses and the number k from the statement.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=1000", "1<=k<=min(8,n)"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and k, but neither serves as a counter variable in this context, so they are not enclosed in brackets. The grammar is initiated with '<S>->n <s> k', representing the input format where 'n' and 'k' are two integers separated by a space."}
{"name": "289_C. Polo the Penguin and Strings", "description": "Input\n\nA single line contains two positive integers n and k (1 <= n <= 106, 1 <= k <= 26) --- the string's length and the number of distinct letters.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=10^6", "1<=k<=26"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and k, but neither serves as a counter variable in this context, so they are represented simply as 'n' and 'k'. The grammar is initiated with '<S>->n <s> k', representing the input format where 'n' and 'k' are two integers separated by a space."}
{"name": "290_D. Orange", "description": "Input\n\nThe first line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be a letter of English alphabet, lowercase or uppercase.\n\nThe second line of the input is an integer between 0 and 26, inclusive.", "grammar": {"productions": ["<S>->[a-zA-Z]{1,50} <n> a"], "constraints": ["0<=a<=26"]}, "reason": "The grammar begins with the starting non-terminal <S>. The first line is a string of characters between 1 and 50 characters long, inclusive, consisting of lowercase or uppercase English letters. This is represented using the regular expression [a-zA-Z]{1,50}. The second line is an integer 'a' between 0 and 26, inclusive, which is not a counter variable, so it is represented as 'a'. The grammar is constructed as '<S>->[a-zA-Z]{1,50} <n> a' to reflect the input format where the string is followed by a newline and then the integer 'a'."}
{"name": "294_A. Shaass and Oskols", "description": "Input\n\nThe first line of the input contains an integer n, (1 <= n <= 100). The next line contains a list of space-separated integers a1, a2, ..., an, (0 <= ai <= 100). \n\nThe third line contains an integer m, (0 <= m <= 100). Each of the next m lines contains two integers xi and yi. The integers mean that for the i-th time Shaass shoot the yi-th (from left) bird on the xi-th wire, (1 <= xi <= n, 1 <= yi). It's guaranteed there will be at least yi birds on the xi-th wire at that moment.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> m <n> <L_m>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <n> x_i <s> y_i", "<L_1>->x_1 <s> y_1"], "constraints": ["1<=n<=100", "0<=A_i<=100", "0<=m<=100", "1<=x_i<=n", "1<=y_i"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter for the list of integers, hence it is enclosed in [n]. The grammar starts with '<S>->[n] <n> <T_n> <n> m <n> <L_m>', where <T_n> handles the list of integers separated by spaces, and <L_m> handles the subsequent m lines of pairs (x_i, y_i). The counter non-terminal <T_i> processes the list elements, decrementing until <T_1>, and similarly, <L_i> processes each line of pairs until <L_1>. The variables x_i and y_i are not counters, so they are not enclosed in brackets."}
{"name": "2_A. Winner", "description": "The winner of the card game popular in Berland \"Berlogging\" is determined according to the following rules. If at the end of the game there is only one player with the maximum number of points, he is the winner. The situation becomes more difficult if the number of such players is more than one. During each round a player gains or loses a particular number of points. In the course of the game the number of points is registered in the line \"name score\", where name is a player's name, and score is the number of points gained in this round, which is an integer number. If score is negative, this means that the player has lost in the round. So, if two or more players have the maximum number of points (say, it equals to m) at the end of the game, than wins the one of them who scored at least m points first. Initially each player has 0 points. It's guaranteed that at the end of the game at least one player has a positive number of points.\n\nInput\n\nThe first line contains an integer number n (1 ≤ n ≤ 1000), n is the number of rounds played. Then follow n lines, containing the information about the rounds in \"name score\" format in chronological order, where name is a string of lower-case Latin letters with the length from 1 to 32, and score is an integer number between -1000 and 1000, inclusive.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,32} <s> score", "<T_1>->[a-z]{1,32} <s> score"], "constraints": ["1<=n<=1000", "-1000<=score<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the number of rounds, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each round is represented by a player's name (a string of lowercase Latin letters with length 1 to 32) followed by a space <s> and the score. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [a-z]{1,32} <s> score' and '<T_1>->[a-z]{1,32} <s> score' to systematically parse each round's information following the count [n]."}
{"name": "313_B. Ilya and Queries", "description": "Ilya the Lion wants to help all his friends with passing exams. They need to solve the following problem to pass the IT exam.\n\nYou've got string s = s1s2... sn (n is the length of the string), consisting only of characters \".\" and \"#\" and m queries. Each query is described by a pair of integers li, ri (1 ≤ li < ri ≤ n). The answer to the query li, ri is the number of such integers i (li ≤ i < ri), that si = si + 1.\n\nIlya the Lion wants to help his friends but is there anyone to help him? Help Ilya, solve the problem.\n\nInput\n\nThe first line contains string s of length n (2 ≤ n ≤ 10^5). It is guaranteed that the given string only consists of characters \".\" and \"#\".\n\nThe next line contains integer m (1 ≤ m ≤ 10^5) — the number of queries. Each of the next m lines contains the description of the corresponding query. The i-th line contains integers li, ri (1 ≤ li < ri ≤ n).", "grammar": {"productions": ["<S>->[.#]{n} <n> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1"], "constraints": ["2<=n<=10^5", "1<=m<=10^5", "1<=l_i<=r_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' represents the length of the string 's' and is used as a counter variable, hence it is enclosed in [n]. The string 's' consists of characters '.' and '#' and is represented using the regex [.#]{n}. The variable 'm' is also a counter variable, enclosed in [m], and is used to count the number of queries. Each query consists of two integers 'l_i' and 'r_i' separated by a space. The grammar is structured as '<S>->[.#]{n} <n> [m] <n> <T_m>', where <T_i> is a counter non-terminal for [m], generating each query line as '<T_i>-><T_i-1> <n> l_i <s> r_i' and terminating with '<T_1>->l_1 <s> r_1'."}
{"name": "316_B2. EKG", "description": "Input\n\nThe first line contains two integers n (1 <= n <= 103) and x (1 <= x <= n) --- the number of beavers that stand in the queue and the Smart Beaver's number, correspondingly. All willing to get to the doctor are numbered from 1 to n.\n\nThe second line contains n integers a1, a2, ..., an (0 <= ai <= n) --- the number of the beaver followed by the i-th beaver. If ai = 0, then the i-th beaver doesn't know who is should be in front of him. It is guaranteed that values ai are correct. That is there is no cycles in the dependencies. And any beaver is followed by at most one beaver in the queue.\n\nThe input limits for scoring 30 points are (subproblem B1): \n\n  * It is guaranteed that the number of zero elements ai doesn't exceed 20. \n\n\n\nThe input limits for scoring 100 points are (subproblems B1+B2): \n\n  * The number of zero elements ai is arbitrary.", "grammar": {"productions": ["<S>->[n] <s> x <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=n<=10^3", "1<=x<=n", "0<=A_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'x', where 'n' serves as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> x <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'A_i' represents each integer in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "317_D. Game with Powers", "description": "Input\n\nInput contains single integer n (1 <= n <= 109).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is the only input and does not serve as a counter variable, hence it is represented simply as 'n' in the grammar. The grammar is constructed as '<S>->n' to reflect the input format where a single integer 'n' is provided."}
{"name": "319_B. Psychos in a Line", "description": "Input\n\nThe first line of input contains integer n denoting the number of psychos, (1 <= n <= 105). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive --- ids of the psychos in the line from left to right.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_i"], "constraints": ["1<=n<=10^5", "1<=a_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the number of psychos, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of integers representing the psychos' ids is generated by the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_i', ensuring each id is separated by a space. The variable 'a_i' represents each distinct integer in the range 1 to n, inclusive."}
{"name": "320_A. Magic Numbers", "description": "A magic number is a number formed by concatenation of numbers 1, 14 and 144. We can use each of these numbers any number of times. Therefore 14144, 141414 and 1411 are magic numbers but 1444, 514 and 414 are not.\n\nYou're given a number. Determine if it is a magic number or not.\n\nInput\n\nThe first line of input contains an integer n, (1 ≤ n ≤ 10^9). This number doesn't contain leading zeros.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is not used as a counter variable but simply represents an integer input, hence it is not enclosed in brackets. The grammar is constructed as '<S>->n' to reflect the input format where 'n' is a single integer without any leading zeros. The constraints specify the range for 'n' as 1 ≤ n ≤ 10^9."}
{"name": "325_B. Stadium and Games", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 1018), the number of games that should be played.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is not used as a counter variable in this context, so it is represented simply as 'n' without brackets. The grammar is straightforward, consisting of a single rule '<S>->n', which reflects the input format where only the integer 'n' is provided. The constraints specify the range for 'n' as 1 to 10^18."}
{"name": "325_D. Reclamation", "description": "Input\n\nThe first line consists of three integers r, c, and n (1 <= r, c <= 3000, 1 <= n <= 3·105). Then, n lines follow, describing the cells in the order you will reclamate them. Each line will consists of two integers: ri and ci (1 <= ri <= r, 1 <= ci <= c), which represents the cell located at row ri and column ci. All of the lines describing the cells will be distinct.", "grammar": {"productions": ["<S>->r <s> c <s> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> r_i <s> c_i", "<T_1>->r_i <s> c_i"], "constraints": ["1<=r,c<=3000", "1<=n<=3*10^5", "1<=r_i<=r", "1<=c_i<=c"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: r, c, and n, where 'n' serves as a counter variable for the number of lines describing the cells, hence it is enclosed in [n]. The variables r and c are not counters, so they are represented without brackets. The grammar is structured as '<S>->r <s> c <s> [n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. Each line describing a cell consists of two integers, r_i and c_i, separated by a space. The counter non-terminal <T_i> is defined to decrement until it reaches 1, with each step appending the cell description. The grammar rules are '<T_i>-><T_i-1> <n> r_i <s> c_i' and '<T_1>->r_i <s> c_i' to parse the sequence of cell descriptions."}
{"name": "328_A. IQ Test", "description": "Input\n\nThe first line contains exactly four integer numbers between 1 and 1000, inclusively.", "grammar": {"productions": ["<S>->i <s> i <s> i <s> i"], "constraints": ["1<=i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four integer variables, each represented as 'i' since they are not counter variables and do not require counter non-terminals. The variables are separated by space tokens <s>. The grammar is structured as '<S>->i <s> i <s> i <s> i' to represent the input format where four integers are given in a single line, separated by spaces."}
{"name": "32_C. Flea", "description": "Input\n\nThe first line contains three integers n, m, s (1 <= n, m, s <=10^6 --- length of the board, width of the board and length of the flea's jump.", "grammar": {"productions": ["<S>->n <s> m <s> s"], "constraints": ["1<=n,m,s<=10^6"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes three variables, n, m, and s, but none of them serve as counter variables, so they are not enclosed in brackets. The grammar is initiated with '<S>->n <s> m <s> s', representing the input format where three integers are separated by spaces."}
{"name": "337_B. Routine Problem", "description": "Input\n\nA single line contains four space-separated integers a, b, c, d (1 <= a, b, c, d <= 1000).", "grammar": {"productions": ["<S>->a <s> b <s> c <s> d"], "constraints": ["1<=a,b,c,d<=1000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines four variables, 'a', 'b', 'c', and 'd', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> c <s> d', representing the input format where 'a', 'b', 'c', and 'd' are four integers separated by spaces. None of these variables serve as counters, so they are not enclosed in brackets."}
{"name": "339_B. Xenia and Ringroad", "description": "Xenia lives in a city that has n houses built along the main ringroad. The ringroad houses are numbered 1 through n in the clockwise order. The ringroad traffic is one way and also is clockwise.\n\nXenia has recently moved into the ringroad house number 1. As a result, she's got m things to do. In order to complete the i-th task, she needs to be in the house number ai and complete all tasks with numbers less than i. Initially, Xenia is in the house number 1, find the minimum time she needs to complete all her tasks if moving from a house to a neighboring one along the ringroad takes one unit of time.\n\nInput\n\nThe first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5). The second line contains m integers a1, a2, ..., am (1 ≤ ai ≤ n). Note that Xenia can have multiple consecutive tasks in one house.", "grammar": {"productions": ["<S>->n <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=10^5", "1<=m<=10^5", "1<=a_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'm', where 'm' serves as a counter variable for the sequence of tasks, hence it is denoted as [m]. The grammar is initiated with '<S>->n <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where 'a_i' represents each task number separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of task numbers following the count [m]."}
{"name": "344_A. Magnets", "description": "Mad scientist Mike entertains himself by arranging rows of dominoes. He doesn't need dominoes, though: he uses rectangular magnets instead. Each magnet has two poles, positive (a \"plus\") and negative (a \"minus\"). If two magnets are put together at a close distance, then the like poles will repel each other and the opposite poles will attract each other.\n\nMike starts by laying one magnet horizontally on the table. During each following step Mike adds one more magnet horizontally to the right end of the row. Depending on how Mike puts the magnet on the table, it is either attracted to the previous one (forming a group of multiple magnets linked together) or repelled by it (then Mike lays this magnet at some distance to the right from the previous one). We assume that a sole magnet not linked to others forms a group of its own.\n\n<image>\n\nMike arranged multiple magnets in a row. Determine the number of groups that the magnets formed.\n\nInput\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 100000) — the number of magnets. Then n lines follow. The i-th line (1 ≤ i ≤ n) contains either characters \"01\", if Mike put the i-th magnet in the \"plus-minus\" position, or characters \"10\", if Mike put the magnet in the \"minus-plus\" position.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> 01|10", "<T_1>->01|10"], "constraints": ["1<=n<=100000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the number of magnets, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates each magnet's configuration ('01' or '10') followed by a newline <n>. The rules '<T_i>-><T_i-1> <n> 01|10' and '<T_1>->01|10' ensure that each magnet's configuration is listed in sequence, decrementing the counter until it reaches 1."}
{"name": "348_A. Mafia", "description": "Input\n\nThe first line contains integer n (3 <= n <= 105). The second line contains n space-separated integers a1, a2, ..., an (1 <= ai <= 109) --- the i-th number in the list is the number of rounds the i-th person wants to play.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["3<=n<=105", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'n' is used as a counter variable for the array elements, thus it is denoted as [n] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "349_A. Cinema Line", "description": "The new \"Die Hard\" movie has just been released! There are n people at the cinema box office standing in a huge line. Each of them has a single 100, 50 or 25 ruble bill. A \"Die Hard\" ticket costs 25 rubles. Can the booking clerk sell a ticket to each person and give the change if he initially has no money and sells the tickets strictly in the order people follow in the line?\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 10^5) — the number of people in the line. The next line contains n integers, each of them equals 25, 50 or 100 — the values of the bills the people have. The numbers are given in the order from the beginning of the line (at the box office) to the end of the line.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> 25|50|100", "<T_1>->25|50|100"], "constraints": ["1<=n<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of people in the line, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each person's bill is represented by the values 25, 50, or 100, separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> 25|50|100' and '<T_1>->25|50|100' to systematically parse the sequence of bills following the count [n]."}
{"name": "34_B. Sale", "description": "Once Bob got to a sale of old TV sets. There were n TV sets at that sale. TV set with index i costs ai bellars. Some TV sets have a negative price — their owners are ready to pay Bob if he buys their useless apparatus. Bob can «buy» any TV sets he wants. Though he's very strong, Bob can carry at most m TV sets, and he has no desire to go to the sale for the second time. Please, help Bob find out the maximum sum of money that he can earn.\n\nInput\n\nThe first line contains two space-separated integers n and m (1 ≤ m ≤ n ≤ 100) — amount of TV sets at the sale, and amount of TV sets that Bob can carry. The following line contains n space-separated integers ai ( - 1000 ≤ ai ≤ 1000) — prices of the TV sets.", "grammar": {"productions": ["<S>->[n] <s> m <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=m<=n<=100", "-1000<=a_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'm', where 'n' serves as a counter variable for the TV sets, hence it is enclosed in [n]. The variable 'm' is not a counter, so it is represented as 'm'. The grammar is initiated with '<S>->[n] <s> m <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The <T_i> non-terminal generates the sequence of prices 'a_i' separated by spaces <s>, decrementing until it reaches <T_1>, which produces 'a_1'. This structure accurately reflects the input format where 'n' TV set prices are listed after the initial line containing 'n' and 'm'."}
{"name": "354_B. Game with Strings", "description": "Input\n\nThe first line contains a single number n (1 <= n <= 20).\n\nNext n lines contain n lowercase English letters each --- table T.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{n}", "<T_1>->[a-z]{n}"], "constraints": ["1<=n<=20"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of lines, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n], representing each line of 'n' lowercase English letters. The regular expression [a-z]{n} is used to specify each line, ensuring it contains exactly 'n' lowercase letters. The grammar constructs are '<T_i>-><T_i-1> <n> [a-z]{n}' and '<T_1>->[a-z]{n}' to systematically parse each line following the count [n]."}
{"name": "358_B. Dima and Text Messages", "description": "Input\n\nThe first line contains integer n (1 <= n <= 105) --- the number of words in Dima's message. Next n lines contain non-empty words, one word per line. The words only consist of small English letters. The total length of all words doesn't exceed 105. \n\nThe last line contains non-empty text message that Inna has got. The number of characters in the text message doesn't exceed 105. A text message can contain only small English letters, digits and signs more and less.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> [0-9a-z<>]{1,10^5}", "<T_i>-><T_i-1> <n> [a-z]{1,10^5}", "<T_1>->[a-z]{1,10^5}"], "constraints": ["1<=n<=100000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for the number of words, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> [0-9a-z<>]{1,10^5}', where <T_n> is a counter non-terminal for [n], generating each word followed by a newline. Each word consists of small English letters, represented by the regex [a-z]{1,10^5}. The final line is a text message that can include small English letters, digits, and specific signs, represented by [0-9a-z<>]{1,10^5}."}
{"name": "35_E. Parade", "description": "Input\n\nThe first input line contains integer n (1 <= n <= 100000). Then follow n lines, each containing three integers hi, li, ri (1 <= hi <= 109, - 109 <= li < ri <= 109).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> h_i <s> l_i <s> r_i", "<T_1>->h_1 <s> l_1 <s> r_1"], "constraints": ["1<=n<=100000", "1<=h_i<=10^9", "-10^9<=l_i<r_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of lines, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line consists of three integers 'h_i', 'l_i', and 'r_i' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> h_i <s> l_i <s> r_i' and '<T_1>->h_1 <s> l_1 <s> r_1' to systematically parse the sequence of lines following the count [n]."}
{"name": "363_B. Fence", "description": "There is a fence in front of Polycarpus's home. The fence consists of n planks of the same width which go one after another from left to right. The height of the i-th plank is hi meters, distinct planks can have distinct heights.\n\n<image> Fence for n = 7 and h = [1, 2, 6, 1, 1, 7, 1]\n\nPolycarpus has bought a posh piano and is thinking about how to get it into the house. In order to carry out his plan, he needs to take exactly k consecutive planks from the fence. Higher planks are harder to tear off the fence, so Polycarpus wants to find such k consecutive planks that the sum of their heights is minimal possible.\n\nWrite the program that finds the indexes of k consecutive planks with minimal total height. Pay attention, the fence is not around Polycarpus's home, it is in front of home (in other words, the fence isn't cyclic).\n\nInput\n\nThe first line of the input contains integers n and k (1 ≤ n ≤ 1.5·10^5, 1 ≤ k ≤ n) — the number of planks in the fence and the width of the hole for the piano. The second line contains the sequence of integers h1, h2, ..., hn (1 ≤ hi ≤ 100), where hi is the height of the i-th plank of the fence.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=n<=1.5*10^5", "1<=k<=n", "1<=h_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'k', where 'n' serves as a counter variable for the sequence of planks, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'h_i' represents each plank's height separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> h_i' and '<T_1>->h_1' to systematically parse the sequence of plank heights following the count [n]."}
{"name": "366_D. Dima and Trap Graph", "description": "Input\n\nThe first line of the input contains two integers n and m (2 <= n <= 103, 0 <= m <= 3·103). Then follow m lines describing the edges. Each line contains four integers ak, bk, lk and rk (1 <= ak, bk <= n, 1 <= lk <= rk <= 106). The numbers mean that in the trap graph the k-th edge connects nodes ak and bk, this edge corresponds to the range of integers from lk to rk.\n\nNote that the given graph can have loops and multiple edges.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> ak <s> bk <s> lk <s> rk", "<T_1>->ak <s> bk <s> lk <s> rk"], "constraints": ["2<=n<=103", "0<=m<=3*103", "1<=ak,bk<=n", "1<=lk<=rk", "1<=rk<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'm', both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each line contains four integers 'ak', 'bk', 'lk', and 'rk' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> ak <s> bk <s> lk <s> rk' and '<T_1>->ak <s> bk <s> lk <s> rk' to systematically parse each line of edge descriptions following the count [m]."}
{"name": "371_B. Fox Dividing Cheese", "description": "Input\n\nThe first line contains two space-separated integers a and b (1 <= a, b <= 109).", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=10^9", "1<=b<=10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space."}
{"name": "372_A. Counting Kangaroos is Fun", "description": "Input\n\nThe first line contains a single integer --- n (1 <= n <= 5·105). Each of the next n lines contains an integer si --- the size of the i-th kangaroo (1 <= si <= 105).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> si", "<T_1>->si"], "constraints": ["1<=n<=5*10^5", "1<=si<=10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the number of kangaroo sizes, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates 'n' lines of kangaroo sizes 'si'. Each line is separated by a newline token <n>, and the counter non-terminal <T_i> decrements until it reaches <T_1>, which outputs 'si' for the first kangaroo size. The constraints ensure 'n' and each 'si' are within specified limits."}
{"name": "378_A. Playing with Dice", "description": "Two players are playing a game. First each of them writes an integer from 1 to 6, and then a dice is thrown. The player whose written number got closer to the number on the dice wins. If both payers have the same difference, it's a draw.\n\nThe first player wrote number a, the second player wrote number b. How many ways to throw a dice are there, at which the first player wins, or there is a draw, or the second player wins?\n\nInput\n\nThe single line contains two integers a and b (1 ≤ a, b ≤ 6) — the numbers written on the paper by the first and second player, correspondingly.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=6", "1<=b<=6"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space. Since neither 'a' nor 'b' serve as counter variables, they are not enclosed in brackets."}
{"name": "37_A. Towers", "description": "Little Vasya has received a young builder’s kit. The kit consists of several wooden bars, the lengths of all of them are known. The bars can be put one on the top of the other if their lengths are the same.\n\nVasya wants to construct the minimal number of towers from the bars. Help Vasya to use the bars in the best way possible.\n\nInput\n\nThe first line contains an integer N (1 ≤ N ≤ 1000) — the number of bars at Vasya’s disposal. The second line contains N space-separated integers li — the lengths of the bars. All the lengths are natural numbers not exceeding 1000.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> l_i", "<T_1>->l_1"], "constraints": ["1<=N<=1000", "1<=l_i<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the number of bars, hence it is enclosed in [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates 'N' space-separated integers 'l_i'. The counter non-terminal <T_i> is defined to decrement until it reaches 1, producing the sequence of bar lengths. The grammar rules '<T_i>-><T_i-1> <s> l_i' and '<T_1>->l_1' ensure the correct generation of the input format with 'N' integers separated by spaces."}
{"name": "381_A. Sereja and Dima", "description": "Input\n\nThe first line contains integer n (1 <= n <= 1000) --- the number of cards on the table. The second line contains space-separated numbers on the cards from left to right. The numbers on the cards are distinct integers from 1 to 1000.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_i"], "constraints": ["1<=n<=1000", "1<=A_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. Here, 'n' is used as a counter variable for the number of cards, thus it is denoted as [n] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'A_i' represents each card number separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_i' to systematically parse the sequence of card numbers following the count [n]."}
{"name": "383_C. Propagating tree", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 200000). The second line contains n integers a1, a2, ..., an (1 <= ai <= 1000). Each of the next n--1 lines contains two integers vi and ui (1 <= vi, ui <= n), meaning that there is an edge between nodes vi and ui.\n\nEach of the next m lines contains a query in the format described above. It is guaranteed that the following constraints hold for all queries: 1 <= x <= n, 1 <= val <= 1000.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <E_n-1> <n> <Q_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<E_i>-><E_i-1> <n> v_i <s> u_i", "<E_1>->v_1 <s> u_1", "<Q_i>-><Q_i-1> <n> x_i <s> val_i", "<Q_1>->x_1 <s> val_1"], "constraints": ["1<=n,m<=200000", "1<=a_i<=1000", "1<=v_i,u_i<=n", "1<=x_i<=n", "1<=val_i<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is structured as '<S>->[n] <s> [m] <n> <T_n> <n> <E_n-1> <n> <Q_m>', where <T_n> handles the sequence of integers a_i, <E_n-1> handles the edges between nodes, and <Q_m> processes the queries. Each counter non-terminal (<T_i>, <E_i>, <Q_i>) decrements until it reaches 1, ensuring the correct number of repetitions for sequences and queries. The constraints are derived from the input specifications, ensuring all variables adhere to their defined ranges."}
{"name": "385_A. Bear and Raspberry", "description": "Input\n\nThe first line contains two space-separated integers, n and c (2 <= n <= 100, 0 <= c <= 100), --- the number of days and the number of kilos of raspberry that the bear should give for borrowing the barrel.\n\nThe second line contains n space-separated integers x1, x2, ..., xn (0 <= xi <= 100), the price of a honey barrel on day i.", "grammar": {"productions": ["<S>->[n] <s> c <n> <T_n>", "<T_i>-><T_i-1> <s> x", "<T_1>->x"], "constraints": ["2<=n<=100", "0<=c<=100", "0<=x<=100"]}, "reason": "The grammar starts with the start non-terminal <S>. It includes two variables, 'n' and 'c', where 'n' serves as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> c <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each 'x' represents the price of a honey barrel on day 'i', separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> x' and '<T_1>->x' to systematically parse the sequence of prices following the count [n]."}
{"name": "387_C. George and Number", "description": "Input\n\nThe first line of the input contains a single integer p (1 <= p < 10100000). It is guaranteed that number p doesn't contain any leading zeroes.", "grammar": {"productions": ["<S>->[1-9]{1}[0-9]{0,10100000}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a single integer 'p' that does not have leading zeroes. To represent this, the grammar uses a regular expression that starts with a digit from 1 to 9, followed by any number of digits from 0 to 9, up to a maximum length of 10100000. This is captured by the regex [1-9]{1}[0-9]{0,10100000}, ensuring no leading zeroes and the correct length constraints."}
{"name": "388_D. Fox and Perfect Sets", "description": "Input\n\nThe first line contains an integer k (0 <= k <= 109).", "grammar": {"productions": ["<S>->k"], "constraints": ["0<=k<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'k' is not a counter variable, so it is represented simply as 'k' without brackets. The grammar is constructed as '<S>->k' to reflect the input format where only the integer 'k' is provided."}
{"name": "38_C. Blinds", "description": "Input\n\nThe first output line contains two space-separated integers n and l (1 <= n, l <= 100). They are the number of stripes in the warehouse and the minimal acceptable length of a blind stripe in bourlemeters. The second line contains space-separated n integers ai. They are the lengths of initial stripes in bourlemeters (1 <= ai <= 100).", "grammar": {"productions": ["<S>->[n] <s> [l] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n,l<=100", "1<=a_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and l, both serving as counter variables, hence they are enclosed in brackets as [n] and [l]. The grammar is initiated with '<S>->[n] <s> [l] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "392_D. Three Arrays", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 105). The second line contains n space-separated integers a1, a2, ..., an --- array a. The third line contains the description of array b in the same format. The fourth line contains the description of array c in the same format. The following constraint holds: 1 <= ai, bi, ci <= 109.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["1<=n<=10^5", "1<=a_i,b_i,c_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the arrays, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n]. The non-terminal <T_i> generates the sequence of array elements 'a_i', 'b_i', and 'c_i' separated by spaces <s>. The grammar constructs are '<T_i>-><T_i-1> <s> a_i <s> b_i <s> c_i' and '<T_1>->a_1 <s> b_1 <s> c_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "397_A. On Segment's Own Points", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100). The (i + 1)-th line contains integers li and ri (0 <= li < ri <= 100) --- the endpoints of the corresponding segment for the i-th student.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> li <s> ri", "<T_1>->li <s> ri"], "constraints": ["1<=n<=100", "0<=li<ri<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of students, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains 'li' and 'ri' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> li <s> ri' and '<T_1>->li <s> ri' to systematically parse the sequence of segments for each student following the count [n]."}
{"name": "399_C. Cards", "description": "Input\n\nThe first line contains two space-separated integers a and b (0 <= a, b <= 105; a + b >= 1) --- the number of \"o\" cards and the number of \"x\" cards.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["0<=a,b<=10^5"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space. Since neither 'a' nor 'b' serve as counter variables, they are not enclosed in brackets."}
{"name": "39_E. What Has Dirichlet Got to Do with That?", "description": "Input\n\nThe only input line has three integers a, b, n (1 <= a <= 10000, 1 <= b <= 30, 2 <= n <= 109) --- the initial number of the boxes, the number of the items and the number which constrains the number of ways, respectively. Guaranteed that the initial number of ways is strictly less than n.", "grammar": {"productions": ["<S>->a <s> b <s> n"], "constraints": ["1<=a<=10000", "1<=b<=30", "2<=n<=10^9"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. It defines three variables, 'a', 'b', and 'n', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> n', representing the input format where 'a', 'b', and 'n' are three integers separated by spaces. None of these variables serve as counter variables, hence they are not enclosed in brackets."}
{"name": "3_A. Shortest path of the king", "description": "The king is left alone on the chessboard. In spite of this loneliness, he doesn't lose heart, because he has business of national importance. For example, he has to pay an official visit to square t. As the king is not in habit of wasting his time, he wants to get from his current position s to square t in the least number of moves. Help him to do this.\n\n<image>\n\nIn one move the king can get to the square that has a common side or a common vertex with the square the king is currently in (generally there are 8 different squares he can move to).\n\nInput\n\nThe first line contains the chessboard coordinates of square s, the second line — of square t.\n\nChessboard coordinates consist of two characters, the first one is a lowercase Latin letter (from a to h), the second one is a digit from 1 to 8.", "grammar": {"productions": ["<S>->[a-h]{1} [1-8]{1} <n> [a-h]{1} [1-8]{1}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of two chessboard coordinates, each composed of a lowercase letter from 'a' to 'h' followed by a digit from '1' to '8'. Since these are fixed patterns without any counter variables, they are directly represented using regular expressions. The first coordinate is followed by a newline <n>, then the second coordinate. Thus, the grammar is structured as '<S>->[a-h]{1} [1-8]{1} <n> [a-h]{1} [1-8]{1}', where each part of the coordinate is defined by its respective regex pattern."}
{"name": "400_D. Dima and Bacteria", "description": "Input\n\nThe first line contains three integers n, m, k (1 <= n <= 105; 0 <= m <= 105; 1 <= k <= 500). The next line contains k integers c1, c2, ..., ck (1 <= ci <= n). Each of the next m lines contains three integers ui, vi, xi (1 <= ui, vi <= 105; 0 <= xi <= 104). It is guaranteed that <image>.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [k] <n> <T_k> <n> <L_m>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1", "<L_i>-><L_i-1> <n> u_i <s> v_i <s> x_i", "<L_1>->u_1 <s> v_1 <s> x_1"], "constraints": ["1<=n<=10^5", "0<=m<=10^5", "1<=k<=500", "1<=c_i<=n", "1<=u_i,v_i<=10^5", "0<=x_i<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, n, m, and k, all serving as counter variables, hence they are enclosed in brackets as [n], [m], and [k]. The grammar is initiated with '<S>->[n] <s> [m] <s> [k] <n> <T_k> <n> <L_m>'. Here, <T_k> is a counter non-terminal for the sequence of c_i values, and <L_m> is a counter non-terminal for the sequence of lines containing u_i, v_i, and x_i. The grammar constructs are designed to parse the input format systematically, with each counter non-terminal decrementing until it reaches 1, ensuring all specified sequences are correctly represented."}
{"name": "402_A. Nuts", "description": "Input\n\nThe first line contains four space-separated integers k, a, b, v (2 <= k <= 1000; 1 <= a, b, v <= 1000) --- the maximum number of sections in the box, the number of nuts, the number of divisors and the capacity of each section of the box.", "grammar": {"productions": ["<S>->k <s> a <s> b <s> v"], "constraints": ["2<=k<=1000", "1<=a<=1000", "1<=b<=1000", "1<=v<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes four variables: k, a, b, and v, none of which serve as counter variables in this context. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->k <s> a <s> b <s> v', representing the input format where four integers are separated by spaces."}
{"name": "404_B. Marathon", "description": "Input\n\nThe first line contains two space-separated real numbers a and d (1 <= a, d <= 105), given with precision till 4 decimal digits after the decimal point. Number a denotes the length of the square's side that describes the stadium. Number d shows that after each d meters Valera gets an extra drink.\n\nThe second line contains integer n (1 <= n <= 105) showing that Valera needs an extra drink n times.", "grammar": {"productions": ["<S>->a <s> d <n> n"], "constraints": ["1<=a<=10^5", "1<=d<=10^5", "1<=n<=10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: 'a', 'd', and 'n'. Among these, 'n' serves as a counter variable for the number of times Valera needs an extra drink, hence it is enclosed in brackets as [n]. The variables 'a' and 'd' are real numbers and do not serve as counters, so they are not enclosed in brackets. The grammar is structured as '<S>->a <s> d <n> [n]', where <s> represents a space and <n> represents a newline. This format captures the input specification where 'a' and 'd' are given first, followed by 'n' on the next line."}
{"name": "40_B. Repaintings", "description": "Input\n\nThe first line contains integers n and m (1 <= n, m <= 5000). The second line contains integer x (1 <= x <= 109).", "grammar": {"productions": ["<S>->n <s> m <n> x"], "constraints": ["1<=n,m<=5000", "1<=x<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, m, and x. Since n and m are not used as counter variables in this context, they are represented simply as 'n' and 'm'. The variable x is also not a counter, so it is represented as 'x'. The input format is a line with n and m separated by a space, followed by a new line and then x. Thus, the grammar is constructed as '<S>->n <s> m <n> x' to reflect this input structure."}
{"name": "416_D. Population Size", "description": "Input\n\nThe first line of the input contains integer n (1 <= n <= 2·105) --- the number of elements in the sequence. The second line contains integer values a1, a2, ..., an separated by a space (1 <= ai <= 109 or ai = - 1).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i|-1", "<T_1>->a_1|-1"], "constraints": ["1<=n<=200000", "1<=ai<=1000000000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence elements, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each element 'a_i' or '-1' is separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i|-1', and '<T_1>->a_1|-1' to systematically parse the sequence of elements following the count [n]."}
{"name": "418_A. Football", "description": "Input\n\nThe first line contains two integers --- n and k (1 <= n, k <= 1000).", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n,k<=1000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and k, but neither serves as a counter variable in this context, so they are not enclosed in brackets. The grammar is simply structured as '<S>->n <s> k', representing the input format where 'n' and 'k' are two integers separated by a space."}
{"name": "41_A. Translation", "description": "The translation from the Berland language into the Birland language is not an easy task. Those languages are very similar: a berlandish word differs from a birlandish word with the same meaning a little: it is spelled (and pronounced) reversely. For example, a Berlandish word code corresponds to a Birlandish word edoc. However, it's easy to make a mistake during the «translation». Vasya translated word s from Berlandish into Birlandish as t. Help him: find out if he translated the word correctly.\n\nInput\n\nThe first line contains word s, the second line contains word t. The words consist of lowercase Latin letters. The input data do not consist unnecessary spaces. The words are not empty and their lengths do not exceed 100 symbols.", "grammar": {"productions": ["<S>->[a-z]{1,100} <n> [a-z]{1,100}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 's' and 't', which are both sequences of lowercase Latin letters. Since these variables are not counters but rather strings of characters, they are represented using regular expressions [a-z]{1,100}, specifying their length range from 1 to 100 characters. The grammar is structured as '<S>->[a-z]{1,100} <n> [a-z]{1,100}', reflecting the input format where two words are given on separate lines without any additional spaces."}
{"name": "41_B. Martian Dollar", "description": "Input\n\nThe first line contains two integers n and b (1 <= n, b <= 2000) --- the number of days and the initial number of money in bourles. The next line contains n integers ai (1 <= ai <= 2000) --- the prices of Martian dollars.", "grammar": {"productions": ["<S>->[n] <s> b <n> <T_n>", "<T_i>->a_i <s> <T_i-1>", "<T_1>->a_1"], "constraints": ["1<=n,b<=2000", "1<=a_i<=2000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'b', where 'n' serves as a counter variable for the sequence of prices, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> b <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each price separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>->a_i <s> <T_i-1>' and '<T_1>->a_1' to systematically parse the sequence of prices following the count [n]."}
{"name": "421_D. Bug in Code", "description": "Input\n\nThe first line contains integers n and p (3 <= n <= 3·105; 0 <= p <= n) --- the number of coders in the F company and the minimum number of agreed people.\n\nEach of the next n lines contains two integers xi, yi (1 <= xi, yi <= n) --- the numbers of coders named by the i-th coder. It is guaranteed that xi != i, yi != i, xi != yi.", "grammar": {"productions": ["<S>->[n] <s> [p] <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> yi", "<T_1>->xi <s> yi"], "constraints": ["3<=n<=3*10^5", "0<=p<=n", "1<=xi<=n", "1<=yi<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'p', where 'n' serves as a counter variable for the number of coders, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> [p] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two integers 'xi' and 'yi' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> xi <s> yi' and '<T_1>->xi <s> yi' to systematically parse the sequence of coder pairs following the count [n]."}
{"name": "427_E. Police Patrol", "description": "Input\n\nThe first line of the input will have two integers n (1 <= n <= 106) and m (1 <= m <= 106) separated by spaces. The next line will contain n integers separated by spaces. The ith integer is the position of the ith criminal on the x-axis. Absolute value of positions will not exceed 109. If a criminal has position x, he/she is located in the point (x, 0) of the plane. \n\nThe positions of the criminals will be given in non-decreasing order. Note, that there can be more than one criminal standing at some point of the plane.\n\nNote: since the size of the input/output could be very large, don't use slow input/output techniques in your language. For example, do not use input/output streams (cin, cout) in C++.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <s> X_i", "<T_1>->X_1"], "constraints": ["1<=n<=10^6", "1<=m<=10^6", "-10^9<=X_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'X_i' represents each integer in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> X_i' and '<T_1>->X_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "42_A. Guilty — to the kitchen!", "description": "Input\n\nThe first line of the input contains two space-separated integers n and V (1 <= n <= 20, 1 <= V <= 10000). The next line contains n space-separated integers ai (1 <= ai <= 100). Finally, the last line contains n space-separated integers bi (0 <= bi <= 100).", "grammar": {"productions": ["<S>->[n] <s> V <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=20", "1<=V<=10000", "1<=a_i<=100", "0<=b_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and V, where n serves as a counter variable for the sequences of integers a_i and b_i, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> V <n> <T_n> <n> <L_n>'. The non-terminal <T_i> is a counter-driven rule for [n], representing the sequence of integers a_i separated by spaces <s>, and similarly, <L_i> represents the sequence of integers b_i. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i', '<T_1>->a_1', '<L_i>-><L_i-1> <s> b_i', and '<L_1>->b_1' to systematically parse the sequences of a_i and b_i following the count [n]."}
{"name": "430_B. Balls Game", "description": "Input\n\nThe first line of input contains three integers: n (1 <= n <= 100), k (1 <= k <= 100) and x (1 <= x <= k). The next line contains n space-separated integers c1, c2, ..., cn (1 <= ci <= k). Number ci means that the i-th ball in the row has color ci.\n\nIt is guaranteed that the initial row of balls will never contain three or more contiguous balls of the same color.", "grammar": {"productions": ["<S>->[n] <s> k <s> x <n> <T_n>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1"], "constraints": ["1<=n<=100", "1<=k<=100", "1<=x<=k", "1<=c_i<=k"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: n, k, and x, where 'n' serves as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <s> x <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'c_i' represents each integer in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> c_i' and '<T_1>->c_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "430_E. Guess the Tree", "description": "Input\n\nThe first line of the input contains integer n (1 <= n <= 24). Next line contains n positive integers: the i-th number represents ci (1 <= ci <= n).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> ci", "<T_1>->ci"], "constraints": ["1<=n<=24", "1<=ci<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of integers 'ci' separated by spaces. The counter non-terminal <T_i> decrements until it reaches <T_1>, which produces the first integer 'ci'. This structure ensures the input format where 'n' is followed by 'n' integers, each separated by a space."}
{"name": "431_C. k-Tree", "description": "Input\n\nA single line contains three space-separated integers: n, k and d (1 <= n, k <= 100; 1 <= d <= k).", "grammar": {"productions": ["<S>->n <s> k <s> d"], "constraints": ["1<=n<=100", "1<=k<=100", "1<=d<=k"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, n, k, and d, none of which serve as counter variables in this context. Therefore, they are represented simply as 'n', 'k', and 'd' without brackets. The variables are separated by space symbols <s>, leading to the grammar structure '<S>->n <s> k <s> d'."}
{"name": "433_A. Kitahara Haruki's Gift", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 100) --- the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> 100|200", "<T_1>->100|200"], "constraints": ["1<=n<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the number of apples, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The weights of the apples are either 100 or 200, represented as '100|200' in the grammar. The counter non-terminal <T_i> is defined to handle the sequence of weights separated by spaces, decrementing until it reaches <T_1>, which directly outputs the first weight. Thus, the grammar accurately reflects the input format where the first line specifies the count of apples and the second line lists their weights."}
{"name": "433_B. Kuriyama Mirai's Stones", "description": "Kuriyama Mirai has killed many monsters and got many (namely n) stones. She numbers the stones from 1 to n. The cost of the i-th stone is vi. Kuriyama Mirai wants to know something about these stones so she will ask you two kinds of questions:\n\n  1. She will tell you two numbers, l and r (1 ≤ l ≤ r ≤ n), and you should tell her <image>. \n  2. Let ui be the cost of the i-th cheapest stone (the cost that will be on the i-th place if we arrange all the stone costs in non-decreasing order). This time she will tell you two numbers, l and r (1 ≤ l ≤ r ≤ n), and you should tell her <image>. \n\n\n\nFor every question you should give the correct answer, or Kuriyama Mirai will say \"fuyukai desu\" and then become unhappy.\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 10^5). The second line contains n integers: v1, v2, ..., vn (1 ≤ vi ≤ 10^9) — costs of the stones. \n\nThe third line contains an integer m (1 ≤ m ≤ 10^5) — the number of Kuriyama Mirai's questions. Then follow m lines, each line contains three integers type, l and r (1 ≤ l ≤ r ≤ n; 1 ≤ type ≤ 2), describing a question. If type equal to 1, then you should output the answer for the first question, else you should output the answer for the second one.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> v_i", "<T_1>->v_1 <n> m <n> <L_m>", "<L_i>-><L_i-1> <n> type <s> l <s> r", "<L_1>->type <s> l <s> r"], "constraints": ["1<=n<=10^5", "1<=v_i<=10^9", "1<=l<=r", "l<=r<=n", "1<=type<=2"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of stone costs, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of stone costs is represented by '<T_i>-><T_i-1> <s> v_i' and '<T_1>->v_1 <n> m <n> <L_m>'. Here, 'm' is another counter variable for the number of questions, hence it is enclosed in brackets as [m]. The questions are represented by '<L_i>-><L_i-1> <n> type <s> l <s> r' and '<L_1>->type <s> l <s> r', where 'type', 'l', and 'r' are variables that do not serve as counters and thus are not enclosed in brackets. The constraints reflect the ranges and conditions specified in the problem statement."}
{"name": "443_B. Kolya and Tandem Repeat", "description": "Input\n\nThe first line contains s (1 <= |s| <= 200). This string contains only small English letters. The second line contains number k (1 <= k <= 200) --- the number of the added characters.", "grammar": {"productions": ["<S>->[a-z]{1,200} <n> k"], "constraints": ["1<=s<=200", "1<=k<=200"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, s, which is a string of lowercase English letters with a length between 1 and 200, represented by the regular expression [a-z]{1,200}. The variable k is not a counter variable, so it is written as 'k' without brackets. The grammar is structured as '<S>->[a-z]{1,200} <n> k' to reflect the input format where the string s is followed by the integer k on a new line."}
{"name": "448_A. Rewards", "description": "Bizon the Champion is called the Champion for a reason. \n\nBizon the Champion has recently got a present — a new glass cupboard with n shelves and he decided to put all his presents there. All the presents can be divided into two types: medals and cups. Bizon the Champion has a1 first prize cups, a2 second prize cups and a3 third prize cups. Besides, he has b1 first prize medals, b2 second prize medals and b3 third prize medals. \n\nNaturally, the rewards in the cupboard must look good, that's why Bizon the Champion decided to follow the rules:\n\n  * any shelf cannot contain both cups and medals at the same time; \n  * no shelf can contain more than five cups; \n  * no shelf can have more than ten medals. \n\n\n\nHelp Bizon the Champion find out if we can put all the rewards so that all the conditions are fulfilled.\n\nInput\n\nThe first line contains integers a1, a2 and a3 (0 ≤ a1, a2, a3 ≤ 100). The second line contains integers b1, b2 and b3 (0 ≤ b1, b2, b3 ≤ 100). The third line contains integer n (1 ≤ n ≤ 100).\n\nThe numbers in the lines are separated by single spaces.", "grammar": {"productions": ["<S>->a1 <s> a2 <s> a3 <n> b1 <s> b2 <s> b3 <n> n"], "constraints": ["0<=a1<=100", "0<=a2<=100", "0<=a3<=100", "0<=b1<=100", "0<=b2<=100", "0<=b3<=100", "1<=n<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes variables a1, a2, a3, b1, b2, b3, and n, but none of these variables serve as counters for generating sequences or repetitions. Therefore, they are not enclosed in brackets. The input format is structured to first list the three cup counts (a1, a2, a3) separated by spaces, followed by the three medal counts (b1, b2, b3) also separated by spaces, and finally the integer n on the third line. The grammar is thus constructed as '<S>->a1 <s> a2 <s> a3 <n> b1 <s> b2 <s> b3 <n> n' to accurately reflect this input structure."}
{"name": "448_B. Suffix Structures", "description": "Input\n\nThe first line contains a non-empty word s. The second line contains a non-empty word t. Words s and t are different. Each word consists only of lowercase English letters. Each word contains at most 100 letters.", "grammar": {"productions": ["<S>->[a-z]{1,100} <n> [a-z]{1,100}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 's' and 't', which are non-empty words consisting of lowercase English letters. Since these variables are not used as counters but are instead directly represented by their character constraints, they are replaced with the regular expression [a-z]{1,100}, indicating a sequence of 1 to 100 lowercase letters. The grammar is structured as '<S>->[a-z]{1,100} <n> [a-z]{1,100}', where <n> denotes a newline separating the two words."}
{"name": "449_D. Jzzhu and Numbers", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 106). The second line contains n integers a1, a2, ..., an (0 <= ai <= 106).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^6", "0<=a_i<=10^6"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of integers is represented by '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1', ensuring each integer is separated by a space. This structure accurately reflects the input format where 'n' is followed by 'n' integers separated by spaces."}
{"name": "450_B. Jzzhu and Sequences", "description": "Jzzhu has invented a kind of sequences, they meet the following property:\n\n<image>\n\nYou are given x and y, please calculate fn modulo 1000000007 (10^9 + 7).\n\nInput\n\nThe first line contains two integers x and y (|x|, |y| ≤ 10^9). The second line contains a single integer n (1 ≤ n ≤ 2·109).", "grammar": {"productions": ["<S>->x <s> y <n> n"], "constraints": ["-10^9<=x,y<=10^9", "1<=n<=2*10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: x, y, and n. Since none of these variables serve as counters for generating sequences or repetitions, they are not enclosed in brackets. The input format specifies that x and y are given first, separated by a space, followed by n on the next line. Therefore, the grammar is structured as '<S>->x <s> y <n> n', where <s> represents a space and <n> represents a newline."}
{"name": "450_C. Jzzhu and Chocolate", "description": "Input\n\nA single line contains three integers n, m, k (1 <= n, m <= 109; 1 <= k <= 2·109).", "grammar": {"productions": ["<S>->n <s> m <s> k"], "constraints": ["1<=n<=10^9", "1<=m<=10^9", "1<=k<=2*10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, n, m, and k, but none of them serve as counter variables in this context. Therefore, they are represented simply as 'n', 'm', and 'k' without enclosing brackets. The grammar is structured to reflect the input format where these three integers are separated by spaces, leading to the production rule '<S>->n <s> m <s> k'."}
{"name": "451_D. Count Good Substrings", "description": "Input\n\nThe first line of the input contains a single string of length n (1 <= n <= 105). Each character of the string will be either 'a' or 'b'.", "grammar": {"productions": ["<S>->[ab]{1,10^5}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a single string of length n, where each character is either 'a' or 'b'. Since the length n is specified and the characters are restricted to 'a' or 'b', the grammar is represented using a regular expression [ab]{1,10^5} to denote a string of length between 1 and 10^5 composed of 'a' or 'b' characters. Thus, the grammar is constructed as '<S>->[ab]{1,10^5}' to reflect this input format."}
{"name": "456_A. Laptops", "description": "One day Dima and Alex had an argument about the price and quality of laptops. Dima thinks that the more expensive a laptop is, the better it is. Alex disagrees. Alex thinks that there are two laptops, such that the price of the first laptop is less (strictly smaller) than the price of the second laptop but the quality of the first laptop is higher (strictly greater) than the quality of the second laptop.\n\nPlease, check the guess of Alex. You are given descriptions of n laptops. Determine whether two described above laptops exist.\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 10^5) — the number of laptops.\n\nNext n lines contain two integers each, ai and bi (1 ≤ ai, bi ≤ n), where ai is the price of the i-th laptop, and bi is the number that represents the quality of the i-th laptop (the larger the number is, the higher is the quality).\n\nAll ai are distinct. All bi are distinct.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_i <s> b_i"], "constraints": ["1<=n<=10^5", "1<=a_i,b_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter for the number of laptops, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two integers 'a_i' and 'b_i' separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <n> a_i <s> b_i', and '<T_1>->a_i <s> b_i' to systematically parse the sequence of laptop descriptions following the count [n]."}
{"name": "456_B. Fedya and Maths", "description": "Fedya studies in a gymnasium. Fedya's maths hometask is to calculate the following expression:\n\n(1n + 2n + 3n + 4n) mod 5\n\nfor given value of n. Fedya managed to complete the task. Can you? Note that given number n can be extremely large (e.g. it can exceed any integer type of your programming language).\n\nInput\n\nThe single line contains a single integer n (0 ≤ n ≤ 10^(10^5)). The number doesn't contain any leading zeroes.", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=10^10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is not a counter variable but represents a single integer input, hence it is not enclosed in brackets. The grammar is simply constructed as '<S>->n' to reflect the input format where 'n' is a single integer without any leading zeroes. The constraint '0<=n<=10^10^5' is applied to ensure the value of 'n' falls within the specified range."}
{"name": "459_B. Pashmak and Flowers", "description": "Pashmak decided to give Parmida a pair of flowers from the garden. There are n flowers in the garden and the i-th of them has a beauty number bi. Parmida is a very strange girl so she doesn't want to have the two most beautiful flowers necessarily. She wants to have those pairs of flowers that their beauty difference is maximal possible!\n\nYour task is to write a program which calculates two things:\n\n  1. The maximum beauty difference of flowers that Pashmak can give to Parmida. \n  2. The number of ways that Pashmak can pick the flowers. Two ways are considered different if and only if there is at least one flower that is chosen in the first way and not chosen in the second way. \n\nInput\n\nThe first line of the input contains n (2 ≤ n ≤ 2·10^5). In the next line there are n space-separated integers b1, b2, ..., bn (1 ≤ bi ≤ 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> b_i", "<T_1>->b_1"], "constraints": ["2<=n<=2*10^5", "1<=b_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'b_i' represents each integer separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> b_i' and '<T_1>->b_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "45_H. Road Problem", "description": "Input\n\nThe first input line contains a pair of integers n, m (2 <= n <= 900, 1 <= m <= 100000), where n is the number of junctions and m is the number of roads. Each of the following m lines contains a description of a road that is given by the numbers of the connected junctions ai, bi (1 <= ai, bi <= n, ai != bi). The junctions are numbered from 1 to n. It is possible to reach any junction of the city from any other one moving along roads.", "grammar": {"productions": ["<S>->n <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=n<=900", "1<=m<=100000", "1<=a_i,b_i<=n"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and m, where m serves as the counter variable for the number of roads, hence it is enclosed in [m]. The grammar is initiated with '<S>->n <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each line contains two integers a_i and b_i separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of road descriptions following the count [m]."}
{"name": "460_B. Little Dima and Equation", "description": "Input\n\nThe first line contains three space-separated integers: a, b, c (1 <= a <= 5; 1 <= b <= 10000; - 10000 <= c <= 10000).", "grammar": {"productions": ["<S> -> a <s> b <s> c"], "constraints": ["1<=a<=5", "1<=b<=10000", "-10000<=c<=10000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'a', 'b', and 'c', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> c', representing the input format where 'a', 'b', and 'c' are three integers separated by spaces. None of these variables are used as counters, so they are not enclosed in brackets."}
{"name": "463_B. Caisa and Pylons", "description": "Caisa solved the problem with the sugar and now he is on the way back to home. \n\nCaisa is playing a mobile game during his path. There are (n + 1) pylons numbered from 0 to n in this game. The pylon with number 0 has zero height, the pylon with number i (i > 0) has height hi. The goal of the game is to reach n-th pylon, and the only move the player can do is to jump from the current pylon (let's denote its number as k) to the next one (its number will be k + 1). When the player have made such a move, its energy increases by hk - hk + 1 (if this value is negative the player loses energy). The player must have non-negative amount of energy at any moment of the time. \n\nInitially Caisa stand at 0 pylon and has 0 energy. The game provides a special opportunity: one can pay a single dollar and increase the height of anyone pylon by one. Caisa may use that opportunity several times, but he doesn't want to spend too much money. What is the minimal amount of money he must paid to reach the goal of the game?\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 10^5). The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^5) representing the heights of the pylons.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=n<=10^5", "1<=h_i<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of integers representing the heights of the pylons, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of 'h_i' values separated by spaces. The counter non-terminal <T_i> is defined to decrement until it reaches 1, producing the sequence of heights. The constraints reflect the permissible ranges for 'n' and each 'h_i'."}
{"name": "465_C. No to Palindromes!", "description": "Input\n\nThe first line contains two space-separated integers: n and p (1 <= n <= 1000; 1 <= p <= 26). The second line contains string s, consisting of n small English letters. It is guaranteed that the string is tolerable (according to the above definition).", "grammar": {"productions": ["<S>->[n] <s> p <n> [a-z]{n}"], "constraints": ["1<=n<=1000", "1<=p<=26"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and p, where n serves as a counter variable for the length of the string s, hence it is enclosed in [n]. The variable p does not serve as a counter, so it is written as p. The string s is specified to consist of n small English letters, which is represented using the regular expression [a-z]{n}. The grammar is structured to reflect the input format: '<S>->[n] <s> p <n> [a-z]{n}', where <s> denotes a space and <n> denotes a newline."}
{"name": "466_C. Number of Ways", "description": "You've got array a[1], a[2], ..., a[n], consisting of n integers. Count the number of ways to split all the elements of the array into three contiguous parts so that the sum of elements in each part is the same. \n\nMore formally, you need to find the number of such pairs of indices i, j (2 ≤ i ≤ j ≤ n - 1), that <image>.\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 5·10^5), showing how many numbers are in the array. The second line contains n integers a[1], a[2], ..., a[n] (|a[i]| ≤ 10^9) — the elements of array a.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=5*10^5", "2<=i<=j<=(n-1)", "-10^9<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the array elements, hence it is denoted as [N] in the grammar. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The array elements are represented by 'a_i' separated by a space symbol <s>, leading to the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1'. This setup ensures the grammar correctly parses the sequence of array elements based on the count [N]."}
{"name": "467_A. George and Accommodation", "description": "George has recently entered the BSUCP (Berland State University for Cool Programmers). George has a friend Alex who has also entered the university. Now they are moving into a dormitory. \n\nGeorge and Alex want to live in the same room. The dormitory has n rooms in total. At the moment the i-th room has pi people living in it and the room can accommodate qi people in total (pi ≤ qi). Your task is to count how many rooms has free place for both George and Alex.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of rooms.\n\nThe i-th of the next n lines contains two integers pi and qi (0 ≤ pi ≤ qi ≤ 100) — the number of people who already live in the i-th room and the room's capacity.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> P_i <s> Q_i", "<T_1>->P_1 <s> Q_1"], "constraints": ["1<=N<=100", "0<=P_i<=Q_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the number of rooms, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each room's details (P_i and Q_i) are separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> P_i <s> Q_i' and '<T_1>->P_1 <s> Q_1' to systematically parse the sequence of room details following the count [N]."}
{"name": "46_C. Hamsters and Tigers", "description": "Input\n\nThe first line contains number n (2 <= n <= 1000) which indicates the total number of animals in the arena. The second line contains the description of the animals' positions. The line consists of n symbols \"H\" and \"T\". The \"H\"s correspond to hamsters and the \"T\"s correspond to tigers. It is guaranteed that at least one hamster and one tiger are present on the arena. The animals are given in the order in which they are located circle-wise, in addition, the last animal stands near the first one.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> [HT]{1}", "<T_1>->[HT]{1}"], "constraints": ["2<=n<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of animals, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence of 'H' and 'T' characters. Each character in the sequence is represented by the regex [HT]{1}, ensuring it is either 'H' or 'T'. The grammar rules '<T_i>-><T_i-1> <s> [HT]{1}' and '<T_1>->[HT]{1}' systematically parse the sequence of animals based on the counter [n]."}
{"name": "471_C. MUH and House of Cards", "description": "Input\n\nThe single line contains integer n (1 <= n <=10^12) --- the number of cards.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^12"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is not used as a counter variable but simply represents an integer input, hence it is not enclosed in brackets. The grammar is straightforward, consisting of a single line with the integer 'n', represented as '<S>->n'."}
{"name": "474_C. Captain Marmot", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100), the number of regiments.\n\nThe next 4n lines contain 4 integers xi, yi, ai, bi ( - 104 <= xi, yi, ai, bi <= 104).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i <s> a_i <s> b_i <n> x_i <s> y_i <s> a_i <s> b_i <n> x_i <s> y_i <s> a_i <s> b_i <n> x_i <s> y_i <s> a_i <s> b_i", "<T_1>->x_1 <s> y_1 <s> a_1 <s> b_1 <n> x_1 <s> y_1 <s> a_1 <s> b_1 <n> x_1 <s> y_1 <s> a_1 <s> b_1 <n> x_1 <s> y_1 <s> a_1 <s> b_1"], "constraints": ["1<=n<=100", "-10^4<=x_i,y_i,a_i,b_i<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of regiments, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each regiment is represented by four lines of integers xi, yi, ai, bi, each separated by a space symbol <s> and newline token <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> x_i <s> y_i <s> a_i <s> b_i <n> x_i <s> y_i <s> a_i <s> b_i <n> x_i <s> y_i <s> a_i <s> b_i <n> x_i <s> y_i <s> a_i <s> b_i' and '<T_1>->x_1 <s> y_1 <s> a_1 <s> b_1 <n> x_1 <s> y_1 <s> a_1 <s> b_1 <n> x_1 <s> y_1 <s> a_1 <s> b_1 <n> x_1 <s> y_1 <s> a_1 <s> b_1' to systematically parse the sequence of four lines per regiment following the count [n]."}
{"name": "478_B. Random Teams", "description": "Input\n\nThe only line of input contains two integers n and m, separated by a single space (1 <= m <= n <= 109) --- the number of participants and the number of teams respectively.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=m<=n<=10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'n' and 'm', which are separated by a space symbol denoted as <s>. Since neither 'n' nor 'm' serve as counter variables in this context, they are not enclosed in brackets. The structure of the grammar is formulated as '<S>->n <s> m', representing the input format where 'n' and 'm' are two integers separated by a space."}
{"name": "486_A. Calculating Function", "description": "For a positive integer n let's define a function f:\n\nf(n) = - 1 + 2 - 3 + .. + ( - 1)nn\n\nYour task is to calculate f(n) for a given integer n.\n\nInput\n\nThe single line contains the positive integer n (1 ≤ n ≤ 10^15).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^15"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is the only input and it is not used as a counter variable, hence it is represented simply as 'n' without brackets. The grammar is constructed as '<S>->n' to reflect the input format where 'n' is a single positive integer."}
{"name": "488_C. Fight the Monster", "description": "Input\n\nThe first line contains three integers HPY, ATKY, DEFY, separated by a space, denoting the initial HP, ATK and DEF of Master Yang.\n\nThe second line contains three integers HPM, ATKM, DEFM, separated by a space, denoting the HP, ATK and DEF of the monster.\n\nThe third line contains three integers h, a, d, separated by a space, denoting the price of 1 HP, 1 ATK and 1 DEF.\n\nAll numbers in input are integer and lie between 1 and 100 inclusively.", "grammar": {"productions": ["<S>->HPY <s> ATKY <s> DEFY <n> HPM <s> ATKM <s> DEFM <n> h <s> a <s> d"], "constraints": ["1<=HPY,ATKY,DEFY,HPM,ATKM,DEFM,h,a,d<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes multiple variables: HPY, ATKY, DEFY, HPM, ATKM, DEFM, h, a, and d. None of these variables serve as counter variables, so they are not enclosed in brackets. The input format consists of three lines, each containing three integers separated by spaces. The grammar is structured to reflect this format: '<S>->HPY <s> ATKY <s> DEFY <n> HPM <s> ATKM <s> DEFM <n> h <s> a <s> d'."}
{"name": "489_B. BerSU Ball", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 100) --- the number of boys. The second line contains sequence a1, a2, ..., an (1 <= ai <= 100), where ai is the i-th boy's dancing skill.\n\nSimilarly, the third line contains an integer m (1 <= m <= 100) --- the number of girls. The fourth line contains sequence b1, b2, ..., bm (1 <= bj <= 100), where bj is the j-th girl's dancing skill.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> [m] <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_i", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_i"], "constraints": ["1<=n<=100", "1<=a_i<=100", "1<=m<=100", "1<=b_i<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter for the sequence of boys' dancing skills, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> [m] <n> <L_m>', where <T_n> and <L_m> are counter non-terminals for the sequences of boys' and girls' skills respectively. The sequences are constructed with <T_i> and <L_i> non-terminals, each decrementing until they reach 1, and elements are separated by spaces. The variables a_i and b_i represent individual skills in the sequences."}
{"name": "492_D. Vanya and Computer Game", "description": "Input\n\nThe first line contains three integers n,x,y (1 <= n <= 105, 1 <= x, y <= 106) --- the number of monsters, the frequency of Vanya's and Vova's attack, correspondingly.\n\nNext n lines contain integers ai (1 <= ai <= 109) --- the number of hits needed do destroy the i-th monster.", "grammar": {"productions": ["<S>->[n] <s> x <s> y <n> <T_n>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=105", "1<=x,y<=106", "1<=a_i<=109"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: 'n', 'x', and 'y'. Here, 'n' serves as a counter variable for the number of monsters, hence it is enclosed in [n]. The variables 'x' and 'y' are not counters, so they are written as is. The grammar is initiated with '<S>->[n] <s> x <s> y <n> <T_n>', where <T_n> is the counter non-terminal for [n]. The non-terminal <T_i> generates the sequence of 'a_i' values for each monster, separated by newline tokens <n>. The grammar constructs are '<T_i>-><T_i-1> <n> a_i' and '<T_1>->a_1' to systematically parse the sequence of 'a_i' values following the count [n]."}
{"name": "498_B. Name That Tune", "description": "Input\n\nThe first line of the input contains numbers n and T (1 <= n <= 5000, 1 <= T <= 5000), separated by a space. Next n lines contain pairs of numbers pi and ti (0 <= pi <= 100, 1 <= ti <= T). The songs are given in the same order as in Petya's list.", "grammar": {"productions": ["<S>->[n] <s> [T] <n> <T_n>", "<T_i>-><T_i-1> <n> p_i <s> t_i", "<T_1>->p_1 <s> t_1"], "constraints": ["1<=n<=5000", "1<=T<=5000", "0<=p_i<=100", "1<=t_i<=T"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables 'n' and 'T' serve as counter variables, hence they are enclosed in brackets as [n] and [T]. The grammar is initiated with '<S>->[n] <s> [T] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains 'p_i' and 't_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> p_i <s> t_i' and '<T_1>->p_1 <s> t_1' to systematically parse the sequence of pairs following the count [n]."}
{"name": "500_C. New Year Book Reading", "description": "Input\n\nThe first line contains two space-separated integers n (2 <= n <= 500) and m (1 <= m <= 1000) --- the number of books, and the number of days for which Jaehyun would read books.\n\nThe second line contains n space-separated integers w1, w2, ..., wn (1 <= wi <= 100) --- the weight of each book.\n\nThe third line contains m space separated integers b1, b2, ..., bm (1 <= bj <= n) --- the order of books that he would read. Note that he can read the same book more than once.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> w_i", "<T_1>->w_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["2<=n<=500", "1<=m<=1000", "1<=w_i<=100", "1<=b_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n> <n> <L_m>', where <T_n> and <L_m> are counter non-terminals for [n] and [m] respectively. The <T_i> non-terminal is used to generate the sequence of weights w_i, each separated by a space <s>, and <L_i> non-terminal is used to generate the sequence of book indices b_j, also separated by a space <s>. The grammar ensures the correct parsing of the input format where the first line contains n and m, the second line contains n weights, and the third line contains m book indices."}
{"name": "501_A. Contest", "description": "Input\n\nThe first line contains four integers a, b, c, d (250 <= a, b <= 3500, 0 <= c, d <= 180). \n\nIt is guaranteed that numbers a and b are divisible by 250 (just like on any real Codeforces round).", "grammar": {"productions": ["<S>->a <s> b <s> c <s> d"], "constraints": ["250<=a,b<=3500", "0<=c,d<=180", "a mod 250=0", "b mod 250=0"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes four variables, 'a', 'b', 'c', and 'd', which are separated by space symbols denoted as <s>. Since none of these variables serve as counters, they are not enclosed in brackets. The grammar is structured as '<S>->a <s> b <s> c <s> d', representing the input format where four integers are separated by spaces."}
{"name": "505_D. Mr. Kitayuta's Technology", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 105, 1 <= m <= 105), denoting the number of the cities in Shuseki Kingdom and the number of the important pairs, respectively.\n\nThe following m lines describe the important pairs. The i-th of them (1 <= i <= m) contains two space-separated integers ai and bi (1 <= ai, bi <= n, ai != bi), denoting that it must be possible to travel from city ai to city bi by using one or more teleportation pipes (but not necessarily from city bi to city ai). It is guaranteed that all pairs (ai, bi) are distinct.", "grammar": {"productions": ["<S>->n <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=n<=10^5", "1^<=m<=105", "1<=a_i,b_i<=n", "a_i!=b_i"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'm', where 'm' serves as a counter variable for the number of important pairs, hence it is enclosed in [m]. The grammar is initiated with '<S>->n <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each important pair consists of 'a_i' and 'b_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of important pairs following the count [m]."}
{"name": "507_B. Amr and Pins", "description": "Amr loves Geometry. One day he came up with a very interesting problem.\n\nAmr has a circle of radius r and center in point (x, y). He wants the circle center to be in new position (x', y').\n\nIn one step Amr can put a pin to the border of the circle in a certain point, then rotate the circle around that pin by any angle and finally remove the pin.\n\nHelp Amr to achieve his goal in minimum number of steps.\n\nInput\n\nInput consists of 5 space-separated integers r, x, y, x' y' (1 ≤ r ≤ 10^5,  - 10^5 ≤ x, y, x', y' ≤ 10^5), circle radius, coordinates of original center of the circle and coordinates of destination center of the circle respectively.", "grammar": {"productions": ["<S>->r <s> x <s> y <s> x' <s> y'"], "constraints": ["1<=r<=10^5", "-10^5<=x<=10^5", "-10^5<=y<=10^5", "-10^5<=x'<=10^5", "-10^5<=y'<=10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes five variables: r, x, y, x', and y', none of which serve as counter variables. Therefore, they are not enclosed in brackets. The input format specifies that these variables are separated by spaces, denoted as <s>. The grammar is constructed as '<S>->r <s> x <s> y <s> x' <s> y'' to reflect this input structure."}
{"name": "50_A. Domino piling", "description": "You are given a rectangular board of M × N squares. Also you are given an unlimited number of standard domino pieces of 2 × 1 squares. You are allowed to rotate the pieces. You are asked to place as many dominoes as possible on the board so as to meet the following conditions:\n\n1. Each domino completely covers two squares.\n\n2. No two dominoes overlap.\n\n3. Each domino lies entirely inside the board. It is allowed to touch the edges of the board.\n\nFind the maximum number of dominoes, which can be placed under these restrictions.\n\nInput\n\nIn a single line you are given two integers M and N — board sizes in squares (1 ≤ M ≤ N ≤ 16).", "grammar": {"productions": ["<S>->M <s> N"], "constraints": ["1<=M<=16", "M<=N<=16"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, M and N, which are not used as counters but simply represent the dimensions of the board. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->M <s> N', reflecting the input format where M and N are two integers separated by a space."}
{"name": "512_B. Fox And Jumping", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 300), number of cards.\n\nThe second line contains n numbers li (1 <= li <= 109), the jump lengths of cards.\n\nThe third line contains n numbers ci (1 <= ci <= 105), the costs of cards.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> li", "<T_1>->li", "<L_i>-><L_i-1> <s> ci", "<L_1>->ci"], "constraints": ["1<=n<=300", "1<=li<=10^9", "1<=ci<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the number of cards, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> <L_n>'. Here, <T_i> is the counter non-terminal for the jump lengths li, and <L_i> is the counter non-terminal for the costs ci. Both li and ci are separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> li', '<T_1>->li', '<L_i>-><L_i-1> <s> ci', and '<L_1>->ci' to systematically parse the sequences of jump lengths and costs following the count [n]."}
{"name": "515_A. Drazil and Date", "description": "Someday, Drazil wanted to go on date with Varda. Drazil and Varda live on Cartesian plane. Drazil's home is located in point (0, 0) and Varda's home is located in point (a, b). In each step, he can move in a unit distance in horizontal or vertical direction. In other words, from position (x, y) he can go to positions (x + 1, y), (x - 1, y), (x, y + 1) or (x, y - 1). \n\nUnfortunately, Drazil doesn't have sense of direction. So he randomly chooses the direction he will go to in each step. He may accidentally return back to his house during his travel. Drazil may even not notice that he has arrived to (a, b) and continue travelling. \n\nLuckily, Drazil arrived to the position (a, b) successfully. Drazil said to Varda: \"It took me exactly s steps to travel from my house to yours\". But Varda is confused about his words, she is not sure that it is possible to get from (0, 0) to (a, b) in exactly s steps. Can you find out if it is possible for Varda?\n\nInput\n\nYou are given three integers a, b, and s ( - 10^9 ≤ a, b ≤ 10^9, 1 ≤ s ≤ 2·10^9) in a single line.", "grammar": {"productions": ["<S>->a <s> b <s> s"], "constraints": ["-10^9<=a<=10^9", "-10^9<=b<=10^9", "1<=s<=2*10^9"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. It defines three variables, 'a', 'b', and 's', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> s', representing the input format where 'a', 'b', and 's' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets and no counter non-terminals are needed."}
{"name": "516_A. Drazil and Factorial", "description": "Drazil is playing a math game with Varda.\n\nLet's define <image> for positive integer x as a product of factorials of its digits. For example, <image>.\n\nFirst, they choose a decimal number a consisting of n digits that contains at least one digit larger than 1. This number may possibly start with leading zeroes. Then they should find maximum positive number x satisfying following two conditions:\n\n1. x doesn't contain neither digit 0 nor digit 1.\n\n2. <image> = <image>.\n\nHelp friends find such number.\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 15) — the number of digits in a.\n\nThe second line contains n digits of a. There is at least one digit in a that is larger than 1. Number a may possibly contain leading zeroes.", "grammar": {"productions": ["<S>->[n] <n> [0-9]{n}"], "constraints": ["1<=n<=15"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable to specify the number of digits in the number 'a', hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> [0-9]{n}', where [0-9]{n} represents a sequence of 'n' digits, each ranging from 0 to 9. This format ensures that the input consists of an integer 'n' followed by a newline and then 'n' digits, which may include leading zeroes and must contain at least one digit greater than 1, as per the problem constraints."}
{"name": "519_C. A and B and Team Training", "description": "A and B are preparing themselves for programming contests.\n\nAn important part of preparing for a competition is sharing programming knowledge from the experienced members to those who are just beginning to deal with the contests. Therefore, during the next team training A decided to make teams so that newbies are solving problems together with experienced participants.\n\nA believes that the optimal team of three people should consist of one experienced participant and two newbies. Thus, each experienced participant can share the experience with a large number of people.\n\nHowever, B believes that the optimal team should have two experienced members plus one newbie. Thus, each newbie can gain more knowledge and experience.\n\nAs a result, A and B have decided that all the teams during the training session should belong to one of the two types described above. Furthermore, they agree that the total number of teams should be as much as possible.\n\nThere are n experienced members and m newbies on the training session. Can you calculate what maximum number of teams can be formed?\n\nInput\n\nThe first line contains two integers n and m (0 ≤ n, m ≤ 5·10^5) — the number of experienced participants and newbies that are present at the training session.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["0<=n<=5*10^5", "0<=m<=5*10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, 'n' and 'm', which represent the number of experienced participants and newbies, respectively. Since neither 'n' nor 'm' serves as a counter variable in this context, they are not enclosed in brackets. The grammar is structured as '<S>->n <s> m', representing the input format where 'n' and 'm' are two integers separated by a space."}
{"name": "520_B. Two Buttons", "description": "Input\n\nThe first and the only line of the input contains two distinct integers n and m (1 <= n, m <= 104), separated by a space .", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=n,m<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'm', which are distinct integers separated by a space. Since neither 'n' nor 'm' serves as a counter variable in this context, they are not enclosed in brackets. The grammar is structured as '<S>->n <s> m', representing the input format where 'n' and 'm' are two distinct integers separated by a space."}
{"name": "521_C. Pluses everywhere", "description": "Input\n\nThe first line contains two integers, n and k (0 <= k < n <= 105).\n\nThe second line contains a string consisting of n digits.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["0<=k<n", "1<=n<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, where n serves as a counter variable for the sequence of digits, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], representing the sequence of n digits. The grammar constructs are laid out as '<S>->[n] <s> k <n> <T_n>', '<T_i>-><T_i-1> <n> n', and '<T_1>->n' to systematically parse the sequence of digits following the count [n]."}
{"name": "522_A. Reposts", "description": "One day Polycarp published a funny picture in a social network making a poll about the color of his handle. Many of his friends started reposting Polycarp's joke to their news feed. Some of them reposted the reposts and so on.\n\nThese events are given as a sequence of strings \"name1 reposted name2\", where name1 is the name of the person who reposted the joke, and name2 is the name of the person from whose news feed the joke was reposted. It is guaranteed that for each string \"name1 reposted name2\" user \"name1\" didn't have the joke in his feed yet, and \"name2\" already had it in his feed by the moment of repost. Polycarp was registered as \"Polycarp\" and initially the joke was only in his feed.\n\nPolycarp measures the popularity of the joke as the length of the largest repost chain. Print the popularity of Polycarp's joke.\n\nInput\n\nThe first line of the input contains integer n (1 ≤ n ≤ 200) — the number of reposts. Next follow the reposts in the order they were made. Each of them is written on a single line and looks as \"name1 reposted name2\". All the names in the input consist of lowercase or uppercase English letters and/or digits and have lengths from 2 to 24 characters, inclusive.\n\nWe know that the user names are case-insensitive, that is, two names that only differ in the letter case correspond to the same social network user.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-zA-Z0-9]{2,24} <s> reposted <s> [a-zA-Z0-9]{2,24}", "<T_1>->[a-zA-Z0-9]{2,24} <s> reposted <s> [a-zA-Z0-9]{2,24}"], "constraints": ["1<=n<=200"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of reposts, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each repost is represented by 'name1 reposted name2'. The names are defined using the regex [a-zA-Z0-9]{2,24} to match the specified length and character constraints. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [a-zA-Z0-9]{2,24} <s> reposted <s> [a-zA-Z0-9]{2,24}' and '<T_1>->[a-zA-Z0-9]{2,24} <s> reposted <s> [a-zA-Z0-9]{2,24}' to systematically parse each repost entry following the count [n]."}
{"name": "529_C. Rooks and Rectangles", "description": "Input\n\nThe first line contains four integers n, m, k and q (1 <= n, m <= 100 000, 1 <= k, q <= 200 000) --- the sizes of the board, the number of rooks and the number of strategically important sites. We will consider that the cells of the board are numbered by integers from 1 to n horizontally and from 1 to m vertically. Next k lines contain pairs of integers \"x y\", describing the positions of the rooks (1 <= x <= n, 1 <= y <= m). It is guaranteed that all the rooks are in distinct squares. Next q lines describe the strategically important areas as groups of four integers \"x1 y1 x2 y2\" (1 <= x1 <= x2 <= n, 1 <= y1 <= y2 <= m). The corresponding rectangle area consists of cells (x, y), for which x1 <= x <= x2, y1 <= y <= y2. Strategically important areas can intersect of coincide.", "grammar": {"productions": ["<S>->n <s> m <s> [k] <s> [q] <n> <T_k> <n> <L_q>", "<T_i>-><T_i-1> <n> [n] <s> [m]", "<T_1>->[n] <s> [m]", "<L_i>-><L_i-1> <n> [n] <s> [m] <s> [n] <s> [m]", "<L_1>->[n] <s> [m] <s> [n] <s> [m]"], "constraints": ["1<=n,m<=100000", "1<=k,q<=200000", "1<=x<=n", "1<=y<=m", "1<=x1<=x2<=n", "1<=y1<=y2<=m"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes four variables: n, m, k, and q. Among these, k and q serve as counter variables for the sequences of rook positions and strategically important areas, respectively, hence they are enclosed in brackets as [k] and [q]. The variables n and m are not counters, so they remain as n and m. The grammar is structured as '<S>->n <s> m <s> [k] <s> [q] <n> <T_k> <n> <L_q>', where <T_k> and <L_q> are counter non-terminals for [k] and [q]. The <T_i> non-terminal generates pairs of integers for rook positions, each separated by a space and newline, while <L_i> generates quadruples of integers for strategically important areas, also separated by spaces and newlines. The grammar ensures correct parsing of the input format as specified."}
{"name": "534_D. Handshakes", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2·105) --- the number of students who came to CTOP. The next line contains n integers a1, a2, ..., an (0 <= ai < n), where ai is the number of students with who the i-th student shook hands.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "0<=a_i<n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each integer in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "538_A. Cutting Banner", "description": "Input\n\nThe single line of the input contains the word written on the banner. The word only consists of upper-case English letters. The word is non-empty and its length doesn't exceed 100 characters. It is guaranteed that the word isn't word CODEFORCES.", "grammar": {"productions": ["<S>->[A-Z]{1,100}"], "constraints": ["The word must consist of only uppercase English letters", "be non-empty", "have a length of at most 100 characters", "and not be 'CODEFORCES'."]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a single word composed of uppercase English letters, with a length constraint of up to 100 characters. Since the word's length is variable and the characters are restricted to uppercase letters, the regular expression [A-Z]{1,100} is used to represent the word. The grammar is thus constructed as '<S>->[A-Z]{1,100}', capturing the entire input in one non-terminal with the specified character range and length constraints."}
{"name": "547_D. Mike and Fish", "description": "Input\n\nThe first line of input contains integer n (1 <= n <= 2 × 105).\n\nThe next n lines contain the information about the points, i-th line contains two integers xi and yi (1 <= xi, yi <= 2 × 105), the i-th point coordinates.\n\nIt is guaranteed that there is at least one valid answer.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> yi", "<T_1>->xi <s> yi"], "constraints": ["1<=n<=2*10^5", "1<=xi,yi<=2*10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for the number of points, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n], representing each point's coordinates 'xi' and 'yi' separated by a space <s>. The grammar constructs are '<T_i>-><T_i-1> <n> xi <s> yi' and '<T_1>->xi <s> yi' to systematically parse the sequence of points following the count [n]."}
{"name": "556_C. Case of Matryoshkas", "description": "Input\n\nThe first line contains integers n (1 <= n <= 105) and k (1 <= k <= 105) --- the number of matryoshkas and matryoshka chains in the initial configuration.\n\nThe next k lines contain the descriptions of the chains: the i-th line first contains number mi (1 <= mi <= n), and then mi numbers ai1, ai2, ..., aimi --- the numbers of matryoshkas in the chain (matryoshka ai1 is nested into matryoshka ai2, that is nested into matryoshka ai3, and so on till the matryoshka aimi that isn't nested into any other matryoshka).\n\nIt is guaranteed that m1 + m2 + ... + mk = n, the numbers of matryoshkas in all the chains are distinct, in each chain the numbers of matryoshkas follow in the ascending order.", "grammar": {"productions": ["<S>->[n] <s> [k] <n> <T_k>", "<T_i>-><T_i-1> <n> [m_i] <s> <L_m_i>", "<T_1>->[m_1] <s> <L_m_1>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=n<=105", "1<=k<=105", "1<=m_i<=n", "1<=a_ij<=n (for all i, 1<=i<=k and for all j, 1<=j<=m_i)", "m1 + m2 + ... + mk = n", "In each chain, the numbers of matryoshkas follow in ascending order"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, both serving as counter variables, hence they are enclosed in brackets as [n] and [k]. The grammar is initiated with '<S>->[n] <s> [k] <n> <T_k>', where <T_k> is a counter non-terminal for [k]. Each line after the first describes a chain of matryoshkas, with [m_i] as a counter variable for the number of matryoshkas in the i-th chain. The grammar uses <L_m_i> to represent the sequence of matryoshkas in each chain, separated by spaces. The constraints ensure the total number of matryoshkas matches n, and each chain's matryoshkas are in ascending order."}
{"name": "566_C. Logistical Questions", "description": "Input\n\nThe first line of the input contains number n (1 <= n <= 200 000) --- the number of cities in the country.\n\nThe next line contains n integers w1, w2, ..., wn (0 <= wi <= 108) --- the number of finalists living in each city of the country.\n\nNext (n - 1) lines contain the descriptions of the railroad, the i-th line contains three integers, ai, bi, li (1 <= ai, bi <= n, ai != bi, 1 <= li <= 1000).", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n-1>", "<T_i>-><T_i-1> <s> w_i", "<T_1>->w_1", "<L_i>-><L_i-1> <n> a_i <s> b_i <s> l_i", "<L_1>->a_1 <s> b_1 <s> l_1"], "constraints": ["1<=n<=200000", "0<=w_i<=10^8", "1<=a_i,b_i<=n", "a_i!=b_i", "1<=l_i<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is a counter variable, hence enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> <L_n-1>'. Here, <T_i> is a counter non-terminal for the sequence of 'w_i' values, each separated by a space <s>, and <L_i> is another counter non-terminal for the sequence of railroad descriptions, each on a new line <n>. The railroad descriptions consist of three integers 'a_i', 'b_i', and 'l_i' separated by spaces. The grammar systematically parses the input by decrementing the counters until they reach 1."}
{"name": "567_A. Lineland Mail", "description": "All cities of Lineland are located on the Ox coordinate axis. Thus, each city is associated with its position xi — a coordinate on the Ox axis. No two cities are located at a single point.\n\nLineland residents love to send letters to each other. A person may send a letter only if the recipient lives in another city (because if they live in the same city, then it is easier to drop in).\n\nStrange but true, the cost of sending the letter is exactly equal to the distance between the sender's city and the recipient's city.\n\nFor each city calculate two values ​​mini and maxi, where mini is the minimum cost of sending a letter from the i-th city to some other city, and maxi is the the maximum cost of sending a letter from the i-th city to some other city\n\nInput\n\nThe first line of the input contains integer n (2 ≤ n ≤ 10^5) — the number of cities in Lineland. The second line contains the sequence of n distinct integers x1, x2, ..., xn ( - 10^9 ≤ xi ≤ 10^9), where xi is the x-coordinate of the i-th city. All the xi's are distinct and follow in ascending order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["2<=n<=10^5", "-10^9<=x_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of city coordinates, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of city coordinates 'x_i' separated by spaces. The counter non-terminal <T_i> decrements until it reaches 1, producing the sequence 'x_1 x_2 ... x_n'. This structure ensures the input format where the first line is the number of cities, and the second line is the sequence of their coordinates in ascending order."}
{"name": "569_A. Music", "description": "Input\n\nThe single line contains three integers T, S, q (2 <= q <=10^4, 1 <= S < T <=10^5).", "grammar": {"productions": ["<S>->T <s> S <s> q"], "constraints": ["2<=q<=10^4", "1<=S<T<=10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes three variables T, S, and q, none of which serve as counter variables in this context. Therefore, they are represented without brackets. The grammar is structured as '<S>->T <s> S <s> q', reflecting the input format where three integers are separated by spaces."}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <=10^9) --- the range of numbers in the game, and the number selected by Misha respectively.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=m<=n<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, but neither serves as a counter variable in this context, so they are represented simply as 'n' and 'm'. The grammar is structured as '<S>->n <s> m', reflecting the input format where two integers are separated by a space. Since there are no counter variables, no counter non-terminals are needed, and the variables are not enclosed in brackets."}
{"name": "571_B. Minimization", "description": "Input\n\nThe first line contains two integers n, k (2 <= n <= 3·105, 1 <= k <= min(5000, n - 1)). \n\nThe second line contains n integers A[1], A[2], ..., A[n] ( - 109 <= A[i] <= 109), separate by spaces --- elements of the array A.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=n<=3*10^5", "1<=k<=min(5000,n-1)", "-10^9<=A_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables 'n' and 'k' are given, where 'n' serves as a counter variable for the array elements, hence it is enclosed in [n]. The grammar is structured as '<S>->[n] <s> k <n> <T_n>', where <T_i> is a counter non-terminal for [n], representing the sequence of array elements 'A_i' separated by spaces. The grammar rules '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' systematically parse the array elements based on the count [n]."}
{"name": "574_A. Bear and Elections", "description": "Input\n\nThe first line contains single integer n (2 <= n <= 100) - number of candidates.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 <= ai <= 1000) - number of votes for each candidate. Limak is candidate number 1.\n\nNote that after bribing number of votes for some candidate might be zero or might be greater than 1000.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=a_i<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter for the sequence of integers representing votes, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of integers is represented by '<T_i>-><T_i-1> <s> a_i' for each element in the sequence, decrementing until it reaches the base case '<T_1>->a_1'. This structure accurately reflects the input format where 'n' is followed by 'n' space-separated integers."}
{"name": "575_B. Bribes", "description": "Input\n\nThe first line contains N, the number of towns in Ruritania. The following N - 1 lines contain information regarding individual roads between towns. A road is represented by a tuple of integers (a,b,x), which are separated with a single whitespace character. The numbers a and b represent the cities connected by this particular road, and x is either 0 or 1: 0 means that the road is bidirectional, 1 means that only the a -> b direction is legal. The next line contains K, the number of stops Borna has to make. The final line of input contains K positive integers s1, ..., sK: the towns Borna has to visit.\n\n  * 1 <= N <= 105\n  * 1 <= K <= 106\n  * 1 <= a, b <= N for all roads \n  * <image> for all roads \n  * 1 <= si <= N for all 1 <= i <= K", "grammar": {"productions": ["<S>->[N] <n> <T_N-1> <n> [K] <n> <L_K>", "<T_i>-><T_i-1> <n> a <s> b <s> [01]{1}", "<T_1>->a <s> b <s> [01]{1}", "<L_i>-><L_i-1> <s> s_i", "<L_1>->s_1"], "constraints": ["1<=N<=105", "1<=K<=10^6", "1<=a,b<=N", "1<=s_i<=N"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. The variable 'N' serves as a counter for the number of towns, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N-1> <n> [K] <n> <L_K>'. Here, <T_i> is a counter non-terminal for [N-1], representing the roads between towns, each described by 'a <s> b <s> [01]{1}' where [01]{1} denotes the direction of the road. The non-terminal <L_i> is a counter for [K], representing the sequence of stops 's_i' separated by spaces. The grammar systematically parses the input format, ensuring all constraints are met."}
{"name": "577_A. Multiplication Table", "description": "Input\n\nThe single line contains numbers n and x (1 <= n <=10^5, 1 <= x <=10^9) --- the size of the table and the number that we are looking for in the table.", "grammar": {"productions": ["<S>->n <s> x"], "constraints": ["1<=n<=10^5", "1<=x<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'x', which are separated by a space symbol denoted as <s>. Since neither 'n' nor 'x' serves as a counter variable in this context, they are not enclosed in brackets. The grammar is structured as '<S>->n <s> x', representing the input format where 'n' and 'x' are two integers separated by a space."}
{"name": "578_C. Weakness and Poorness", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 200 000), the length of a sequence.\n\nThe second line contains n integers a1, a2, ..., an (|ai| <= 10 000).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=200000", "-10000<=a_i<=10000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of integers separated by spaces. The counter non-terminal <T_i> is defined to decrement until it reaches 1, producing the sequence 'a1 a2 ... an'. The grammar rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' ensure the correct generation of the sequence."}
{"name": "580_C. Kefa and Park", "description": "Kefa decided to celebrate his first big salary by going to the restaurant. \n\nHe lives by an unusual park. The park is a rooted tree consisting of n vertices with the root at vertex 1. Vertex 1 also contains Kefa's house. Unfortunaely for our hero, the park also contains cats. Kefa has already found out what are the vertices with cats in them.\n\nThe leaf vertices of the park contain restaurants. Kefa wants to choose a restaurant where he will go, but unfortunately he is very afraid of cats, so there is no way he will go to the restaurant if the path from the restaurant to his house contains more than m consecutive vertices with cats. \n\nYour task is to help Kefa count the number of restaurants where he can go.\n\nInput\n\nThe first line contains two integers, n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ n) — the number of vertices of the tree and the maximum number of consecutive vertices with cats that is still ok for Kefa.\n\nThe second line contains n integers a1, a2, ..., an, where each ai either equals to 0 (then vertex i has no cat), or equals to 1 (then vertex i has a cat).\n\nNext n - 1 lines contains the edges of the tree in the format \"xi yi\" (without the quotes) (1 ≤ xi, yi ≤ n, xi ≠ yi), where xi and yi are the vertices of the tree, connected by an edge. \n\nIt is guaranteed that the given set of edges specifies a tree.", "grammar": {"productions": ["<S>->[n] <s> m <n> <T_n> <n> <L_n-1>", "<T_i>-><T_i-1> <s> [01]{1}", "<T_1>->[01]{1}", "<L_i>-><L_i-1> <n> x_i <s> y_i", "<L_1>->x_1 <s> y_1"], "constraints": ["2<=n<=10^5", "1<=m<=n", "1<=x_i<=n", "1<=y_i<=n", "x_i!=y_i"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, where n serves as a counter variable for the sequence of vertices, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <s> m <n> <T_n> <n> <L_n-1>'. The non-terminal <T_i> is a counter-driven rule for [n], where each vertex is represented by [01]{1} to indicate the presence (1) or absence (0) of a cat. The non-terminal <L_i> is used to represent the edges of the tree, which are given in the format 'xi yi' for each of the n-1 edges. The grammar constructs are laid out to systematically parse the sequence of vertices and edges following the count [n] and n-1 edges."}
{"name": "580_D. Kefa and Dishes", "description": "Input\n\nThe first line of the input contains three space-separated numbers, n, m and k (1 <= m <= n <= 18, 0 <= k <= n * (n - 1)) --- the number of dishes on the menu, the number of portions Kefa needs to eat to get full and the number of eating rules.\n\nThe second line contains n space-separated numbers ai, (0 <= ai <= 109) --- the satisfaction he gets from the i-th dish.\n\nNext k lines contain the rules. The i-th rule is described by the three numbers xi, yi and ci (1 <= xi, yi <= n, 0 <= ci <= 109). That means that if you eat dish xi right before dish yi, then the Kefa's satisfaction increases by ci. It is guaranteed that there are no such pairs of indexes i and j (1 <= i < j <= k), that xi = xj and yi = yj.", "grammar": {"productions": ["<S>->n <s> [m] <s> [k] <n> <T_n> <n> <L_k>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <n> x_i <s> y_i <s> c_i", "<T_1>->x_1 <s> y_1 <s> c_1"], "constraints": ["1<=m<=n<=18", "0<=k<=n*(n-1)", "0<=a_i<=10^9", "1<=x_i,y_i<=n", "0<=c_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, m, and k, where m and k serve as counter variables, hence they are enclosed in [m] and [k]. The grammar is initiated with '<S>->n <s> [m] <s> [k] <n> <T_n> <n> <L_k>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each satisfaction value separated by a space symbol <s>. The non-terminal <L_i> is a counter-driven rule for [k], where each rule consists of 'x_i', 'y_i', and 'c_i' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i', '<T_1>->a_1', '<L_i>-><L_i-1> <n> x_i <s> y_i <s> c_i', and '<L_1>->x_1 <s> y_1 <s> c_1' to systematically parse the sequence of satisfaction values and rules following the counts [n] and [k]."}
{"name": "581_A. Vasya the Hipster", "description": "One day Vasya the Hipster decided to count how many socks he had. It turned out that he had a red socks and b blue socks.\n\nAccording to the latest fashion, hipsters should wear the socks of different colors: a red one on the left foot, a blue one on the right foot.\n\nEvery day Vasya puts on new socks in the morning and throws them away before going to bed as he doesn't want to wash them.\n\nVasya wonders, what is the maximum number of days when he can dress fashionable and wear different socks, and after that, for how many days he can then wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got.\n\nCan you help him?\n\nInput\n\nThe single line of the input contains two positive integers a and b (1 ≤ a, b ≤ 100) — the number of red and blue socks that Vasya's got.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space."}
{"name": "58_A. Chat room", "description": "Vasya has recently learned to type and log on to the Internet. He immediately entered a chat room and decided to say hello to everybody. Vasya typed the word s. It is considered that Vasya managed to say hello if several letters can be deleted from the typed word so that it resulted in the word \"hello\". For example, if Vasya types the word \"ahhellllloou\", it will be considered that he said hello, and if he types \"hlelo\", it will be considered that Vasya got misunderstood and he didn't manage to say hello. Determine whether Vasya managed to say hello by the given word s.\n\nInput\n\nThe first and only line contains the word s, which Vasya typed. This word consisits of small Latin letters, its length is no less that 1 and no more than 100 letters.", "grammar": {"productions": ["<S>->[a-z]{1,100}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a single word 's' composed of lowercase Latin letters, with a length between 1 and 100 characters. Since the variable 's' is not a counter variable but a string of characters, it is represented using a regular expression [a-z]{1,100} to specify its allowed characters and length range. The grammar is thus constructed as '<S>->[a-z]{1,100}', directly mapping the input format without any counter non-terminals."}
{"name": "591_C. Median Smoothing", "description": "Input\n\nThe first input line of the input contains a single integer n (3 <= n <= 500 000) --- the length of the initial sequence.\n\nThe next line contains n integers a1, a2, ..., an (ai = 0 or ai = 1), giving the initial sequence itself.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> [01]{1}", "<T_1>->[01]{1}"], "constraints": ["3<=n<=500000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the sequence length, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each element of the sequence is represented by the regex [01]{1}, indicating it can be either '0' or '1' of length one. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> [01]{1}' and '<T_1>->[01]{1}' to systematically parse the sequence of binary digits following the count [n]."}
{"name": "593_C. Beautiful Function", "description": "Input\n\nThe first line of the input contains number n (1 <= n <= 50) --- the number of circles Ruslan thinks of. Next follow n lines, each of them containing three integers xi, yi and ri (0 <= xi, yi <= 50, 2 <= ri <= 50) --- the coordinates of the center and the raduis of the i-th circle.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [xi] <s> [yi] <s> [ri]", "<T_1>->[xi] <s> [yi] <s> [ri]"], "constraints": ["1<=n<=50", "0<=xi,yi<=50", "2<=ri<=50"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of circles, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains three variables 'xi', 'yi', and 'ri', separated by spaces <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [xi] <s> [yi] <s> [ri]' and '<T_1>->[xi] <s> [yi] <s> [ri]' to systematically parse the sequence of circle details following the count [n]."}
{"name": "595_A. Vitaly and Night", "description": "One day Vitaly was going home late at night and wondering: how many people aren't sleeping at that moment? To estimate, Vitaly decided to look which windows are lit in the house he was passing by at that moment.\n\nVitaly sees a building of n floors and 2·m windows on each floor. On each floor there are m flats numbered from 1 to m, and two consecutive windows correspond to each flat. If we number the windows from 1 to 2·m from left to right, then the j-th flat of the i-th floor has windows 2·j - 1 and 2·j in the corresponding row of windows (as usual, floors are enumerated from the bottom). Vitaly thinks that people in the flat aren't sleeping at that moment if at least one of the windows corresponding to this flat has lights on.\n\nGiven the information about the windows of the given house, your task is to calculate the number of flats where, according to Vitaly, people aren't sleeping.\n\nInput\n\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of floors in the house and the number of flats on each floor respectively.\n\nNext n lines describe the floors from top to bottom and contain 2·m characters each. If the i-th window of the given floor has lights on, then the i-th character of this line is '1', otherwise it is '0'.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_2m>", "<T_1>-><L_2m>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["1<=n,m<=100"]}, "reason": "The grammar starts with the start non-terminal <S>. The variables n and m are both counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], which includes <L_2m> to represent the sequence of 2m characters (either '0' or '1') for each floor. The <L_i> non-terminal is used to generate the sequence of characters, each of which is represented by the regex [01]{1}. The grammar systematically constructs the input format with n floors, each having 2m windows described by '0' or '1'."}
{"name": "595_D. Max and Bike", "description": "Input\n\nThe first line contains three integers n, r and v (1 <= n <= 100 000, 1 <= r, v <= 109) --- the number of competitions, the radius of the front wheel of Max's bike and his maximum speed, respectively. \n\nNext n lines contain the descriptions of the contests. The i-th line contains two integers si and fi (1 <= si < fi <= 109) --- the coordinate of the start and the coordinate of the finish on the i-th competition.", "grammar": {"productions": ["<S>->[n] <s> r <s> v <n> <T_n>", "<T_i>-><T_i-1> <n> s_i <s> f_i <n>", "<T_1>->s_1 <s> f_1"], "constraints": ["1<=n<=100000", "1<=r,v<=10^9", "1<=s_i<f_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, r, and v. Here, 'n' serves as a counter variable for the number of competitions, hence it is enclosed in [n]. The variables 'r' and 'v' are not counters, so they are represented as 'r' and 'v'. The grammar is initiated with '<S>->[n] <s> r <s> v <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each competition is described by two integers 's_i' and 'f_i' separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <s> r <s> v <n> <T_n>', '<T_i>-><T_i-1> <n> s_i <s> f_i', and '<T_1>->s_1 <s> f_1' to systematically parse the sequence of competition descriptions following the count [n]."}
{"name": "597_A. Divisibility", "description": "Input\n\nThe only line contains three space-separated integers k, a and b (1 <= k <=10^18; - 1018 <= a <= b <=10^18).", "grammar": {"productions": ["<S>->k <s> a <s> b"], "constraints": ["1<=k<=10^18", "-10^18<=a<=b<=10^18"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes three variables, k, a, and b, separated by space symbols <s>. Since none of these variables serve as counters, they are not enclosed in brackets. The grammar is structured as '<S>->k <s> a <s> b', representing the input format where three integers are separated by spaces."}
{"name": "599_D. Spongebob and Squares", "description": "Input\n\nThe first line of the input contains a single integer x (1 <= x <=10^18) --- the number of squares inside the tables Spongebob is interested in.", "grammar": {"productions": ["<S>->x"], "constraints": ["1<=x<=10^18"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'x' is not a counter variable, so it is represented simply as 'x' without brackets. The grammar is straightforward, consisting of the start symbol producing 'x' directly, as there are no sequences or repeated patterns to model. The constraint specifies the range for 'x'."}
{"name": "600_A. Extract Numbers", "description": "Input\n\nThe only line of input contains the string s (1 <= |s| <=10^5). The string contains only symbols '.' (ASCII 46), ',' (ASCII 44), ';' (ASCII 59), digits, lowercase and uppercase latin letters.", "grammar": {"productions": ["<S>->[.0-9a-zA-Z,;]{1,105}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input is a single line string 's' with a length constraint of 1 to 10^5 characters. The string can include specific symbols (.,;), digits, and both lowercase and uppercase Latin letters. Since the variable 's' is not a counter variable but a string with a defined character set and length, it is represented using a regular expression [.0-9a-zA-Z,;]{1,105} to specify the allowed characters and their length range. Thus, the grammar is simply '<S>->[.0-9a-zA-Z,;]{1,105}'."}
{"name": "600_C. Make Palindrome", "description": "Input\n\nThe only line contains string s (1 <= |s| <= 2.10^5) consisting of only lowercase Latin letters.", "grammar": {"productions": ["<S>->[a-z]{1,200000}"], "constraints": ["1<=|s|<=200000"]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a string 's' composed of lowercase Latin letters, with a length constraint between 1 and 200,000 characters. Since the string's content is variable and its length is specified, the grammar uses a regular expression [a-z]{1,200000} to represent any sequence of lowercase letters within the given length range. Thus, the grammar is constructed as '<S>->[a-z]{1,200000}' to directly capture the input format."}
{"name": "609_F. Frogs and mosquitoes", "description": "Input\n\nFirst line contains two integers n, m (1 <= n, m <= 2·105) --- the number of frogs and mosquitoes.\n\nEach of the next n lines contains two integers xi, ti (0 <= xi, ti <= 109) --- the position and the initial length of the tongue of the i-th frog. It is guaranteed that all xi are different.\n\nNext m lines contain two integers each pj, bj (0 <= pj, bj <= 109) --- the position and the size of the j-th mosquito.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <n> x_i <s> t_i", "<T_1>->x_1 <s> t_1", "<L_i>-><L_i-1> <n> p_i <s> b_i", "<L_1>->p_1 <s> b_1"], "constraints": ["1<=n,m<=2*10^5", "0<=x_i,t_i,p_i,b_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n> <n> <L_m>'. Here, <T_i> is the counter non-terminal for [n], representing each frog's details (x_i and t_i) separated by a space <s> and a newline <n>. Similarly, <L_i> is the counter non-terminal for [m], representing each mosquito's details (p_i and b_i) separated by a space <s> and a newline <n>. The grammar systematically parses the sequence of frog and mosquito details following the counts [n] and [m]."}
{"name": "610_A. Pasha and Stick", "description": "Pasha has a wooden stick of some positive integer length n. He wants to perform exactly three cuts to get four parts of the stick. Each part must have some positive integer length and the sum of these lengths will obviously be n. \n\nPasha likes rectangles but hates squares, so he wonders, how many ways are there to split a stick into four parts so that it's possible to form a rectangle using these parts, but is impossible to form a square.\n\nYour task is to help Pasha and count the number of such ways. Two ways to cut the stick are considered distinct if there exists some integer x, such that the number of parts of length x in the first way differ from the number of parts of length x in the second way.\n\nInput\n\nThe first line of the input contains a positive integer n (1 ≤ n ≤ 2·10^9) — the length of Pasha's stick.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=2*10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is the only input and does not serve as a counter variable for any sequence or repetition, hence it is not enclosed in brackets. The grammar is simply '<S>->n', representing the input format where 'n' is a single positive integer."}
{"name": "611_B. New Year and Old Property", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 1018) --- the first year and the last year in Limak's interval respectively.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=b<=10^18"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space. Since neither 'a' nor 'b' serve as counter variables, they are not enclosed in brackets."}
{"name": "613_A. Peter and Snow Blower", "description": "Input\n\nThe first line of the input contains three integers --- the number of vertices of the polygon n (<image>), and coordinates of point P.\n\nEach of the next n lines contains two integers --- coordinates of the vertices of the polygon in the clockwise or counterclockwise order. It is guaranteed that no three consecutive vertices lie on a common straight line.\n\nAll the numbers in the input are integers that do not exceed 1 000 000 in their absolute value.", "grammar": {"productions": ["<S>->[n] <s> Px <s> Py <n> <T_n>", "<T_i>-><T_i-1> <n> X <s> Y", "<T_1>->X <s> Y"], "constraints": ["1<=n<=1000000", "-1000000<=Px,Py<=1000000", "-1000000<=X,Y<=1000000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of vertices, hence it is enclosed in brackets as [n]. The grammar is structured to first include [n], followed by the coordinates Px and Py separated by spaces, and then a newline. The subsequent vertices are handled by the counter non-terminal <T_n>, which generates each vertex's coordinates X and Y, separated by a space and followed by a newline. The grammar ensures that each vertex is listed in sequence, decrementing the counter until all vertices are accounted for, starting with the base case <T_1> which outputs the first vertex's coordinates."}
{"name": "617_A. Elephant", "description": "Input\n\nThe first line of the input contains an integer x (1 <= x <= 1 000 000) --- The coordinate of the friend's house.", "grammar": {"productions": ["<S>->x"], "constraints": ["1<=x<=1000000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, x, which is not a counter variable, so it is represented simply as 'x'. The grammar is constructed as '<S>->x' to reflect the input format where 'x' is the coordinate of the friend's house."}
{"name": "618_A. Slime Combining", "description": "Input\n\nThe first line of the input will contain a single integer, n (1 <= n <= 100 000).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=100000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is used as a counter variable. Consequently, the variable is represented as [n] to indicate its role as a counter. The grammar is constructed to reflect this format: '<S>->[n]'."}
{"name": "626_D. Jerry's Protest", "description": "Input\n\nThe first line of input contains a single integer n (2 <= n <= 2000) --- the number of balls in the jar.\n\nThe second line contains n integers ai (1 <= ai <= 5000) --- the number written on the ith ball. It is guaranteed that no two balls have the same number.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=2000", "1<=a_i<=5000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of integers 'a_i' is constructed using the counter non-terminal <T_i>, which decrements until it reaches <T_1>, representing the first element 'a_1'. Each element is separated by a space symbol <s>. The grammar systematically parses the sequence of integers following the count [n]."}
{"name": "627_A. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <=10^12, 0 <= x <=10^12), the sum and bitwise xor of the pair of positive integers, respectively.", "grammar": {"productions": ["<S>->s <s> x"], "constraints": ["2<=s<=10^12", "0<=x<=10^12"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 's' and 'x', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->s <s> x', representing the input format where 's' and 'x' are two integers separated by a space. Since neither 's' nor 'x' serve as counter variables, they are not enclosed in brackets."}
{"name": "630_C. Lucky Numbers", "description": "The numbers of all offices in the new building of the Tax Office of IT City will have lucky numbers.\n\nLucky number is a number that consists of digits 7 and 8 only. Find the maximum number of offices in the new building of the Tax Office given that a door-plate can hold a number not longer than n digits.\n\nInput\n\nThe only line of input contains one integer n (1 ≤ n ≤ 55) — the maximum length of a number that a door-plate can hold.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=55"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used to specify the maximum length of the lucky number, which consists of digits 7 and 8 only. Since 'n' is not a counter variable but a constraint on the length, it is represented simply as 'n' in the grammar. The grammar is constructed as '<S>->n' to reflect the input format where only the integer 'n' is provided."}
{"name": "630_D. Hexagons!", "description": "Input\n\nThe only line of the input contains one integer n (0 <= n <=10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=10^9"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is not used as a counter variable but simply represents an integer input. Therefore, it is not enclosed in brackets and the grammar is constructed as '<S>->n' to reflect the input format where only the integer n is provided."}
{"name": "630_E. A rectangle", "description": "Input\n\nThe only line of input contains four integers x1, y1, x2, y2 ( - 109 <= x1 <= x2 <= 109, - 109 <= y1 <= y2 <= 109) --- the coordinates of the centers of two cells.", "grammar": {"productions": ["<S>->x1 <s> y1 <s> x2 <s> y2"], "constraints": ["-10^9<=x1<=x2<=10^9", "-10^9<=y1<=y2<=10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines four variables, 'x1', 'y1', 'x2', and 'y2', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->x1 <s> y1 <s> x2 <s> y2', representing the input format where the coordinates are given in a single line separated by spaces. None of the variables serve as counters, so they are not enclosed in brackets."}
{"name": "633_H. Fibonacci-ish II", "description": "Input\n\nThe first line of the input contains integers of n and m (1 <= n, m <= 30 000) --- the length of the initial array and the modulo, respectively.\n\nThe next line contains n integers ai (0 <= ai <= 109) --- elements of the array.\n\nThen follow the number of ranges q (1 <= q <= 30 000).\n\nLast q lines contain pairs of indices li and ri (1 <= li <= ri <= n) --- ranges to compute Fibonacci-ish potentials.", "grammar": {"productions": ["<S>->[n] <s> m <n> <T_n> <n> [q] <n> <L_q>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <n> l_i <s> r_i", "<L_1>->l_1 <s> r_1"], "constraints": ["1<=n,m<=30000", "0<=a_i<=10^9", "1<=q<=30000", "1<=l_i<=r_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'm', where 'n' serves as a counter variable for the array elements, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <s> m <n> <T_n> <n> [q] <n> <L_q>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]. The non-terminal <L_i> is a counter-driven rule for [q], where 'l_i' and 'r_i' represent pairs of indices separated by a space symbol <s>. The grammar constructs are laid out as '<L_i>-><L_i-1> <n> l_i <s> r_i' and '<L_1>->l_1 <s> r_1' to systematically parse the sequence of index pairs following the count [q]."}
{"name": "651_A. Joysticks", "description": "Input\n\nThe first line of the input contains two positive integers a1 and a2 (1 <= a1, a2 <= 100), the initial charge level of first and second joystick respectively.", "grammar": {"productions": ["<S>->a1 <s> a2"], "constraints": ["1<=a1,a2<=100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a1' and 'a2', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a1 <s> a2', representing the input format where 'a1' and 'a2' are two integers separated by a space."}
{"name": "658_B. Bear and Displayed Friends", "description": "Input\n\nThe first line contains three integers n, k and q (1 <= n, q <= 150 000, 1 <= k <= min(6, n)) --- the number of friends, the maximum number of displayed online friends and the number of queries, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (1 <= ti <= 109) where ti describes how good is Limak's relation with the i-th friend.\n\nThe i-th of the following q lines contains two integers typei and idi (1 <= typei <= 2, 1 <= idi <= n) --- the i-th query. If typei = 1 then a friend idi becomes online. If typei = 2 then you should check whether a friend idi is displayed.\n\nIt's guaranteed that no two queries of the first type will have the same idi becuase one friend can't become online twice. Also, it's guaranteed that at least one query will be of the second type (typei = 2) so the output won't be empty.", "grammar": {"productions": ["<S>->[n] <s> k <s> [q] <n> <T_n> <n> <L_q>", "<T_i>-><T_i-1> <s> t_i", "<T_1>->t_1", "<L_i>-><L_i-1> <n> type_i <s> id_i", "<L_1>->type_1 <s> id_1"], "constraints": ["1<=n,q<=150000", "1<=k<=min(6,n)", "1<=t_i<=10^9", "1<=type_i<=2", "1<=id_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, k, and q, where n and q serve as counter variables, hence they are enclosed in brackets as [n] and [q]. The variable k is not a counter, so it remains as k. The grammar starts with '<S>->[n] <s> k <s> [q] <n> <T_n> <n> <L_q>'. The non-terminal <T_i> is a counter-driven rule for [n], representing the sequence of integers t_i separated by spaces. The non-terminal <L_i> is a counter-driven rule for [q], representing the sequence of queries, each consisting of type_i and id_i separated by a space. The grammar constructs are designed to systematically parse the input format, ensuring all constraints are met."}
{"name": "659_A. Round House", "description": "Vasya lives in a round building, whose entrances are numbered sequentially by integers from 1 to n. Entrance n and entrance 1 are adjacent.\n\nToday Vasya got bored and decided to take a walk in the yard. Vasya lives in entrance a and he decided that during his walk he will move around the house b entrances in the direction of increasing numbers (in this order entrance n should be followed by entrance 1). The negative value of b corresponds to moving |b| entrances in the order of decreasing numbers (in this order entrance 1 is followed by entrance n). If b = 0, then Vasya prefers to walk beside his entrance.\n\n<image> Illustration for n = 6, a = 2, b = - 5.\n\nHelp Vasya to determine the number of the entrance, near which he will be at the end of his walk.\n\nInput\n\nThe single line of the input contains three space-separated integers n, a and b (1 ≤ n ≤ 100, 1 ≤ a ≤ n, - 100 ≤ b ≤ 100) — the number of entrances at Vasya's place, the number of his entrance and the length of his walk, respectively.", "grammar": {"productions": ["<S>->n <s> a <s> b"], "constraints": ["1<=n<=100", "1<=a<=n", "-100<=b<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, a, and b. Since none of these variables serve as counters for generating sequences or repetitions, they are not enclosed in brackets. The input format requires these three integers to be separated by spaces, which is represented in the grammar as '<S>->n <s> a <s> b'. This structure directly mirrors the input specification where the three integers are provided in a single line separated by spaces."}
{"name": "662_C. Binary Table", "description": "Input\n\nThe first line of the input contains two integers n and m (1 <= n <= 20, 1 <= m <= 100 000) --- the number of rows and the number of columns, respectively.\n\nThen n lines follows with the descriptions of the rows. Each line has length m and contains only digits '0' and '1'.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> [01]{m}", "<T_1>->[01]{m}"], "constraints": ["1<=n<=20", "1<=m<=100000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains a sequence of '0' and '1' characters of length m, represented by the regular expression [01]{m}. The grammar constructs are laid out as '<S>->[n] <s> [m] <n> <T_n>', '<T_i>-><T_i-1> <n> [01]{m}', and '<T_1>->[01]{m}' to systematically parse the sequence of lines each containing m '0' or '1' characters."}
{"name": "664_A. Complicated GCD", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10100).", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=b<=10^100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space. Since neither 'a' nor 'b' serves as a counter variable, they are not enclosed in brackets."}
{"name": "666_A. Reberland Linguistics", "description": "Input\n\nThe only line contains a string s (5 <= |s| <=10^4) consisting of lowercase English letters.", "grammar": {"productions": ["<S>->[a-z]{5,104}"], "constraints": ["5<=|s|<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. The input is a string 's' consisting of lowercase English letters with a length constraint between 5 and 10^4 characters. Since the entire string is defined by a regex pattern [a-z] with a specified length range, the grammar directly uses this pattern to represent the string. Thus, the grammar is constructed as '<S>->[a-z]{5,104}', where the regex [a-z] matches any lowercase letter, and {5,104} specifies the length range."}
{"name": "667_C. Reberland Linguistics", "description": "Input\n\nThe only line contains a string s (5 <= |s| <= 104) consisting of lowercase English letters.", "grammar": {"productions": ["<S>->[a-z]{5,10^4}"], "constraints": [""]}, "reason": "The grammar starts with the start non-terminal <S>. The input is a string 's' consisting of lowercase English letters with a length between 5 and 10^4 characters. Since the variable 's' is not a counter variable but a string of characters, it is represented using a regular expression [a-z]{5,10^4} to specify the range of characters and their length. Thus, the grammar is constructed as '<S>->[a-z]{5,10^4}' to directly represent the input string format."}
{"name": "669_A. Little Artem and Presents", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <=10^9) --- number of stones Artem received on his birthday.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is a single integer input, and since it does not serve as a counter variable, it is represented simply as 'n'. The grammar is thus constructed as '<S>->n', reflecting the input format where only a single integer 'n' is provided."}
{"name": "670_B. Game of Robots", "description": "Input\n\nThe first line contains two positive integers n and k (1 <= n <= 100 000, 1 <= k <= min(2·109, n·(n + 1) / 2).\n\nThe second line contains the sequence id1, id2, ..., idn (1 <= idi <= 109) --- identifiers of roborts. It is guaranteed that all identifiers are different.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> id_i", "<T_1>->id_1"], "constraints": ["1<=n<=100000", "1<=k<=min(2*10^9,n*(n+1)/2)", "1<=id_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'k', where 'n' serves as a counter variable for the sequence of identifiers, hence it is enclosed in [n]. The grammar is structured as '<S>->[n] <s> k <n> <T_n>', where <T_n> is a counter non-terminal for [n], generating the sequence of identifiers separated by spaces. Each identifier 'id_i' is represented in the grammar with the counter non-terminal decrementing until it reaches 1, as in '<T_i>-><T_i-1> <s> id_i' and '<T_1>->id_1'. This setup ensures the sequence is correctly parsed according to the input format."}
{"name": "672_A. Summer Camp", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <= 1000) --- the position of the digit you need to print.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is the only input and does not serve as a counter variable, hence it is not enclosed in brackets. The grammar is simply constructed as '<S>->n' to represent the input format where 'n' is a single integer."}
{"name": "672_B. Different is Good", "description": "A wise man told Kerem \"Different is good\" once, so Kerem wants all things in his life to be different. \n\nKerem recently got a string s consisting of lowercase English letters. Since Kerem likes it when things are different, he wants all substrings of his string s to be distinct. Substring is a string formed by some number of consecutive characters of the string. For example, string \"aba\" has substrings \"\" (empty substring), \"a\", \"b\", \"a\", \"ab\", \"ba\", \"aba\".\n\nIf string s has at least two equal substrings then Kerem will change characters at some positions to some other lowercase English letters. Changing characters is a very tiring job, so Kerem want to perform as few changes as possible.\n\nYour task is to find the minimum number of changes needed to make all the substrings of the given string distinct, or determine that it is impossible.\n\nInput\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the length of the string s.\n\nThe second line contains the string s of length n consisting of only lowercase English letters.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=100000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable to specify the length of the string 's', hence it is enclosed in [n]. The string 's' consists of lowercase English letters and has a length of 'n', which is represented using the regular expression [a-z]{n}. Thus, the grammar is constructed as '<S>->[n] <n> [a-z]{n}' to reflect the input format where the first line contains the integer 'n' and the second line contains the string 's' of length 'n'."}
{"name": "675_E. Trains and Statistic", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 100 000) --- the number of stations.\n\nThe second line contains n - 1 integer ai (i + 1 <= ai <= n), the i-th of them means that at the i-th station one may buy tickets to each station from i + 1 to ai inclusive.", "grammar": {"productions": ["<S>->[n] <n> <T_n-1>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100000", "i+1<=a_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of integers 'a_i', hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n-1>', where <T_i> is a counter non-terminal for the sequence of 'a_i' values. The sequence is constructed with '<T_i>-><T_i-1> <s> a_i' and terminates with '<T_1>->a_1'. This structure ensures the input format is correctly parsed, with 'n' stations and 'n-1' integers following it."}
{"name": "677_A. Vanya and Fence", "description": "Vanya and his friends are walking along the fence of height h and they do not want the guard to notice them. In order to achieve this the height of each of the friends should not exceed h. If the height of some person is greater than h he can bend down and then he surely won't be noticed by the guard. The height of the i-th person is equal to ai.\n\nConsider the width of the person walking as usual to be equal to 1, while the width of the bent person is equal to 2. Friends want to talk to each other while walking, so they would like to walk in a single row. What is the minimum width of the road, such that friends can walk in a row and remain unattended by the guard?\n\nInput\n\nThe first line of the input contains two integers n and h (1 ≤ n ≤ 1000, 1 ≤ h ≤ 1000) — the number of friends and the height of the fence, respectively.\n\nThe second line contains n integers ai (1 ≤ ai ≤ 2h), the i-th of them is equal to the height of the i-th person.", "grammar": {"productions": ["<S>->[N] <s> [H] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=1000", "1<=H<=1000", "1<=A_i<=2*H"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'N' and 'H', both serving as counter variables, hence they are enclosed in brackets as [N] and [H]. The grammar is initiated with '<S>->[N] <s> [H] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each person's height separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' to systematically parse the sequence of heights following the count [N]."}
{"name": "67_E. Save the City!", "description": "Input\n\nThe first line of the test case will consist of the number of vertices n (3 <= n <= 1000).\n\nNext n lines will contain the coordinates of the vertices in the clockwise order of the polygon. On the i-th line are integers xi and yi (0 <= xi, yi <= 106) separated by a space.\n\nThe endpoints of the fence AB are the first two points, (x1, y1) and (x2, y2).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["3<=n<=1000", "0<=x_i,y_i<=10^6"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of vertices, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two integers 'x_i' and 'y_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> x_i <s> y_i' and '<T_1>->x_1 <s> y_1' to systematically parse the sequence of vertex coordinates following the count [n]."}
{"name": "685_D. Kay and Eternity", "description": "Input\n\nThe first line of the input contains two integers n and k (1 <= n <= 100 000, 1 <= k <= 300) --- the number of pieces of the ice and the value k, respectively. Each of the next n lines contains two integers xi and yi ( - 109 <= xi, yi <= 109) --- coordinates of the cell containing i-th piece of the ice. It's guaranteed, that no two pieces of the ice occupy the same cell.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> yi", "<T_1>->xi <s> yi"], "constraints": ["1<=n<=100000", "1<=k<=300", "-10^9<=xi,yi<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, where n serves as a counter variable for the number of pieces of ice, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two integers xi and yi separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> xi <s> yi' and '<T_1>->xi <s> yi' to systematically parse the sequence of coordinates for each piece of ice following the count [n]."}
{"name": "687_A. NP-Hard Problem", "description": "Input\n\nThe first line of the input contains two integers n and m (2 <= n <= 100 000, 1 <= m <= 100 000) --- the number of vertices and the number of edges in the prize graph, respectively.\n\nEach of the next m lines contains a pair of integers ui and vi (1 <= ui, vi <= n), denoting an undirected edge between ui and vi. It's guaranteed the graph won't contain any self-loops or multiple edges.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> u_i <s> v_i", "<T_1>->u_1 <s> v_1"], "constraints": ["2<=n<=100000", "1<=m<=100000", "1<=ui,vi<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>', where <T_m> is a counter non-terminal for the variable [m]. Each edge is represented by two integers, u_i and v_i, separated by a space. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> u_i <s> v_i' and '<T_1>->u_1 <s> v_1' to systematically parse each edge in the sequence following the count [m]."}
{"name": "688_A. Opponents", "description": "Arya has n opponents in the school. Each day he will fight with all opponents who are present this day. His opponents have some fighting plan that guarantees they will win, but implementing this plan requires presence of them all. That means if one day at least one of Arya's opponents is absent at the school, then Arya will beat all present opponents. Otherwise, if all opponents are present, then they will beat Arya.\n\nFor each opponent Arya knows his schedule — whether or not he is going to present on each particular day. Tell him the maximum number of consecutive days that he will beat all present opponents.\n\nNote, that if some day there are no opponents present, Arya still considers he beats all the present opponents.\n\nInput\n\nThe first line of the input contains two integers n and d (1 ≤ n, d ≤ 100) — the number of opponents and the number of days, respectively.\n\nThe i-th of the following d lines contains a string of length n consisting of characters '0' and '1'. The j-th character of this string is '0' if the j-th opponent is going to be absent on the i-th day.", "grammar": {"productions": ["<S>->[n] <s> [d] <n> <T_d>", "<T_i>-><T_i-1> <n> [01]{n}", "<T_1>->[01]{n}"], "constraints": ["1<=n,d<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and d, both serving as counter variables, hence they are enclosed in brackets as [n] and [d]. The grammar is initiated with '<S>->[n] <s> [d] <n> <T_d>', where <T_i> is a counter non-terminal for [d]. Each line under <T_i> consists of a string of '0's and '1's of length [n], represented by the regular expression [01]{n}. The grammar systematically parses each day's data as a string of '0's and '1's, ensuring the input format is correctly followed."}
{"name": "690_A2. Collective Mindsets (medium)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <=10^9).", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^9"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, N, which is not used as a counter variable but simply represents an integer input. Therefore, it is represented as 'N' without brackets. The grammar is straightforward, consisting of a single rule '<S>->N', which directly captures the input format where only one integer N is provided."}
{"name": "690_E2. Photographs (II)", "description": "Input\n\nThe input format is the same as in the previous version, except that the first line of every question now contains three space-separated numbers h, w and k (1 <= h, w <= 600, 2 <= k <= 16) -- the height (number of rows) and width (number of columns) of the photograph and the number of pieces, respectively. The number of pieces evenly divides the height, and each piece is of the same height h / k.\n\nAgain, there is only one input file to be processed, and the same resources are provided to you as in the previous version (except that now you are given all input images in .bmp format, rather than the first 50).", "grammar": {"productions": ["<S>->h <s> w <s> k"], "constraints": ["1<=h,w<=600", "2<=k<=16", "h mod k=0"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes three variables h, w, and k, none of which serve as counter variables in this context, hence they are not enclosed in brackets. The grammar is structured to reflect the input format where these three variables are separated by spaces, represented as '<S>->h <s> w <s> k'."}
{"name": "702_D. Road to Post Office", "description": "Input\n\nThe first line contains 5 positive integers d, k, a, b, t (1 <= d <=10^12; 1 <= k, a, b, t <= 106; a < b), where:\n\n  * d --- the distance from home to the post office; \n  * k --- the distance, which car is able to drive before breaking; \n  * a --- the time, which Vasiliy spends to drive 1 kilometer on his car; \n  * b --- the time, which Vasiliy spends to walk 1 kilometer on foot; \n  * t --- the time, which Vasiliy spends to repair his car.", "grammar": {"productions": ["<S>->d <s> k <s> a <s> b <s> t"], "constraints": ["1<=d<=10^12", "1<=k<=10^6", "1<=a<b<=10^6", "1<=t<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes five variables: d, k, a, b, and t. None of these variables serve as counters, so they are not enclosed in brackets. The grammar is structured as '<S>->d <s> k <s> a <s> b <s> t', representing the input format where the five integers are separated by spaces."}
{"name": "702_E. Analysis of Pathes in Functional Graph", "description": "Input\n\nThe first line contains two integers n, k (1 <= n <= 105, 1 <= k <= 1010). The second line contains the sequence f0, f1, ..., fn - 1 (0 <= fi < n) and the third --- the sequence w0, w1, ..., wn - 1 (0 <= wi <= 108).", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> f_i", "<T_1>->f_1", "<L_i>-><L_i-1> <s> w_i", "<L_1>->w_1"], "constraints": ["1<=n<=10^5", "1<=k<=10^10", "0<=f_i<n", "0<=w_i<=10^8"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, where n serves as a counter variable for the sequences f and w, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n> <n> <L_n>'. The non-terminal <T_i> is a counter-driven rule for [n], representing the sequence f_i separated by spaces <s>. Similarly, <L_i> is another counter-driven rule for [n], representing the sequence w_i separated by spaces <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> f_i', '<T_1>->f_1', '<L_i>-><L_i-1> <s> w_i', and '<L_1>->w_1' to systematically parse the sequences f and w following the count [n]."}
{"name": "703_C. Chris and Road", "description": "Input\n\nThe first line of the input contains four integers n, w, v, u (3 <= n <= 10 000, 1 <= w <= 109, 1 <= v, u <= 1000) --- the number of the bus polygon vertices, road width, bus speed and pedestrian speed respectively.\n\nThe next n lines describes polygon vertices in counter-clockwise order. i-th of them contains pair of integers xi and yi ( - 109 <= xi <= 109, 0 <= yi <= w) --- coordinates of i-th polygon point. It is guaranteed that the polygon is non-degenerate.", "grammar": {"productions": ["<S>->[n] <s> w <s> v <s> u <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> yi", "<T_1>->xi <s> yi"], "constraints": ["3<=n<=10000", "1<=w<=10^9", "1<=v<=1000", "1<=u<=1000", "-10^9<=xi<=10^9", "0<=yi<=w"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables: n, w, v, and u. Among these, 'n' serves as a counter variable for the number of polygon vertices, hence it is enclosed in [n]. The other variables (w, v, u) are not counters and are represented as is. The grammar is initiated with '<S>->[n] <s> w <s> v <s> u <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains a pair of integers (xi, yi) separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> xi <s> yi' and '<T_1>->xi <s> yi' to systematically parse the sequence of polygon vertices following the count [n]."}
{"name": "705_A. Hulk", "description": "Dr. Bruce Banner hates his enemies (like others don't). As we all know, he can barely talk when he turns into the incredible Hulk. That's why he asked you to help him to express his feelings.\n\nHulk likes the Inception so much, and like that his feelings are complicated. They have n layers. The first layer is hate, second one is love, third one is hate and so on...\n\nFor example if n = 1, then his feeling is \"I hate it\" or if n = 2 it's \"I hate that I love it\", and if n = 3 it's \"I hate that I love that I hate it\" and so on.\n\nPlease help Dr. Banner.\n\nInput\n\nThe only line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of layers of love and hate.", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the layers of feelings, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n]' to represent the input format where 'n' is the number of layers. The feelings are constructed in a pattern that alternates between 'hate' and 'love', but since the exact construction of the sentence is not part of the input grammar, the grammar simply captures the input variable 'n'."}
{"name": "708_C. Centroids", "description": "Input\n\nThe first line of the input contains an integer n (2 <= n <= 400 000) --- the number of vertices in the tree. Each of the next n - 1 lines contains a pair of vertex indices ui and vi (1 <= ui, vi <= n) --- endpoints of the corresponding edge.", "grammar": {"productions": ["<S>->[n] <n> <T_(n-1)>", "<T_i>-><T_i-1> <n> u_i <s> v_i", "<T_1>->u_1 <s> v_1"], "constraints": ["2<=n<=400000", "1<=u_i,v_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of edges, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_(n-1)>'. The non-terminal <T_i> is a counter-driven rule for [n-1], representing each pair of vertex indices 'u_i' and 'v_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> u_i <s> v_i' and '<T_1>->u_1 <s> v_1' to systematically parse the sequence of vertex pairs following the count [n-1]."}
{"name": "709_A. Juicer", "description": "Kolya is going to make fresh orange juice. He has n oranges of sizes a1, a2, ..., an. Kolya will put them in the juicer in the fixed order, starting with orange of size a1, then orange of size a2 and so on. To be put in the juicer the orange must have size not exceeding b, so if Kolya sees an orange that is strictly greater he throws it away and continues with the next one.\n\nThe juicer has a special section to collect waste. It overflows if Kolya squeezes oranges of the total size strictly greater than d. When it happens Kolya empties the waste section (even if there are no more oranges) and continues to squeeze the juice. How many times will he have to empty the waste section?\n\nInput\n\nThe first line of the input contains three integers n, b and d (1 ≤ n ≤ 100 000, 1 ≤ b ≤ d ≤ 1 000 000) — the number of oranges, the maximum size of the orange that fits in the juicer and the value d, which determines the condition when the waste section should be emptied.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1 000 000) — sizes of the oranges listed in the order Kolya is going to try to put them in the juicer.", "grammar": {"productions": ["<S>->[n] <s> b <s> d <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100000", "1<=b<=1000000", "1<=d<=1000000", "1<=a_i<=1000000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, b, and d. Here, 'n' serves as a counter variable for the sequence of oranges, so it is enclosed in [n]. The variables 'b' and 'd' are not counters, so they are represented as is. The grammar is initiated with '<S>->[n] <s> b <s> d <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each orange size separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <s> b <s> d <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of orange sizes following the count [n]."}
{"name": "712_D. Memory and Scores", "description": "Input\n\nThe first and only line of input contains the four integers a, b, k, and t (1 <= a, b <= 100, 1 <= k <= 1000, 1 <= t <= 100) --- the amount Memory and Lexa start with, the number k, and the number of turns respectively.", "grammar": {"productions": ["<S>->a <s> b <s> k <s> t"], "constraints": ["1<=a,b<=100", "1<=k<=1000", "1<=t<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes four variables: 'a', 'b', 'k', and 't'. None of these variables serve as counter variables, so they are not enclosed in brackets. The variables are separated by space symbols <s>. The grammar is constructed as '<S>->a <s> b <s> k <s> t', representing the input format where the four integers are given in a single line separated by spaces."}
{"name": "714_E. Sonya and Problem Wihtout a Legend", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 3000) --- the length of the array.\n\nNext line contains n integer ai (1 <= ai <= 109).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=3000", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the array elements, hence it is denoted as [n] in the grammar. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter-driven rule for [n], representing each array element 'a_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "719_A. Vitya in the Countryside", "description": "Every summer Vitya comes to visit his grandmother in the countryside. This summer, he got a huge wart. Every grandma knows that one should treat warts when the moon goes down. Thus, Vitya has to catch the moment when the moon is down.\n\nMoon cycle lasts 30 days. The size of the visible part of the moon (in Vitya's units) for each day is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, and then cycle repeats, thus after the second 1 again goes 0.\n\nAs there is no internet in the countryside, Vitya has been watching the moon for n consecutive days and for each of these days he wrote down the size of the visible part of the moon. Help him find out whether the moon will be up or down next day, or this cannot be determined by the data he has.\n\nInput\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 92) — the number of consecutive days Vitya was watching the size of the visible part of the moon. \n\nThe second line contains n integers ai (0 ≤ ai ≤ 15) — Vitya's records.\n\nIt's guaranteed that the input data is consistent.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=92", "0<=a_i<=15"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of days Vitya watched the moon, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n], representing the sequence of integers 'a_i' separated by spaces <s>. The grammar rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' systematically parse the sequence of integers following the count [n]."}
{"name": "71_A. Way Too Long Words", "description": "Sometimes some words like \"localization\" or \"internationalization\" are so long that writing them many times in one text is quite tiresome.\n\nLet's consider a word too long, if its length is strictly more than 10 characters. All too long words should be replaced with a special abbreviation.\n\nThis abbreviation is made like this: we write down the first and the last letter of a word and between them we write the number of letters between the first and the last letters. That number is in decimal system and doesn't contain any leading zeroes.\n\nThus, \"localization\" will be spelt as \"l10n\", and \"internationalization» will be spelt as \"i18n\".\n\nYou are suggested to automatize the process of changing the words with abbreviations. At that all too long words should be replaced by the abbreviation and the words that are not too long should not undergo any changes.\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 100). Each of the following n lines contains one word. All the words consist of lowercase Latin letters and possess the lengths of from 1 to 100 characters.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,100}", "<T_1>->[a-z]{1,100}"], "constraints": ["1<=n<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of words, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each word is represented by a sequence of lowercase Latin letters of length 1 to 100, denoted by the regular expression [a-z]{1,100}. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <n> [a-z]{1,100}', and '<T_1>->[a-z]{1,100}' to systematically parse the sequence of words following the count [n]."}
{"name": "721_A. One-dimensional Japanese Crossword", "description": "Recently Adaltik discovered japanese crosswords. Japanese crossword is a picture, represented as a table sized a × b squares, and each square is colored white or black. There are integers to the left of the rows and to the top of the columns, encrypting the corresponding row or column. The number of integers represents how many groups of black squares there are in corresponding row or column, and the integers themselves represents the number of consecutive black squares in corresponding group (you can find more detailed explanation in Wikipedia <https://en.wikipedia.org/wiki/Japanese_crossword>).\n\nAdaltik decided that the general case of japanese crossword is too complicated and drew a row consisting of n squares (e.g. japanese crossword sized 1 × n), which he wants to encrypt in the same way as in japanese crossword.\n\n<image> The example of encrypting of a single row of japanese crossword.\n\nHelp Adaltik find the numbers encrypting the row he drew.\n\nInput\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100) — the length of the row. The second line of the input contains a single string consisting of n characters 'B' or 'W', ('B' corresponds to black square, 'W' — to white square in the row that Adaltik drew).", "grammar": {"productions": ["<S>->[n] <n> [BW]{n}"], "constraints": ["1<=n<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the string, hence it is enclosed in [n]. The string consists of characters 'B' or 'W' and has a length of n, which is represented using the regular expression [BW]{n}. Thus, the grammar is constructed as '<S>->[n] <n> [BW]{n}' to reflect the input format where the first line specifies the length of the string and the second line contains the string itself."}
{"name": "725_C. Hidden Word", "description": "Input\n\nThe only line of the input contains the string s, consisting of 27 upper-case English letters. Each English letter occurs at least once in s.", "grammar": {"productions": ["<S>->[A-Z]{27}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a string 's' with exactly 27 uppercase English letters, each appearing at least once. Since the length is fixed and the content is strictly uppercase letters, the grammar is represented using a regular expression [A-Z]{27} to specify exactly 27 uppercase letters. Thus, the grammar is constructed as '<S>->[A-Z]{27}' to directly match the input format."}
{"name": "732_C. Sanatorium", "description": "Input\n\nThe only line contains three integers b, d and s (0 <= b, d, s <= 1018, b + d + s >= 1) --- the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium.", "grammar": {"productions": ["<S>->b <s> d <s> s"], "constraints": ["0<=b<=10^18", "0<=d<=10^18", "0<=s<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, 'b', 'd', and 's', which are not counter variables, hence they are not enclosed in brackets. The variables are separated by space symbols <s> to reflect the input format where three integers are given in a single line. The grammar is constructed as '<S>->b <s> d <s> s', representing the sequence of the three integers separated by spaces."}
{"name": "735_D. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2.10^9) --- the total year income of mr. Funt.", "grammar": {"productions": ["<S>->n"], "constraints": ["2<=n<=2*10^9"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is not used as a counter variable but simply represents the input value. Therefore, it is not enclosed in brackets. The grammar is straightforward, representing the input format as '<S>->n'."}
{"name": "737_A. Road to Cinema", "description": "Input\n\nThe first line contains four positive integers n, k, s and t (1 <= n <= 2·105, 1 <= k <= 2·105, 2 <= s <= 109, 1 <= t <= 2·109) --- the number of cars at the car rental service, the number of gas stations along the road, the length of the road and the time in which the film starts. \n\nEach of the next n lines contains two positive integers ci and vi (1 <= ci, vi <= 109) --- the price of the i-th car and its fuel tank capacity.\n\nThe next line contains k distinct integers g1, g2, ..., gk (1 <= gi <= s - 1) --- the positions of the gas stations on the road in arbitrary order.", "grammar": {"productions": ["<S>->[n] <s> [k] <s> s <s> t <n> <T_n> <n> <L_k>", "<T_i>-><T_i-1> <n> c_i <s> v_i", "<T_1>->c_1 <s> v_1", "<L_i>-><L_i-1> <s> g_i", "<L_1>->g_1"], "constraints": ["1<=n,k<=2*10^5", "2<=s<=10^9", "1<=t<=2*10^9", "1<=c_i,v_i<=10^9", "1<=g_i<=s-1"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables: n, k, s, and t. Among these, n and k serve as counter variables, hence they are enclosed in brackets as [n] and [k]. The grammar is initiated with '<S>->[n] <s> [k] <s> s <s> t <n> <T_n> <n> <L_k>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two variables c_i and v_i separated by a space symbol <s>. The non-terminal <L_i> is a counter-driven rule for [k], where each line contains a variable g_i separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> c_i <s> v_i', '<T_1>->c_1 <s> v_1', '<L_i>-><L_i-1> <s> g_i', and '<L_1>->g_1' to systematically parse the sequence of car details and gas station positions following the counts [n] and [k]."}
{"name": "73_A. The Elder Trolls IV: Oblivon", "description": "Input\n\nThe first line of input contains four integer numbers x, y, z, k (1 <= x, y, z <= 106, 0 <= k <= 109).", "grammar": {"productions": ["<S>->x <s> y <s> z <s> k"], "constraints": ["1<=x,y,z<=10^6", "0<=k<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes four variables: x, y, z, and k, none of which serve as counter variables. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->x <s> y <s> z <s> k', representing the input format where the four integers are separated by spaces."}
{"name": "740_A. Alyona and copybooks", "description": "Input\n\nThe only line contains 4 integers n, a, b, c (1 <= n, a, b, c <= 109).", "grammar": {"productions": ["<S>->n <s> a <s> b <s> c"], "constraints": ["1<=n,a,b,c<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables: n, a, b, and c. None of these variables serve as counter variables, so they are not enclosed in brackets. The variables are separated by space symbols <s>. The grammar is constructed as '<S>->n <s> a <s> b <s> c', representing the input format where four integers are given in a single line separated by spaces."}
{"name": "740_B. Alyona and flowers", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 100) --- the number of flowers and the number of subarrays suggested by the mother.\n\nThe second line contains the flowers moods --- n integers a1, a2, ..., an ( - 100 <= ai <= 100).\n\nThe next m lines contain the description of the subarrays suggested by the mother. The i-th of these lines contain two integers li and ri (1 <= li <= ri <= n) denoting the subarray a[li], a[li + 1], ..., a[ri].\n\nEach subarray can encounter more than once.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_n>-><T_n-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <n> l_i <s> r_i", "<L_1>->l_1 <s> r_1"], "constraints": ["1<=n,m<=100", "-100<=a_i<=100", "1<=l_i<=r_i", "1<=r_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n> <n> <L_m>', where <T_n> is a counter non-terminal for the sequence of flower moods a_i, and <L_m> is a counter non-terminal for the m subarrays described by l_i and r_i. The sequence of flower moods is constructed using '<T_n>-><T_n-1> <s> a_i' and '<T_1>->a_1'. The subarrays are described using '<L_i>-><L_i-1> <n> l_i <s> r_i' and '<L_1>->l_1 <s> r_1'. This structure ensures the input format is correctly parsed with the specified constraints."}
{"name": "745_A. Hongcow Learns the Cyclic Shift", "description": "Input\n\nThe first line of input will be a single string s (1 <= |s| <= 50), the word Hongcow initially learns how to spell. The string s consists only of lowercase English letters ('a'--'z').", "grammar": {"productions": ["<S>->[a-z]{1,50}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input is a single string 's' consisting of lowercase English letters with a length between 1 and 50. Since the variable 's' is not a counter variable but a string of characters, it is represented using a regular expression [a-z]{1,50} to denote the range of characters and their length. Thus, the grammar is constructed as '<S>->[a-z]{1,50}' to reflect the input format."}
{"name": "746_B. Decoding", "description": "Polycarp is mad about coding, that is why he writes Sveta encoded messages. He calls the median letter in a word the letter which is in the middle of the word. If the word's length is even, the median letter is the left of the two middle letters. In the following examples, the median letter is highlighted: contest, info. If the word consists of single letter, then according to above definition this letter is the median letter. \n\nPolycarp encodes each word in the following way: he writes down the median letter of the word, then deletes it and repeats the process until there are no letters left. For example, he encodes the word volga as logva.\n\nYou are given an encoding s of some word, your task is to decode it. \n\nInput\n\nThe first line contains a positive integer n (1 ≤ n ≤ 2000) — the length of the encoded word.\n\nThe second line contains the string s of length n consisting of lowercase English letters — the encoding.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=2000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the encoded word, hence it is enclosed in [n]. The second line contains a string of length n consisting of lowercase English letters, which is represented using the regular expression [a-z]{n}. Thus, the grammar is constructed as '<S>->[n] <n> [a-z]{n}' to reflect the input format where the first line specifies the length of the string in the second line."}
{"name": "755_A. PolandBall and Hypothesis", "description": "PolandBall is a young, clever Ball. He is interested in prime numbers. He has stated a following hypothesis: \"There exists such a positive integer n that for each positive integer m number n·m + 1 is a prime number\".\n\nUnfortunately, PolandBall is not experienced yet and doesn't know that his hypothesis is incorrect. Could you prove it wrong? Write a program that finds a counterexample for any n.\n\nInput\n\nThe only number in the input is n (1 ≤ n ≤ 1000) — number from the PolandBall's hypothesis.", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a single variable 'n', which is not used as a counter variable in this context, hence it is represented simply as 'N' without brackets. The grammar is straightforward, defined as '<S>->N', reflecting the input format where only one number is provided."}
{"name": "758_C. Unfair Poll", "description": "Input\n\nThe first and the only line contains five integers n, m, k, x and y (1 <= n, m <= 100, 1 <= k <= 1018, 1 <= x <= n, 1 <= y <= m).", "grammar": {"productions": ["<S>->n <s> m <s> k <s> x <s> y"], "constraints": ["1<=n,m<=100", "1<=k<=10^18", "1<=x<=n", "1<=y<=m"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes five variables: n, m, k, x, and y. None of these variables serve as counter variables, hence they are not enclosed in brackets. The grammar is structured to represent the input format where these five integers are separated by spaces. Thus, the grammar is constructed as '<S>->n <s> m <s> k <s> x <s> y', reflecting the sequence of integers in the input line."}
{"name": "758_F. Geometrical Progression", "description": "Input\n\nThe first and the only line cotains three integers n, l and r (1 <= n <=10^7, 1 <= l <= r <=10^7).", "grammar": {"productions": ["<S>->n <s> l <s> r"], "constraints": ["1<=n<=10^7", "1<=l<=r<=10^7"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes three variables, n, l, and r, but none of them serve as counter variables in this context, hence they are not enclosed in brackets. The grammar is initiated with '<S>->n <s> l <s> r', representing the input format where three integers are separated by spaces."}
{"name": "75_A. Life Without Zeros", "description": "Can you imagine our life if we removed all zeros from it? For sure we will have many problems.\n\nIn this problem we will have a simple example if we removed all zeros from our life, it's the addition operation. Let's assume you are given this equation a + b = c, where a and b are positive integers, and c is the sum of a and b. Now let's remove all zeros from this equation. Will the equation remain correct after removing all zeros?\n\nFor example if the equation is 101 + 102 = 203, if we removed all zeros it will be 11 + 12 = 23 which is still a correct equation.\n\nBut if the equation is 105 + 106 = 211, if we removed all zeros it will be 15 + 16 = 211 which is not a correct equation.\n\nInput\n\nThe input will consist of two lines, the first line will contain the integer a, and the second line will contain the integer b which are in the equation as described above (1 ≤ a, b ≤ 10^9). There won't be any leading zeros in both. The value of c should be calculated as c = a + b.", "grammar": {"productions": ["<S>->a <n> b"], "constraints": ["1<=a,b<=10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a newline symbol denoted as <n>. The structure of the grammar is formulated as '<S>->a <n> b', representing the input format where 'a' and 'b' are two integers given in separate lines. Since 'a' and 'b' are not used as counters, they are not enclosed in brackets. The constraints specify that both 'a' and 'b' are positive integers without leading zeros and within the range 1 to 10^9."}
{"name": "761_A. Dasha and Stairs", "description": "Input\n\nIn the only line you are given two integers a, b (0 <= a, b <= 100) --- the number of even and odd steps, accordingly.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["0<=a,b<=100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space."}
{"name": "762_A. k-th divisor", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <=10^15, 1 <= k <=10^9).", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=10^15", "1<=k<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, but neither serves as a counter variable in this context, so they are not enclosed in brackets. The grammar is simply structured as '<S>->n <s> k', representing the input format where 'n' and 'k' are two integers separated by a space."}
{"name": "764_A. Taymyr is calling you", "description": "Comrade Dujikov is busy choosing artists for Timofey's birthday and is recieving calls from Taymyr from Ilia-alpinist.\n\nIlia-alpinist calls every n minutes, i.e. in minutes n, 2n, 3n and so on. Artists come to the comrade every m minutes, i.e. in minutes m, 2m, 3m and so on. The day is z minutes long, i.e. the day consists of minutes 1, 2, ..., z. How many artists should be killed so that there are no artists in the room when Ilia calls? Consider that a call and a talk with an artist take exactly one minute.\n\nInput\n\nThe only string contains three integers — n, m and z (1 ≤ n, m, z ≤ 10^4).", "grammar": {"productions": ["<S>->n <s> m <s> z"], "constraints": ["1<=n<=10^4", "1<=m<=10^4", "1<=z<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, n, m, and z, none of which serve as counter variables in this context. Therefore, they are represented simply as 'n', 'm', and 'z' without brackets. The input format requires these three integers to be separated by spaces, which is denoted by <s>. Thus, the grammar is constructed as '<S>->n <s> m <s> z' to reflect the input structure where three integers are given in a single line separated by spaces."}
{"name": "765_B. Code obfuscation", "description": "Input\n\nIn the only line of input there is a string S of lowercase English letters (1 <= |S| <= 500) --- the identifiers of a program with removed whitespace characters.", "grammar": {"productions": ["<S>->[a-z]{1,500}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input is a string S consisting of lowercase English letters with a length between 1 and 500. Since the variable S is directly replaced by a regex expression [a-z]{1,500}, it does not require a counter non-terminal. Thus, the grammar is simply represented as '<S>->[a-z]{1,500}', where the regex expression specifies the allowed characters and their length range."}
{"name": "765_D. Artsem and Saunders", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 105).\n\nThe second line contains n space-separated integers --- values f(1), ..., f(n) (1 <= f(i) <= n).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> f_i", "<T_1>->f_1"], "constraints": ["1<=n<=10^5", "1<=f_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of integers f(1) to f(n) is represented by <T_i>, which recursively includes each integer separated by a space <s>, starting from f_1. The constraints ensure that 'n' and each 'f_i' are within specified limits."}
{"name": "768_A. Oath of the Night's Watch", "description": "\"Night gathers, and now my watch begins. It shall not end until my death. I shall take no wife, hold no lands, father no children. I shall wear no crowns and win no glory. I shall live and die at my post. I am the sword in the darkness. I am the watcher on the walls. I am the shield that guards the realms of men. I pledge my life and honor to the Night's Watch, for this night and all the nights to come.\" — The Night's Watch oath.\n\nWith that begins the watch of Jon Snow. He is assigned the task to support the stewards.\n\nThis time he has n stewards with him whom he has to provide support. Each steward has his own strength. Jon Snow likes to support a steward only if there exists at least one steward who has strength strictly less than him and at least one steward who has strength strictly greater than him.\n\nCan you find how many stewards will Jon support?\n\nInput\n\nFirst line consists of a single integer n (1 ≤ n ≤ 10^5) — the number of stewards with Jon Snow.\n\nSecond line consists of n space separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) representing the values assigned to the stewards.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "0<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each integer in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "76_B. Mice", "description": "Input\n\nThe first line of the input contains four integer numbers N (1 <= N <= 105), M (0 <= M <= 105), Y0 (0 <= Y0 <= 107), Y1 (0 <= Y1 <= 107, Y0 != Y1). The second line contains a strictly increasing sequence of N numbers --- x coordinates of mice. Third line contains a strictly increasing sequence of M numbers --- x coordinates of cheese. All coordinates are integers and do not exceed 107 by absolute value.", "grammar": {"productions": ["<S>->[N] <s> [M] <s> Y0 <s> Y1 <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1", "<L_i>-><L_i-1> <s> y_i", "<L_1>->y_1"], "constraints": ["1<=N<=10^5", "0<=M<=10^5", "0<=Y0<=10^7", "Y0!=Y1", "0<=Y1<=10^7", "0<=x_i<=10^7", "0<=y_i<=10^7"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables: N, M, Y0, and Y1. Among these, N and M serve as counter variables for the sequences of x and y coordinates, respectively, hence they are enclosed in brackets as [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <s> Y0 <s> Y1 <n> <T_N> <n> <L_M>'. The non-terminal <T_i> is a counter-driven rule for [N], representing the sequence of x coordinates, each separated by a space symbol <s>. Similarly, <L_i> is a counter-driven rule for [M], representing the sequence of y coordinates, each separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> x_i', '<T_1>->x_1', '<L_i>-><L_i-1> <s> y_i', and '<L_1>->y_1' to systematically parse the sequences of x and y coordinates following the counts [N] and [M]."}
{"name": "76_F. Tourist", "description": "Input\n\nThe first line of input contains single integer number N (1 <= N <= 100000) --- number of interesting events. The following N lines contain two integers xi and ti --- coordinate and time of the i-th event. The last line of the input contains integer V --- maximum speed of the tourist. All xi will be within range  - 2·108 <= xi <= 2·108, all ti will be between 1 and 2·106 inclusive. V will be positive and will not exceed 1000. The input may contain events that happen at the same time or in the same place but not in the same place at the same time.", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> V", "<T_i>-><T_i-1> <n> x_i <s> t_i", "<T_1>->x_1 <s> t_1"], "constraints": ["1<=N<=100000", "-2*10^8<=x_i<=2*10^8", "1<=t_i<=2*10^6", "1<=V<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the number of events, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N> <n> V', where <T_N> is a counter non-terminal for [N]. Each event is represented by 'x_i' and 't_i' separated by a space <s>, and the sequence is constructed using '<T_i>-><T_i-1> <n> x_i <s> t_i' and '<T_1>->x_1 <s> t_1'. The variable 'V' is not a counter, so it is not enclosed in brackets. The constraints are derived from the input specifications for each variable."}
{"name": "774_D. Lie or Truth", "description": "Input\n\nThe first line contains three integers n, l, r (1 <= n <= 105, 1 <= l <= r <= n) --- the number of Vasya's cubes and the positions told by Stepan.\n\nThe second line contains the sequence a1, a2, ..., an (1 <= ai <= n) --- the sequence of integers written on cubes in the Vasya's order.\n\nThe third line contains the sequence b1, b2, ..., bn (1 <= bi <= n) --- the sequence of integers written on cubes after Stepan rearranged their order.\n\nIt is guaranteed that Stepan did not remove or add other cubes, he only rearranged Vasya's cubes.", "grammar": {"productions": ["<S>->[n] <s> [l] <s> [r] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_i", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_i"], "constraints": ["1<=n<=105", "1<=l<=r", "r<=n", "1<=a_i<=n", "1<=b_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, n, l, and r, where n serves as a counter variable for the sequences a and b, hence it is denoted as [n]. The variables l and r are not counters, so they are represented without brackets. The grammar is initiated with '<S>->[n] <s> l <s> r <n> <T_n> <n> <L_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each element of the first sequence separated by a space symbol <s>. Similarly, <L_i> is a counter-driven rule for [n], where 'b_i' represents each element of the second sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i', '<T_1>->a_i', '<L_i>-><L_i-1> <s> b_i', and '<L_1>->b_i' to systematically parse the sequences of elements following the count [n]."}
{"name": "774_K. Stepan and Vowels", "description": "Input\n\nThe first line contains the integer n (1 <= n <= 100 000) --- the number of letters in the word written by Stepan.\n\nThe second line contains the string s which has length that equals to n and contains only lowercase English letters --- the word written by Stepan.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=100000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the string, hence it is enclosed in [n]. The string itself consists of lowercase English letters, which is represented using the regular expression [a-z]{n}, indicating a sequence of n lowercase letters. Thus, the grammar is constructed as '<S>->[n] <n> [a-z]{n}' to reflect the input format where the first line specifies the length of the string and the second line provides the string itself."}
{"name": "776_E. The Holmes Children", "description": "Input\n\nA single line of input contains two space separated integers n (1 <= n <=10^12) and k (1 <= k <=10^12) indicating that Eurus asks Sherlock and Mycroft to find the value of Fk(n) modulo 1000000007.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=10^12", "1<=k<=10^12"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'k', which are not used as counters in this context, hence they are not enclosed in brackets. The variables are separated by a space symbol <s>. The grammar is structured as '<S>->n <s> k', representing the input format where 'n' and 'k' are two integers separated by a space."}
{"name": "779_A. Pupils Redistribution", "description": "Input\n\nThe first line of the input contains integer number n (1 <= n <= 100) --- number of students in both groups.\n\nThe second line contains sequence of integer numbers a1, a2, ..., an (1 <= ai <= 5), where ai is academic performance of the i-th student of the group A.\n\nThe third line contains sequence of integer numbers b1, b2, ..., bn (1 <= bi <= 5), where bi is academic performance of the i-th student of the group B.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> ai", "<T_1>->ai", "<L_i>-><L_i-1> <s> bi", "<L_1>->bi"], "constraints": ["1<=n<=100", "1<=ai<=5", "1<=bi<=5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for the sequences of academic performances, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n> <n> <L_n>', where <T_n> and <L_n> are counter non-terminals for the sequences 'a1, a2, ..., an' and 'b1, b2, ..., bn' respectively. Each sequence is generated by decrementing the counter non-terminals <T_i> and <L_i> until they reach 1, with elements separated by spaces. The grammar ensures the correct format for the input lines representing the academic performances of students in groups A and B."}
{"name": "785_A. Anton and Polyhedrons", "description": "Anton's favourite geometric figures are regular polyhedrons. Note that there are five kinds of regular polyhedrons: \n\n  * Tetrahedron. Tetrahedron has 4 triangular faces. \n  * Cube. Cube has 6 square faces. \n  * Octahedron. Octahedron has 8 triangular faces. \n  * Dodecahedron. Dodecahedron has 12 pentagonal faces. \n  * Icosahedron. Icosahedron has 20 triangular faces. \n\n\n\nAll five kinds of polyhedrons are shown on the picture below:\n\n<image>\n\nAnton has a collection of n polyhedrons. One day he decided to know, how many faces his polyhedrons have in total. Help Anton and find this number!\n\nInput\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of polyhedrons in Anton's collection.\n\nEach of the following n lines of the input contains a string si — the name of the i-th polyhedron in Anton's collection. The string can look like this:\n\n  * \"Tetrahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a tetrahedron. \n  * \"Cube\" (without quotes), if the i-th polyhedron in Anton's collection is a cube. \n  * \"Octahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an octahedron. \n  * \"Dodecahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a dodecahedron. \n  * \"Icosahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an icosahedron.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> <C>", "<T_1>-><C>", "<C>->Tetrahedron|Cube|Octahedron|Dodecahedron|Icosahedron"], "constraints": ["1<=N<=200000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter for the number of polyhedrons, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates 'N' lines of polyhedron names. Each polyhedron name is represented by the non-terminal <C>, which can be one of the five specified polyhedron types. The grammar rules '<T_i>-><T_i-1> <n> <C>' and '<T_1>-><C>' ensure that each polyhedron name is listed on a new line, following the count [N]. The non-terminal <C> directly maps to the possible polyhedron names without any further decomposition, as they are fixed strings."}
{"name": "789_A. Anastasia and pebbles", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 105, 1 <= k <= 109) --- the number of different pebble types and number of pebbles Anastasia can place in one pocket.\n\nThe second line contains n integers w1, w2, ..., wn (1 <= wi <= 104) --- number of pebbles of each type.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> wi", "<T_1>->wi"], "constraints": ["1<=n<=105", "1<=k<=109", "1<=wi<=104"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'k', where 'n' serves as a counter variable for the sequence of integers 'wi', hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'wi' represents each integer in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> wi' and '<T_1>->wi' to systematically parse the sequence of integers following the count [n]."}
{"name": "796_A. Buying A House", "description": "Zane the wizard had never loved anyone before, until he fell in love with a girl, whose name remains unknown to us.\n\n<image>\n\nThe girl lives in house m of a village. There are n houses in that village, lining in a straight line from left to right: house 1, house 2, ..., house n. The village is also well-structured: house i and house i + 1 (1 ≤ i < n) are exactly 10 meters away. In this village, some houses are occupied, and some are not. Indeed, unoccupied houses can be purchased.\n\nYou will be given n integers a1, a2, ..., an that denote the availability and the prices of the houses. If house i is occupied, and therefore cannot be bought, then ai equals 0. Otherwise, house i can be bought, and ai represents the money required to buy it, in dollars.\n\nAs Zane has only k dollars to spare, it becomes a challenge for him to choose the house to purchase, so that he could live as near as possible to his crush. Help Zane determine the minimum distance from his crush's house to some house he can afford, to help him succeed in his love.\n\nInput\n\nThe first line contains three integers n, m, and k (2 ≤ n ≤ 100, 1 ≤ m ≤ n, 1 ≤ k ≤ 100) — the number of houses in the village, the house where the girl lives, and the amount of money Zane has (in dollars), respectively.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100) — denoting the availability and the prices of the houses.\n\nIt is guaranteed that am = 0 and that it is possible to purchase some house with no more than k dollars.", "grammar": {"productions": ["<S>->[n] <s> m <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=m<=n", "1<=k<=100", "0<=a_i<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: n, m, and k. Among these, 'n' serves as a counter variable for the sequence of house prices, hence it is enclosed in [n]. The variables 'm' and 'k' are not counters, so they are not enclosed. The grammar is structured as '<S>->[n] <s> m <s> k <n> <T_n>', where <T_n> is a counter non-terminal for [n], generating the sequence of house prices separated by spaces. The rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' systematically parse the sequence of house prices following the count [n]."}
{"name": "797_C. Minimal string", "description": "Input\n\nFirst line contains non-empty string s (1 <= |s| <=10^5), consisting of lowercase English letters.", "grammar": {"productions": ["<S>->[a-z]{1,105}"], "constraints": ["1<=|s|<=10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. The input is a non-empty string 's' consisting of lowercase English letters, and its length is between 1 and 10^5. Since the string is composed of lowercase letters, the regular expression [a-z]{1,105} is used to represent it, where the length range is specified to match the constraint. The grammar is thus constructed as '<S>->[a-z]{1,105}' to directly parse the input string."}
{"name": "799_D. Field expansion", "description": "Input\n\nThe first line contains five integers a, b, h, w and n (1 <= a, b, h, w, n <= 100 000) --- the sizes of the rectangle needed to be placed, the initial sizes of the field and the number of available extensions.\n\nThe second line contains n integers a1, a2, ..., an (2 <= ai <= 100 000), where ai equals the integer a side multiplies by when the i-th extension is applied.", "grammar": {"productions": ["<S>->a <s> b <s> h <s> w <s> [n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=a,b,h,w,n<=100000", "2<=a_i<=100000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes five variables: a, b, h, w, and n. Among these, 'n' serves as a counter variable for the sequence of extensions, hence it is enclosed in [n]. The grammar is structured as '<S>->a <s> b <s> h <s> w <s> [n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence of extensions is represented by '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1', ensuring each extension is separated by a space. The variables a, b, h, and w are not counters, so they are not enclosed in brackets."}
{"name": "79_D. Password", "description": "Input\n\nThe first line contains three integers n, k and l (1 <= n <= 10000, 1 <= k <= 10, 1 <= l <= 100), separated by single spaces.\n\nThe second line contains k integers x1, ..., xk (1 <= x1 < x2 < ... < xk <= n), separated by single spaces.\n\nThe third line contains l integers a1, ..., al (1 <= ai <= n), separated by single spaces. It is possible that some elements of the array ai are equal value.", "grammar": {"productions": ["<S>->n <s> [k] <s> [l] <n> <T_k> <n> <L_l>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=n<=10000", "1<=k<=10", "1<=l<=100", "1<=x_i<=n", "1<=a_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, k, and l. Among these, k and l serve as counter variables for the sequences x1 to xk and a1 to al, respectively, hence they are enclosed in brackets as [k] and [l]. The variable n is not a counter, so it remains as n. The grammar starts with '<S>->n <s> [k] <s> [l] <n> <T_k> <n> <L_l>'. The non-terminal <T_i> is a counter-driven rule for [k], generating the sequence x1 to xk separated by spaces. Similarly, <L_i> is a counter-driven rule for [l], generating the sequence a1 to al separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> x_i', '<T_1>->x_1', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse the sequences following the counts [k] and [l]."}
{"name": "803_C. Maximal GCD", "description": "Input\n\nThe first line consists of two numbers n and k (1 <= n, k <= 10^10).", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n,k<=10^10"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, which are not used as counters in this context. Therefore, they are represented simply as 'n' and 'k' without brackets. The grammar is structured as '<S>->n <s> k', indicating that the input consists of two numbers separated by a space."}
{"name": "807_A. Is it rated?", "description": "Is it rated?\n\nHere it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.\n\nAnother Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.\n\nIt's known that if at least one participant's rating has changed, then the round was rated for sure.\n\nIt's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.\n\nIn this problem, you should not make any other assumptions about the rating system.\n\nDetermine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 1000) — the number of round participants.\n\nEach of the next n lines contains two integers ai and bi (1 ≤ ai, bi ≤ 4126) — the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=n<=1000", "1<=a_i<=4126", "1<=b_i<=4126"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of participants, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each participant's ratings 'a_i' and 'b_i' are separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of participants' ratings following the count [n]."}
{"name": "807_B. T-Shirt Hunt", "description": "Input\n\nThe only line contains three integers p, x and y (26 <= p <= 500; 1 <= y <= x <= 20000) --- your place in Codecraft-17, your current score in the elimination round of 8VC Venture Cup 2017, and the smallest number of points you consider sufficient for winning the current round.", "grammar": {"productions": ["<S>->p <s> x <s> y"], "constraints": ["26<=p<=500", "1<=y<=x", "1<=x<=20000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'p', 'x', and 'y', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->p <s> x <s> y', representing the input format where 'p', 'x', and 'y' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets."}
{"name": "808_G. Anthem of Berland", "description": "Input\n\nThe first line contains string of small Latin letters and question marks s (1 <= |s| <= 105).\n\nThe second line contains string of small Latin letters t (1 <= |t| <= 105).\n\nProduct of lengths of strings |s|·|t| won't exceed 107.", "grammar": {"productions": ["<S>->[a-z?]{1,10^5} <n> [a-z]{1,10^5}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two strings, 's' and 't', where 's' can contain small Latin letters and question marks, and 't' contains only small Latin letters. Both strings have lengths that can vary up to 10^5. Since the lengths are not used as counters, they are not enclosed in brackets. The grammar is constructed to reflect the input format where the first line is string 's' followed by a newline and then string 't'. The regular expressions [a-z?]{1,10^5} and [a-z]{1,10^5} are used to define the valid characters and lengths for 's' and 't' respectively. Thus, the grammar is represented as '<S>->[a-z?]{1,10^5} <n> [a-z]{1,10^5}'."}
{"name": "814_C. An impassioned circulation of affection", "description": "Input\n\nThe first line of input contains a positive integer n (1 <= n <= 1 500) --- the length of the garland.\n\nThe second line contains n lowercase English letters s1s2... sn as a string --- the initial colours of paper pieces on the garland.\n\nThe third line contains a positive integer q (1 <= q <= 200 000) --- the number of plans Nadeko has.\n\nThe next q lines describe one plan each: the i-th among them contains an integer mi (1 <= mi <= n) --- the maximum amount of pieces to repaint, followed by a space, then by a lowercase English letter ci --- Koyomi's possible favourite colour.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n} <n> [q] <n> <T_q>", "<T_i>-><T_i-1> <n> mi <s> [a-z]{1}", "<T_1>->mi <s> [a-z]{1}"], "constraints": ["1<=n<=1500", "1<=q<=200000", "1<=mi<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is a counter variable, hence it is enclosed in [n]. The second line contains 'n' lowercase English letters, which is represented by the regex [a-z]{n}. The variable 'q' is another counter variable, enclosed in [q], and it is followed by 'q' lines of input, each containing an integer 'mi' and a lowercase English letter 'ci'. The non-terminal <T_i> is used to represent each plan line, with 'mi' and 'ci' separated by a space <s>. The regex [a-z]{1} is used for 'ci' to ensure it is a single lowercase letter. The grammar is structured as '<S>->[n] <n> [a-z]{n} <n> [q] <n> <T_q>', '<T_i>-><T_i-1> <n> mi <s> [a-z]{1}', and '<T_1>->mi <s> [a-z]{1}' to systematically parse the input lines."}
{"name": "815_B. Karen and Test", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 200000), the number of numbers written on the first row.\n\nThe next line contains n integers. Specifically, the i-th one among these is ai (1 <= ai <= 109), the i-th number on the first row.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_i"], "constraints": ["1<=n<=200000", "1<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence of integers. Each integer 'a_i' is separated by a space <s>, leading to the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_i'. This setup ensures the grammar correctly parses the input format where 'n' specifies the count of integers followed by the integers themselves."}
{"name": "81_A. Plug-in", "description": "Input\n\nThe input data consists of a single line to be processed. The length of the line is from 1 to 2.10^5 characters inclusive. The string contains only lowercase Latin letters.", "grammar": {"productions": ["<S>->[a-z]{1,200000}"], "constraints": [""]}, "reason": "The grammar starts with the start non-terminal <S>. The input is a single line of lowercase Latin letters with a length ranging from 1 to 200,000 characters. Since the entire line is a sequence of characters without any counter variables or specific separators, it is represented using a regular expression [a-z]{1,200000} to denote the range of valid characters and the length constraint. Thus, the grammar is simply '<S>->[a-z]{1,200000}'."}
{"name": "820_A. Mister B and Book Reading", "description": "Input\n\nFirst and only line contains five space-separated integers: c, v0, v1, a and l (1 <= c <= 1000, 0 <= l < v0 <= v1 <= 1000, 0 <= a <= 1000) --- the length of the book in pages, the initial reading speed, the maximum reading speed, the acceleration in reading speed and the number of pages for rereading.", "grammar": {"productions": ["<S>->c <s> v0 <s> v1 <s> a <s> l"], "constraints": ["1<=c<=1000", "0<=l<v0", "v0<=v1<=1000", "0<=a<=1000"]}, "reason": "The grammar construction begins with the start non-terminal <S>. It includes five variables: c, v0, v1, a, and l, none of which serve as counter variables. Therefore, they are not enclosed in brackets. The variables are separated by space symbols <s> in the input format. The grammar is structured as '<S>->c <s> v0 <s> v1 <s> a <s> l', representing the input format where all five integers are separated by spaces."}
{"name": "820_D. Mister B and PR Shifts", "description": "Input\n\nFirst line contains single integer n (2 <= n <= 106) --- the length of the permutation.\n\nThe second line contains n space-separated integers p1, p2, ..., pn (1 <= pi <= n) --- the elements of the permutation. It is guaranteed that all elements are distinct.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["2<=n<=10^6", "1<=p_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter for the sequence of integers, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for the sequence of integers. The sequence is constructed with each integer 'p_i' separated by a space <s>, leading to the rules '<T_i>-><T_i-1> <s> p_i' and '<T_1>->p_1'. This structure ensures the input format matches the specification of a permutation with distinct elements."}
{"name": "825_E. Minimal Labels", "description": "Input\n\nThe first line contains two integer numbers n, m (2 <= n <= 105, 1 <= m <= 105).\n\nNext m lines contain two integer numbers v and u (1 <= v, u <= n, v != u) --- edges of the graph. Edges are directed, graph doesn't contain loops or multiple edges.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>->v <s> u", "<T_1>->v <s> u"], "constraints": ["2<=n<=10^5", "1<=m<=10^5", "1<=v,u<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each line consists of two integers v and u separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>->v <s> u' and '<T_1>->v <s> u' to systematically parse the sequence of edges following the count [m]."}
{"name": "825_F. String Compression", "description": "Input\n\nThe only line of input contains one string s consisting of lowercase Latin letters (1 <= |s| <= 8000).", "grammar": {"productions": ["<S>->[a-z]{1,8000}"], "constraints": ["1<=|s|<=8000"]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a single string 's' composed of lowercase Latin letters, with a length constraint of 1 to 8000 characters. Since the entire string is defined by a regular expression [a-z]{1,8000}, which specifies a sequence of lowercase letters of variable length, the grammar is simply represented as '<S>->[a-z]{1,8000}'. This directly captures the input requirement without the need for additional non-terminals or counters, as the regex fully describes the string's composition and length."}
{"name": "82_A. Double Cola", "description": "Sheldon, Leonard, Penny, Rajesh and Howard are in the queue for a \"Double Cola\" drink vending machine; there are no other people in the queue. The first one in the queue (Sheldon) buys a can, drinks it and doubles! The resulting two Sheldons go to the end of the queue. Then the next in the queue (Leonard) buys a can, drinks it and gets to the end of the queue as two Leonards, and so on. This process continues ad infinitum.\n\nFor example, Penny drinks the third can of cola and the queue will look like this: Rajesh, Howard, Sheldon, Sheldon, Leonard, Leonard, Penny, Penny.\n\nWrite a program that will print the name of a man who will drink the n-th can.\n\nNote that in the very beginning the queue looks like that: Sheldon, Leonard, Penny, Rajesh, Howard. The first person is Sheldon.\n\nInput\n\nThe input data consist of a single integer n (1 ≤ n ≤ 10^9).\n\nIt is guaranteed that the pretests check the spelling of all the five names, that is, that they contain all the five possible answers.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'n' is the only input and serves as a counter variable, hence it is enclosed in [n]. The grammar is constructed as '<S>->[n]' to represent the input format where 'n' is a single integer. Since the problem involves names and their positions in a queue, but the input is solely the integer 'n', the grammar does not need to account for the names directly, focusing instead on the counter variable [n]."}
{"name": "830_A. Office Keys", "description": "Input\n\nThe first line contains three integers n, k and p (1 <= n <= 1 000, n <= k <= 2 000, 1 <= p <= 109) --- the number of people, the number of keys and the office location.\n\nThe second line contains n distinct integers a1, a2, ..., an (1 <= ai <= 109) --- positions in which people are located initially. The positions are given in arbitrary order.\n\nThe third line contains k distinct integers b1, b2, ..., bk (1 <= bj <= 109) --- positions of the keys. The positions are given in arbitrary order.\n\nNote that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point.", "grammar": {"productions": ["<S>->[n] <s> [k] <s> p <n> <T_n> <n> <L_k>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=1000", "n<=k<=2000", "1<=p<=10^9", "1<=a_i<=10^9", "1<=b_j<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: n, k, and p. Both n and k serve as counter variables, hence they are enclosed in brackets as [n] and [k]. The grammar is initiated with '<S>->[n] <s> [k] <s> p <n> <T_n> <n> <L_k>'. Here, <T_n> is a counter non-terminal for [n], representing the sequence of positions for people, and <L_k> is a counter non-terminal for [k], representing the sequence of positions for keys. The grammar constructs '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' parse the sequence of people's positions, while '<L_i>-><L_i-1> <s> b_i' and '<L_1>->b_1' parse the sequence of keys' positions. This structure ensures the input format is correctly represented with the given constraints."}
{"name": "832_A. Sasha and Sticks", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <= 1018, k <= n) --- the number of sticks drawn by Sasha and the number k --- the number of sticks to be crossed out on each turn.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n,k<=10^18", "k<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'k', which are not used as counter variables in this context, hence they are not enclosed in brackets. The grammar is structured as '<S>->n <s> k', representing the input format where 'n' and 'k' are two integers separated by a space. Since neither 'n' nor 'k' serve as counters for sequences or repetitions, no counter non-terminals are needed, and the grammar remains simple, directly mapping the input specification."}
{"name": "838_D. Airplane Arrangements", "description": "Input\n\nThe first line of input will contain two integers n, m (1 <= m <= n <= 1 000 000), the number of seats, and the number of passengers, respectively.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=m<=n<=1000000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, but neither serves as a counter variable in this context, so they are not enclosed in brackets. The grammar is structured as '<S>->n <s> m', representing the input format where n and m are two integers separated by a space."}
{"name": "840_B. Leha and another game about graph", "description": "Input\n\nThe first line contains two integers n, m (1 <= n <= 3·105, n - 1 <= m <= 3·105) --- number of vertices and edges.\n\nThe second line contains n integers d1, d2, ..., dn ( - 1 <= di <= 1) --- numbers on the vertices.\n\nEach of the next m lines contains two integers u and v (1 <= u, v <= n) --- edges. It's guaranteed, that graph in the input is connected.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> d_i", "<T_1>->d_1", "<L_i>-><L_i-1> <n> u <s> v", "<L_1>->u <s> v"], "constraints": ["1<=n<=3*10^5", "n-1<=m<=3*10^5", "-1<=d_i<=1", "1<=u,v<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n> <n> <L_m>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'd_i' represents each integer separated by a space symbol <s>. The non-terminal <L_i> is a counter-driven rule for [m], where each line contains two integers 'u' and 'v' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> d_i', '<T_1>->d_1', '<L_i>-><L_i-1> <n> u <s> v', and '<L_1>->u <s> v' to systematically parse the sequence of integers and edges following the counts [n] and [m]."}
{"name": "841_A. Generous Kefa", "description": "One day Kefa found n baloons. For convenience, we denote color of i-th baloon as si — lowercase letter of the Latin alphabet. Also Kefa has k friends. Friend will be upset, If he get two baloons of the same color. Kefa want to give out all baloons to his friends. Help Kefa to find out, can he give out all his baloons, such that no one of his friens will be upset — print «YES», if he can, and «NO», otherwise. Note, that Kefa's friend will not upset, if he doesn't get baloons at all.\n\nInput\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 100) — the number of baloons and friends.\n\nNext line contains string s — colors of baloons.", "grammar": {"productions": ["<S>->[n] <s> k <n> [a-z]{n}"], "constraints": ["1<=n<=100", "1<=k<=100"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and k, where n serves as a counter variable for the number of balloons, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <n> [a-z]{n}'. The string s, representing the colors of the balloons, is defined using the regular expression [a-z]{n}, indicating a sequence of n lowercase letters. This structure ensures the input format is correctly parsed, with n balloons and k friends, followed by the string of balloon colors."}
{"name": "845_B. Luba And The Ticket", "description": "Input\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) --- this string denotes Luba's ticket. The ticket can start with the digit 0.", "grammar": {"productions": ["<S>->[0-9]{6}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input is a string of exactly 6 characters, each being a digit from 0 to 9. Since the length is fixed and the characters are digits, the regular expression [0-9]{6} is used to represent the string. The grammar is thus constructed as '<S>->[0-9]{6}', which directly matches the input format of a 6-digit string where each digit can be from 0 to 9, including leading zeros."}
{"name": "846_B. Math Show", "description": "Input\n\nThe first line contains three integer numbers n, k and M (1 <= n <= 45, 1 <= k <= 45, 0 <= M <= 2·109).\n\nThe second line contains k integer numbers, values tj (1 <= tj <= 1000000), where tj is the time in minutes required to solve j-th subtask of any task.", "grammar": {"productions": ["<S>->n <s> [k] <s> M <n> <T_k>", "<T_i>-><T_i-1> <s> t_i", "<T_1>->t_1"], "constraints": ["1<=n<=45", "1<=k<=45", "0<=M<=2*10^9", "1<=t_i<=1000000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: n, k, and M. Among these, 'k' serves as a counter variable for the sequence of integers 't_j', hence it is enclosed in brackets as [k]. The grammar is structured as '<S>->n <s> [k] <s> M <n> <T_k>', where <T_k> is the counter non-terminal for [k], generating the sequence of 't_j' values separated by spaces. The rules '<T_i>-><T_i-1> <s> t_i' and '<T_1>->t_1' define the sequence generation, decrementing the counter until it reaches 1. The variables n and M are not counters, so they are not enclosed in brackets."}
{"name": "847_C. Sum of Nestings", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 3.10^5, 0 <= k <=10^18) --- the number of opening brackets and needed total nesting.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=3*10^5", "0<=k<=10^18"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, n and k, but neither serves as a counter variable in this context. Therefore, they are represented simply as 'n' and 'k' without brackets. The grammar is structured as '<S>->n <s> k', reflecting the input format where 'n' and 'k' are two integers separated by a space."}
{"name": "847_D. Dog Show", "description": "Input\n\nTwo integer numbers are given in the first line - n and T (1 <= n <= 200 000, 1 <= T <= 2.10^9) --- the number of bowls of food and the time when the dog is stopped.\n\nOn the next line numbers t1, t2, ..., tn (1 <= ti <=10^9) are given, where ti is the moment of time when the i-th bowl of food is ready for eating.", "grammar": {"productions": ["<S>->[n] <s> T <n> <T_n>", "<T_i>-><T_i-1> <s> ti", "<T_1>->ti"], "constraints": ["1<=n<=200000", "1<=T<=2*10^9", "1<=ti<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables 'n' and 'T' are given in the first line, where 'n' serves as a counter variable for the sequence of 'ti' values, hence it is enclosed in [n]. The grammar is structured as '<S>->[n] <s> T <n> <T_n>', where <T_n> is a counter non-terminal for [n], generating the sequence of 'ti' values separated by spaces. The rules '<T_i>-><T_i-1> <s> ti' and '<T_1>->ti' ensure the correct sequence generation based on the counter [n]."}
{"name": "854_A. Fraction", "description": "Petya is a big fan of mathematics, especially its part related to fractions. Recently he learned that a fraction <image> is called proper iff its numerator is smaller than its denominator (a < b) and that the fraction is called irreducible if its numerator and its denominator are coprime (they do not have positive common divisors except 1).\n\nDuring his free time, Petya thinks about proper irreducible fractions and converts them to decimals using the calculator. One day he mistakenly pressed addition button ( + ) instead of division button (÷) and got sum of numerator and denominator that was equal to n instead of the expected decimal notation. \n\nPetya wanted to restore the original fraction, but soon he realized that it might not be done uniquely. That's why he decided to determine maximum possible proper irreducible fraction <image> such that sum of its numerator and denominator equals n. Help Petya deal with this problem.\n\nInput\n\nIn the only line of input there is an integer n (3 ≤ n ≤ 1000), the sum of numerator and denominator of the fraction.", "grammar": {"productions": ["<S>->n"], "constraints": ["3<=n<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a single integer 'n', which is not used as a counter variable but simply represents the sum of the numerator and denominator. Therefore, it is not enclosed in brackets and is directly represented as 'n' in the grammar. The grammar is straightforwardly constructed as '<S>->n' to reflect the input format where only the integer 'n' is provided."}
{"name": "858_C. Did you mean...", "description": "Input\n\nThe only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.", "grammar": {"productions": ["<S>-> [a-z]{1,3000}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a single line containing a word made of small English letters, with a length ranging from 1 to 3000 characters. Since the variable is directly replaced by a regex expression [a-z]{1,3000}, which covers all lowercase letters and specifies the length constraints, the grammar is simply '<S>-> [a-z]{1,3000}'. No counter non-terminals are needed as the regex directly handles the variable replacement and length specification."}
{"name": "865_D. Buy Low Sell High", "description": "Input\n\nInput begins with an integer N (2 <= N <= 3·105), the number of days.\n\nFollowing this is a line with exactly N integers p1, p2, ..., pN (1 <= pi <= 106). The price of one share of stock on the i-th day is given by pi.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["2<=N<=3*10^5", "1<=p_i<=10^6"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of integers, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The sequence of integers is represented by <T_i>, which recursively includes each integer p_i separated by a space <s>, until it reaches the base case <T_1>->p_1. This structure ensures the input format where N is followed by N integers separated by spaces."}
{"name": "868_F. Yet Another Minimization Problem", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <=10^5, 2 <= k <= min (n, 20)) --- the length of the array and the number of segments you need to split the array into.\n\nThe next line contains n integers a1, a2, ..., an (1 <= ai <= n) --- the elements of the array.", "grammar": {"productions": ["<S>->[n] <s> [k] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=10^5", "2<=k<=min(n,20)", "1<=a_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, both serving as counter variables, hence they are enclosed in brackets as [n] and [k]. The grammar is initiated with '<S>->[n] <s> [k] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <s> [k] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "870_A. Search for Pretty Integers", "description": "You are given two lists of non-zero digits.\n\nLet's call an integer pretty if its (base 10) representation has at least one digit from the first list and at least one digit from the second list. What is the smallest positive pretty integer?\n\nInput\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 9) — the lengths of the first and the second lists, respectively.\n\nThe second line contains n distinct digits a1, a2, ..., an (1 ≤ ai ≤ 9) — the elements of the first list.\n\nThe third line contains m distinct digits b1, b2, ..., bm (1 ≤ bi ≤ 9) — the elements of the second list.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n,m<=9", "1<=a_i<=9", "1<=b_i<=9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n> <n> <L_m>', where <T_n> and <L_m> are counter non-terminals for the sequences of digits in the first and second lists, respectively. The sequences are constructed using <T_i> and <L_i> non-terminals, which decrement until they reach 1, representing each digit in the lists separated by a space <s>. The grammar ensures the correct parsing of the input format with distinct digits in both lists."}
{"name": "871_A. Maximum splitting", "description": "Input\n\nThe first line contains single integer q (1 <= q <= 105) --- the number of queries.\n\nq lines follow. The (i + 1)-th line contains single integer ni (1 <= ni <= 109) --- the i-th query.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> ni", "<T_1>->ni"], "constraints": ["1<=q<=10^5", "1<=ni<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'q' serves as a counter variable for the number of queries, hence it is enclosed in [q]. The grammar is initiated with '<S>->[q] <n> <T_q>', where <T_q> is a counter non-terminal for [q]. Each query is represented by 'ni', which is listed in subsequent lines. The counter non-terminal <T_i> is structured to repeat 'ni' for each query, separated by a newline token <n>, until it reaches the base case <T_1>->ni. This setup efficiently captures the sequence of queries following the initial count [q]."}
{"name": "876_C. Classroom Watch", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is not used as a counter variable but simply as an integer input. Therefore, it is represented as 'n' without brackets. The grammar is constructed as '<S>->n' to reflect the input format where only the integer n is provided."}
{"name": "877_A. Alex and broken contest", "description": "One day Alex was creating a contest about his friends, but accidentally deleted it. Fortunately, all the problems were saved, but now he needs to find them among other problems.\n\nBut there are too many problems, to do it manually. Alex asks you to write a program, which will determine if a problem is from this contest by its name.\n\nIt is known, that problem is from this contest if and only if its name contains one of Alex's friends' name exactly once. His friends' names are \"Danil\", \"Olya\", \"Slava\", \"Ann\" and \"Nikita\".\n\nNames are case sensitive.\n\nInput\n\nThe only line contains string from lowercase and uppercase letters and \"_\" symbols of length, not more than 100 — the name of the problem.", "grammar": {"productions": ["<S>->[a-zA-Z_]{1,100}"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. The input is a single string composed of lowercase and uppercase letters and '_' symbols, with a maximum length of 100 characters. Since the string's content and length are variable and do not involve counter variables, the grammar is represented using a regular expression [a-zA-Z_]{1,100} to cover all possible valid strings within the specified constraints. This approach efficiently captures the input requirement without the need for counter non-terminals."}
{"name": "886_D. Restoration of string", "description": "Input\n\nThe first line contains integer n (1 <= n <= 105) --- the number of strings in the set.\n\nEach of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.\n\nThe total length of the strings doesn't exceed 105.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,100000}", "<T_1>->[a-z]{1,100000}"], "constraints": ["1<=n<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the number of strings, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each string is represented by a regular expression [a-z]{1,100000}, indicating a sequence of lowercase English letters with a length between 1 and 100000. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <n> [a-z]{1,100000}', and '<T_1>->[a-z]{1,100000}' to systematically parse the sequence of strings following the count [n]."}
{"name": "887_A. Div. 64", "description": "Input\n\nIn the only line given a non-empty binary string s with length up to 100.", "grammar": {"productions": ["<S>->[01]{1,100}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input is a non-empty binary string 's' with a length up to 100, consisting of characters '0' and '1'. Since the length is variable and the string is composed of binary digits, the regular expression [01]{1,100} is used to represent the string, where the length can range from 1 to 100 characters. Thus, the grammar is constructed as '<S>->[01]{1,100}' to directly capture the input format."}
{"name": "887_B. Cubes for Masha", "description": "Input\n\nIn first line integer n is given (1 <= n <= 3) --- the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers aij (0 <= aij <= 9) --- number on j-th face of i-th cube.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a1 <s> a2 <s> a3 <s> a4 <s> a5 <s> a6", "<T_1>->a1 <s> a2 <s> a3 <s> a4 <s> a5 <s> a6"], "constraints": ["1<=n<=3", "0<=a1,a2,a3,a4,a5,a6<=9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the number of cubes, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each cube's faces are represented by six integers (a1 to a6) separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a1 <s> a2 <s> a3 <s> a4 <s> a5 <s> a6' and '<T_1>->a1 <s> a2 <s> a3 <s> a4 <s> a5 <s> a6' to systematically parse the sequence of cube faces following the count [n]."}
{"name": "888_C. K-Dominant Character", "description": "Input\n\nThe first line contains string s consisting of lowercase Latin letters (1 <= |s| <= 100000).", "grammar": {"productions": ["<S>->[a-z]{1,100000}"], "constraints": ["1<=|s|<=100000"]}, "reason": "The grammar starts with the start non-terminal <S>. The input is a string 's' consisting of lowercase Latin letters with a length between 1 and 100000. Since the variable 's' is not a counter variable but rather a string of characters, it is represented using a regular expression [a-z]{1,100000} to specify the range of characters and their length. Thus, the grammar is constructed as '<S>->[a-z]{1,100000}' to directly represent the input string format."}
{"name": "892_A. Greed", "description": "Jafar has n cans of cola. Each can is described by two integers: remaining volume of cola ai and can's capacity bi (ai ≤  bi).\n\nJafar has decided to pour all remaining cola into just 2 cans, determine if he can do this or not!\n\nInput\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 100 000) — number of cola cans.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — volume of remaining cola in cans.\n\nThe third line contains n space-separated integers that b1, b2, ..., bn (ai ≤ bi ≤ 10^9) — capacities of the cans.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["2<=n<=100000", "0<=a_i<=10^9", "a_i<=b_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter for both the remaining volumes and capacities of the cola cans, hence it is enclosed in brackets as [n]. The grammar is structured to first read [n], followed by two sequences of 'n' elements each, separated by newlines. The first sequence, representing the remaining volumes, is generated by the non-terminal <T_n>, which produces each 'a_i' separated by spaces. The second sequence, representing the capacities, is generated by the non-terminal <L_n>, which similarly produces each 'b_i' separated by spaces. The grammar rules '<T_i>-><T_i-1> <s> a_i' and '<L_i>-><L_i-1> <s> b_i' ensure the sequences are built incrementally, starting from the base cases '<T_1>->a_1' and '<L_1>->b_1'."}
{"name": "893_B. Beautiful Divisors", "description": "Input\n\nThe only line of input contains one number n (1 <= n <=10^5) --- the number Luba has got.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is the only input and does not serve as a counter variable, hence it is represented simply as 'n'. The grammar is constructed as '<S>->n' to reflect the input format where only one number 'n' is provided."}
{"name": "893_D. Credit Card", "description": "Input\n\nThe first line contains two integers n, d (1 <= n <= 105, 1 <= d <= 109) ---the number of days and the money limitation.\n\nThe second line contains n integer numbers a1, a2, ... an ( - 104 <= ai <= 104), where ai represents the transaction in i-th day.", "grammar": {"productions": ["<S>->[n] <s> d <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_i"], "constraints": ["1<=n<=105", "1<=d<=109", "-10^4<=A_i<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'd', where 'n' serves as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <s> d <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'A_i' represents each integer in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_i' to systematically parse the sequence of integers following the count [n]."}
{"name": "894_A. QAQ", "description": "\"QAQ\" is a word to denote an expression of crying. Imagine \"Q\" as eyes with tears and \"A\" as a mouth.\n\nNow Diamond has given Bort a string consisting of only uppercase English letters of length n. There is a great number of \"QAQ\" in the string (Diamond is so cute!).\n\n<image> illustration by 猫屋 https://twitter.com/nekoyaliu\n\nBort wants to know how many subsequences \"QAQ\" are in the string Diamond has given. Note that the letters \"QAQ\" don't have to be consecutive, but the order of letters should be exact.\n\nInput\n\nThe only line contains a string of length n (1 ≤ n ≤ 100). It's guaranteed that the string only contains uppercase English letters.", "grammar": {"productions": ["<S>->[A-Z]{1,100}"], "constraints": []}, "reason": "The grammar starts with the start non-terminal <S>. The input consists of a single string of uppercase English letters with length n, where n ranges from 1 to 100. Since the string's length is variable and the characters are from A-Z, the grammar is represented using a regular expression [A-Z]{1,100} to capture the range of possible lengths and characters. Thus, the grammar is constructed as '<S>->[A-Z]{1,100}' to reflect the input format."}
{"name": "896_E. Welcome home, Chtholly", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 105).\n\nThe second line contains n integers, i-th of them is ai (1 <= ai <= 105).\n\nThe next m lines are the m operations described above. It is guaranteed that 1 <= l <= r <= n and 1 <= x <= 105.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <n> l <s> r <s> x", "<L_1>->l <s> r <s> x"], "constraints": ["1<=n,m<=10^5", "1<=a_i<=10^5", "1<=l<=r<=n", "1<=x<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n> <n> <L_m>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each element separated by a space symbol <s>. The non-terminal <L_i> is a counter-driven rule for [m], where each operation consists of 'l', 'r', and 'x' separated by spaces. The grammar constructs are laid out to systematically parse the sequence of elements and operations following the counts [n] and [m]."}
{"name": "902_A. Visiting a Friend", "description": "Input\n\nThe first line contains two integers n and m (1 <= n <= 100, 1 <= m <= 100) --- the number of teleports and the location of the friend's house.\n\nThe next n lines contain information about teleports.\n\nThe i-th of these lines contains two integers ai and bi (0 <= ai <= bi <= m), where ai is the location of the i-th teleport, and bi is its limit.\n\nIt is guaranteed that ai >= ai - 1 for every i (2 <= i <= n).", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=n<=100", "1<=m<=100", "0<=a_i<=b_i", "0<=b_i<=m", "a_i>=a_i-1"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains two integers a_i and b_i separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of teleport information following the count [n]."}
{"name": "903_D. Almost Difference", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 200000) --- the number of elements in a.\n\nThe second line contains n integers a1, a2, ..., an (1 <= ai <= 109) --- elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=200000", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'n' is used as a counter variable for the array elements, thus it is denoted as [n] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "908_A. New Year and Counting Cards", "description": "Your friend has n cards.\n\nYou know that each card has a lowercase English letter on one side and a digit on the other.\n\nCurrently, your friend has laid out the cards on a table so only one side of each card is visible.\n\nYou would like to know if the following statement is true for cards that your friend owns: \"If a card has a vowel on one side, then it has an even digit on the other side.\" More specifically, a vowel is one of 'a', 'e', 'i', 'o' or 'u', and even digit is one of '0', '2', '4', '6' or '8'.\n\nFor example, if a card has 'a' on one side, and '6' on the other side, then this statement is true for it. Also, the statement is true, for example, for a card with 'b' and '4', and for a card with 'b' and '3' (since the letter is not a vowel). The statement is false, for example, for card with 'e' and '5'. You are interested if the statement is true for all cards. In particular, if no card has a vowel, the statement is true.\n\nTo determine this, you can flip over some cards to reveal the other side. You would like to know what is the minimum number of cards you need to flip in the worst case in order to verify that the statement is true.\n\nInput\n\nThe first and only line of input will contain a string s (1 ≤ |s| ≤ 50), denoting the sides of the cards that you can see on the table currently. Each character of s is either a lowercase English letter or a digit.", "grammar": {"productions": ["<S>->[a-z0-9]{1,50}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a string 's' of length between 1 and 50, which can contain lowercase English letters or digits. Since 's' is a string variable and its length is specified, it is represented using a regular expression [a-z0-9]{1,50} to cover all possible characters and lengths within the given constraints. The grammar is thus constructed as '<S>->[a-z0-9]{1,50}' to directly parse the input string."}
{"name": "909_A. Generate Login", "description": "Input\n\nThe input consists of a single line containing two space-separated strings: the first and the last names. Each character of each string is a lowercase English letter. The length of each string is between 1 and 10, inclusive.", "grammar": {"productions": ["<S>->[a-z]{1,10} <s> [a-z]{1,10}"], "constraints": ["The length of each string (first and last names) is between 1 and 10", "inclusive", "and consists of lowercase English letters only."]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables representing the first and last names, each of which is a string of lowercase English letters with lengths between 1 and 10. Since these variables are not counters but are defined by their character constraints, they are represented using regex expressions [a-z]{1,10} to specify their allowed characters and length range. The grammar structure is thus '<S>->[a-z]{1,10} <s> [a-z]{1,10}', indicating two space-separated strings of lowercase letters, each 1 to 10 characters long."}
{"name": "909_D. Colorful Points", "description": "Input\n\nInput contains a single string of lowercase English letters 'a'-'z'. The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc.\n\nThe number of the points is between 1 and 106.", "grammar": {"productions": ["<S>->[a-z]{1,1000000}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input is a single string composed of lowercase English letters 'a'-'z', with a length between 1 and 1,000,000. Since the length is variable and the string consists of a sequence of characters, the regular expression [a-z]{1,1000000} is used to represent the string directly. This regex ensures the string matches the specified character set and length constraints without needing additional counter non-terminals."}
{"name": "90_A. Cableway", "description": "Input\n\nThe first line contains three integers r, g and b (0 <= r, g, b <= 100). It is guaranteed that r + g + b > 0, it means that the group consists of at least one student.", "grammar": {"productions": ["<S>->r <s> g <s> b"], "constraints": ["0<=r,g,b<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables, 'r', 'g', and 'b', none of which serve as counter variables, hence they are not enclosed in brackets. The variables are separated by space symbols <s>. The grammar is constructed as '<S>->r <s> g <s> b', representing the input format where 'r', 'g', and 'b' are three integers separated by spaces."}
{"name": "90_B. African Crossword", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 100). Next n lines contain m lowercase Latin letters each. That is the crossword grid.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{m}", "<T_1>->[a-z]{m}"], "constraints": ["1<=n,m<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains m lowercase Latin letters, represented by the regex [a-z]{m}. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [a-z]{m}' and '<T_1>->[a-z]{m}' to systematically parse the sequence of lines following the counts [n] and [m]."}
{"name": "912_A. Tricky Alchemy", "description": "During the winter holidays, the demand for Christmas balls is exceptionally high. Since it's already 2018, the advances in alchemy allow easy and efficient ball creation by utilizing magic crystals.\n\nGrisha needs to obtain some yellow, green and blue balls. It's known that to produce a yellow ball one needs two yellow crystals, green — one yellow and one blue, and for a blue ball, three blue crystals are enough.\n\nRight now there are A yellow and B blue crystals in Grisha's disposal. Find out how many additional crystals he should acquire in order to produce the required number of balls.\n\nInput\n\nThe first line features two integers A and B (0 ≤ A, B ≤ 10^9), denoting the number of yellow and blue crystals respectively at Grisha's disposal.\n\nThe next line contains three integers x, y and z (0 ≤ x, y, z ≤ 10^9) — the respective amounts of yellow, green and blue balls to be obtained.", "grammar": {"productions": ["<S>->A <s> B <n> x <s> y <s> z"], "constraints": ["0<=A<=10^9", "0<=B<=10^9", "0<=x<=10^9", "0<=y<=10^9", "0<=z<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes variables A and B, which are not counter variables, hence they are not enclosed in brackets. The variables x, y, and z are also not counter variables and are thus represented directly. The input format is structured as two integers A and B on the first line, followed by three integers x, y, and z on the next line, separated by spaces. Therefore, the grammar is constructed as '<S>->A <s> B <n> x <s> y <s> z' to reflect this input format."}
{"name": "913_G. Power Substring", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 2 000) --- the number of integers ai.\n\nEach of the next n lines contains a positive integer ai (1 <= ai < 1011).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_i"], "constraints": ["1<=n<=2000", "1<=a_i<1011"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of integers 'a_i', hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n]. Each line after the first contains an integer 'a_i', so the grammar rules '<T_i>-><T_i-1> <n> a_i' and '<T_1>->a_i' are used to represent the sequence of integers. The variable 'a_i' is not a counter, so it is not enclosed in brackets."}
{"name": "918_A. Eleven", "description": "Input\n\nThe first and only line of input contains an integer n (1 <= n <= 1000).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is provided as input, but it does not serve as a counter variable in this context. Therefore, it is represented simply as 'n' without brackets. The grammar is constructed as '<S>->n', indicating that the input consists of a single integer 'n'."}
{"name": "919_B. Perfect Number", "description": "Input\n\nA single line with a positive integer k (1 <= k <= 10 000).", "grammar": {"productions": ["<S>->k"], "constraints": ["1<=k<=10000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'k' is a positive integer and does not serve as a counter variable, hence it is represented simply as 'k' without brackets. The grammar is constructed as '<S>->k' to reflect the input format where a single integer 'k' is provided."}
{"name": "920_E. Connected Components?", "description": "Input\n\nThe first line contains two integers n and m (1 <= n <= 200000, <image>).\n\nThen m lines follow, each containing a pair of integers x and y (1 <= x, y <= n, x != y) denoting that there is no edge between x and y. Each pair is listed at most once; (x, y) and (y, x) are considered the same (so they are never listed in the same test). If some pair of vertices is not listed in the input, then there exists an edge between those vertices.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> x <s> y", "<T_1>->x <s> y"], "constraints": ["1<=n<=200000", "1<=m", "1<=x,y<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each line contains two integers x and y separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> x <s> y' and '<T_1>->x <s> y' to systematically parse the sequence of pairs following the count [m]."}
{"name": "922_A. Cloning Toys", "description": "Imp likes his plush toy a lot.\n\n<image>\n\nRecently, he found a machine that can clone plush toys. Imp knows that if he applies the machine to an original toy, he additionally gets one more original toy and one copy, and if he applies the machine to a copied toy, he gets two additional copies.\n\nInitially, Imp has only one original toy. He wants to know if it is possible to use machine to get exactly x copied toys and y original toys? He can't throw toys away, and he can't apply the machine to a copy if he doesn't currently have any copies.\n\nInput\n\nThe only line contains two integers x and y (0 ≤ x, y ≤ 10^9) — the number of copies and the number of original toys Imp wants to get (including the initial one).", "grammar": {"productions": ["<S>->x <s> y"], "constraints": ["0<=x<=10^9", "0<=y<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, x and y, which are not used as counters but simply represent the input values. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->x <s> y', representing the input format where x and y are two integers separated by a space."}
{"name": "924_C. Riverside Curio", "description": "Input\n\nThe first line contains a single positive integer n (1 <= n <= 105) --- the number of days.\n\nThe second line contains n space-separated integers m1, m2, ..., mn (0 <= mi < i) --- the number of marks strictly above the water on each day.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> m_i", "<T_1>->m_1"], "constraints": ["1<=n<=10^5", "0<=m_i<i"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of integers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'm_i' represents each integer in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> m_i', and '<T_1>->m_1' to systematically parse the sequence of integers following the count [n]."}
{"name": "92_A. Chips", "description": "Input\n\nThe first line contains two integers n and m (1 <= n <= 50, 1 <= m <= 104) --- the number of walruses and the number of chips correspondingly.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=n<=50", "1<=m<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'm', which are not used as counters in this context, hence they are not enclosed in brackets. The grammar is structured as '<S>->n <s> m', representing the input format where 'n' and 'm' are two integers separated by a space."}
{"name": "931_A. Friends Meeting", "description": "Two friends are on the coordinate axis Ox in points with integer coordinates. One of them is in the point x1 = a, another one is in the point x2 = b. \n\nEach of the friends can move by one along the line in any direction unlimited number of times. When a friend moves, the tiredness of a friend changes according to the following rules: the first move increases the tiredness by 1, the second move increases the tiredness by 2, the third — by 3 and so on. For example, if a friend moves first to the left, then to the right (returning to the same point), and then again to the left his tiredness becomes equal to 1 + 2 + 3 = 6.\n\nThe friends want to meet in a integer point. Determine the minimum total tiredness they should gain, if they meet in the same point.\n\nInput\n\nThe first line contains a single integer a (1 ≤ a ≤ 1000) — the initial position of the first friend. \n\nThe second line contains a single integer b (1 ≤ b ≤ 1000) — the initial position of the second friend.\n\nIt is guaranteed that a ≠ b.", "grammar": {"productions": ["<S>->a <n> b"], "constraints": ["1<=a<=1000", "1<=b<=1000", "a!=b"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a newline symbol denoted as <n>. The structure of the grammar is formulated as '<S>->a <n> b', representing the input format where 'a' and 'b' are two integers given in separate lines. Since neither 'a' nor 'b' serve as counter variables, they are not enclosed in brackets."}
{"name": "931_E. Game with String", "description": "Input\n\nThe only string contains the string s of length l (3 <= l <= 5000), consisting of small English letters only.", "grammar": {"productions": ["<S>->[a-z]{3,5000}"], "constraints": [""]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 's' is a string of small English letters with a length 'l' ranging from 3 to 5000. Since 'l' specifies the length of the string, it is not used as a counter variable in the grammar. Instead, the string 's' is directly represented using a regular expression [a-z]{3,5000}, which matches any sequence of lowercase English letters with a length between 3 and 5000. Thus, the grammar is simply '<S>->[a-z]{3,5000}', capturing the entire input string in one go without any counter non-terminals."}
{"name": "935_A. Fafa and his Company", "description": "Input\n\nThe input consists of a single line containing a positive integer n (2 <= n <=10^5) --- the number of employees in Fafa's company.", "grammar": {"productions": ["<S>->n"], "constraints": ["2<=n<=10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is a positive integer. Since n is not used as a counter variable in this context, it is represented simply as 'n' without brackets. The grammar is straightforward, consisting of a single rule '<S>->n' to represent the input format where only the integer n is provided."}
{"name": "938_A. Word Correction", "description": "Victor tries to write his own text editor, with word correction included. However, the rules of word correction are really strange.\n\nVictor thinks that if a word contains two consecutive vowels, then it's kinda weird and it needs to be replaced. So the word corrector works in such a way: as long as there are two consecutive vowels in the word, it deletes the first vowel in a word such that there is another vowel right before it. If there are no two consecutive vowels in the word, it is considered to be correct.\n\nYou are given a word s. Can you predict what will it become after correction?\n\nIn this problem letters a, e, i, o, u and y are considered to be vowels.\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of letters in word s before the correction.\n\nThe second line contains a string s consisting of exactly n lowercase Latin letters — the word before the correction.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the string s, hence it is enclosed in [n]. The string s consists of exactly n lowercase Latin letters, which is represented using the regular expression [a-z]{n}. Thus, the grammar is constructed as '<S>->[n] <n> [a-z]{n}' to reflect the input format where the first line specifies the length of the string and the second line contains the string itself."}
{"name": "938_B. Run For Your Prize", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 105) --- the number of prizes.\n\nThe second line contains n integers a1, a2, ..., an (2 <= ai <= 106 - 1) --- the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "2<=a_i<=10^6-1"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of prizes, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each prize position separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of prize positions following the count [n]."}
{"name": "939_F. Cutlet", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 100 000, 1 <= k <= 100) --- the number of seconds the cutlet should be cooked on each side and number of periods of time in which Arkady can flip it.\n\nThe next k lines contain descriptions of these intervals. Each line contains two integers li and ri (0 <= li <= ri <= 2·n), meaning that Arkady can flip the cutlet in any moment starting from li seconds after the beginning of cooking and finishing at ri seconds after beginning of cooking. In particular, if li = ri then Arkady can flip the cutlet only in the moment li = ri. It's guaranteed that li > ri - 1 for all 2 <= i <= k.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_k>", "<T_i>-><T_i-1> <n> l_i <s> r_i <n>", "<T_1>->l_1 <s> r_1"], "constraints": ["1<=n<=100000", "1<=k<=100", "0<=l_i<=r_i<=2*n"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'k', where 'n' is a counter variable for the number of seconds and 'k' is a counter variable for the number of intervals, hence they are enclosed in brackets as [n] and k. The grammar is initiated with '<S>->[n] <s> k <n> <T_k>'. The non-terminal <T_i> is a counter-driven rule for [k], where each interval is represented by 'l_i' and 'r_i' separated by a space <s> and followed by a newline <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> l_i <s> r_i <n>' and '<T_1>->l_1 <s> r_1' to systematically parse the sequence of intervals following the count [k]."}
{"name": "940_A. Points on the line", "description": "Input\n\nThe first line contains two integers n and d (1 <= n <= 100, 0 <= d <= 100) --- the amount of points and the maximum allowed diameter respectively.\n\nThe second line contains n space separated integers (1 <= xi <= 100) --- the coordinates of the points.", "grammar": {"productions": ["<S>->[n] <s> [d] <n> <T_n>", "<T_i>-><T_i-1> <s> xi", "<T_1>->xi"], "constraints": ["1<=n<=100", "0<=d<=100", "1<=xi<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and d, both serving as counter variables, hence they are enclosed in brackets as [n] and [d]. The grammar is initiated with '<S>->[n] <s> [d] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'xi' represents each coordinate separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> xi' and '<T_1>->xi' to systematically parse the sequence of coordinates following the count [n]."}
{"name": "946_A. Partition", "description": "You are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences. \n\nLet B be the sum of elements belonging to b, and C be the sum of elements belonging to c (if some of these sequences is empty, then its sum is 0). What is the maximum possible value of B - C?\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in a.\n\nThe second line contains n integers a1, a2, ..., an ( - 100 ≤ ai ≤ 100) — the elements of sequence a.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "-100<=a_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence elements, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each sequence element separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of elements following the count [n]."}
{"name": "950_D. A Leapfrog in the Array", "description": "Input\n\nThe first line contains two integers n and q (1 <= n <= 1018, 1 <= q <= 200 000), the number of elements in the array and the number of queries for which it is needed to find the answer.\n\nNext q lines contain integers xi (1 <= xi <= n), the indices of cells for which it is necessary to output their content after Dima's algorithm finishes.", "grammar": {"productions": ["<S>->n <s> [q] <n> <T_q>", "<T_i>-><T_i-1> <n> xi", "<T_1>->xi"], "constraints": ["1<=n<=10^18", "1<=q<=200000", "1<=xi<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'q', where 'q' serves as a counter variable for the number of queries, hence it is enclosed in [q]. The grammar is initiated with '<S>->n <s> [q] <n> <T_q>'. The non-terminal <T_i> is a counter-driven rule for [q], where 'xi' represents each query index. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> xi' and '<T_1>->xi' to systematically parse the sequence of query indices following the count [q]."}
{"name": "952_E. Cheese Board", "description": "Input\n\nThe first line of input contains a single integer N (1 <= N <= 100) --- the number of cheeses you have.\n\nThe next N lines describe the cheeses you have. Each line contains two space-separated strings: the name of the cheese and its type. The name is a string of lowercase English letters between 1 and 10 characters long. The type is either \"soft\" or \"hard. All cheese names are distinct.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> [a-z]{1,10} <s> <type>", "<T_1>->name <s> <type>", "<type>->soft|hard"], "constraints": ["1<=N<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter for the number of cheeses, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. Each cheese description consists of a name (a string of lowercase letters 1 to 10 characters long) and a type (either 'soft' or 'hard'). The name is represented using the regex [a-z]{1,10}, and the type is a choice between 'soft' and 'hard'. The grammar rules '<T_i>-><T_i-1> <n> [a-z]{1,10} <s> <type>' and '<T_1>->name <s> <type>' ensure each cheese's name and type are correctly parsed, separated by a space and followed by a newline for the next entry."}
{"name": "954_F. Runner's Problem", "description": "Input\n\nThe first line contains two integers n and m (1 <= n <= 104, 3 <= m <= 1018) --- the number of obstacles and the number of columns in the matrix, respectively.\n\nThen n lines follow, each containing three integers ak, lk and rk (1 <= ak <= 3, 2 <= lk <= rk <= m - 1) denoting an obstacle blocking every cell (ak, j) such that lk <= j <= rk. Some cells may be blocked by multiple obstacles.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> ak <s> lk <s> rk", "<T_1>->ak <s> lk <s> rk"], "constraints": ["1<=n<=104", "3<=m<=10^18", "1<=ak<=3", "2<=lk<=rk<=m-1"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, n and m, which both serve as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each line contains three integers ak, lk, and rk, separated by spaces. The grammar constructs are laid out as '<S>->[n] <s> [m] <n> <T_n>', '<T_i>-><T_i-1> <n> ak <s> lk <s> rk', and '<T_1>->ak <s> lk <s> rk' to systematically parse the sequence of obstacle descriptions following the count [n]."}
{"name": "962_A. Equator", "description": "Polycarp has created his own training plan to prepare for the programming contests. He will train for n days, all days are numbered from 1 to n, beginning from the first.\n\nOn the i-th day Polycarp will necessarily solve a_i problems. One evening Polycarp plans to celebrate the equator. He will celebrate it on the first evening of such a day that from the beginning of the training and to this day inclusive he will solve half or more of all the problems.\n\nDetermine the index of day when Polycarp will celebrate the equator.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 200 000) — the number of days to prepare for the programming contests.\n\nThe second line contains a sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10 000), where a_i equals to the number of problems, which Polycarp will solve on the i-th day.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=200000", "1<=a_i<=10000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the number of days, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of 'a_i' values separated by spaces. The rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' ensure the correct sequence of problem counts for each day, decrementing the counter until it reaches 1."}
{"name": "962_F. Simple Cycles Edges", "description": "Input\n\nThe first line contain two integers n and m (1 <= n <= 100 000, 0 <= m <= min(n * (n - 1) / 2, 100 000)) --- the number of vertices and the number of edges.\n\nEach of the following m lines contain two integers u and v (1 <= u, v <= n, u != v) --- the description of the edges.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> u <s> v", "<T_1>->u <s> v"], "constraints": ["1<=n<=100000", "0<=m<=min((n*(n-1))/2, 100000)", "1<=u,v<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in [n] and [m]. The grammar starts with '<S>->[n] <s> [m] <n> <T_m>', where <T_i> is the counter non-terminal for [m], representing each edge described by two integers u and v separated by a space. The grammar constructs are '<T_i>-><T_i-1> <n> u <s> v' and '<T_1>->u <s> v', systematically parsing each edge in the sequence following the count [m]."}
{"name": "964_B. Messages", "description": "Input\n\nThe first line contains five integers n, A, B, C and T (1 <= n, A, B, C, T <= 1000).\n\nThe second string contains n integers ti (1 <= ti <= T).", "grammar": {"productions": ["<S>->[n] <s> A <s> B <s> C <s> T <n> <T_n>", "<T_i>-><T_i-1> <s> t_i", "<T_1>->t_1"], "constraints": ["1<=n<=1000", "1<=A<=1000", "1<=B<=1000", "1<=C<=1000", "1<=T<=1000", "1<=t_i<=T"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes five variables: n, A, B, C, and T. Among these, 'n' serves as a counter variable for the sequence of integers 'ti', hence it is enclosed in [n]. The other variables (A, B, C, T) are not counters and are thus represented without brackets. The grammar is initiated with '<S>->[n] <s> A <s> B <s> C <s> T <n> <T_n>', where <T_n> is the counter non-terminal for [n]. The sequence of integers 'ti' is generated using '<T_i>-><T_i-1> <s> t_i' and '<T_1>->t_1', ensuring each 'ti' is separated by a space. The constraints reflect the ranges for each variable, including the condition that each 'ti' must be within the range of 1 to T."}
{"name": "967_D. Resource Distribution", "description": "Input\n\nThe first line contains three integers n, x_1, x_2 (2 <= n <= 300 000, 1 <= x_1, x_2 <= 10^9) --- the number of servers that the department may use, and resource units requirements for each of the services.\n\nThe second line contains n space-separated integers c_1, c_2, ..., c_n (1 <= c_i <= 10^9) --- the number of resource units provided by each of the servers.", "grammar": {"productions": ["<S>->[n] <s> x_1 <s> x_2 <n> <T_n>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1"], "constraints": ["2<=n<=300000", "1<=x_1<=10^9", "1<=x_2<=10^9", "1<=c_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: 'n', 'x_1', and 'x_2'. Among these, 'n' serves as a counter variable for the sequence of integers 'c_i', hence it is enclosed in brackets as [n]. The variables 'x_1' and 'x_2' are not counters, so they remain as is. The grammar is structured as '<S>->[n] <s> x_1 <s> x_2 <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence 'c_i' is generated by the rules '<T_i>-><T_i-1> <s> c_i' and '<T_1>->c_1', ensuring each 'c_i' is separated by a space. This setup accurately reflects the input format where 'n' determines the number of 'c_i' values following the initial three integers."}
{"name": "96_A. Football", "description": "Petya loves football very much. One day, as he was watching a football match, he was writing the players' current positions on a piece of paper. To simplify the situation he depicted it as a string consisting of zeroes and ones. A zero corresponds to players of one team; a one corresponds to players of another team. If there are at least 7 players of some team standing one after another, then the situation is considered dangerous. For example, the situation 00100110111111101 is dangerous and 11110111011101 is not. You are given the current situation. Determine whether it is dangerous or not.\n\nInput\n\nThe first input line contains a non-empty string consisting of characters \"0\" and \"1\", which represents players. The length of the string does not exceed 100 characters. There's at least one player from each team present on the field.", "grammar": {"productions": ["<S>->[01]{0,100}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a string composed of '0's and '1's, with a length constraint of up to 100 characters. Since the string's length is variable and the characters are strictly '0' or '1', the grammar is represented using a regular expression [01]{0,100} to denote any sequence of '0's and '1's with a length between 0 and 100. This directly captures the input format without needing additional non-terminals for counters, as the entire string is defined by the regex."}
{"name": "976_A. Minimum Binary Number", "description": "String can be called correct if it consists of characters \"0\" and \"1\" and there are no redundant leading zeroes. Here are some examples: \"0\", \"10\", \"1001\".\n\nYou are given a correct string s.\n\nYou can perform two different operations on this string: \n\n  1. swap any pair of adjacent characters (for example, \"101\" <image> \"110\"); \n  2. replace \"11\" with \"1\" (for example, \"110\" <image> \"10\"). \n\n\n\nLet val(s) be such a number that s is its binary representation.\n\nCorrect string a is less than some other correct string b iff val(a) < val(b).\n\nYour task is to find the minimum correct string that you can obtain from the given one using the operations described above. You can use these operations any number of times in any order (or even use no operations at all).\n\nInput\n\nThe first line contains integer number n (1 ≤ n ≤ 100) — the length of string s.\n\nThe second line contains the string s consisting of characters \"0\" and \"1\". It is guaranteed that the string s is correct.", "grammar": {"productions": ["<S>->[n] <n> [01]{n}"], "constraints": ["1<=n<=100"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the string, hence it is enclosed in [n]. The string itself consists of characters '0' and '1', which is represented using the regular expression [01]{n} to denote a sequence of n characters, each being either '0' or '1'. Thus, the grammar is constructed as '<S>->[n] <n> [01]{n}' to reflect the input format where the first line specifies the length of the string and the second line contains the string of that length."}
{"name": "977_B. Two-gram", "description": "Input\n\nThe first line of the input contains integer number n (2 <= n <= 100) --- the length of string s. The second line of the input contains the string s consisting of n capital Latin letters.", "grammar": {"productions": ["<S>->[n] <n> [A-Z]{n}"], "constraints": ["2<=n<=100"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the string, hence it is enclosed in [n]. The string itself consists of n capital Latin letters, which is represented using the regular expression [A-Z]{n}. Thus, the grammar is constructed as '<S>->[n] <n> [A-Z]{n}' to reflect the input format where the first line specifies the length of the string and the second line contains the string of specified length with capital Latin letters."}
{"name": "977_D. Divide by three, multiply by two", "description": "Polycarp likes to play with numbers. He takes some integer number x, writes it down on the board, and then performs with it n - 1 operations of the two kinds: \n\n  * divide the number x by 3 (x must be divisible by 3); \n  * multiply the number x by 2. \n\n\n\nAfter each operation, Polycarp writes down the result on the board and replaces x by the result. So there will be n numbers on the board after all.\n\nYou are given a sequence of length n — the numbers that Polycarp wrote down. This sequence is given in arbitrary order, i.e. the order of the sequence can mismatch the order of the numbers written on the board.\n\nYour problem is to rearrange (reorder) elements of this sequence in such a way that it can match possible Polycarp's game in the order of the numbers written on the board. I.e. each next number will be exactly two times of the previous number or exactly one third of previous number.\n\nIt is guaranteed that the answer exists.\n\nInput\n\nThe first line of the input contatins an integer number n (2 ≤ n ≤ 100) — the number of the elements in the sequence. The second line of the input contains n integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 3 ⋅ 10^{18}) — rearranged (reordered) sequence that Polycarp can wrote down on the board.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=a_i<=3*10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter variable for the sequence of numbers, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of numbers 'a_1' to 'a_n' separated by spaces. The counter non-terminal <T_i> is defined to decrement until it reaches 1, producing the sequence in the required format. The constraints ensure the values of 'n' and each 'a_i' are within specified limits."}
{"name": "978_A. Remove Duplicates", "description": "Petya has an array a consisting of n integers. He wants to remove duplicate (equal) elements.\n\nPetya wants to leave only the rightmost entry (occurrence) for each element of the array. The relative order of the remaining unique elements should not be changed.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 50) — the number of elements in Petya's array.\n\nThe following line contains a sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1 000) — the Petya's array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=50", "1<=a_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the array elements, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [n]."}
{"name": "97_B. Superset", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 104) --- the number of points in the initial set. Next n lines describe the set's points. Each line contains two integers xi and yi ( - 109 <= xi, yi <= 109) --- a corresponding point's coordinates. It is guaranteed that all the points are different.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["1<=n<=10^4", "-10^9<=x_i,y_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of points, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each point is represented by 'x_i' and 'y_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> x_i <s> y_i' and '<T_1>->x_1 <s> y_1' to systematically parse the sequence of points following the count [n]."}
{"name": "980_E. The Number Games", "description": "Input\n\nThe first line of input contains two integers n and k (1 <= k < n <= 10^6) --- the number of districts in Panel, and the number of contestants the president wishes to remove, respectively.\n\nThe next n-1 lines each contains two integers a and b (1 <= a, b <= n, a != b), that describe a road that connects two different districts a and b in the nation. It is guaranteed that there is exactly one path between every two districts.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n-1>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=k<n<=10^6", "1<=a<=n", "1<=b<=n", "a!=b"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, n and k, where n serves as a counter variable for the number of districts and is thus enclosed in [n]. The grammar is initiated with '<S>->[n] <s> k <n> <T_n-1>', where <T_i> is a counter non-terminal for the sequence of roads described by pairs of integers a and b. Each road is represented as 'a <s> b', and the sequence is repeated n-1 times, decrementing the counter until it reaches 1. The grammar ensures that each line after the first contains exactly two integers separated by a space, reflecting the input format of roads connecting districts."}
{"name": "982_A. Row", "description": "You're given a row with n chairs. We call a seating of people \"maximal\" if the two following conditions hold:\n\n  1. There are no neighbors adjacent to anyone seated. \n  2. It's impossible to seat one more person without violating the first rule. \n\n\n\nThe seating is given as a string consisting of zeros and ones (0 means that the corresponding seat is empty, 1 — occupied). The goal is to determine whether this seating is \"maximal\".\n\nNote that the first and last seats are not adjacent (if n ≠ 2).\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the number of chairs.\n\nThe next line contains a string of n characters, each of them is either zero or one, describing the seating.", "grammar": {"productions": ["<S>->[n] <n> [10]{n}"], "constraints": ["1<=n<=1000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which serves as a counter variable for the length of the string, hence it is enclosed in [n]. The string itself consists of characters '0' and '1', which is represented using the regular expression [10]{n}, meaning a string of n characters, each of which is either '0' or '1'. Thus, the grammar is constructed to reflect this format: '<S>->[n] <n> [10]{n}'."}
{"name": "985_D. Sand Fortress", "description": "Input\n\nThe only line contains two integer numbers n and H (1 <= n, H <=10^18) --- the number of sand packs you have and the height of the fence, respectively.", "grammar": {"productions": ["<S>->n <s> H"], "constraints": ["1<=n,H<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 'H', but neither serves as a counter variable in this context, so they are not enclosed in brackets. The grammar is structured as '<S>->n <s> H', representing the input format where 'n' and 'H' are two integers separated by a space. Since neither variable is used to control a sequence or repetition, no counter non-terminals are needed."}
{"name": "987_A. Infinity Gauntlet", "description": "You took a peek on Thanos wearing Infinity Gauntlet. In the Gauntlet there is a place for six Infinity Gems:\n\n  * the Power Gem of purple color, \n  * the Time Gem of green color, \n  * the Space Gem of blue color, \n  * the Soul Gem of orange color, \n  * the Reality Gem of red color, \n  * the Mind Gem of yellow color. \n\n\n\nUsing colors of Gems you saw in the Gauntlet determine the names of absent Gems.\n\nInput\n\nIn the first line of input there is one integer n (0 ≤ n ≤ 6) — the number of Gems in Infinity Gauntlet.\n\nIn next n lines there are colors of Gems you saw. Words used for colors are: purple, green, blue, orange, red, yellow. It is guaranteed that all the colors are distinct. All colors are given in lowercase English letters.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> purple|green|blue|orange|red|yellow", "<T_1>->purple|green|blue|orange|red|yellow"], "constraints": ["0<=n<=6", "s_i!=s_j"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of Gems, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n]. Each Gem color is listed as a choice separated by the '|' symbol, reflecting the distinct colors mentioned. The grammar rules '<T_i>-><T_i-1> <n> purple|green|blue|orange|red|yellow' and '<T_1>->purple|green|blue|orange|red|yellow' ensure that each Gem color is parsed according to the count [n]."}
{"name": "98_A. Help Victoria the Wise", "description": "Input\n\nThe first line contains exactly 6 characters without spaces from the set {R, O, Y, G, B, V} --- they are the colors of gems with which the box should be decorated.", "grammar": {"productions": ["<S>->[ROYGBV]{6}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of exactly 6 characters from the set {R, O, Y, G, B, V}, and since the length is fixed and the characters are from a specific set, the grammar is represented using a regular expression [ROYGBV]{6} to denote a string of exactly 6 characters, each being one of R, O, Y, G, B, or V. Thus, the grammar is constructed as '<S>->[ROYGBV]{6}'."}
{"name": "990_B. Micro-World", "description": "Input\n\nThe first line contains two space separated positive integers n and K (1 <= n <= 2 * 10^5, 1 <= K <= 10^6) --- number of bacteria and intergalactic constant K.\n\nThe second line contains n space separated integers a_1, a_2, ..., a_n (1 <= a_i <= 10^6) --- sizes of bacteria you have.", "grammar": {"productions": ["<S>->[n] <s> [K] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=K<=10^6", "1<=a_i<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables 'n' and 'K' are both used as counters, hence they are enclosed in brackets as [n] and [K]. The grammar is structured as '<S>->[n] <s> [K] <n> <T_n>', where <T_n> is a counter non-terminal for [n], representing the sequence of integers a_i separated by spaces. The rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' are used to parse the sequence of integers, ensuring each element is correctly placed according to the counter [n]."}
{"name": "990_E. Post Lamps", "description": "Input\n\nThe first line contains three integer numbers n, m and k (1 <= k <= n <= 10^6, 0 <= m <= n) --- the length of the segment of the street Adilbek wants to illuminate, the number of the blocked positions and the maximum power of the post lamp available.\n\nThe second line contains m integer numbers s_1, s_2, ..., s_m (0 <= s_1 < s_2 < ... s_m < n) --- the blocked positions.\n\nThe third line contains k integer numbers a_1, a_2, ..., a_k (1 <= a_i <= 10^6) --- the costs of the post lamps.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> k <n> <T_m> <n> <L_k>", "<T_i>-><T_i-1> <s> s_i", "<T_1>->s_1", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=k<=n<=10^6", "0<=m<=n", "0<=s_i<n", "1<=a_i<=10^6"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: n, m, and k, where n and m serve as counter variables, hence they are enclosed in [n] and [m]. The variable k is not a counter, so it is written as k. The grammar starts with '<S>->[n] <s> [m] <s> k <n> <T_m> <n> <L_k>'. The non-terminal <T_i> is a counter-driven rule for [m], representing the blocked positions s_i separated by spaces. Similarly, <L_i> is a counter-driven rule for k, representing the costs a_i separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> s_i', '<T_1>->s_1', '<L_i>-><L_i-1> <s> a_i', and '<L_1>->a_1' to systematically parse the sequences of blocked positions and costs following the counts [m] and k."}
{"name": "991_C. Candies", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 10^{18}) --- the initial amount of candies in the box.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^18"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, n, which is not used as a counter variable but simply represents an integer input. Therefore, it is represented as 'n' without brackets. The grammar is constructed as '<S>->n' to reflect the input format where a single integer n is provided."}
{"name": "993_D. Compute Power", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 50) --- the number of tasks.\n\nThe second line contains n integers a1, a2, ..., an (1 <= ai <= 108), where ai represents the amount of power required for the i-th task.\n\nThe third line contains n integers b1, b2, ..., bn (1 <= bi <= 100), where bi is the number of processors that i-th task will utilize.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=50", "1<=a_i<=10^8", "1<=b_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for both the number of tasks and the elements in the sequences 'a_i' and 'b_i', hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n> <n> <L_n>', where <T_n> and <L_n> are counter non-terminals for the sequences 'a_i' and 'b_i' respectively. Each sequence is constructed by iterating through the counter variable [n], with elements separated by a space symbol <s>. The grammar rules '<T_i>-><T_i-1> <s> a_i' and '<L_i>-><L_i-1> <s> b_i' define the sequences, terminating with '<T_1>->a_1' and '<L_1>->b_1' when the counter reaches 1."}
{"name": "996_A. Hit the Lottery", "description": "Allen has a LOT of money. He has n dollars in the bank. For security reasons, he wants to withdraw it in cash (we will not disclose the reasons here). The denominations for dollar bills are 1, 5, 10, 20, 100. What is the minimum number of bills Allen could receive after withdrawing his entire balance?\n\nInput\n\nThe first and only line of input contains a single integer n (1 ≤ n ≤ 10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is not used as a counter variable but simply represents an integer input, hence it is not enclosed in brackets. The grammar is straightforward, consisting of a single line with the integer 'n', represented as '<S>->n'."}
{"name": "99_B. Help Chef Gerasim", "description": "Input\n\nThe first line contains integer n --- the number of cups on the royal table (1 <= n <= 1000). Next n lines contain volumes of juice in each cup --- non-negative integers, not exceeding 104.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> V", "<T_1>->V"], "constraints": ["1<=n<=1000", "0<=V<=10000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, n, which serves as a counter variable for the number of cups, hence it is denoted as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'V' represents the volume of juice in each cup, separated by a newline token <n>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <n> V', and '<T_1>->V' to systematically parse the sequence of volumes following the count [n]."}
{"name": "9_E. Interesting Graph and Apples", "description": "Input\n\nThe first line of the input data contains a pair of integers n and m (1 <= n <= 50, 0 <= m <= 2500) --- the amount of vertices and edges respectively. The following lines contain pairs of numbers xi and yi (1 <= xi, yi <= n) --- the vertices that are already connected by edges. The initial graph may contain multiple edges and loops.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> xi <s> yi", "<T_1>->xi <s> yi"], "constraints": ["1<=n<=50", "0<=m<=2500", "1<=xi,yi<=n"]}, "reason": "The grammar starts with the start non-terminal <S>. It includes two variables, n and m, both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_m>'. The non-terminal <T_i> is a counter-driven rule for [m], where each line contains two variables xi and yi separated by a space. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> xi <s> yi' and '<T_1>->xi <s> yi' to systematically parse the sequence of edges following the count [m]."}
{"name": "p00313 Secret Investigation", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nX a1 a2 ... aX\nY b1 b2 ... bY\nZ c1 c2 ... cZ\n\n\nThe input is 4 lines, and the number of people to be surveyed N (1 <= N <= 100) is given in the first line. On the second line, the number X (0 <= X <= N) of those who belong to the organization $ A $, followed by the identification number ai (1 <= ai <= N) of those who belong to the organization $ A $. Given. On the third line, the number Y (0 <= Y <= N) of those who belong to the organization $ B $, followed by the identification number bi (1 <= bi <= N) of those who belong to the organization $ B $. Given. On the fourth line, the number Z (0 <= Z <= N) of the person who owns the product $ C $, followed by the identification number ci (1 <= ci <= N) of the person who owns the product $ C $. ) Is given.", "grammar": {"productions": ["<S>->[N] <n> [X] <s> <T_X> <n> [Y] <s> <L_Y> <n> [Z] <s> <Z_Z>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1", "<Z_i>-><Z_i-1> <s> c_i", "<Z_1>->c_1"], "constraints": ["1<=N<=100", "0<=X<=N", "1<=a_i<=N", "0<=Y<=N", "1<=b_i<=N", "0<=Z<=N", "1<=c_i<=N"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'N' is used as a counter variable, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <n> [X] <s> <T_X> <n> [Y] <s> <L_Y> <n> [Z] <s> <Z_Z>'. Here, [X], [Y], and [Z] are counter variables for the sequences of a_i, b_i, and c_i respectively. The non-terminals <T_X>, <L_Y>, and <Z_Z> are counter-driven rules for [X], [Y], and [Z], where each sequence element is separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i', '<T_1>->a_1', '<L_i>-><L_i-1> <s> b_i', '<L_1>->b_1', '<Z_i>-><Z_i-1> <s> c_i', and '<Z_1>->c_1' to systematically parse the sequences of a_i, b_i, and c_i following the counts [X], [Y], and [Z]."}
{"name": "p00320 Cuboid", "description": "Input\n\nThe input is given in the following format.\n\n\nh1 w1\nh2 w2\nh3 w3\nh4 w4\nh5 w5\nh6 w6\n\n\nThe input consists of 6 lines, each line given the integer hi (1 <= hi <= 1000) for the vertical length of each rectangle and the integer wi (1 <= wi <= 1000) for the horizontal length.", "grammar": {"productions": ["<S>->h1 <s> w1 <n> h2 <s> w2 <n> h3 <s> w3 <n> h4 <s> h4 <n> h5 <s> w5 <n> h6 <s> w6"], "constraints": ["1<=h1,h2,h3,h4,h5,h6<=1000", "1<=w1,w2,w3,w4,w5,w6<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of 6 lines, each containing two variables, 'hi' and 'wi', separated by a space. Since none of these variables serve as counters, they are not enclosed in brackets. Each line is separated by a newline token <n>. The grammar is structured to reflect this format: '<S>->h1 <s> w1 <n> h2 <s> w2 <n> h3 <s> w3 <n> h4 <s> h4 <n> h5 <s> w5 <n> h6 <s> w6'."}
{"name": "p00323 Metal Recycling", "description": "Input\n\nThe input is given in the following format.\n\n\nN\na1 b1\na2 b2\n::\naN bN\n\n\nThe first line gives the number of recovery vehicles N (1 <= N <= 100000). In the next N lines, the integer ai (0 <= ai <= 100000) representing the weight in \"Bocco\" units and the integer bi (0 <= bi <=) representing the number in \"Margue\" units of the mass of Aidunium collected by the recovery vehicle i. 100000) is given.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=N<=100000", "0<=a<=100000", "0<=b<=100000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the number of recovery vehicles, hence it is enclosed in [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates 'N' lines of 'a' and 'b' pairs separated by a space <s>. The counter non-terminal <T_i> is defined to decrement until it reaches 1, generating each line as '<T_i>-><T_i-1> <n> a <s> b' and terminating with '<T_1>->a <s> b'. This ensures the input format where 'N' lines follow the first line, each containing two integers 'a' and 'b' separated by a space."}
{"name": "p00340 Rectangle", "description": "Input\n\nThe input is given in the following format.\n\n\ne1 e2 e3 e4\n\n\nThe input consists of one line and is given the integer ei (1 <= ei <= 100) representing the length of each bar.", "grammar": {"productions": ["<S>->e1 <s> e2 <s> e3 <s> e4"], "constraints": ["1<=e1<=100", "1<=e2<=100", "1<=e3<=100", "1<=e4<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of four variables e1, e2, e3, and e4, each representing the length of a bar. Since none of these variables serve as counters, they are not enclosed in brackets. The variables are separated by space symbols <s>, leading to the grammar structure '<S>->e1 <s> e2 <s> e3 <s> e4'."}
{"name": "p00490 Best Pizza", "description": "input\n\nThe input consists of N + 3 lines.\n\nOn the first line, one integer N (1 <= N <= 100) representing the number of topping types is written. On the second line, two integers A and B (1 <= A <= 1000, 1 <= B <= 1000) are written with a blank as a delimiter. A is the price of the dough and B is the price of the toppings. On the third line, one integer C (1 <= C <= 10000) representing the number of calories in the dough is written.\n\nOn the 3 + i line (1 <= i <= N), one integer Di (1 <= Di <= 10000) representing the number of calories in the i-th topping is written.", "grammar": {"productions": ["<S>->[N] <n> A <s> B <n> C <n> <T_N>", "<T_i>-><T_i-1> <n> D_i", "<T_1>->D_1"], "constraints": ["1<=N<=100", "1<=A<=1000", "1<=B<=1000", "1<=C<=10000", "1<=D_i<=10000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the number of topping types, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> A <s> B <n> C <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'D_i' represents each topping's calorie count separated by a newline symbol <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> D_i' and '<T_1>->D_1' to systematically parse the sequence of topping calorie counts following the count [N]."}
{"name": "p00491 Pasta", "description": "input\n\nThe input consists of K + 1 lines.\n\nOn the first line, two integers N and K (3 <= N <= 100, 1 <= K <= N) are written with a blank as a delimiter.\n\nOn the 1 + i line (1 <= i <= K), two integers Ai and Bi (1 <= Ai <= N, 1 <= Bi <= 3) are written with a blank as a delimiter. This means that the pasta on the Ai day has already been decided, and when Bi = 1, it is a tomato sauce, when Bi = 2, it is a cream sauce, and when Bi = 3, it is a basil sauce. Ai (1 <= i <= K) are all different. It is guaranteed that there will be at least one plan to meet the conditions in the given input data.", "grammar": {"productions": ["<S>->N <s> [K] <n> <T_K>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["3<=N<=100", "1<=K<=N", "1<=A_i<=N", "1<=B_i<=3"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, N and K, where K serves as a counter variable, hence it is denoted as [K]. The grammar is structured as '<S>->N <s> [K] <n> <T_K>', where <T_K> is a counter non-terminal for [K]. Each line after the first contains two integers, A_i and B_i, separated by a space. The counter non-terminal <T_i> is defined to handle each subsequent line, decrementing until it reaches 1. The grammar ensures that each A_i and B_i is correctly parsed according to the input format, with constraints applied to each variable."}
{"name": "p00500 Unique number", "description": "input\n\nThe input consists of 1 + N lines.\n\nThe integer N (2 <= N <= 200) is written on the first line, which indicates the number of players.\n\nIn the i-th line (1 <= i <= N) of the following N lines, three integers from 1 to 100 are written separated by blanks, and the i-th player is the first, second, and third times, respectively. Represents the number written in the game of.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> I1 <s> I2 <s> I3", "<T_1>->I1 <s> I2 <s> I3"], "constraints": ["2<=N<=200", "1<=I1,I2,I3<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the number of players, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter non-terminal for [N]. Each line following the first contains three integers I1, I2, and I3, separated by spaces, which are represented in the grammar as '<T_i>-><T_i-1> <n> I1 <s> I2 <s> I3' and '<T_1>->I1 <s> I2 <s> I3'. This structure ensures the input format is correctly parsed, with each player's data on a new line."}
{"name": "p00642 Ben Toh", "description": "Constraints\n\n* 1 <= n <= 100,000\n\nInput\n\nInput consists of several datasets.\n\nInput for a single dataset is given as a single integer n.\n\nInput terminates with a dataset where n = 0.", "grammar": {"productions": ["<S>->n <n> <T_1>", "<T_1>->n|0"], "constraints": ["1<=n<=100000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' is used as a counter variable, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_1>', where <T_1> represents the termination condition when 'n' equals 0. The grammar is designed to handle multiple datasets, each starting with an integer 'n' and terminating when 'n' is 0. The counter non-terminal <T_1> is used to alternate between reading a new 'n' or terminating with '0'."}
{"name": "p00965 Starting a Scenic Railroad Service", "description": "Input\n\nThe input consists of a single test case of the following format.\n\n\n$n$\n$a_1$ $b_1$\n...\n$a_n$ $b_n$\n\n\nHere, the first line has an integer $n$, the number of the passengers in the estimated list of passengers' travel sections ($1 <= n <= 200 000$). The stations are numbered starting from 1 in their order along the route. Each of the following $n$ lines describes the travel for each passenger by two integers, the boarding and the alighting station numbers, $a_i$ and $b_i$, respectively ($1 <= a_i < b_i <= 100 000$). Note that more than one passenger in the list may have the same boarding and alighting stations.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=n<=200000", "1<=a_i<b_i<=100000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of passengers, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. Each passenger's travel details are represented by 'a_i' and 'b_i' separated by a space <s>, and each line is separated by a newline <n>. The grammar constructs are '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of passenger details following the count [n]."}
{"name": "p00971 Shortest Common Non-Subsequence", "description": "Input\n\nThe input consists of a single test case with two lines. Both lines are sequences consisting only of 0 and 1. Their lengths are between 1 and 4000, inclusive.", "grammar": {"productions": ["<S>->[01]{1,4000] <n> [01]{1,4000]"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of two lines, each containing a sequence of '0' and '1' with lengths between 1 and 4000. Since the sequences are defined by their content and length range, they are represented using regular expressions [01]{1,4000} for each line. The grammar is structured to reflect this format: '<S>->[01]{1,4000} <n> [01]{1,4000}', where <n> denotes the newline separating the two sequences."}
{"name": "p01060 Product Sale Lines", "description": "Constraints\n\n* 4 <= W <= 100\n* 4 <= H <= 100\n* 0 <= N <= 100\n\nInput\n\nThe input is given in the following format.\n\n\nW H\nN\np1 p2 ... pN\n\n\nThe integers W and H that represent the size of the column are given in the first row, separated by blanks. W represents the number of people on the outside arranged horizontally in a U-shape, and H represents the number of people on the outside arranged vertically. The second row is given the number of times N a person can pull out of either column. In the third row, information about how to remove columns p1 ... pN is given separated by blanks. pi is '0' or '1', and when it is '0', it means that one person on the outside can get rid of it, and when it is '1', it means that one person on the inside can get rid of it. However, Uniqlo Uzuki or Rin Meguro will not leave the line.", "grammar": {"productions": ["<S>->W <s> H <n> [N] <n> <T_N>", "<T_i>-><T_i-1> <s> [01]{1}", "<T_1>->[01]{1}"], "constraints": ["4<=W<=100", "4<=H<=100", "0<=N<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes variables W and H, which are not counter variables, so they are represented as W and H. The variable N is a counter variable, hence it is enclosed in [N]. The grammar is initiated with '<S>->W <s> H <n> [N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each element is either '0' or '1' represented by the regex [01]{1}. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> [01]{1}' and '<T_1>->[01]{1}' to systematically parse the sequence of elements following the count [N]."}
{"name": "p01316 Differential Pulse Code Modulation", "description": "Input\n\nThe input consists of multiple datasets. The format of each data set is as follows.\n\n> N M\n> C1\n> C2\n> ...\n> CM\n> x1\n> x2\n> ...\n> xN\n>\n\nThe first line specifies the size of the input dataset. N is the length (number of samples) of the input signal to be compressed. M is the number of values ​​contained in the codebook. N and M satisfy 1 <= N <= 20000 and 1 <= M <= 16.\n\nThe M line that follows is the description of the codebook. Ci represents the i-th value contained in the codebook. Ci satisfies -255 <= Ci <= 255.\n\nThe N lines that follow are the description of the input signal. xi is the i-th value of a sequence of integers representing the input signal. xi satisfies 0 <= xi <= 255.\n\nThe input items in the dataset are all integers. The end of the input is represented by a line consisting of only two zeros separated by a single space character.", "grammar": {"productions": ["<S>->N <s> M <n> <T_M> <n> <L_N>", "<T_i>-><T_i-1> <n> C_i", "<T_1>->C_1", "<L_i>-><L_i-1> <n> x_i", "<L_1>->x_1"], "constraints": ["1<=N<=20000", "1<=M<=16", "-255<=C_i<=255", "0<=x_i<=255"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, which serve as counter variables for the codebook and input signal respectively, hence they are enclosed in brackets as [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_M> <n> <L_N>'. The non-terminal <T_i> is a counter-driven rule for [M], representing each codebook value C_i separated by a newline <n>. Similarly, <L_i> is a counter-driven rule for [N], representing each input signal value x_i separated by a newline <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> C_i', '<T_1>->C_1', '<L_i>-><L_i-1> <n> x_i', and '<L_1>->x_1' to systematically parse the sequence of codebook and input signal values following the counts [M] and [N]."}
{"name": "p01353 Rabbit Plays Games!", "description": "Input\n\n1 <= n <= 40 000\n1 <= hi, ai, di, si <= 1 000 000 000 (integer)\nsi are all different.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>->hi <s> ai <s> di <s> si <n> <T_i-1>", "<T_1>->hi <s> ai <s> di <s> si"], "constraints": ["1<=n<=40000", "1<=hi,ai,di<=1000000000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of tuples (hi, ai, di, si), hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each tuple (hi, ai, di, si) is separated by a space symbol <s> and a newline <n>. The grammar constructs are laid out as '<T_i>->hi <s> ai <s> di <s> si <n> <T_i-1>' and '<T_1>->hi <s> ai <s> di <s> si' to systematically parse the sequence of tuples following the count [n]."}
{"name": "p01356 Nearest Station", "description": "Input\n\n1 <= n, m, a, b, p, q <= 1 000 000 000 000 (integer)", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [a] <s> [b] <s> [p] <s> [q]"], "constraints": ["1<=n,m,a,b,p,q<=1000000000000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes six variables: n, m, a, b, p, and q, all of which serve as counter variables. Hence, they are enclosed in brackets to indicate their roles as counters. The grammar is structured to represent these variables separated by space symbols <s>, resulting in the production rule '<S>->[n] <s> [m] <s> [a] <s> [b] <s> [p] <s> [q]'. Each variable is treated as a counter, but since they are all independent and not used to generate sequences, no additional counter non-terminals are needed beyond their representation in the initial rule."}
{"name": "p01516 Milky Way", "description": "Input\n\nThe input consists of one or more datasets. One dataset has the following format:\n\n> N M L\n> x1 y1 a1 r1\n> x2 y2 a2 r2\n> ...\n> xN yN aN rN\n>\n\nThe first line of each test case consists of the integers N, M, L, where N is the number of stars (1 <= N <= 100), M is the Vega number (1 <= M <= N), and L is the Altair number (1 <= M <= N). Represents 1 <= L <= N). Information on each star is given in the following N lines. Each row consists of four integers, xi, yi, ai, and ri, where xi is the x-coordinate of the center of the i-th star (0 <= xi <= 1,000) and yi is the y-coordinate of the center of the i-th star (0 <= yi). <= 1,000), ai is the angle formed by the straight line connecting the center coordinates of the i-th star and the tip of the star with the y-axis (0 <= ai <72), and ri is from the center coordinates of the i-th star to the tip of the star. The length (1 <= ri <= 1,000). The end of the input is represented by a line containing three zeros.\n\nThe star on the left in Figure D-2 represents the star with x = 5, y = 10, a = 0, r = 5, and the star on the right is x = 15, y = 10, a = 30, r = 5. Represents the star of.\n\n<image>\n\nFigure D-2: Star example", "grammar": {"productions": ["<S>->[N] <s> [M] <s> [L] <n> <T_N>", "<T_i>-><T_i-1> <n> x_i <s> y_i <s> a_i <s> r_i", "<T_1>->x_1 <s> y_1 <s> a_1 <s> r_1"], "constraints": ["1<=N<=100", "1<=M<=N", "1<=L<=N", "0<=x_i<=1000", "0<=y_i<=1000", "0<=a_i<72", "1<=r_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables N, M, and L, all of which serve as counter variables, hence they are enclosed in [N], [M], and [L] respectively. The grammar is initiated with '<S>->[N] <s> [M] <s> [L] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each line contains four integers x_i, y_i, a_i, and r_i separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> x_i <s> y_i <s> a_i <s> r_i' and '<T_1>->x_1 <s> y_1 <s> a_1 <s> r_1' to systematically parse the sequence of star information following the count [N]."}
{"name": "p01538 Kakezan", "description": "Constraints\n\n> 1 <= Q <= 100\n> 0 <= Ni <= 106\n>\n\nInput\n\n> Q\n> N1\n> N2\n> ...\n> NQ\n>\n\n* Q represents the number of integers greater than or equal to 0 given\n* Ni is an integer greater than or equal to 0 that Taro is interested in, and represents the i-th one.", "grammar": {"productions": ["<S>->[Q] <n> <T_Q>", "<T_i>-><T_i-1> <n> Ni", "<T_1>->Ni"], "constraints": ["1<=Q<=100", "0<=Ni<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'Q' serves as a counter variable for the number of integers 'Ni', hence it is enclosed in brackets as [Q]. The grammar is structured as '<S>->[Q] <n> <T_Q>', where <T_Q> is a counter non-terminal that generates each 'Ni' followed by a newline <n>. The counter non-terminal <T_i> is defined recursively to decrement from [Q] down to 1, producing each 'Ni' in sequence: '<T_i>-><T_i-1> <n> Ni' and '<T_1>->Ni'. This setup ensures that the input format is correctly parsed with 'Q' integers each on a new line."}
{"name": "p01609 One", "description": "Constraints\n\n* 1 <= W, H <= 100\n* 1 <= N <= 50\n* -100 <= a_i <= -1\n* 0 <= p_i <= W\n* 1 <= q_i <= H\n* If i \\ neq j, then (a_i, p_i, q_i) \\ neq (a_j, p_j, q_j)\n\nInput\n\nInput follows the following format. All given numbers are integers.\n\n\nW H N\na_1 p_1 q_1\n...\na_N p_N q_N", "grammar": {"productions": ["<S>->[W] <s> [H] <s> [N] <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> p_i <s> q_i", "<T_1>-> a_i <s> p_i <s> q_i"], "constraints": ["1<=W,H<=100", "1<=N<=50", "-100<=a_i<=-1", "0<=p_i<=W", "1<=q_i<=H"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables W, H, and N are all used as counters, hence they are enclosed in brackets as [W], [H], and [N]. The grammar is initiated with '<S>->[W] <s> [H] <s> [N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each line consists of a_i, p_i, and q_i separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> p_i <s> q_i' and '<T_1>->a_i <s> p_i <s> q_i' to systematically parse the sequence of lines following the count [N]."}
{"name": "p01770 Arojam's Mask", "description": "input\n\nThe input is given in the following format.\n\n\nN M E S T R\na_ {0} b_ {0}\n...\na_ {M-1} b_ {M-1}\na'_ {0} b'_ {0} c_ {0}\n...\na'_ {E-1} b'_ {E-1} c_ {E-1}\n\n\nConstraint\n\n* All inputs are integers\n* 2 \\ <= N \\ <= 100\n* 1 \\ <= M + E \\ <= N (N-1) / 2\n* 0 \\ <= E \\ <= 4\n* 0 \\ <= R \\ <= 100\n* 0 \\ <= S, T, a_i, b_i, a'_i, b'_i, c_i \\ <= N-1\n* S != T\n* a_ {i} != b_ {i}, a'_ {i} != b'_ {i}\n* All pairs of a_ {i} and b_ {i}, a'_ {i} and b'_ {i} do not overlap\n* If i != j, then c_ {i} != c_ {j}", "grammar": {"productions": ["<S>->[N] <s> [M] <s> [E] <s> [S] <s> [T] <s> [R] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1", "<L_i>-><L_i-1> <n> aa_i <s> bb_i <s> c_i", "<L_1>->aa_1 <s> bb_1 <s> c_1"], "constraints": ["2<=N<=100", "1<=M+E<=N*(N-1)/2", "0<=E<=4", "0<=R<=100", "0<=S,T,a_i,b_i,aa_i,bb_i,c_i<=N-1"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. It includes multiple variables, where N, M, E, S, T, and R are all treated as counter variables, hence enclosed in brackets []. The grammar is structured to first list these variables separated by spaces <s> and a newline <n>, followed by sequences of pairs and triplets. The sequences are controlled by counter non-terminals <T_i> for the pairs (a_i, b_i) and <L_i> for the triplets (aa_i, bb_i, c_i). Each counter non-terminal decrements until it reaches 1, ensuring the correct number of elements is generated. The grammar thus systematically parses the input format, handling both the initial variables and the subsequent sequences of pairs and triplets."}
{"name": "p01810 Jail", "description": "Constraints\n\n* 1 <= N <= 10 ^ 5\n* 2 <= k <= 10 ^ 5\n* The answer is less than 10 ^ {18}.\n\n\n\nInput Format\n\nInput is given from standard input in the following format.\n\n\nN k\n\n\nOutput Format\n\nPrint the answer in one line.\n\nSample Input 1\n\n\n4 2\n\n\nSample Output 1\n\n\n7\n\n\nSample Input 2\n\n\n13\n\n\nSample Output 2\n\n\n0\n\n\nSample Input 3\n\n\n100000 100000\n\n\nSample Output 3\n\n\n99999\n\n\n\n\n\n\nExample\n\nInput\n\n4 2", "grammar": {"productions": ["<S>->N <s> k"], "constraints": ["1<=N<=10^5", "2<=k<=10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'N' and 'k', which are separated by a space symbol denoted as <s>. Since neither 'N' nor 'k' serves as a counter variable in this context, they are represented without brackets. The grammar is structured as '<S>->N <s> k', reflecting the input format where 'N' and 'k' are two integers separated by a space."}
{"name": "p01945 Star in Parentheses", "description": "Input\n\nThe input consists of a single test case formatted as follows.\n\n\n$S$\n\n\n$S$ is balanced parentheses with exactly one '*' inserted somewhere. The length of $S$ is between 1 and 100, inclusive.", "grammar": {"productions": ["<S>->[()]{1,99}[*]{1}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a string S which is a sequence of balanced parentheses with exactly one '*' inserted somewhere. The length of S is between 1 and 100, inclusive. To represent this, the grammar uses a regular expression [()]{1,99} to denote the sequence of parentheses (with a length between 1 and 99) and [*]{1} to denote the single '*' character. Thus, the grammar is constructed as '<S>->[()]{1,99}[*]{1}' to reflect the input format."}
{"name": "p01963 Separate String", "description": "Input\n\nThe input consists of a single test case formatted as follows.\n\n\n$N$\n$s_1$\n:\n$s_N$\n$t$\n\n\nThe first line consists of an integer $N$ ($1 <= N <= 100,000$) which is the number of the elements of $S$. The following $N$ lines consist of $N$ distinct strings separated by line breaks. The $i$-th string $s_i$ represents the $i$-th element of $S$. $s_i$ consists of lowercase letters and the length is between $1$ and $100,000$, inclusive. The summation of length of $s_i$ ($1 <= i <= N$) is at most $200,000$. The next line consists of a string $t$ which consists of lowercase letters and represents the string to be separated and the length is between $1$ and $100,000$, inclusive.", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> t", "<T_i>-><T_i-1> <n> s_i", "<T_1>->s_1"], "constraints": ["1<=N<=100000", "1<=s_i<=100000", "1<=t<=100000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of strings, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N> <n> t'. The non-terminal <T_i> is a counter-driven rule for [N], where each 's_i' represents a string separated by a newline token <n>. The grammar constructs are laid out as '<S>->[N] <n> <T_N> <n> t', '<T_i>-><T_i-1> <n> s_i', and '<T_1>->s_1' to systematically parse the sequence of strings following the count [N]. The string 't' is included as the final input line."}
{"name": "p02004 GuruGuru", "description": "Input\n\nThe input consists of a single test case in the format below.\n\n\n$S$\n\n\nThe first line consists of a string $S$, which represents the sequence of commands Gururin received. $S$ consists of 'L' and 'R'. The length of $S$ is between $1$ and $10^3$ inclusive.", "grammar": {"productions": ["<S>->[LR]{1,1000}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a string S composed of characters 'L' and 'R', with a length between 1 and 1000. Since the variable S is directly replaced by a regex pattern [LR]{1,1000}, it is represented as such in the grammar without needing a counter non-terminal. Thus, the grammar is simply '<S>->[LR]{1,1000}', capturing the sequence of commands without any additional counters or variables."}
{"name": "p02137 Special Chat", "description": "Constraints\n\nThe input satisfies the following conditions.\n\n* $ 1 \\ le P \\ le 10 ^ 5 $\n\nInput\n\nThe input is given in the following format.\n\n\n$ P $\n\n\nAn integer $ P $ representing the total amount of points you have now is given in the $ 1 $ line.", "grammar": {"productions": ["<S>->P"], "constraints": ["1<=P<=10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'P' is given as input, which does not serve as a counter variable, hence it is not enclosed in brackets. The grammar is simply constructed as '<S>->P', representing the input format where 'P' is an integer provided in a single line."}
{"name": "p02250 Multiple String Matching", "description": "Constraints\n\n* 1 <= length of T <= 1000000\n* 1 <= length of P_i <= 1000\n* 1 <= Q <= 10000\n* The input consists of alphabetical characters and digits\n\nInput\n\nIn the first line, a text T is given. In the second line, an integer Q denoting the number of queries is given. In the following Q lines, the patterns P_i are given respectively.", "grammar": {"productions": ["<S>->[a-z]{1,1000000} <n> Q <n> <T_Q>", "<T_i>-><T_i-1> <n> [a-z]{1,1000}", "<T_1>->[a-z]{1,1000}"], "constraints": ["1<=Q<=10000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The first line contains a text T, which is represented by the regex [a-z]{1,1000000} to account for its length constraints. The second line contains an integer Q, which serves as a counter variable for the number of queries, hence it is enclosed in [Q]. The grammar is structured as '<S>->[a-z]{1,1000000} <n> Q <n> <T_Q>', where <T_Q> is a counter non-terminal for [Q]. The patterns P_i are represented by the regex [a-z]{1,1000} for each query, leading to the rules '<T_i>-><T_i-1> <n> [a-z]{1,1000}' and '<T_1>->[a-z]{1,1000}' to parse each query line."}
{"name": "p02255 Insertion Sort", "description": "Write a program of the Insertion Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:\n\n\nfor i = 1 to A.length-1\nkey = A[i]\n/* insert A[i] into the sorted sequence A[0,...,j-1] */\nj = i - 1\nwhile j >= 0 and A[j] > key\nA[j+1] = A[j]\nj--\nA[j+1] = key\n\n\nNote that, indices for array elements are based on 0-origin.\n\nTo illustrate the algorithms, your program should trace intermediate result for each step.\n\nHint\n\nTemplate in C\n\nConstraints\n\n1 ≤ N ≤ 100\n\nInput\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by a single space.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=100", "1<=A_i<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence elements, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter-driven rule for [N], representing each element 'A_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' to systematically parse the sequence of elements following the count [N]."}
{"name": "p02258 Maximum Profit", "description": "Constraints\n\n* $2 <= n <= 200,000$\n* $1 <= R_t <= 10^9$\n\nInput\n\nThe first line contains an integer $n$. In the following $n$ lines, $R_t$ ($t = 0, 1, 2, ... n-1$) are given in order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> R_i", "<T_1>->R_1"], "constraints": ["2<=n<=200000", "1<=R_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for the sequence of 'R_t' values, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates 'n' lines of 'R_t' values, each separated by a newline token <n>. The counter non-terminal <T_i> is defined to decrement until it reaches 1, producing the sequence of 'R_t' values in order. The grammar ensures that each 'R_t' is correctly placed on a new line following the initial 'n'."}
{"name": "p02262 Shell Sort", "description": "Shell Sort\n\nShell Sort is a generalization of Insertion Sort to arrange a list of $n$ elements $A$.\n\n\n1  insertionSort(A, n, g)\n2      for i = g to n-1\n3          v = A[i]\n4          j = i - g\n5          while j >= 0 && A[j] > v\n6              A[j+g] = A[j]\n7              j = j - g\n8              cnt++\n9          A[j+g] = v\n10\n11 shellSort(A, n)\n12     cnt = 0\n13     m = ?\n14     G[] = {?, ?,..., ?}\n15     for i = 0 to m-1\n16         insertionSort(A, n, G[i])\n\n\nA function shellSort(A, n) performs a function insertionSort(A, n, g), which considers every $g$-th elements. Beginning with large values of $g$, it repeats the insertion sort with smaller $g$.\n\nYour task is to complete the above program by filling ?. Write a program which reads an integer $n$ and a sequence $A$, and prints $m$, $G_i (i = 0, 1, ..., m − 1)$ in the pseudo code and the sequence $A$ in ascending order. The output of your program must meet the following requirements:\n\n* $1 \\leq m \\leq 100$\n* $0 \\leq G_i \\leq n$\n* cnt does not exceed $\\lceil n^{1.5}\\rceil$\n\nConstraints\n\n* $1 \\leq n \\leq 1,000,000$\n* $0 \\leq A_i \\leq 10^9$\n\nInput\n\nIn the first line, an integer $n$ is given. In the following $n$ lines, $A_i (i=0,1,...,n-1)$ are given for each line.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["1<=n<=1000000", "0<=A_i<=10^9"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'n' is used as a counter variable for the sequence elements, hence it is enclosed in brackets as [n]. The grammar is initiated with '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence elements A_i are then generated by the counter non-terminal <T_i>, which decrements until it reaches <T_1>, ensuring each A_i is on a new line. The grammar constructs are '<T_i>-><T_i-1> <n> A_i' and '<T_1>->A_1', systematically parsing the sequence of elements following the count [n]."}
{"name": "p02272 Merge Sort", "description": "Constraints\n\n* n <= 500000\n* 0 <= an element in S <= 109\n\nInput\n\nIn the first line n is given. In the second line, n integers are given.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> element", "<T_1>->element"], "constraints": ["n<=500000", "0<=element<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' is used as a counter for the sequence of elements, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates 'n' elements separated by spaces. Each element in the sequence is represented by the variable 'element', which is not a counter variable and thus not enclosed in brackets. The grammar rules '<T_i>-><T_i-1> <s> element' and '<T_1>->element' ensure the correct generation of the sequence of elements based on the counter [n]."}
{"name": "p02278 Minimum Cost Sort", "description": "Constraints\n\n* $1 <= n <= 1,000$\n* $0 <= w_i<= 10^4$\n* $w_i$ are all different\n\nInput\n\nIn the first line, an integer $n$ is given. In the second line, $n$ integers $w_i (i = 0, 1, 2, ... n-1)$ separated by space characters are given.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> w_i", "<T_1>->w_i"], "constraints": ["1<=n<=1000", "0<=w_i<=10000"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'n' is used as a counter variable for the sequence of integers 'w_i', thus it is denoted as [n] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'w_i' represents each integer separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <s> w_i', and '<T_1>->w_i' to systematically parse the sequence of integers following the count [n]."}
{"name": "p02287 Complete Binary Tree", "description": "Constraints\n\n* $H <= 250$\n* $-2,000,000,000 <=$ value of a node $<= 2,000,000,000$\n\nInput\n\nIn the first line, an integer $H$, the size of the binary heap, is given. In the second line, $H$ integers which correspond to values assigned to nodes of the binary heap are given in order of node id (from $1$ to $H$).", "grammar": {"productions": ["<S>->[H] <n> <T_H>", "<T_i>-><T_i-1> <s> L_i", "<T_1>->L_1"], "constraints": ["1<=H<=250", "-2000000000<=L_i<=2000000000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'H' is used as a counter variable for the number of integers in the binary heap, hence it is enclosed in brackets as [H]. The grammar is initiated with '<S>->[H] <n> <T_H>', where <T_H> is a counter non-terminal that generates the sequence of integers separated by spaces. The non-terminal <T_i> is defined to decrement until it reaches 1, producing the integers in order. The integers themselves are represented by 'L_i', which are constrained by the given range. The grammar thus systematically parses the input format where 'H' is followed by 'H' integers."}
{"name": "p02298 Is-Convex", "description": "Constraints\n\n* 3 <= n <= 100\n* -10000 <= xi, yi <= 10000\n* No point of the polygon will occur more than once.\n* Two sides of the polygon can intersect only at a common endpoint.\n\nInput\n\ng is given by coordinates of the points p1,..., pn in the following format:\n\n\nn\nx1 y1\nx2 y2\n:\nxn yn\n\n\nThe first integer n is the number of points. The coordinate of a point pi is given by two integers xi and yi. The coordinates of points are given in the order of counter-clockwise visit of them.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["3<=n<=100", "-10000<=x_i,y_i<=10000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter variable for the number of points, hence it is enclosed in [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_i> is a counter non-terminal for [n], representing each point's coordinates (x_i and y_i) separated by a space <s> and followed by a newline <n>. The grammar rules '<T_i>-><T_i-1> <n> x_i <s> y_i' and '<T_1>->x_1 <s> y_1' systematically parse the sequence of points, ensuring each point's coordinates are correctly formatted and separated."}
{"name": "p02365 Minimum-Cost Arborescence", "description": "Constraints\n\n* 1 <= |V| <= 100\n* 0 <= |E| <= 1,000\n* 0 <= wi <= 10,000\n* G has arborescence(s) with the root r\n\nInput\n\n\n|V| |E| r\ns0 t0 w0\ns1 t1 w1\n:\ns|E|-1 t|E|-1 w|E|-1\n\n\n, where |V| is the number of vertices and |E| is the number of edges in the graph. The graph vertices are named with the numbers 0, 1,..., |V|-1 respectively. r is the root of the Minimum-Cost Arborescence.\n\nsi and ti represent source and target verticess of i-th directed edge. wi represents the weight of the i-th directed edge.", "grammar": {"productions": ["<S>->V <s> [E] <s> r <n> <T_E>", "<T_i>-><T_i-1> <n> s_i <s> t_i <s> w_i", "<T_1>->s_1 <s> t_1 <s> w_1"], "constraints": ["1<=V<=100", "0<=E<=1000", "0<=w_i<=10000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: V, E, and r, where [E] serves as a counter variable for the number of edges, hence enclosed in brackets. The grammar is initiated with '<S>->V <s> [E] <s> r <n> <T_E>'. The non-terminal <T_i> is a counter-driven rule for [E], representing each edge's source (s_i), target (t_i), and weight (w_i), separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> s_i <s> t_i <s> w_i' and '<T_1>->s_1 <s> t_1 <s> w_1' to systematically parse the sequence of edges following the count [E]."}
{"name": "p02378 Bipartite Matching", "description": "Constraints\n\n* 1 <= |X|, |Y| <= 100\n* 0 <= |E| <= 10,000\n\nInput\n\n\n|X| |Y| |E|\nx0 y0\nx1 y1\n:\nx|E|-1 y|E|-1\n\n\n|X| and |Y| are the number of vertices in X and Y respectively, and |E| is the number of edges in the graph G. The vertices in X are named with the numbers 0, 1,..., |X|-1, and vertices in Y are named with the numbers 0, 1,..., |Y|-1, respectively.\n\nxi and yi are the node numbers from X and Y respectevely which represent the end-points of the i-th edge.", "grammar": {"productions": ["<S>->[X] <s> [Y] <s> [E] <n> <T_E> <n>", "<T_i>-><T_i-1> <n> xi <s> yi", "<T_1>->xi <s> yi"], "constraints": ["1<=X,Y<=100", "0<=E<=10000", "0<=xi<X", "0<=yi<=Y"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables |X|, |Y|, and |E| are used as counters, hence they are enclosed in brackets as [X], [Y], and [E]. The grammar is structured as '<S>->[X] <s> [Y] <s> [E] <n> <T_E>', where <T_E> is a counter non-terminal for [E]. The non-terminal <T_i> generates pairs of 'xi' and 'yi' separated by a space <s>, decrementing until <T_1> is reached. This reflects the input format where the first line contains the counters, followed by |E| lines of edge pairs."}
{"name": "p02391 Small", "description": "Write a program which prints small/large/equal relation of given two integers a and b.\n\nConstraints\n\n* -1000 ≤ a, b ≤ 1000\n\nInput\n\nTwo integers a and b separated by a single space are given in a line.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["-1000<=a<=1000", "-1000<=b<=1000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space."}
{"name": "p02394 Circle in a Rectangle", "description": "Write a program which reads a rectangle and a circle, and determines whether the circle is arranged inside the rectangle. As shown in the following figures, the upper right coordinate $(W, H)$ of the rectangle and the central coordinate $(x, y)$ and radius $r$ of the circle are given.\n\n\nCircle inside a rectangle\n\n\nConstraints\n\n* $ -100 \\leq x, y \\leq 100$\n* $ 0 < W, H, r \\leq 100$\n\nInput\n\nFive integers $W$, $H$, $x$, $y$ and $r$ separated by a single space are given in a line.", "grammar": {"productions": ["<S>->x <s> y <s> W <s> H <s> r"], "constraints": ["-100<=x<=100", "-100<=y<=100", "0<W<=100", "0<H<=100", "0<r<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes five variables: W, H, x, y, and r, which are all separated by space symbols denoted as <s>. Since none of these variables serve as counters, they are not enclosed in brackets. The grammar is structured as '<S>->x <s> y <s> W <s> H <s> r', representing the input format where the variables are listed in order and separated by spaces."}
{"name": "p02398 How Many Divisors?", "description": "Constraints\n\n* 1 <= a, b, c <= 10000\n* a <= b\n\nInput\n\nThree integers a, b and c are given in a line separated by a single space.", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=10000", "1<=b<=10000", "a<=b", "1<=c<=10000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'a', 'b', and 'c', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> c', representing the input format where 'a', 'b', and 'c' are three integers separated by spaces. None of these variables serve as counters, so they are not enclosed in brackets."}
{"name": "p02400 Circle", "description": "Write a program which calculates the area and circumference of a circle for given radius r.\n\nConstraints\n\n* 0 < r < 10000\n\nInput\n\nA real number r is given.", "grammar": {"productions": ["<S>->r"], "constraints": ["0<r<10000"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, 'r', which is not a counter variable, so it is represented simply as 'r'. The input format is straightforward, consisting of a single real number 'r'. Thus, the grammar is constructed as '<S>->r' to reflect this input structure."}
{"name": "p02403 Print a Rectangle", "description": "Draw a rectangle which has a height of H cm and a width of W cm. Draw a 1-cm square by single '#'.\n\nConstraints\n\n* 1 ≤ H ≤ 300\n* 1 ≤ W ≤ 300\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of two integers H and W separated by a single space.\n\nThe input ends with two 0 (when both H and W are zero).", "grammar": {"productions": ["<S>->H <s> W <n> <S>|0 <s> 0"], "constraints": ["1<=H<=300", "1<=W<=300"]}, "reason": "The grammar starts with the start non-terminal <S>. It includes two variables, H and W, which are not used as counters but as dimensions for the rectangle. Hence, they are not enclosed in brackets. The grammar is structured to read H and W separated by a space <s> and followed by a newline <n>, with the option to repeat or terminate when both H and W are 0. Thus, the grammar is defined as '<S>->H <s> W <n> <S>|0 <s> 0' to handle multiple datasets until the termination condition is met."}
{"name": "p02407 Reversing Numbers", "description": "Write a program which reads a sequence and prints it in the reverse order.\n\nNote\n\n解説\n\nConstraints\n\n* n ≤ 100\n* 0 ≤ ai < 1000\n\nInput\n\nThe input is given in the following format:\n\n\nn\na1 a2 . . . an\n\n\nn is the size of the sequence and ai is the ith element of the sequence.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "0<=a_i<=1000"]}, "reason": "The grammar construction begins with the start non-terminal <S>. The variable 'n' serves as a counter for the sequence elements, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal for [n]. The sequence elements 'a_i' are separated by spaces <s>, leading to the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1'. This setup ensures the input is parsed as a sequence of 'n' integers separated by spaces."}
{"name": "p02408 Finding Missing Cards", "description": "Taro is going to play a card game. However, now he has only n cards, even though there should be 52 cards (he has no Jokers).\n\nThe 52 cards include 13 ranks of each of the four suits: spade, heart, club and diamond.\n\nNote\n\n解説\n\n\n\nInput\n\nIn the first line, the number of cards n (n ≤ 52) is given.\n\nIn the following n lines, data of the n cards are given. Each card is given by a pair of a character and an integer which represent its suit and rank respectively. A suit is represented by 'S', 'H', 'C' and 'D' for spades, hearts, clubs and diamonds respectively. A rank is represented by an integer from 1 to 13.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [SHCD]{1} <s> a_i", "<T_1>->[SHCD]{1} <s> a_1"], "constraints": ["1<=n<=52", "1<=a_i<=13"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the number of cards, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n>'. The non-terminal <T_i> is a counter-driven rule for [n], where each card is represented by a suit character (S, H, C, D) followed by a space <s> and a rank integer a_i. The suit characters are represented using the regex [SHCD]{1} to ensure only valid suits are used. The grammar constructs are laid out as '<S>->[n] <n> <T_n>', '<T_i>-><T_i-1> <n> [SHCD]{1} <s> a_i', and '<T_1>->[SHCD]{1} <s> a_1' to systematically parse the sequence of cards following the count [n]."}
{"name": "p02537 ACL Beginner Contest - Flat Subsequence", "description": "You are given a sequence A_1, A_2, ..., A_N and an integer K.\n\nPrint the maximum possible length of a sequence B that satisfies the following conditions:\n\n* B is a (not necessarily continuous) subsequence of A.\n* For each pair of adjacents elements of B, the absolute difference of the elements is at most K.\n\nConstraints\n\n* 1 \\leq N \\leq 300,000\n* 0 \\leq A_i \\leq 300,000\n* 0 \\leq K \\leq 300,000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1\nA_2\n:\nA_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=300000", "0<=A_i<=300000", "0<=K<=300000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter for the sequence elements, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <s> K <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The sequence elements 'A_i' are listed one per line, each preceded by a newline token <n>. The counter non-terminal <T_i> is defined to recursively include each 'A_i' until it reaches the base case <T_1>->A_1. This structure ensures the input is parsed as a sequence of integers following the initial values of N and K."}
{"name": "p02539 ACL Beginner Contest - Heights and Pairs", "description": "Constraints\n\n* 1 <= N <= 50,000\n* 1 <= h_i <= 100,000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nh_1\n:\nh_{2N}", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> h_i", "<T_1>->h_1"], "constraints": ["1<=N<=50000", "1<=h_i<=100000"]}, "reason": "The grammar begins with the start non-terminal <S>. Here, 'N' is used as a counter variable for the sequence of 'h_i' elements, thus it is denoted as [N] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'h_i' represents each element separated by a newline symbol <n>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <n> h_i', and '<T_1>->h_1' to systematically parse the sequence of elements following the count [N]."}
{"name": "p02548 AtCoder Beginner Contest 179 - A x B + C", "description": "Constraints\n\n* 2 <= N <= 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N]"], "constraints": ["2<=N<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable, hence it is enclosed in brackets as [N]. The grammar is constructed as '<S>->[N]' to represent the input format where only the integer 'N' is provided. This follows the rule that variables serving as counters are enclosed in brackets and represented with corresponding non-terminals."}
{"name": "p02552 AtCoder Beginner Contest 178 - Not", "description": "Given is an integer x that is greater than or equal to 0, and less than or equal to 1. Output 1 if x is equal to 0, or 0 if x is equal to 1.\n\nConstraints\n\n* 0 \\leq x \\leq 1\n* x is an integer\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nx", "grammar": {"productions": ["<S>->x"], "constraints": ["0<=x<=1"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'x' is not a counter variable, so it is represented simply as 'x' without brackets. The grammar is straightforward as it only requires the input of 'x', hence the grammar is constructed as '<S>->x'."}
{"name": "p02555 AtCoder Beginner Contest 178 - Redistribution", "description": "Given is an integer S. Find how many sequences there are whose terms are all integers greater than or equal to 3, and whose sum is equal to S. The answer can be very large, so output it modulo 10^9 + 7.\n\nConstraints\n\n* 1 \\leq S \\leq 2000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->S"], "constraints": ["1<=S<=20000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'S' is not used as a counter variable, hence it is not enclosed in brackets. The grammar is simply constructed as '<S>->S' to represent the input format where 'S' is an integer given as input. Since 'S' is not a counter and does not require any sequence generation, no additional non-terminals or regex expressions are needed."}
{"name": "p02571 AtCoder Beginner Contest 177 - Substring", "description": "Given are two strings S and T.\n\nLet us change some of the characters in S so that T will be a substring of S.\n\nAt least how many characters do we need to change?\n\nHere, a substring is a consecutive subsequence. For example, `xxx` is a substring of `yxxxy`, but not a substring of `xxyxx`.\n\nConstraints\n\n* The lengths of S and T are each at least 1 and at most 1000.\n* The length of T is at most that of S.\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[a-z]{S} <n> [a-z]{S}"], "constraints": ["1<=S,T<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, S and T, which are strings of lowercase English letters. Since both S and T are not counter variables but represent strings of variable lengths, they are replaced directly with regex expressions [a-z]{S} and [a-z]{T} to denote their content and length. The grammar is structured as '<S>->[a-z]{S} <n> [a-z]{T}', reflecting the input format where S and T are provided on separate lines. The constraints specify the lengths of S and T to be between 1 and 1000, with T's length not exceeding that of S."}
{"name": "p02572 AtCoder Beginner Contest 177 - Sum of product of pairs", "description": "Given are N integers A_1,\\ldots,A_N.\n\nFind the sum of A_i \\times A_j over all pairs (i,j) such that 1\\leq i < j \\leq N, modulo (10^9+7).\n\nConstraints\n\n* 2 \\leq N \\leq 2\\times 10^5\n* 0 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2*10^5", "0<=A_i<=10^9"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'N' is used as a counter variable for the array elements, thus it is denoted as [N] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p02574 AtCoder Beginner Contest 177 - Coprime", "description": "We have N integers. The i-th number is A_i.\n\n\\\\{A_i\\\\} is said to be pairwise coprime when GCD(A_i,A_j)=1 holds for every pair (i, j) such that 1\\leq i < j \\leq N.\n\n\\\\{A_i\\\\} is said to be setwise coprime when \\\\{A_i\\\\} is not pairwise coprime but GCD(A_1,\\ldots,A_N)=1.\n\nDetermine if \\\\{A_i\\\\} is pairwise coprime, setwise coprime, or neither.\n\nHere, GCD(\\ldots) denotes greatest common divisor.\n\nConstraints\n\n* 2 \\leq N \\leq 10^6\n* 1 \\leq A_i\\leq 10^6\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^6", "1<=A_i<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter for the sequence of integers, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates the sequence of integers A_i separated by spaces. The counter non-terminal <T_i> is defined recursively to produce each element A_i in the sequence until it reaches the base case <T_1>->A_1. This setup ensures the input format where the first line is the count [N] and the second line is the sequence of [N] integers separated by spaces."}
{"name": "p02577 AtCoder Beginner Contest 176 - Multiple of 9", "description": "An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\n\nDetermine whether N is a multiple of 9.\n\nConstraints\n\n* 0 \\leq N < 10^{200000}\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["0<=N<=10^200000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is not used as a counter variable but represents a large integer, so it is not enclosed in brackets. The grammar is simply '<S>->N', reflecting the input format where 'N' is given as a single integer. The constraints specify that 'N' must be a non-negative integer less than 10^200000."}
{"name": "p02580 AtCoder Beginner Contest 176 - Bomber", "description": "We have a two-dimensional grid with H \\times W squares. There are M targets to destroy in this grid - the position of the i-th target is \\left(h_i, w_i \\right).\n\nTakahashi will choose one square in this grid, place a bomb there, and ignite it. The bomb will destroy all targets that are in the row or the column where the bomb is placed. It is possible to place the bomb at a square with a target.\n\nTakahashi is trying to maximize the number of targets to destroy. Find the maximum number of targets that can be destroyed.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq H, W \\leq 3 \\times 10^5\n* 1 \\leq M \\leq \\min\\left(H\\times W, 3 \\times 10^5\\right)\n* 1 \\leq h_i \\leq H\n* 1 \\leq w_i \\leq W\n* \\left(h_i, w_i\\right) \\neq \\left(h_j, w_j\\right) \\left(i \\neq j\\right)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W M\nh_1 w_1\n\\vdots\nh_M w_M", "grammar": {"productions": ["<S>->H <s> W <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> H_i <s> W_i", "<T_1>->H_1 <s> W_1"], "constraints": ["1<=H,W<=3*10^5", "1<=M<=min(H*W,3*10^5)", "1<=H_i<=H", "1<=W_i<=W", "(H_i,W_i)!=(H_j,W_j)"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: H, W, and M. Among these, M serves as a counter variable for the number of target positions, hence it is enclosed in [M]. The grammar is initiated with '<S>->H <s> W <s> [M] <n> <T_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each target position is represented by H_i and W_i separated by a space <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> H_i <s> W_i' and '<T_1>->H_1 <s> W_1' to systematically parse the sequence of target positions following the count [M]."}
{"name": "p02582 AtCoder Beginner Contest 175 - Rainy Season", "description": "We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is `S`, it means it was sunny on the i-th day; if that character is `R`, it means it was rainy on that day.\n\nFind the maximum number of consecutive rainy days in this period.\n\nConstraints\n\n* |S| = 3\n* Each character of S is `S` or `R`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[SR]{3}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input is a string S of length 3, consisting of characters 'S' or 'R'. Since the length is fixed and the characters are restricted to 'S' or 'R', the grammar is represented using a regular expression [SR]{3}, which matches any 3-character combination of 'S' and 'R'. Thus, the grammar is simply '<S>->[SR]{3}', reflecting the input format where S is a string of exactly 3 characters, each being either 'S' or 'R'."}
{"name": "p02595 AtCoder Beginner Contest 174 - Distance", "description": "We have N points in the two-dimensional plane. The coordinates of the i-th point are (X_i,Y_i).\n\nAmong them, we are looking for the points such that the distance from the origin is at most D. How many such points are there?\n\nWe remind you that the distance between the origin and the point (p, q) can be represented as \\sqrt{p^2+q^2}.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 0 \\leq D \\leq 2\\times 10^5\n* |X_i|,|Y_i| \\leq 2\\times 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN D\nX_1 Y_1\n\\vdots\nX_N Y_N", "grammar": {"productions": ["<S>->[N] <s> D <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> Y_i", "<T_1>->X_1 <s> Y_1"], "constraints": ["1<=N<=2*10^5", "0<=D<=2*10^5", "-2*10^5<=X_i<=2*10^5", "-2*10^5<=Y_i<=2*10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the number of points, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> D <n> <T_N>', where <T_N> is a counter non-terminal for [N]. Each point's coordinates are represented as 'X_i <s> Y_i', separated by a space <s> and a newline <n> for each subsequent point. The counter non-terminal <T_i> is defined to decrement until it reaches 1, ensuring all N points are processed. The constraints are derived from the input specifications, ensuring all variables adhere to their defined ranges."}
{"name": "p02596 AtCoder Beginner Contest 174 - Repsept", "description": "Takahashi loves the number 7 and multiples of K.\n\nWhere is the first occurrence of a multiple of K in the sequence 7,77,777,\\ldots? (Also see Output and Sample Input/Output below.)\n\nIf the sequence contains no multiples of K, print `-1` instead.\n\nConstraints\n\n* 1 \\leq K \\leq 10^6\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["1<=K<=10^6"]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a single variable K, which is not used as a counter variable but simply represents an integer input. Therefore, it is not enclosed in brackets and is directly represented as 'K' in the grammar. The grammar is constructed as '<S>->K' to reflect this straightforward input format."}
{"name": "p02597 AtCoder Beginner Contest 174 - Alter Altar", "description": "An altar enshrines N stones arranged in a row from left to right. The color of the i-th stone from the left (1 \\leq i \\leq N) is given to you as a character c_i; `R` stands for red and `W` stands for white.\n\nYou can do the following two kinds of operations any number of times in any order:\n\n* Choose two stones (not necessarily adjacent) and swap them.\n* Choose one stone and change its color (from red to white and vice versa).\n\n\n\nAccording to a fortune-teller, a white stone placed to the immediate left of a red stone will bring a disaster. At least how many operations are needed to reach a situation without such a white stone?\n\nConstraints\n\n* 2 \\leq N \\leq 200000\n* c_i is `R` or `W`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nc_{1}c_{2}...c_{N}", "grammar": {"productions": ["<S>->[N] <n> [RW]{N}"], "constraints": ["2<=N<=200000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of characters, hence it is enclosed in [N]. The sequence of characters consists of 'R' and 'W' and has a length of N, which is represented using the regular expression [RW]{N}. Therefore, the grammar is constructed as '<S>->[N] <n> [RW]{N}', where <n> denotes a newline character. This format accurately reflects the input structure where the first line is the integer N and the second line is a string of N characters, each being either 'R' or 'W'."}
{"name": "p02604 M-SOLUTIONS Programming Contest 2020 - M's Solution", "description": "New AtCoder City has an infinite grid of streets, as follows:\n\n* At the center of the city stands a clock tower. Let (0, 0) be the coordinates of this point.\n* A straight street, which we will call East-West Main Street, runs east-west and passes the clock tower. It corresponds to the x-axis in the two-dimensional coordinate plane.\n* There are also other infinitely many streets parallel to East-West Main Street, with a distance of 1 between them. They correspond to the lines \\ldots, y = -2, y = -1, y = 1, y = 2, \\ldots in the two-dimensional coordinate plane.\n* A straight street, which we will call North-South Main Street, runs north-south and passes the clock tower. It corresponds to the y-axis in the two-dimensional coordinate plane.\n* There are also other infinitely many streets parallel to North-South Main Street, with a distance of 1 between them. They correspond to the lines \\ldots, x = -2, x = -1, x = 1, x = 2, \\ldots in the two-dimensional coordinate plane.\n\n\n\nThere are N residential areas in New AtCoder City. The i-th area is located at the intersection with the coordinates (X_i, Y_i) and has a population of P_i. Each citizen in the city lives in one of these areas.\n\nThe city currently has only two railroads, stretching infinitely, one along East-West Main Street and the other along North-South Main Street.\nM-kun, the mayor, thinks that they are not enough for the commuters, so he decides to choose K streets and build a railroad stretching infinitely along each of those streets.\n\nLet the walking distance of each citizen be the distance from his/her residential area to the nearest railroad.\nM-kun wants to build railroads so that the sum of the walking distances of all citizens, S, is minimized.\n\nFor each K = 0, 1, 2, \\dots, N, what is the minimum possible value of S after building railroads?\n\nConstraints\n\n* 1 \\leq N \\leq 15\n* -10 \\ 000 \\leq X_i \\leq 10 \\ 000\n* -10 \\ 000 \\leq Y_i \\leq 10 \\ 000\n* 1 \\leq P_i \\leq 1 \\ 000 \\ 000\n* The locations of the N residential areas, (X_i, Y_i), are all distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX_1 Y_1 P_1\nX_2 Y_2 P_2\n:  :  :\nX_N Y_N P_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> Y_i <s> P_i", "<T_1>->X_1 <s> Y_1 <s> P_1"], "constraints": ["1<=N<=15", "-10000<=X_i<=10000", "-10000<=Y_i<=10000", "1<=P_i<=1000000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the number of residential areas, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates each residential area's details. Each residential area's details include X_i, Y_i, and P_i, separated by spaces <s>. The counter non-terminal <T_i> is defined to decrement until it reaches 1, generating each line of input in the format 'X_i <s> Y_i <s> P_i'. The grammar ensures that all residential areas are listed sequentially, each on a new line, following the initial line that specifies the count [N]."}
{"name": "p02605 M-SOLUTIONS Programming Contest 2020 - Air Safety", "description": "M-kun is a brilliant air traffic controller.\n\nOn the display of his radar, there are N airplanes numbered 1, 2, ..., N, all flying at the same altitude.\nEach of the airplanes flies at a constant speed of 0.1 per second in a constant direction. The current coordinates of the airplane numbered i are (X_i, Y_i), and the direction of the airplane is as follows:\n\n* if U_i is `U`, it flies in the positive y direction;\n* if U_i is `R`, it flies in the positive x direction;\n* if U_i is `D`, it flies in the negative y direction;\n* if U_i is `L`, it flies in the negative x direction.\n\n\n\nTo help M-kun in his work, determine whether there is a pair of airplanes that will collide with each other if they keep flying as they are now.\nIf there is such a pair, find the number of seconds after which the first collision will happen.\nWe assume that the airplanes are negligibly small so that two airplanes only collide when they reach the same coordinates simultaneously.\n\nConstraints\n\n* 1 \\leq N \\leq 200000\n* 0 \\leq X_i, Y_i \\leq 200000\n* U_i is `U`, `R`, `D`, or `L`.\n* The current positions of the N airplanes, (X_i, Y_i), are all distinct.\n* N, X_i, and Y_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX_1 Y_1 U_1\nX_2 Y_2 U_2\nX_3 Y_3 U_3\n:\nX_N Y_N U_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> Y_i <s> [URDL]{1}", "<T_1>->X_1 <s> Y_1 <s> [URDL]{1}"], "constraints": ["1<=N<=200000", "0<=X_i<=200000", "0<=Y_i<=200000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the number of airplanes, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. Each line in the input consists of three elements: X_i, Y_i, and U_i, separated by spaces. The U_i is a single character from the set {'U', 'R', 'D', 'L'}, represented by the regex [URDL]{1}. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> X_i <s> Y_i <s> [URDL]{1}' and '<T_1>->X_1 <s> Y_1 <s> [URDL]{1}' to systematically parse each line of the input following the count [N]."}
{"name": "p02607 AIsing Programming Contest 2020 - An Odd Problem", "description": "We have N squares assigned the numbers 1,2,3,\\ldots,N. Each square has an integer written on it, and the integer written on Square i is a_i.\n\nHow many squares i satisfy both of the following conditions?\n\n* The assigned number, i, is odd.\n* The written integer is odd.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, a_i \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\cdots a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=100", "1<=a_i<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of integers 'a_i', hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates the sequence of integers separated by spaces. The rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' ensure the correct sequence generation based on the counter [N]. This setup accurately reflects the input format where 'N' is followed by 'N' integers separated by spaces."}
{"name": "p02609 AIsing Programming Contest 2020 - Anything Goes to Zero", "description": "Let \\mathrm{popcount}(n) be the number of `1`s in the binary representation of n. For example, \\mathrm{popcount}(3) = 2, \\mathrm{popcount}(7) = 3, and \\mathrm{popcount}(0) = 0.\n\nLet f(n) be the number of times the following operation will be done when we repeat it until n becomes 0: \"replace n with the remainder when n is divided by \\mathrm{popcount}(n).\" (It can be proved that, under the constraints of this problem, n always becomes 0 after a finite number of operations.)\n\nFor example, when n=7, it becomes 0 after two operations, as follows:\n\n* \\mathrm{popcount}(7)=3, so we divide 7 by 3 and replace it with the remainder, 1.\n* \\mathrm{popcount}(1)=1, so we divide 1 by 1 and replace it with the remainder, 0.\n\n\n\nYou are given an integer X with N digits in binary. For each integer i such that 1 \\leq i \\leq N, let X_i be what X becomes when the i-th bit from the top is inverted. Find f(X_1), f(X_2), \\ldots, f(X_N).\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* X is an integer with N digits in binary, possibly with leading zeros.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX", "grammar": {"productions": ["<S>->[N] <n> [01]{N}"], "constraints": ["1<=N<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, N, which serves as a counter variable for the binary digits of X, hence it is enclosed in [N]. The binary string X is represented using a regular expression [01]{N}, indicating a sequence of N characters, each being either '0' or '1'. The grammar is constructed as '<S>->[N] <n> [01]{N}' to reflect the input format where N is followed by a newline and then the binary string X of length N."}
{"name": "p02610 AIsing Programming Contest 2020 - Camel Train", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= T <= 10^5\n* 1 <= N <= 2 * 10^{5}\n* 1 <= K_i <= N\n* 1 <= L_i, R_i <= 10^9\n* The sum of values of N in each input file is at most 2 * 10^5.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nT\n\\mathrm{case}_1\n\\vdots\n\\mathrm{case}_T\n\n\nEach case is given in the following format:\n\n\nN\nK_1 L_1 R_1\n\\vdots\nK_N L_N R_N", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [N] <n> <L_N>", "<T_1>->[N] <n> <L_N>", "<L_i>-><L_i-1> <s> K_i <s> L_i <s> R_i", "<L_1>->K_1 <s> L_1 <s> R_1"], "constraints": ["1<=T<=10^5", "1<=N<=2*10^5", "1<=K_i<=N", "1<=L_i,R_i<=10^9"]}, "reason": "The grammar starts with the start non-terminal <S>. The variable 'T' serves as a counter variable for the number of test cases, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case is represented by a line containing 'N' followed by 'N' lines of 'K_i L_i R_i'. The variable 'N' within each test case also serves as a counter variable, hence it is enclosed in [N] and represented by the non-terminal <L_N>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [N] <n> <L_N>', '<T_1>->[N] <n> <L_N>', '<L_i>-><L_i-1> <s> K_i <s> L_i <s> R_i', and '<L_1>->K_1 <s> L_1 <s> R_1' to systematically parse each test case and its associated data lines."}
{"name": "p02613 AtCoder Beginner Contest 173 - Judge Status Summary", "description": "Constraints\n\n* 1 <= N <= 10^5\n* S_i is `AC`, `WA`, `TLE`, or `RE`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS_1\n\\vdots\nS_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> AC|WA|TLE|RE", "<T_1>->AC|WA|TLE|RE"], "constraints": ["1<=N<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. Here, 'N' is used as a counter variable for the sequence of strings, thus it is denoted as [N] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each string 'S_i' can be one of 'AC', 'WA', 'TLE', or 'RE', separated by a newline symbol <n>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <n> AC|WA|TLE|RE', and '<T_1>->AC|WA|TLE|RE' to systematically parse the sequence of strings following the count [N]."}
{"name": "p02615 AtCoder Beginner Contest 173 - Chat in a Circle", "description": "Quickly after finishing the tutorial of the online game ATChat, you have decided to visit a particular place with N-1 players who happen to be there. These N players, including you, are numbered 1 through N, and the friendliness of Player i is A_i.\n\nThe N players will arrive at the place one by one in some order. To make sure nobody gets lost, you have set the following rule: players who have already arrived there should form a circle, and a player who has just arrived there should cut into the circle somewhere.\n\nWhen each player, except the first one to arrive, arrives at the place, the player gets comfort equal to the smaller of the friendliness of the clockwise adjacent player and that of the counter-clockwise adjacent player. The first player to arrive there gets the comfort of 0.\n\nWhat is the maximum total comfort the N players can get by optimally choosing the order of arrivals and the positions in the circle to cut into?\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\dots A_N", "grammar": {"productions": ["<S>->N <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2*10^5", "1<=A_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of friendliness values, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each 'A_i' represents a friendliness value separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' to systematically parse the sequence of friendliness values following the count [N]."}
{"name": "p02621 AtCoder Beginner Contest 172 - Calc", "description": "Given an integer a as input, print the value a + a^2 + a^3.\n\nConstraints\n\n* 1 \\leq a \\leq 10\n* a is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na", "grammar": {"productions": ["<S>->a"], "constraints": ["1<=a<=10"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'a' is given as input, and since it is not used as a counter variable, it is represented simply as 'a' without brackets. The grammar is straightforward, defined as '<S>->a', reflecting the input format where only the integer 'a' is provided."}
{"name": "p02623 AtCoder Beginner Contest 172 - Tsundoku", "description": "We have two desks: A and B. Desk A has a vertical stack of N books on it, and Desk B similarly has M books on it.\n\nIt takes us A_i minutes to read the i-th book from the top on Desk A (1 \\leq i \\leq N), and B_i minutes to read the i-th book from the top on Desk B (1 \\leq i \\leq M).\n\nConsider the following action:\n\n* Choose a desk with a book remaining, read the topmost book on that desk, and remove it from the desk.\n\n\n\nHow many books can we read at most by repeating this action so that it takes us at most K minutes in total? We ignore the time it takes to do anything other than reading.\n\nConstraints\n\n* 1 \\leq N, M \\leq 200000\n* 1 \\leq K \\leq 10^9\n* 1 \\leq A_i, B_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K\nA_1 A_2 \\ldots A_N\nB_1 B_2 \\ldots B_M", "grammar": {"productions": ["<S>->[N] <s> [M] <s> K <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1"], "constraints": ["1<=N<=200000", "1<=M<=200000", "1<=K<=10^9", "1<=A_i<=10^9", "1<=B_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: N, M, and K. Both N and M serve as counter variables for the sequences of books on desks A and B, respectively, hence they are enclosed in brackets as [N] and [M]. The variable K is not a counter, so it remains as K. The grammar is initiated with '<S>->[N] <s> [M] <s> K <n> <T_N> <n> <L_M>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each book's reading time on desk A, separated by a space symbol <s>. Similarly, <L_i> is a counter-driven rule for [M], where 'B_i' represents each book's reading time on desk B, separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i', '<T_1>->A_1', '<L_i>-><L_i-1> <s> B_i', and '<L_1>->B_1' to systematically parse the sequences of book reading times following the counts [N] and [M]."}
{"name": "p02624 AtCoder Beginner Contest 172 - Sum of Divisors", "description": "For a positive integer X, let f(X) be the number of positive divisors of X.\n\nGiven a positive integer N, find \\sum_{K=1}^N K\\times f(K).\n\nConstraints\n\n* 1 \\leq N \\leq 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<N<=10^7"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N]' to represent the input format where 'N' is the only input given. Since 'N' is a single integer, no additional non-terminals or regex expressions are needed."}
{"name": "p02646 Tokio Marine & Nichido Fire Insurance Programming Contest 2020 - Tag", "description": "Two children are playing tag on a number line. (In the game of tag, the child called \"it\" tries to catch the other child.) The child who is \"it\" is now at coordinate A, and he can travel the distance of V per second. The other child is now at coordinate B, and she can travel the distance of W per second.\n\nHe can catch her when his coordinate is the same as hers. Determine whether he can catch her within T seconds (including exactly T seconds later). We assume that both children move optimally.\n\nConstraints\n\n* -10^9 \\leq A,B \\leq 10^9\n* 1 \\leq V,W \\leq 10^9\n* 1 \\leq T \\leq 10^9\n* A \\neq B\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA V\nB W\nT", "grammar": {"productions": ["<S>->A <s> V <n> B <s> W <n> T"], "constraints": ["-10^9<=A<=10^9", "-10^9<=B<=10^9", "1<=V<=10^9", "1<=W<=10^9", "1<=T<=10^9", "A!=B"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines the variables 'A', 'V', 'B', 'W', and 'T', which are separated by space symbols denoted as <s> and newline symbols denoted as <n>. The structure of the grammar is formulated as '<S>->A <s> V <n> B <s> W <n> T', representing the input format where the variables are given in three lines: the first line contains 'A' and 'V' separated by a space, the second line contains 'B' and 'W' separated by a space, and the third line contains 'T'."}
{"name": "p02647 Tokio Marine & Nichido Fire Insurance Programming Contest 2020 - Lamps", "description": "We have N bulbs arranged on a number line, numbered 1 to N from left to right. Bulb i is at coordinate i.\n\nEach bulb has a non-negative integer parameter called intensity. When there is a bulb of intensity d at coordinate x, the bulb illuminates the segment from coordinate x-d-0.5 to x+d+0.5. Initially, the intensity of Bulb i is A_i. We will now do the following operation K times in a row:\n\n* For each integer i between 1 and N (inclusive), let B_i be the number of bulbs illuminating coordinate i. Then, change the intensity of each bulb i to B_i.\n\n\n\nFind the intensity of each bulb after the K operations.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq K \\leq 2 \\times 10^5\n* 0 \\leq A_i \\leq N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 A_2 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=K<=2*10^5", "0<=A_i<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable for the array elements, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> K <n> <T_N>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p02648 Tokio Marine & Nichido Fire Insurance Programming Contest 2020 - Knapsack Queries on a tree", "description": "We have a rooted binary tree with N vertices, where the vertices are numbered 1 to N. Vertex 1 is the root, and the parent of Vertex i (i \\geq 2) is Vertex \\left[ \\frac{i}{2} \\right].\n\nEach vertex has one item in it. The item in Vertex i has a value of V_i and a weight of W_i. Now, process the following query Q times:\n\n* Given are a vertex v of the tree and a positive integer L. Let us choose some (possibly none) of the items in v and the ancestors of v so that their total weight is at most L. Find the maximum possible total value of the chosen items.\n\n\n\nHere, Vertex u is said to be an ancestor of Vertex v when u is an indirect parent of v, that is, there exists a sequence of vertices w_1,w_2,\\ldots,w_k (k\\geq 2) where w_1=v, w_k=u, and w_{i+1} is the parent of w_i for each i.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N < 2^{18}\n* 1 \\leq Q \\leq 10^5\n* 1 \\leq V_i \\leq 10^5\n* 1 \\leq W_i \\leq 10^5\n* For the values v and L given in each query, 1 \\leq v \\leq N and 1 \\leq L \\leq 10^5.\n\nInput\n\nLet v_i and L_i be the values v and L given in the i-th query. Then, Input is given from Standard Input in the following format:\n\n\nN\nV_1 W_1\n:\nV_N W_N\nQ\nv_1 L_1\n:\nv_Q L_Q", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> [Q] <n> <L_Q>", "<T_i>-><T_i-1> <n> V_i <s> W_i", "<T_1>->V_1 <s> W_1", "<L_i>-><L_i-1> <n> v <s> L", "<L_1>->v <s> L"], "constraints": ["1<=N<=2^18", "1<=Q<=10^5", "1<=V_i<=10^5", "1<=W_i<=10^5", "1<=v<=N", "1<=L<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the number of vertices, hence it is enclosed in [N]. The grammar starts with '<S>->[N] <n> <T_N> <n> [Q] <n> <L_Q>', where <T_N> is a counter non-terminal for [N], representing the sequence of vertex values and weights. Each vertex entry is formatted as 'V_i <s> W_i' separated by a space <s>. The counter non-terminal <T_i> decrements until it reaches <T_1>, which is 'V_1 <s> W_1'. Similarly, [Q] is another counter variable for the number of queries, and <L_Q> is the counter non-terminal for [Q], representing each query as 'v <s> L' separated by a space <s>. The counter non-terminal <L_i> decrements until it reaches <L_1>, which is 'v <s> L'. This structure ensures the input is parsed correctly according to the given format."}
{"name": "p02651 AtCoder Grand Contest 045 - Xor Battle", "description": "There are two persons, numbered 0 and 1, and a variable x whose initial value is 0. The two persons now play a game. The game is played in N rounds. The following should be done in the i-th round (1 \\leq i \\leq N):\n\n* Person S_i does one of the following:\n* Replace x with x \\oplus A_i, where \\oplus represents bitwise XOR.\n* Do nothing.\n\n\n\nPerson 0 aims to have x=0 at the end of the game, while Person 1 aims to have x \\neq 0 at the end of the game.\n\nDetermine whether x becomes 0 at the end of the game when the two persons play optimally.\n\nSolve T test cases for each input file.\n\nConstraints\n\n* 1 \\leq T \\leq 100\n* 1 \\leq N \\leq 200\n* 1 \\leq A_i \\leq 10^{18}\n* S is a string of length N consisting of `0` and `1`.\n* All numbers in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format. The first line is as follows:\n\n\nT\n\n\nThen, T test cases follow. Each test case is given in the following format:\n\n\nN\nA_1 A_2 \\cdots A_N\nS", "grammar": {"productions": ["<S>->T <n> <T_T>", "<T_i>-><T_i-1> <n> [N] <n> <L_N> <n> [01]{N}", "<T_1>->[N] <n> <L_N> <n> [01]{N}", "<L_i>-><L_i-1> <s> A_i", "<L_1>->A_1"], "constraints": ["1<=T<=100", "1<=N<=200", "1<=A_i<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable T is used as a counter for the number of test cases, hence it is enclosed in [T] to indicate its role as a counter. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case includes a line with [N], followed by a sequence of A_i values separated by spaces, and a string of 0s and 1s of length N. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [N] <n> <L_N> <n> [01]{N}', '<T_1>->[N] <n> <L_N> <n> [01]{N}', '<L_i>-><L_i-1> <s> A_i', and '<L_1>->A_i' to systematically parse each test case's components."}
{"name": "p02652 AtCoder Grand Contest 045 - 01 Unbalanced", "description": "Constraints\n\n* 1 <= |S| <= 10^6\n* Each character of S is `0`, `1`, or `?`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[01?]{1,1000000}"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a string S, which can be up to 1,000,000 characters long, with each character being '0', '1', or '?'. Since the length of S is variable and can be very large, it is represented using a regular expression [01?]{1,1000000} to cover all possible valid inputs. The grammar is thus constructed as '<S>->[01?]{1,1000000}', which directly captures the input format without the need for counter variables or additional non-terminals."}
{"name": "p02658 AtCoder Beginner Contest 169 - Multiplication 2", "description": "Given N integers A_1, ..., A_N, compute A_1 \\times ... \\times A_N.\n\nHowever, if the result exceeds 10^{18}, print `-1` instead.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 0 \\leq A_i \\leq 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "0<=A_i<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of integers A_1 to A_N, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates the sequence of integers separated by spaces. The counter non-terminal <T_i> is defined recursively to produce each element A_i in the sequence, decrementing until it reaches <T_1>, which produces the first element A_1. This structure accurately reflects the input format where 'N' is followed by a sequence of 'N' integers."}
{"name": "p02662 AtCoder Beginner Contest 169 - Knapsack for All Subsets", "description": "Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N and another positive integer S.\nFor a non-empty subset T of the set \\\\{1, 2, \\ldots , N \\\\}, let us define f(T) as follows:\n\n\n* f(T) is the number of different non-empty subsets \\\\{x_1, x_2, \\ldots , x_k \\\\} of T such that A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S.\n\n\n\nFind the sum of f(T) over all 2^N-1 subsets T of \\\\{1, 2, \\ldots , N \\\\}. Since the sum can be enormous, print it modulo 998244353.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 3000\n* 1 \\leq S \\leq 3000\n* 1 \\leq A_i \\leq 3000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN S\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> S <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=3000", "1<=S<=3000", "1<=A_i<=3000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and S, where N serves as a counter variable for the sequence of integers A_i, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <s> S <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each A_i is separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' to systematically parse the sequence of integers following the count [N]."}
{"name": "p02663 NOMURA Programming Competition 2020 - Study Scheduling", "description": "In this problem, we use the 24-hour clock.\n\nTakahashi gets up exactly at the time H_1 : M_1 and goes to bed exactly at the time H_2 : M_2. (See Sample Inputs below for clarity.) He has decided to study for K consecutive minutes while he is up. What is the length of the period in which he can start studying?\n\nConstraints\n\n* 0 \\le H_1, H_2 \\le 23\n* 0 \\le M_1, M_2 \\le 59\n* The time H_1 : M_1 comes before the time H_2 : M_2.\n* K \\ge 1\n* Takahashi is up for at least K minutes.\n* All values in input are integers (without leading zeros).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH_1 M_1 H_2 M_2 K", "grammar": {"productions": ["<S>->H1 <s> M1 <s> H2 <s> M2 <s> K"], "constraints": ["0<=H1,H2<=23", "0<=M1,M2<=59", "K>=1"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes variables H1, M1, H2, M2, and K, none of which serve as counter variables, hence they are not enclosed in brackets. The variables are separated by space symbols <s> to reflect the input format where each time component and K are listed in sequence. The grammar is structured as '<S>->H1 <s> M1 <s> H2 <s> M2 <s> K' to accurately represent the input specification where all values are integers without leading zeros."}
{"name": "p02669 AtCoder Grand Contest 044 - Pay to Win", "description": "You start with the number 0 and you want to reach the number N.\n\nYou can change the number, paying a certain amount of coins, with the following operations:\n\n* Multiply the number by 2, paying A coins.\n* Multiply the number by 3, paying B coins.\n* Multiply the number by 5, paying C coins.\n* Increase or decrease the number by 1, paying D coins.\n\n\n\nYou can perform these operations in arbitrary order and an arbitrary number of times.\n\nWhat is the minimum number of coins you need to reach N?\n\nYou have to solve T testcases.\n\nConstraints\n\n* 1 \\le T \\le 10\n* 1 \\le N \\le 10^{18}\n* 1 \\le A, B, C, D \\le 10^9\n* All numbers N, A, B, C, D are integers.\n\nInput\n\nThe input is given from Standard Input. The first line of the input is\n\n\nT\n\n\nThen, T lines follow describing the T testcases. Each of the T lines has the format\n\n\nN A B C D", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> N <s> A <s> B <s> C <s> D", "<T_1>->N <s> A <s> B <s> C <s> D"], "constraints": ["1<=T<=10", "1<=N<=10^18", "1<=A<=10^9", "1<=B<=10^9", "1<=C<=10^9", "1<=D<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'T' serves as a counter variable for the number of test cases, hence it is enclosed in [T]. The grammar is initiated with '<S>->[T] <n> <T_T>'. The non-terminal <T_i> is a counter-driven rule for [T], where each test case is represented by 'N <s> A <s> B <s> C <s> D' separated by a newline token <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> N <s> A <s> B <s> C <s> D' and '<T_1>->N <s> A <s> B <s> C <s> D' to systematically parse each test case following the count [T]."}
{"name": "p02670 AtCoder Grand Contest 044 - Joker", "description": "Constraints\n\n* 2 <= N <= 500\n* The sequence P_1, P_2, ..., P_{N^2} is a permutation of \\\\{1, 2, ..., N^2\\\\}.\n\nInput\n\nThe input is given from Standard Input in the format\n\n\nN\nP_1 P_2 ... P_{N^2}", "grammar": {"productions": ["<S>->[N] <n> <T_N^2>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1"], "constraints": ["2<=N<=500", "1<=P_i<=N^2"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the sequence elements, hence it is denoted as [N] in the grammar. The grammar is initiated with '<S>->[N] <n> <T_N^2>', where <T_i> is a counter-driven rule for the sequence of elements P_1 to P_{N^2}, each separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> P_i' and '<T_1>->P_1' to systematically parse the sequence of elements following the count [N^2]."}
{"name": "p02677 AtCoder Beginner Contest 168 - : (Colon)", "description": "Consider an analog clock whose hour and minute hands are A and B centimeters long, respectively.\n\nAn endpoint of the hour hand and an endpoint of the minute hand are fixed at the same point, around which each hand rotates clockwise at constant angular velocity. It takes the hour and minute hands 12 hours and 1 hour to make one full rotation, respectively.\n\nAt 0 o'clock, the two hands overlap each other. H hours and M minutes later, what is the distance in centimeters between the unfixed endpoints of the hands?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B \\leq 1000\n* 0 \\leq H \\leq 11\n* 0 \\leq M \\leq 59\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B H M", "grammar": {"productions": ["<S>->A <s> B <s> H <s> M"], "constraints": ["1<=A,B<=1000", "0<=H<=11", "0<=M<=59"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines four variables, 'A', 'B', 'H', and 'M', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B <s> H <s> M', representing the input format where 'A', 'B', 'H', and 'M' are integers separated by spaces. None of these variables serve as counters, so they are not enclosed in brackets. The grammar directly reflects the input specification without the need for counter non-terminals or regex expressions."}
{"name": "p02679 AtCoder Beginner Contest 168 - ∙ (Bullet)", "description": "We have caught N sardines. The deliciousness and fragrantness of the i-th sardine is A_i and B_i, respectively.\n\nWe will choose one or more of these sardines and put them into a cooler. However, two sardines on bad terms cannot be chosen at the same time.\n\nThe i-th and j-th sardines (i \\neq j) are on bad terms if and only if A_i \\cdot A_j + B_i \\cdot B_j = 0.\n\nIn how many ways can we choose the set of sardines to put into the cooler? Since the count can be enormous, print it modulo 1000000007.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* -10^{18} \\leq A_i, B_i \\leq 10^{18}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=N<=2*10^5", "-10^18<=A_i,B_i<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the number of sardines, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter non-terminal for [N]. Each sardine's details are represented by 'A_i' and 'B_i' separated by a space <s>, leading to the rules '<T_i>-><T_i-1> <n> A_i <s> B_i' and '<T_1>->A_1 <s> B_1'. This structure ensures the input format where each line after 'N' contains two integers separated by a space, corresponding to the deliciousness and fragrantness of each sardine."}
{"name": "p02681 AtCoder Beginner Contest 167 - Registration", "description": "Takahashi wants to be a member of some web service.\n\nHe tried to register himself with the ID S, which turned out to be already used by another user.\n\nThus, he decides to register using a string obtained by appending one character at the end of S as his ID.\n\nHe is now trying to register with the ID T. Determine whether this string satisfies the property above.\n\nConstraints\n\n* S and T are strings consisting of lowercase English letters.\n* 1 \\leq |S| \\leq 10\n* |T| = |S| + 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[a-z]{1,10} <n> [a-z]{1,11}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of two strings, S and T, where T is formed by appending one character to S. Both S and T are strings of lowercase English letters, with S having a length between 1 and 10, and T having a length exactly one more than S. The grammar uses regular expressions to represent these strings: [a-z]{1,10} for S and [a-z]{1,11} for T, separated by a newline token <n>. This ensures the input format matches the specified constraints."}
{"name": "p02682 AtCoder Beginner Contest 167 - Easy Linear Programming", "description": "We have A cards, each of which has an integer 1 written on it. Similarly, we also have B cards with 0s and C cards with -1s.\n\nWe will pick up K among these cards. What is the maximum possible sum of the numbers written on the cards chosen?\n\nConstraints\n\n* All values in input are integers.\n* 0 \\leq A, B, C\n* 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C K", "grammar": {"productions": ["<S>->A <s> B <s> C <s> K"], "constraints": ["0<=A,B,C", "1<=K<=A+B+C<=2*10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables A, B, C, and K are not used as counter variables, hence they are not enclosed in brackets. The input format consists of these four variables separated by spaces, represented as '<S>->A <s> B <s> C <s> K'. Since none of the variables serve as counters, no counter non-terminals are needed in this grammar."}
{"name": "p02684 AtCoder Beginner Contest 167 - Teleporter", "description": "The Kingdom of Takahashi has N towns, numbered 1 through N.\n\nThere is one teleporter in each town. The teleporter in Town i (1 \\leq i \\leq N) sends you to Town A_i.\n\nTakahashi, the king, loves the positive integer K. The selfish king wonders what town he will be in if he starts at Town 1 and uses a teleporter exactly K times from there.\n\nHelp the king by writing a program that answers this question.\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq N\n* 1 \\leq K \\leq 10^{18}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 A_2 \\dots A_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2*10^5", "1<=A_i<=N", "1<=K<=10^18"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the array elements, hence it is denoted as [N] in the grammar. The variable 'K' is not a counter variable, so it is represented simply as 'K'. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> K <n> <T_N>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p02685 AtCoder Beginner Contest 167 - Colorful Blocks", "description": "There are N blocks arranged in a row. Let us paint these blocks.\n\nWe will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.\n\nFind the number of ways to paint the blocks under the following conditions:\n\n* For each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\n* There may be at most K pairs of adjacent blocks that are painted in the same color.\n\n\n\nSince the count may be enormous, print it modulo 998244353.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, M \\leq 2 \\times 10^5\n* 0 \\leq K \\leq N - 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "grammar": {"productions": ["<S>->N <s> M <s> K"], "constraints": ["1<=N,M<=2*10^5", "0<=K<=N-1"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: N, M, and K. None of these variables serve as counters for generating sequences or repetitions in the input format. Therefore, they are represented directly as 'N', 'M', and 'K' without enclosing them in brackets. The input format requires these three integers to be separated by spaces, which is denoted by <s>. Thus, the grammar is constructed as '<S>->N <s> M <s> K' to reflect the input structure where N, M, and K are given in a single line separated by spaces."}
{"name": "p02686 AtCoder Beginner Contest 167 - Bracket Sequencing", "description": "A bracket sequence is a string that is one of the following:\n\n1. An empty string;\n2. The concatenation of `(`, A, and `)` in this order, for some bracket sequence A ;\n3. The concatenation of A and B in this order, for some non-empty bracket sequences A and B /\n\n\n\nGiven are N strings S_i. Can a bracket sequence be formed by concatenating all the N strings in some order?\n\nConstraints\n\n* 1 \\leq N \\leq 10^6\n* The total length of the strings S_i is at most 10^6.\n* S_i is a non-empty string consisting of `(` and `)`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS_1\n:\nS_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> [()]{1,10^6}", "<T_1>->[()]{1,10^6}"], "constraints": ["1<=N<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable N is used as a counter variable for the number of strings, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each string S_i is represented by the regular expression [()]{1,10^6} to denote a string of 1 to 10^6 characters consisting of '(' or ')'. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <n> [()]{1,10^6}', and '<T_1>->[()]{1,10^6}' to systematically parse the sequence of strings following the count [N]."}
{"name": "p02687 AtCoder Beginner Contest 166 - A?C", "description": "AtCoder Inc. holds a contest every Saturday.\n\nThere are two types of contests called ABC and ARC, and just one of them is held at a time.\n\nThe company holds these two types of contests alternately: an ARC follows an ABC and vice versa.\n\nGiven a string S representing the type of the contest held last week, print the string representing the type of the contest held this week.\n\nConstraints\n\n* S is `ABC` or `ARC`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->ABC|ARC"], "constraints": []}, "reason": "The grammar starts with the start non-terminal <S>. The input consists of a single string S, which can be either 'ABC' or 'ARC'. Since there are no counter variables or sequences to generate, the grammar is simply defined as a choice between the two possible strings. Thus, the grammar is represented as '<S>->ABC|ARC'."}
{"name": "p02689 AtCoder Beginner Contest 166 - Peaks", "description": "There are N observatories in AtCoder Hill, called Obs. 1, Obs. 2, ..., Obs. N. The elevation of Obs. i is H_i. There are also M roads, each connecting two different observatories. Road j connects Obs. A_j and Obs. B_j.\n\nObs. i is said to be good when its elevation is higher than those of all observatories that can be reached from Obs. i using just one road. Note that Obs. i is also good when no observatory can be reached from Obs. i using just one road.\n\nHow many good observatories are there?\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq H_i \\leq 10^9\n* 1 \\leq A_i,B_i \\leq N\n* A_i \\neq B_i\n* Multiple roads may connect the same pair of observatories.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nH_1 H_2 ... H_N\nA_1 B_1\nA_2 B_2\n:\nA_M B_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> H_i", "<T_1>->H_1", "<L_i>-><L_i-1> <n> A_i <s> B_i", "<L_1>->A_1 <s> B_1"], "constraints": ["2<=N<=10^5", "1<=M<=10^5", "1<=H_i<=10^9", "1<=A_i<=N", "1<=B_i<=N", "A_i!=B_i"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables N and M are both counter variables, hence they are enclosed in brackets as [N] and [M]. The grammar is structured as '<S>->[N] <s> [M] <n> <T_N> <n> <L_M>', where <T_N> handles the sequence of H_i values separated by spaces, and <L_M> manages the pairs of A_j and B_j values, each separated by a space and followed by a newline. The counter non-terminals <T_i> and <L_i> are used to decrement the counters until they reach 1, ensuring the correct number of elements are generated. The constraints reflect the given input limits and conditions."}
{"name": "p02691 AtCoder Beginner Contest 166 - This Message Will Self-Destruct in 5s", "description": "You are the top spy of AtCoder Kingdom. To prevent the stolen secret from being handed to AlDebaran Kingdom, you have sneaked into the party where the transaction happens.\n\nThere are N attendees in the party, and they are given attendee numbers from 1 through N. The height of Attendee i is A_i.\n\nAccording to an examination beforehand, you know that a pair of attendees satisfying the condition below will make the transaction.\n\n* The absolute difference of their attendee numbers is equal to the sum of their heights.\n\n\n\nThere are \\frac{N(N-1)}{2} ways to choose two from the N attendees and make a pair. Among them, how many satisfy the condition above?\n\nP.S.: We cannot let you know the secret.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^9\\ (1 \\leq i \\leq N)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\dots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2*10^5", "1<=A_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of 'A_i' elements, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates the sequence of 'A_i' values separated by spaces. The rules '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' ensure the correct generation of the sequence based on the counter [N]. This setup accurately reflects the input format where 'N' is followed by 'N' integers separated by spaces."}
{"name": "p02702 AtCoder Beginner Contest 164 - Multiple of 2019", "description": "Given is a string S consisting of digits from `1` through `9`.\n\nFind the number of pairs of integers (i,j) (1 ≤ i ≤ j ≤ |S|) that satisfy the following condition:\n\nCondition: In base ten, the i-th through j-th characters of S form an integer that is a multiple of 2019.\n\nConstraints\n\n* 1 ≤ |S| ≤ 200000\n* S is a string consisting of digits from `1` through `9`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[1-9]{1,200000}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a string S composed of digits from '1' to '9' with a length between 1 and 200,000 characters. Since the length of S is variable and acts as a counter, it is represented using a regular expression [1-9]{1,200000} to specify the range of valid characters and their permissible length. Thus, the grammar is succinctly defined as '<S>->[1-9]{1,200000}', capturing the entire input string in one production rule."}
{"name": "p02703 AtCoder Beginner Contest 164 - Two Currencies", "description": "There are N cities numbered 1 to N, connected by M railroads.\n\nYou are now at City 1, with 10^{100} gold coins and S silver coins in your pocket.\n\nThe i-th railroad connects City U_i and City V_i bidirectionally, and a one-way trip costs A_i silver coins and takes B_i minutes. You cannot use gold coins to pay the fare.\n\nThere is an exchange counter in each city. At the exchange counter in City i, you can get C_i silver coins for 1 gold coin. The transaction takes D_i minutes for each gold coin you give. You can exchange any number of gold coins at each exchange counter.\n\nFor each t=2, ..., N, find the minimum time needed to travel from City 1 to City t. You can ignore the time spent waiting for trains.\n\nConstraints\n\n* 2 \\leq N \\leq 50\n* N-1 \\leq M \\leq 100\n* 0 \\leq S \\leq 10^9\n* 1 \\leq A_i \\leq 50\n* 1 \\leq B_i,C_i,D_i \\leq 10^9\n* 1 \\leq U_i < V_i \\leq N\n* There is no pair i, j(i \\neq j) such that (U_i,V_i)=(U_j,V_j).\n* Each city t=2,...,N can be reached from City 1 with some number of railroads.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M S\nU_1 V_1 A_1 B_1\n:\nU_M V_M A_M B_M\nC_1 D_1\n:\nC_N D_N", "grammar": {"productions": ["<S>->[N] <s> [M] <s> S <n> <T_M> <n> <L_N>", "<T_i>-><T_i-1> <n> U_i <s> V_i <s> A_i <s> B_i", "<T_1>->U_1 <s> V_1 <s> A_1 <s> B_1", "<L_i>-><L_i-1> <n> C_i <s> D_i", "<L_1>->C_1 <s> D_1"], "constraints": ["2<=N<=50", "N-1<=M<=100", "0<=S<=10^9", "1<=A_i<=50", "1<=B_i,C_i,D_i<=10^9", "1<=U_i<V_i<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: N, M, and S, where N and M serve as counter variables, hence they are enclosed in [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <s> S <n> <T_M> <n> <L_N>'. The non-terminal <T_i> is a counter-driven rule for [M], representing each railroad's details (U_i, V_i, A_i, B_i) separated by spaces. The non-terminal <L_i> is a counter-driven rule for [N], representing each city's exchange details (C_i, D_i) separated by spaces. The grammar constructs are laid out to systematically parse the sequence of railroad and exchange details following the counts [M] and [N]."}
{"name": "p02705 AtCoder Beginner Contest 163 - Circle Pond", "description": "Constraints\n\n* 1 <= R <= 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR", "grammar": {"productions": ["<S>->R"], "constraints": ["1<=R<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'R' is not used as a counter variable, so it is represented simply as 'R' without brackets. The grammar is straightforward as it only requires the input of a single integer 'R', hence the grammar is constructed as '<S>->R'."}
{"name": "p02707 AtCoder Beginner Contest 163 - management", "description": "A company has N members, who are assigned ID numbers 1, ..., N.\n\nEvery member, except the member numbered 1, has exactly one immediate boss with a smaller ID number.\n\nWhen a person X is the immediate boss of a person Y, the person Y is said to be an immediate subordinate of the person X.\n\nYou are given the information that the immediate boss of the member numbered i is the member numbered A_i. For each member, find how many immediate subordinates it has.\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i < i\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N-1>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2*10^5", "1<=A_i<N"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of 'A_i' elements, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <n> <T_N-1>', where <T_i> is a counter non-terminal for the sequence of 'A_i' elements separated by a space <s>. The sequence starts from 'A_2' to 'A_N', hence the counter non-terminal <T_N-1> is used. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' to systematically parse the sequence of 'A_i' elements following the count [N]."}
{"name": "p02709 AtCoder Beginner Contest 163 - Active Infants", "description": "There are N children standing in a line from left to right. The activeness of the i-th child from the left is A_i.\n\nYou can rearrange these children just one time in any order you like.\n\nWhen a child who originally occupies the x-th position from the left in the line moves to the y-th position from the left, that child earns A_x \\times |x-y| happiness points.\n\nFind the maximum total happiness points the children can earn.\n\nConstraints\n\n* 2 \\leq N \\leq 2000\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2000", "1<=A_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the array elements, hence it is denoted as [N] in the grammar. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_i> is a counter-driven rule for [N], representing each array element 'A_i' separated by a space symbol <s>. The grammar rules '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' systematically parse the sequence of array elements following the count [N]."}
{"name": "p02713 AtCoder Beginner Contest 162 - Sum of gcd of Tuples (Easy)", "description": "Find \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\n\nHere \\gcd(a,b,c) denotes the greatest common divisor of a, b, and c.\n\nConstraints\n\n* 1 \\leq K \\leq 200\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["1<=K<=200"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'K' is given as input, but it does not serve as a counter variable in this context; it is simply an integer input. Therefore, it is represented as 'K' without brackets. The grammar is straightforward, consisting of the start symbol producing 'K' directly, as the input format is just a single integer. Thus, the grammar is constructed as '<S>->K'."}
{"name": "p02721 AtCoder Beginner Contest 161 - Yutori", "description": "Takahashi has decided to work on K days of his choice from the N days starting with tomorrow.\n\nYou are given an integer C and a string S. Takahashi will choose his workdays as follows:\n\n* After working for a day, he will refrain from working on the subsequent C days.\n* If the i-th character of S is `x`, he will not work on Day i, where Day 1 is tomorrow, Day 2 is the day after tomorrow, and so on.\n\n\n\nFind all days on which Takahashi is bound to work.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq K \\leq N\n* 0 \\leq C \\leq N\n* The length of S is N.\n* Each character of S is `o` or `x`.\n* Takahashi can choose his workdays so that the conditions in Problem Statement are satisfied.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K C\nS", "grammar": {"productions": ["<S>->[N] <s> K <s> C <n> [ox]{N}"], "constraints": ["1<=N<=2*10^5", "1<=K<=N", "0<=C<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: N, K, and C, where N serves as a counter variable for the length of the string S, hence it is enclosed in [N]. The string S is composed of characters 'o' or 'x' and has a length of N, so it is represented using the regular expression [ox]{N}. The grammar is structured as '<S>->[N] <s> K <s> C <n> [ox]{N}' to reflect the input format where N, K, and C are given in the first line, followed by the string S in the next line."}
{"name": "p02722 AtCoder Beginner Contest 161 - Division or Subtraction", "description": "Given is a positive integer N.\n\nWe will choose an integer K between 2 and N (inclusive), then we will repeat the operation below until N becomes less than K.\n\n* Operation: if K divides N, replace N with N/K; otherwise, replace N with N-K.\n\n\n\nIn how many choices of K will N become 1 in the end?\n\nConstraints\n\n* 2 \\leq N \\leq 10^{12}\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["2<=N<=10^12"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is not used as a counter variable in this context, so it is represented simply as 'N' without brackets. The input format is straightforward, consisting of a single integer 'N'. Therefore, the grammar is constructed as '<S>->N' to reflect this simple input structure."}
{"name": "p02726 AtCoder Beginner Contest 160 - Line++", "description": "We have an undirected graph G with N vertices numbered 1 to N and N edges as follows:\n\n* For each i=1,2,...,N-1, there is an edge between Vertex i and Vertex i+1.\n* There is an edge between Vertex X and Vertex Y.\n\n\n\nFor each k=1,2,...,N-1, solve the problem below:\n\n* Find the number of pairs of integers (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j in G is k.\n\nConstraints\n\n* 3 \\leq N \\leq 2 \\times 10^3\n* 1 \\leq X,Y \\leq N\n* X+1 < Y\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X Y", "grammar": {"productions": ["<S>->N <s> X <s> Y"], "constraints": ["3<=N<=2*10^3", "1<=X,Y<=N", "X+1<Y"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: N, X, and Y. Since none of these variables serve as counters for generating sequences or repetitions, they are not enclosed in brackets. The grammar is structured as '<S>->N <s> X <s> Y', representing the input format where N, X, and Y are integers separated by spaces. This straightforward structure reflects the input specification without the need for counter non-terminals or regex expressions."}
{"name": "p02727 AtCoder Beginner Contest 160 - Red and Green Apples", "description": "You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.\n\nConstraints\n\n* 1 \\leq X \\leq A \\leq 10^5\n* 1 \\leq Y \\leq B \\leq 10^5\n* 1 \\leq C \\leq 10^5\n* 1 \\leq p_i \\leq 10^9\n* 1 \\leq q_i \\leq 10^9\n* 1 \\leq r_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y A B C\np_1 p_2 ... p_A\nq_1 q_2 ... q_B\nr_1 r_2 ... r_C", "grammar": {"productions": ["<S>->X <s> Y <s> [A] <s> [B] <s> [C] <n> <T_A> <n> <L_B> <n> <Z_C>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1", "<L_i>-><L_i-1> <s> q_i", "<L_1>->q_1", "<Z_i>-><Z_i-1> <s> r_i", "<Z_1>->r_1"], "constraints": ["1<=X<=A<=10^5", "1<=Y<=B<=10^5", "1<=C<=10^5", "1<=p_i<=10^9", "1<=q_i<=10^9", "1<=r_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes variables X, Y, A, B, and C, where A, B, and C serve as counter variables for the sequences of p_i, q_i, and r_i respectively. Hence, they are enclosed in brackets as [A], [B], and [C]. The grammar is initiated with '<S>->X <s> Y <s> [A] <s> [B] <s> [C] <n> <T_A> <n> <L_B> <n> <Z_C>'. The non-terminals <T_i>, <L_i>, and <Z_i> are counter-driven rules for [A], [B], and [C] respectively, each representing sequences of p_i, q_i, and r_i separated by space symbols <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> p_i', '<T_1>->p_1', '<L_i>-><L_i-1> <s> q_i', '<L_1>->q_1', '<Z_i>-><Z_i-1> <s> r_i', and '<Z_1>->r_1' to systematically parse the sequences of p_i, q_i, and r_i following the counts [A], [B], and [C]."}
{"name": "p02731 AtCoder Beginner Contest 159 - Maximum Volume", "description": "Given is a positive integer L. Find the maximum possible volume of a rectangular cuboid whose sum of the dimensions (not necessarily integers) is L.\n\nConstraints\n\n* 1 ≤ L ≤ 1000\n* L is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nL", "grammar": {"productions": ["<S>->L"], "constraints": ["1<=L<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes a single variable 'L', which is not a counter variable, hence it is represented simply as 'L'. The grammar is constructed as '<S>->L' to reflect the input format where 'L' is a positive integer given in a single line."}
{"name": "p02734 AtCoder Beginner Contest 159 - Knapsack for All Segments", "description": "Given are a sequence of N integers A_1, A_2, \\ldots, A_N and a positive integer S.\nFor a pair of integers (L, R) such that 1\\leq L \\leq R \\leq N, let us define f(L, R) as follows:\n\n\n* f(L, R) is the number of sequences of integers (x_1, x_2, \\ldots , x_k) such that L \\leq x_1 < x_2 < \\cdots < x_k \\leq R and A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S.\n\n\n\nFind the sum of f(L, R) over all pairs of integers (L, R) such that 1\\leq L \\leq R\\leq N. Since this sum can be enormous, print it modulo 998244353.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 3000\n* 1 \\leq S \\leq 3000\n* 1 \\leq A_i \\leq 3000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN S\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> S <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=3000", "1<=S<=3000", "1<=a_i<=3000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'N' and 'S', where 'N' serves as a counter variable for the sequence of integers, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <s> S <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> S <n> <T_N>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p02741 Panasonic Programming Contest 2020 - Kth Term", "description": "Print the K-th element of the following sequence of length 32:\n\n\n1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51\n\nConstraints\n\n* 1 \\leq K \\leq 32\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["1<=K<=32"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'K' is not a counter variable, so it is represented simply as 'K' without brackets. The input format is straightforward, consisting only of 'K'. Therefore, the grammar is constructed as '<S>->K' to reflect this simple input structure."}
{"name": "p02742 Panasonic Programming Contest 2020 - Bishop", "description": "We have a board with H horizontal rows and W vertical columns of squares. There is a bishop at the top-left square on this board. How many squares can this bishop reach by zero or more movements?\n\nHere the bishop can only move diagonally. More formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\n* r_1 + c_1 = r_2 + c_2\n* r_1 - c_1 = r_2 - c_2\n\n\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:\n\n<image>\n\nConstraints\n\n* 1 \\leq H, W \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH \\ W", "grammar": {"productions": ["<S>->H <s> W"], "constraints": ["1<=H<=10^9", "1<=W<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, H and W, which are not used as counters but simply represent the dimensions of the board. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->H <s> W', representing the input format where H and W are two integers separated by a space. Since neither H nor W serves as a counter variable, no counter non-terminals are needed in this grammar."}
{"name": "p02743 Panasonic Programming Contest 2020 - Sqrt Inequality", "description": "Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?\n\nConstraints\n\n* 1 \\leq a, b, c \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na \\ b \\ c", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=10^9", "1<=b<=10^9", "1<=c<=10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'a', 'b', and 'c', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> c', representing the input format where 'a', 'b', and 'c' are three integers separated by spaces. None of these variables serve as counter variables, hence they are not enclosed in brackets."}
{"name": "p02744 Panasonic Programming Contest 2020 - String Equivalence", "description": "Constraints\n\n* 1 <= N <= 10\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, N, which is used as a counter variable, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N]', representing the input format where N is an integer. Since N is the only variable and serves as a counter, the grammar is straightforward with no additional non-terminals needed."}
{"name": "p02745 Panasonic Programming Contest 2020 - Three Substrings", "description": "Snuke has a string s. From this string, Anuke, Bnuke, and Cnuke obtained strings a, b, and c, respectively, as follows:\n\n* Choose a non-empty (contiguous) substring of s (possibly s itself). Then, replace some characters (possibly all or none) in it with `?`s.\n\n\n\nFor example, if s is `mississippi`, we can choose the substring `ssissip` and replace its 1-st and 3-rd characters with `?` to obtain `?s?ssip`.\n\nYou are given the strings a, b, and c. Find the minimum possible length of s.\n\nConstraints\n\n* 1 \\leq |a|, |b|, |c| \\leq 2000\n* a, b, and c consists of lowercase English letters and `?`s.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na\nb\nc", "grammar": {"productions": ["<S>->[a-z?]{1,2000} <n> [a-z?]{1,2000} <n> [a-z?]{1,2000}"], "constraints": [""]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of three lines, each containing a string composed of lowercase English letters and '?' characters. The lengths of these strings are constrained to be between 1 and 2000 characters. Since the strings do not involve any counter variables, they are directly represented using regular expressions [a-z?]{1,2000} for each line, separated by newline tokens <n>. Thus, the grammar is constructed as '<S>->[a-z?]{1,2000} <n> [a-z?]{1,2000} <n> [a-z?]{1,2000}' to reflect the input format."}
{"name": "p02754 AtCoder Beginner Contest 158 - Count Balls", "description": "Takahashi has many red balls and blue balls. Now, he will place them in a row.\n\nInitially, there is no ball placed.\n\nTakahashi, who is very patient, will do the following operation 10^{100} times:\n\n* Place A blue balls at the end of the row of balls already placed. Then, place B red balls at the end of the row.\n\n\n\nHow many blue balls will be there among the first N balls in the row of balls made this way?\n\nConstraints\n\n* 1 \\leq N \\leq 10^{18}\n* A, B \\geq 0\n* 0 < A + B \\leq 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B", "grammar": {"productions": ["<S>->N <s> A <s> B"], "constraints": ["1<=N<=10^18", "0<=A", "0<=B", "0<A+B<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of three variables: N, A, and B. Since none of these variables serve as counters for generating sequences or repetitions, they are not enclosed in brackets. The variables are separated by space tokens <s>. The grammar is structured as '<S>->N <s> A <s> B', representing the input format where N, A, and B are given in a single line separated by spaces."}
{"name": "p02755 AtCoder Beginner Contest 158 - Tax Increase", "description": "Find the price of a product before tax such that, when the consumption tax rate is 8 percent and 10 percent, the amount of consumption tax levied on it is A yen and B yen, respectively. (Yen is the currency of Japan.)\n\nHere, the price before tax must be a positive integer, and the amount of consumption tax is rounded down to the nearest integer.\n\nIf multiple prices satisfy the condition, print the lowest such price; if no price satisfies the condition, print `-1`.\n\nConstraints\n\n* 1 \\leq A \\leq B \\leq 100\n* A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=100", "A<=B<=100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'A' and 'B', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space. The variables 'A' and 'B' are not used as counters, hence they are not enclosed in brackets."}
{"name": "p02761 AtCoder Beginner Contest 157 - Guess The Number", "description": "If there is an integer not less than 0 satisfying the following conditions, print the smallest such integer; otherwise, print `-1`.\n\n* The integer has exactly N digits in base ten. (We assume 0 to be a 1-digit integer. For other integers, leading zeros are not allowed.)\n* The s_i-th digit from the left is c_i. \\left(i = 1, 2, \\cdots, M\\right)\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 3\n* 0 \\leq M \\leq 5\n* 1 \\leq s_i \\leq N\n* 0 \\leq c_i \\leq 9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\ns_1 c_1\n\\vdots\ns_M c_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> S_i <s> C_i", "<T_1>->S_1 <s> C_1", "<T_0>->ε"], "constraints": ["1<=N<=3", "0<=M<=5", "1<=S_i<=N", "0<=C_i<=9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, where M serves as a counter variable for the number of conditions, hence it is enclosed in [M]. The grammar is initiated with '<S>->N <s> [M] <n> <T_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each condition is represented by S_i and C_i separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> S_i <s> C_i', '<T_1>->S_1 <s> C_1', and '<T_0>->ε' to systematically parse the sequence of conditions following the count [M]. The constraints are derived from the input specifications, ensuring all variables adhere to their defined ranges."}
{"name": "p02780 AtCoder Beginner Contest 154 - Dice in Line", "description": "We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\n\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.\n\nConstraints\n\n* 1 ≤ K ≤ N ≤ 200000\n* 1 ≤ p_i ≤ 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 ... p_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1"], "constraints": ["1<=N<=200000", "1<=K<=N", "1<=P_i<=1000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable for the sequence of p_i values, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each p_i is separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> K <n> <T_N>', '<T_i>-><T_i-1> <s> P_i', and '<T_1>->P_1' to systematically parse the sequence of p_i values following the count [N]."}
{"name": "p02781 AtCoder Beginner Contest 154 - Almost Everywhere Zero", "description": "Constraints\n\n* 1 <= N < 10^{100}\n* 1 <= K <= 3\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nK", "grammar": {"productions": ["<S>->[N] <n> K"], "constraints": ["1<=N<10^100", "1<=K<=3"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable and is thus enclosed in [N]. The grammar is initiated with '<S>->[N] <n> K', representing the input format where [N] is a very large number (up to 10^100 digits) followed by K on the next line. Since K is not a counter variable, it is not enclosed in brackets. The grammar structure reflects the input specifications directly."}
{"name": "p02782 AtCoder Beginner Contest 154 - Many Many Paths", "description": "Snuke is standing on a two-dimensional plane. In one operation, he can move by 1 in the positive x-direction, or move by 1 in the positive y-direction.\n\nLet us define a function f(r, c) as follows:\n\n* f(r,c) :=  (The number of paths from the point (0, 0) to the point (r, c) that Snuke can trace by repeating the operation above)\n\n\n\nGiven are integers r_1, r_2, c_1, and c_2. Find the sum of f(i, j) over all pair of integers (i, j) such that r_1 ≤ i ≤ r_2 and c_1 ≤ j ≤ c_2, and compute this value modulo (10^9+7).\n\nConstraints\n\n* 1 ≤ r_1 ≤ r_2 ≤ 10^6\n* 1 ≤ c_1 ≤ c_2 ≤ 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nr_1 c_1 r_2 c_2", "grammar": {"productions": ["<S>->r1 <s> c1 <s> r2 <s> c2"], "constraints": ["1<=r1<=r2<=10^6", "1<=c1<=c2<=10^6"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of four variables: r1, c1, r2, and c2, which are all integers. None of these variables serve as counters for generating sequences or repetitions, so they are not enclosed in brackets. The variables are separated by space symbols <s> to match the input format. Thus, the grammar is constructed as '<S>->r1 <s> c1 <s> r2 <s> c2' to represent the input line where the four integers are given in sequence separated by spaces."}
{"name": "p02784 AtCoder Beginner Contest 153 - Common Raccoon vs Monster", "description": "Raccoon is fighting with a monster.\n\nThe health of the monster is H.\n\nRaccoon can use N kinds of special moves. Using the i-th move decreases the monster's health by A_i. There is no other way to decrease the monster's health.\n\nRaccoon wins when the monster's health becomes 0 or below.\n\nIf Raccoon can win without using the same move twice or more, print `Yes`; otherwise, print `No`.\n\nConstraints\n\n* 1 \\leq H \\leq 10^9\n* 1 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^4\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH N\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->H <s> [N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=H<=10^9", "1<=N<=10^5", "1<=A_i<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, H and N, where N serves as a counter variable for the sequence of A_i elements, hence it is denoted as [N]. The grammar is structured as '<S>->H <s> [N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The sequence of A_i elements is generated by the rules '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_i', ensuring each element is separated by a space. This setup accurately reflects the input format where H and N are given first, followed by N integers A_i."}
{"name": "p02786 AtCoder Beginner Contest 153 - Caracal vs Monster", "description": "Caracal is fighting with a monster.\n\nThe health of the monster is H.\n\nCaracal can attack by choosing one monster. When a monster is attacked, depending on that monster's health, the following happens:\n\n* If the monster's health is 1, it drops to 0.\n* If the monster's health, X, is greater than 1, that monster disappears. Then, two new monsters appear, each with the health of \\lfloor X/2 \\rfloor.\n\n\n\n(\\lfloor r \\rfloor denotes the greatest integer not exceeding r.)\n\nCaracal wins when the healths of all existing monsters become 0 or below.\n\nFind the minimum number of attacks Caracal needs to make before winning.\n\nConstraints\n\n* 1 \\leq H \\leq 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH", "grammar": {"productions": ["<S>->H"], "constraints": ["1<=H<=10^12"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, H, which is not a counter variable but a single input value. Therefore, it is represented simply as 'H' without brackets. The grammar is constructed as '<S>->H' to reflect the input format where H is given as a single integer."}
{"name": "p02787 AtCoder Beginner Contest 153 - Crested Ibis vs Monster", "description": "Ibis is fighting with a monster.\n\nThe health of the monster is H.\n\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\n\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\n\nIbis wins when the health of the monster becomes 0 or below.\n\nFind the minimum total Magic Points that have to be consumed before winning.\n\nConstraints\n\n* 1 \\leq H \\leq 10^4\n* 1 \\leq N \\leq 10^3\n* 1 \\leq A_i \\leq 10^4\n* 1 \\leq B_i \\leq 10^4\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH N\nA_1 B_1\n:\nA_N B_N", "grammar": {"productions": ["<S>->H <s> [N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=H<=10^4", "1<=N<=10^3", "1<=A_i<=10^4", "1<=B_i<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, H and N, where N serves as a counter variable for the number of spells, hence it is enclosed in [N]. The grammar is initiated with '<S>->H <s> [N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each spell's details (A_i and B_i) are separated by a space symbol <s> and each spell's details are on a new line <n>. The grammar constructs are laid out as '<S>->H <s> [N] <n> <T_N>', '<T_i>-><T_i-1> <n> A_i <s> B_i', and '<T_1>->A_1 <s> B_1' to systematically parse the sequence of spells following the count [N]."}
{"name": "p02789 AtCoder Beginner Contest 152 - AC or WA", "description": "Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 0 \\leq M \\leq N\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M", "grammar": {"productions": ["<S>->N <s> M"], "constraints": ["1<=N<=100", "0<=M<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, which are not used as counters in this context, so they are represented without brackets. The input format consists of these two integers separated by a space, denoted by <s>. Thus, the grammar is constructed as '<S>->N <s> M' to reflect the input structure where N and M are given in a single line separated by a space."}
{"name": "p02790 AtCoder Beginner Contest 152 - Comparing Strings", "description": "Given are 1-digit positive integers a and b. Consider these two strings: the concatenation of b copies of the digit a, and the concatenation of a copies of the digit b. Which of these is lexicographically smaller?\n\nConstraints\n\n* 1 \\leq a \\leq 9\n* 1 \\leq b \\leq 9\n* a and b are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na b", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=9", "1<=b<=9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. Since 'a' and 'b' are not used as counter variables, they are not enclosed in brackets. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space."}
{"name": "p02792 AtCoder Beginner Contest 152 - Handstand 2", "description": "Given is a positive integer N.\nFind the number of pairs (A, B) of positive integers not greater than N that satisfy the following condition:\n\n* When A and B are written in base ten without leading zeros, the last digit of A is equal to the first digit of B, and the first digit of A is equal to the last digit of B.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable N is not used as a counter variable in this context, hence it is represented simply as 'N' without brackets. The grammar is straightforward as it only requires the input of a single integer N, leading to the structure '<S>->N'."}
{"name": "p02796 Keyence Programming Contest 2020 - Robot Arms", "description": "In a factory, there are N robots placed on a number line. Robot i is placed at coordinate X_i and can extend its arms of length L_i in both directions, positive and negative.\n\nWe want to remove zero or more robots so that the movable ranges of arms of no two remaining robots intersect. Here, for each i (1 \\leq i \\leq N), the movable range of arms of Robot i is the part of the number line between the coordinates X_i - L_i and X_i + L_i, excluding the endpoints.\n\nFind the maximum number of robots that we can keep.\n\nConstraints\n\n* 1 \\leq N \\leq 100,000\n* 0 \\leq X_i \\leq 10^9 (1 \\leq i \\leq N)\n* 1 \\leq L_i \\leq 10^9 (1 \\leq i \\leq N)\n* If i \\neq j, X_i \\neq X_j.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX_1 L_1\nX_2 L_2\n\\vdots\nX_N L_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> L_i", "<T_1>->X_1 <s> L_1"], "constraints": ["1<=N<=100000", "0<=X_i<=10^9", "1<=L_i<=10^9", "X_i!=X_j"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the number of robots, hence it is enclosed in [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates each robot's position and arm length. Each robot's data is represented by 'X_i' and 'L_i' separated by a space <s>, and each robot's entry is separated by a newline <n>. The counter non-terminal <T_i> decrements until it reaches <T_1>, which outputs the first robot's data. This structure ensures the input format matches the specified sequence of robot positions and arm lengths."}
{"name": "p02798 Keyence Programming Contest 2020 - Swap and Flip", "description": "We have N cards numbered 1, 2, ..., N. Card i (1 \\leq i \\leq N) has an integer A_i written in red ink on one side and an integer B_i written in blue ink on the other side. Initially, these cards are arranged from left to right in the order from Card 1 to Card N, with the red numbers facing up.\n\nDetermine whether it is possible to have a non-decreasing sequence facing up from left to right (that is, for each i (1 \\leq i \\leq N - 1), the integer facing up on the (i+1)-th card from the left is not less than the integer facing up on the i-th card from the left) by repeating the operation below. If the answer is yes, find the minimum number of operations required to achieve it.\n\n* Choose an integer i (1 \\leq i \\leq N - 1). Swap the i-th and (i+1)-th cards from the left, then flip these two cards.\n\nConstraints\n\n* 1 \\leq N \\leq 18\n* 1 \\leq A_i, B_i \\leq 50 (1 \\leq i \\leq N)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\nB_1 B_2 ... B_N", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1"], "constraints": ["1<=n<=18", "1<=A_i<=50", "1<=B_i<=50", "1<=i<=N"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequences of A_i and B_i, hence it is denoted as [N]. The grammar is structured as '<S>->[N] <n> <T_N> <n> <L_N>', where <T_N> and <L_N> are counter non-terminals for the sequences A_i and B_i respectively. The sequences are constructed with each element separated by a space symbol <s>, leading to the rules '<T_i>-><T_i-1> <s> A_i', '<T_1>->A_1', '<L_i>-><L_i-1> <s> B_i', and '<L_1>->B_1'. This setup ensures the input format is correctly parsed with sequences of A_i and B_i following the count [N]."}
{"name": "p02799 Keyence Programming Contest 2020 - Bichromization", "description": "Constraints\n\n* 2 <= N <= 100,000\n* 1 <= M <= 200,000\n* 1 <= D_i <= 10^9\n* 1 <= U_i, V_i <= N\n* The given graph is connected and has no self-loops or multiple edges.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nD_1 D_2 ... D_N\nU_1 V_1\nU_2 V_2\n\\vdots\nU_M V_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> D_i", "<T_1>->D_1", "<L_i>-><L_i-1> <n> U_i <s> V_i", "<L_1>->U_1 <s> V_1"], "constraints": ["2<=N<=100000", "1<=M<=200000", "1<=D_i<=10^9", "1<=U_i,V_i<=N"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. The variables 'N' and 'M' are used as counter variables, hence they are enclosed in brackets as [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_N> <n> <L_M>'. Here, <T_N> is a counter non-terminal for [N], representing the sequence of 'D_i' values separated by spaces. The non-terminal <L_M> is a counter non-terminal for [M], representing the sequence of 'U_i V_i' pairs separated by newlines. The grammar rules '<T_i>-><T_i-1> <s> D_i' and '<T_1>->D_1' handle the sequence of 'D_i' values, while '<L_i>-><L_i-1> <n> U_i <s> V_i' and '<L_1>->U_1 <s> V_i' manage the sequence of 'U_i V_i' pairs. This structure ensures the input format is correctly parsed according to the given specification."}
{"name": "p02802 AtCoder Beginner Contest 151 - Welcome to AtCoder", "description": "Takahashi participated in a contest on AtCoder.\n\nThe contest had N problems.\n\nTakahashi made M submissions during the contest.\n\nThe i-th submission was made for the p_i-th problem and received the verdict S_i (`AC` or `WA`).\n\nThe number of Takahashi's correct answers is the number of problems on which he received an `AC` once or more.\n\nThe number of Takahashi's penalties is the sum of the following count for the problems on which he received an `AC` once or more: the number of `WA`s received before receiving an `AC` for the first time on that problem.\n\nFind the numbers of Takahashi's correct answers and penalties.\n\nConstraints\n\n* N, M, and p_i are integers.\n* 1 \\leq N \\leq 10^5\n* 0 \\leq M \\leq 10^5\n* 1 \\leq p_i \\leq N\n* S_i is `AC` or `WA`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\np_1 S_1\n:\np_M S_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> P_i <s> AC|WA", "<T_1>->P_1 <s> AC|WA"], "constraints": ["1<=N<=10^5", "0<=M<=10^5", "1<=P_i<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, where M serves as a counter variable for the number of submissions, hence it is denoted as [M]. The grammar is initiated with '<S>->N <s> [M] <n> <T_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each submission consists of P_i followed by a space <s> and the verdict (AC or WA). The grammar constructs are laid out as '<T_i>-><T_i-1> <n> P_i <s> AC|WA' and '<T_1>->P_1 <s> AC|WA' to systematically parse each submission following the count [M]."}
{"name": "p02812 AtCoder Beginner Contest 150 - Count ABC", "description": "We have a string S of length N consisting of uppercase English letters.\n\nHow many times does `ABC` occur in S as contiguous subsequences (see Sample Inputs and Outputs)?\n\nConstraints\n\n* 3 \\leq N \\leq 50\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->[N] <n> [A-Z]{N}"], "constraints": ["3<=N<=50"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the length of the string 'S', hence it is enclosed in brackets as [N]. The string 'S' consists of uppercase English letters with a length of [N], which is represented using the regular expression [A-Z]{N}. The grammar is structured as '<S>->[N] <n> [A-Z]{N}' to reflect the input format where the first line is the integer [N] followed by a newline, and the second line is the string 'S' of length [N]."}
{"name": "p02817 AtCoder Beginner Contest 149 - Strings", "description": "Given are two strings S and T consisting of lowercase English letters. Concatenate T and S in this order, without space in between, and print the resulting string.\n\nConstraints\n\n* S and T are strings consisting of lowercase English letters.\n* The lengths of S and T are between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS T", "grammar": {"productions": ["<S>->[a-z]{1,100} <s> [a-z]{1,100}"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of two strings, S and T, each composed of lowercase English letters with lengths between 1 and 100. Since the strings are not used as counters, they are represented directly using regex expressions [a-z]{1,100} to denote their content and length constraints. The grammar is structured as '<S>->[a-z]{1,100} <s> [a-z]{1,100}', reflecting the input format where S and T are separated by a space."}
{"name": "p02818 AtCoder Beginner Contest 149 - Greedy Takahashi", "description": "Takahashi has A cookies, and Aoki has B cookies. Takahashi will do the following action K times:\n\n* If Takahashi has one or more cookies, eat one of his cookies.\n* Otherwise, if Aoki has one or more cookies, eat one of Aoki's cookies.\n* If they both have no cookies, do nothing.\n\n\n\nIn the end, how many cookies will Takahashi and Aoki have, respectively?\n\nConstraints\n\n* 0 \\leq A \\leq 10^{12}\n* 0 \\leq B \\leq 10^{12}\n* 0 \\leq K \\leq 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B K", "grammar": {"productions": ["<S>->A <s> B <s> K"], "constraints": ["0<=A<=10^12", "0<=B<=10^12", "0<=K<=10^12"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables A, B, and K, none of which serve as counter variables in this context. Therefore, they are represented without brackets. The input format is straightforward, with the three variables separated by spaces. Hence, the grammar is constructed as '<S>->A <s> B <s> K' to reflect the input structure where A, B, and K are given in a single line separated by spaces."}
{"name": "p02820 AtCoder Beginner Contest 149 - Prediction and Restriction", "description": "At an arcade, Takahashi is playing a game called RPS Battle, which is played as follows:\n\n* The player plays N rounds of Rock Paper Scissors against the machine. (See Notes for the description of Rock Paper Scissors. A draw also counts as a round.)\n* Each time the player wins a round, depending on which hand he/she uses, he/she earns the following score (no points for a draw or a loss):\n* R points for winning with Rock;\n* S points for winning with Scissors;\n* P points for winning with Paper.\n* However, in the i-th round, the player cannot use the hand he/she used in the (i-K)-th round. (In the first K rounds, the player can use any hand.)\n\n\n\nBefore the start of the game, the machine decides the hand it will play in each round. With supernatural power, Takahashi managed to read all of those hands.\n\nThe information Takahashi obtained is given as a string T. If the i-th character of T (1 \\leq i \\leq N) is `r`, the machine will play Rock in the i-th round. Similarly, `p` and `s` stand for Paper and Scissors, respectively.\n\nWhat is the maximum total score earned in the game by adequately choosing the hand to play in each round?\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq K \\leq N-1\n* 1 \\leq R,S,P \\leq 10^4\n* N,K,R,S, and P are all integers.\n* |T| = N\n* T consists of `r`, `p`, and `s`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nR S P\nT", "grammar": {"productions": ["<S>->[N] <s> K <n> R <s> S <s> P <n> [rps]{N}"], "constraints": ["2<=N<=10^5", "1<=K<=N-1", "1<=R,S,P<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables N and K are included, with N serving as a counter variable for the sequence length, hence it is enclosed in [N]. The grammar is structured as '<S>->[N] <s> K <n> R <s> S <s> P <n> [rps]{N}', where [rps]{N} represents a string of N characters, each being 'r', 'p', or 's'. This format captures the input structure where N and K are provided first, followed by R, S, P, and the string T of length N."}
{"name": "p02835 AtCoder Beginner Contest 147 - Blackjack", "description": "Given are three integers A_1, A_2, and A_3.\n\nIf A_1+A_2+A_3 is greater than or equal to 22, print `bust`; otherwise, print `win`.\n\nConstraints\n\n* 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA_1 A_2 A_3", "grammar": {"productions": ["<S>->A1 <s> A2 <s> A3"], "constraints": ["1<=A1,A2,A3<=13"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables, A1, A2, and A3, which are separated by space symbols denoted as <s>. Since none of these variables serve as counters, they are not enclosed in brackets. The grammar is structured as '<S>->A1 <s> A2 <s> A3', representing the input format where three integers are separated by spaces."}
{"name": "p02836 AtCoder Beginner Contest 147 - Palindrome-philia", "description": "Takahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.\n\nGiven is a string S. Find the minimum number of hugs needed to make S palindromic.\n\nConstraints\n\n* S is a string consisting of lowercase English letters.\n* The length of S is between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[a-z]{1,100}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a string S composed of lowercase English letters, with a length between 1 and 100 characters. Since the string's length is variable and the characters are restricted to lowercase letters, the grammar uses a regular expression [a-z]{1,100} to represent the string S. This regex ensures the string meets the specified constraints without needing a counter non-terminal, as the length is handled by the regex itself. Thus, the grammar is simply '<S>->[a-z]{1,100}'."}
{"name": "p02844 Sumitomo Mitsui Trust Bank Programming Contest 2019 - Lucky PIN", "description": "AtCoder Inc. has decided to lock the door of its office with a 3-digit PIN code.\n\nThe company has an N-digit lucky number, S. Takahashi, the president, will erase N-3 digits from S and concatenate the remaining 3 digits without changing the order to set the PIN code.\n\nHow many different PIN codes can he set this way?\n\nBoth the lucky number and the PIN code may begin with a 0.\n\nConstraints\n\n* 4 \\leq N \\leq 30000\n* S is a string of length N consisting of digits.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->N <n> [0-9]{N}"], "constraints": ["4<=N<=30000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable N is not a counter variable, so it is represented as 'N'. The string S is of length N and consists of digits, which is represented using the regular expression [0-9]{N}. The grammar is structured as '<S>->N <n> [0-9]{N}' to reflect the input format where N is followed by a newline and then a string of N digits."}
{"name": "p02845 Sumitomo Mitsui Trust Bank Programming Contest 2019 - Colorful Hats 2", "description": "N people are standing in a queue, numbered 1, 2, 3, ..., N from front to back. Each person wears a hat, which is red, blue, or green.\n\nThe person numbered i says:\n\n* \"In front of me, exactly A_i people are wearing hats with the same color as mine.\"\n\n\n\nAssuming that all these statements are correct, find the number of possible combinations of colors of the N people's hats.\n\nSince the count can be enormous, compute it modulo 1000000007.\n\nConstraints\n\n* 1 \\leq N \\leq 100000\n* 0 \\leq A_i \\leq N-1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 A_3 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=100000", "0<=A_i<=N-1"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of 'A_i' elements, hence it is enclosed in brackets as [N]. The grammar is structured to first output [N] followed by a newline <n>, then the sequence of 'A_i' elements controlled by the counter non-terminal <T_N>. The counter non-terminal <T_i> is defined to recursively produce each 'A_i' separated by a space <s>, decrementing until it reaches <T_1>, which outputs the first 'A_1'. This setup accurately reflects the input format where 'N' is followed by 'N' integers separated by spaces."}
{"name": "p02846 Sumitomo Mitsui Trust Bank Programming Contest 2019 - Interval Running", "description": "Takahashi and Aoki are training for long-distance races in an infinitely long straight course running from west to east.\n\nThey start simultaneously at the same point and moves as follows towards the east:\n\n* Takahashi runs A_1 meters per minute for the first T_1 minutes, then runs at A_2 meters per minute for the subsequent T_2 minutes, and alternates between these two modes forever.\n* Aoki runs B_1 meters per minute for the first T_1 minutes, then runs at B_2 meters per minute for the subsequent T_2 minutes, and alternates between these two modes forever.\n\n\n\nHow many times will Takahashi and Aoki meet each other, that is, come to the same point? We do not count the start of the run. If they meet infinitely many times, report that fact.\n\nConstraints\n\n* 1 \\leq T_i \\leq 100000\n* 1 \\leq A_i \\leq 10^{10}\n* 1 \\leq B_i \\leq 10^{10}\n* A_1 \\neq B_1\n* A_2 \\neq B_2\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nT_1 T_2\nA_1 A_2\nB_1 B_2", "grammar": {"productions": ["<S>->T1 <s> T2 <n> A1 <s> B1 <n> A2 <s> B2"], "constraints": ["1<=T1,T2<=100000", "1<=A1,A2<=10^10", "1<=B1,B2<=10^10", "A1!=B1", "A2!=B2"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of three lines, each containing two variables separated by a space. The first line includes T1 and T2, the second line includes A1 and B1, and the third line includes A2 and B2. None of these variables serve as counters, so they are not enclosed in brackets. The grammar is structured to reflect the input format: '<S>->T1 <s> T2 <n> A1 <s> B1 <n> A2 <s> B2', where <s> denotes a space and <n> denotes a newline."}
{"name": "p02848 AtCoder Beginner Contest 146 - ROT N", "description": "We have a string S consisting of uppercase English letters. Additionally, an integer N will be given.\n\nShift each character of S by N in alphabetical order (see below), and print the resulting string.\n\nWe assume that `A` follows `Z`. For example, shifting `A` by 2 results in `C` (`A` \\to `B` \\to `C`), and shifting `Y` by 3 results in `B` (`Y` \\to `Z` \\to `A` \\to `B`).\n\nConstraints\n\n* 0 \\leq N \\leq 26\n* 1 \\leq |S| \\leq 10^4\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->N <n> [A-Z]{1,10^4}"], "constraints": ["0<=N<=26"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is not a counter variable, so it is represented as 'N' without brackets. The string 'S' is represented using a regular expression [A-Z]{1,10^4} to denote a sequence of uppercase English letters with a length between 1 and 10^4. The grammar is structured as '<S>->N <n> [A-Z]{1,10^4}' to reflect the input format where 'N' is followed by a newline and then the string 'S'."}
{"name": "p02851 AtCoder Beginner Contest 146 - Rem of Sum is Num", "description": "Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N, and a positive integer K.\n\nFind the number of non-empty contiguous subsequences in A such that the remainder when dividing the sum of its elements by K is equal to the number of its elements. We consider two subsequences different if they are taken from different positions, even if they are equal sequences.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq K \\leq 10^9\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 A_2 \\cdots A_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=K<=10^9", "1<=A_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable for the sequence of integers, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each element in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> K <n> <T_N>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_1' to systematically parse the sequence of integers following the count [N]."}
{"name": "p02874 AtCoder Grand Contest 040 - Two Contests", "description": "10^9 contestants, numbered 1 to 10^9, will compete in a competition. There will be two contests in this competition.\n\nThe organizer prepared N problems, numbered 1 to N, to use in these contests. When Problem i is presented in a contest, it will be solved by all contestants from Contestant L_i to Contestant R_i (inclusive), and will not be solved by any other contestants.\n\nThe organizer will use these N problems in the two contests. Each problem must be used in exactly one of the contests, and each contest must have at least one problem.\n\nThe joyfulness of each contest is the number of contestants who will solve all the problems in the contest. Find the maximum possible total joyfulness of the two contests.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq L_i \\leq R_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nL_1 R_1\nL_2 R_2\n\\vdots\nL_N R_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> L_i <s> R_i", "<T_1>->L_i <s> R_i"], "constraints": ["2<=N<=10^5", "1<= L_i <= R_i <= 10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the number of problem entries, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates each problem entry. Each problem entry consists of 'L_i' and 'R_i' separated by a space, represented as '<T_i>-><T_i-1> <n> L_i <s> R_i' for multiple entries and '<T_1>->L_i <s> R_i' for the first entry. This ensures the correct parsing of all problem entries following the count [N]."}
{"name": "p02876 AtCoder Grand Contest 040 - Balance Beam", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= A_i,B_i <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\nA_2 B_2\n\\vdots\nA_N B_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=N<=10^5", "1<=A_i,B_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter for the number of pairs (A_i, B_i), hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. Each pair (A_i, B_i) is represented by the rule '<T_i>-><T_i-1> <n> A_i <s> B_i', ensuring each pair is separated by a space and each subsequent pair is on a new line. The base case '<T_1>->A_1 <s> B_1' handles the first pair. This structure accurately reflects the input format where N pairs of integers are listed, each on a separate line."}
{"name": "p02879 AtCoder Beginner Contest 144 - 9x9", "description": "Constraints\n\n* 1 <= A <= 20\n* 1 <= B <= 20\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=20", "1<=B<=20"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'A' and 'B', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space. Since neither 'A' nor 'B' serve as counter variables in this context, they are not enclosed in brackets."}
{"name": "p02880 AtCoder Beginner Contest 144 - 81", "description": "Having learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together.\n\nGiven an integer N, determine whether N can be represented as the product of two integers between 1 and 9. If it can, print `Yes`; if it cannot, print `No`.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is not a counter variable, so it is represented simply as 'N' without brackets. The grammar is straightforward, consisting of the start symbol producing 'N' directly, reflecting the input format where only a single integer 'N' is provided."}
{"name": "p02886 AtCoder Beginner Contest 143 - TAKOYAKI FESTIVAL 2019", "description": "It's now the season of TAKOYAKI FESTIVAL!\n\nThis year, N takoyaki (a ball-shaped food with a piece of octopus inside) will be served. The deliciousness of the i-th takoyaki is d_i.\n\nAs is commonly known, when you eat two takoyaki of deliciousness x and y together, you restore x \\times y health points.\n\nThere are \\frac{N \\times (N - 1)}{2} ways to choose two from the N takoyaki served in the festival. For each of these choices, find the health points restored from eating the two takoyaki, then compute the sum of these \\frac{N \\times (N - 1)}{2} values.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 50\n* 0 \\leq d_i \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1 d_2 ... d_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> d_i", "<T_1>->d_1"], "constraints": ["2<=N<=50", "0<=d_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of 'd_i' elements, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The sequence of 'd_i' elements is constructed using '<T_i>-><T_i-1> <s> d_i', starting from '<T_1>->d_1'. This structure ensures the input format where 'N' is followed by 'N' integers separated by spaces."}
{"name": "p02890 AtCoder Beginner Contest 143 - Distinct Numbers", "description": "Constraints\n\n* 1 <= N <= 3 * 10^5\n* 1 <= A_i <= N\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=3*10^5", "1<=A_i<=N"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'N' is used as a counter variable for the array elements, thus it is denoted as [N] in the grammar to reflect its role as a counter. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p02899 AtCoder Beginner Contest 142 - Go to School", "description": "Takahashi is a teacher responsible for a class of N students.\n\nThe students are given distinct student numbers from 1 to N.\n\nToday, all the students entered the classroom at different times.\n\nAccording to Takahashi's record, there were A_i students in the classroom when student number i entered the classroom (including student number i).\n\nFrom these records, reconstruct the order in which the students entered the classroom.\n\nConstraints\n\n* 1 \\le N \\le 10^5\n* 1 \\le A_i \\le N\n* A_i \\neq A_j  (i \\neq j)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "1<=A_i<=N", "A_i!=A_j"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'N' is used as a counter variable for the array elements, thus it is denoted as [N] in the grammar to reflect its role as a counter. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p02900 AtCoder Beginner Contest 142 - Disjoint Set of Common Divisors", "description": "Given are positive integers A and B.\n\nLet us choose some number of positive common divisors of A and B.\n\nHere, any two of the chosen divisors must be coprime.\n\nAt most, how many divisors can we choose?\n\nDefinition of common divisor\n\nAn integer d is said to be a common divisor of integers x and y when d divides both x and y.\n\nDefinition of being coprime\n\nIntegers x and y are said to be coprime when x and y have no positive common divisors other than 1.\n\nDefinition of dividing\n\nAn integer x is said to divide another integer y when there exists an integer \\alpha such that y = \\alpha x.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B \\leq 10^{12}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=10^12", "1<=B<=10^12"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'A' and 'B', which are not counter variables, hence they are not enclosed in brackets. The variables are separated by a space symbol <s>. The grammar is constructed as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space."}
{"name": "p02911 AtCoder Beginner Contest 141 - Attack Survival", "description": "Takahashi has decided to hold fastest-finger-fast quiz games. Kizahashi, who is in charge of making the scoreboard, is struggling to write the program that manages the players' scores in a game, which proceeds as follows.\n\nA game is played by N players, numbered 1 to N. At the beginning of a game, each player has K points.\n\nWhen a player correctly answers a question, each of the other N-1 players receives minus one (-1) point. There is no other factor that affects the players' scores.\n\nAt the end of a game, the players with 0 points or lower are eliminated, and the remaining players survive.\n\nIn the last game, the players gave a total of Q correct answers, the i-th of which was given by Player A_i. For Kizahashi, write a program that determines whether each of the N players survived this game.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq K \\leq 10^9\n* 1 \\leq Q \\leq 10^5\n* 1 \\leq A_i \\leq N\\ (1 \\leq i \\leq Q)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K Q\nA_1\nA_2\n.\n.\n.\nA_Q", "grammar": {"productions": ["<S>->N <s> K <s> [Q] <n> <T_Q>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "1<=K<=10^9", "1<=Q<=10^5", "1<=A_i<=N"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables: N, K, and Q. Among these, Q serves as a counter variable for the sequence of A_i inputs, hence it is enclosed in [Q]. The grammar is structured as '<S>->N <s> K <s> [Q] <n> <T_Q>', where <T_Q> is a counter non-terminal for [Q]. The sequence of A_i inputs is handled by the counter non-terminal <T_i>, which recursively processes each A_i followed by a newline <n>, terminating at <T_1>->A_i. This setup ensures the grammar correctly parses the input format where N, K, and Q are given first, followed by Q lines of A_i values."}
{"name": "p02912 AtCoder Beginner Contest 141 - Powerful Discount Tickets", "description": "Takahashi is going to buy N items one by one.\n\nThe price of the i-th item he buys is A_i yen (the currency of Japan).\n\nHe has M discount tickets, and he can use any number of them when buying an item.\n\nIf Y tickets are used when buying an item priced X yen, he can get the item for \\frac{X}{2^Y} (rounded down to the nearest integer) yen.\n\nWhat is the minimum amount of money required to buy all the items?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, M \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=A_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, where N serves as a counter variable for the array elements, thus it is denoted as [N] in the grammar to reflect its role as a counter. The variable M is not a counter, so it is represented simply as M. The grammar is initiated with '<S>->[N] <s> M <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> M <n> <T_N>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p02915 AtCoder Beginner Contest 140 - Password", "description": "Takahashi is going to set a 3-character password.\n\nHow many possible passwords are there if each of its characters must be a digit between 1 and N (inclusive)?\n\nConstraints\n\n* 1 \\leq N \\leq 9\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is not a counter variable in this context, hence it is represented simply as 'N' without brackets. The grammar is straightforward as it only requires the input of a single integer 'N', leading to the simple production rule '<S>->N'."}
{"name": "p02916 AtCoder Beginner Contest 140 - Buffet", "description": "Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\n\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\n\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\n\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\n\nFind the sum of the satisfaction points he gained.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 20\n* 1 \\leq A_i \\leq N\n* A_1, A_2, ..., A_N are all different.\n* 1 \\leq B_i \\leq 50\n* 1 \\leq C_i \\leq 50\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\nB_1 B_2 ... B_N\nC_1 C_2 ... C_{N-1}", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> <L_N> <n> <Z_N-1>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1", "<Z_i>-><Z_i-1> <s> C_i", "<Z_1>->C_1"], "constraints": ["2<=N<=20", "1<=A_i<=N", "1<=B_i<=50", "1<=C_i<=50", "A_i!=A_j"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for multiple sequences, hence it is enclosed in [N]. The grammar is structured to parse three separate sequences: the sequence of A_i, B_i, and C_i. Each sequence is controlled by its own counter non-terminal: <T_N> for A_i, <L_N> for B_i, and <Z_N-1> for C_i. The sequences are separated by newline tokens <n>. The grammar rules are designed to decrement each counter non-terminal until it reaches 1, ensuring all elements of each sequence are correctly parsed. The constraints reflect the input conditions, including the ranges for N, A_i, B_i, and C_i, and the uniqueness of A_i values."}
{"name": "p02919 AtCoder Beginner Contest 140 - Second Sum", "description": "Given is a permutation P of \\\\{1, 2, \\ldots, N\\\\}.\n\nFor a pair (L, R) (1 \\le L \\lt R \\le N), let X_{L, R} be the second largest value among P_L, P_{L+1}, \\ldots, P_R.\n\nFind \\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} X_{L,R}.\n\nConstraints\n\n* 2 \\le N \\le 10^5\n* 1 \\le P_i \\le N\n* P_i \\neq P_j  (i \\neq j)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1 P_2 \\ldots P_N", "grammar": {"productions": ["<S>->[N] <n> <L_N>", "<L_i>-><L_i-1> <s> P_i", "<L_1>->P_1"], "constraints": ["2<=N<=10^5", "1<=P_i<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the permutation elements, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <L_N>'. The non-terminal <L_i> is a counter-driven rule for [N], where 'P_i' represents each permutation element separated by a space symbol <s>. The grammar constructs are laid out as '<L_i>-><L_i-1> <s> P_i' and '<L_1>->P_1' to systematically parse the sequence of permutation elements following the count [N]."}
{"name": "p02921 AtCoder Beginner Contest 139 - Tenki", "description": "You will be given a string S of length 3 representing the weather forecast for three days in the past.\n\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. `S`, `C`, and `R` stand for sunny, cloudy, and rainy, respectively.\n\nYou will also be given a string T of length 3 representing the actual weather on those three days.\n\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. `S`, `C`, and `R` stand for sunny, cloudy, and rainy, respectively.\n\nPrint the number of days for which the forecast was correct.\n\nConstraints\n\n* S and T are strings of length 3 each.\n* S and T consist of `S`, `C`, and `R`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[SCR]{3} <n> [SCR]{3}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of two strings, S and T, each of length 3 and composed of the characters 'S', 'C', and 'R'. Since the length is fixed and the characters are from a specific set, regular expressions are used to represent these strings. The grammar is structured as '<S>->[SCR]{3} <n> [SCR]{3}', where [SCR]{3} denotes a string of exactly 3 characters, each being 'S', 'C', or 'R', and <n> represents a newline separating the two strings."}
{"name": "p02922 AtCoder Beginner Contest 139 - Power Socket", "description": "Takahashi's house has only one socket.\n\nTakahashi wants to extend it with some number of power strips, each with A sockets, into B or more empty sockets.\n\nOne power strip with A sockets can extend one empty socket into A empty sockets.\n\nFind the minimum number of power strips required.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq A \\leq 20\n* 1 \\leq B \\leq 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["2<=A<=20", "1<=B<=20"]}, "reason": "The grammar starts with the initial non-terminal <S>. It defines two variables, 'A' and 'B', which are separated by a space symbol denoted as <s>. Since neither 'A' nor 'B' serves as a counter variable, they are not enclosed in brackets. The structure of the grammar is formulated as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space."}
{"name": "p02923 AtCoder Beginner Contest 139 - Lower", "description": "There are N squares arranged in a row from left to right.\n\nThe height of the i-th square from the left is H_i.\n\nYou will land on a square of your choice, then repeat moving to the adjacent square on the right as long as the height of the next square is not greater than that of the current square.\n\nFind the maximum number of times you can move.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq H_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> H_i", "<T_1>->H_1"], "constraints": ["1<=N<=10^5", "1<=H_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of heights, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The non-terminal <T_i> generates the sequence of heights 'H_i' separated by spaces <s>, decrementing until it reaches <T_1>, which produces 'H_1'. This structure accurately reflects the input format where 'N' is followed by 'N' heights separated by spaces."}
{"name": "p02924 AtCoder Beginner Contest 139 - ModSum", "description": "For an integer N, we will choose a permutation \\\\{P_1, P_2, ..., P_N\\\\} of \\\\{1, 2, ..., N\\\\}.\n\nThen, for each i=1,2,...,N, let M_i be the remainder when i is divided by P_i.\n\nFind the maximum possible value of M_1 + M_2 + \\cdots + M_N.\n\nConstraints\n\n* N is an integer satisfying 1 \\leq N \\leq 10^9.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is not used as a counter variable in the input format, so it is represented simply as 'N' without brackets. The input consists of a single integer 'N', hence the grammar is constructed as '<S>->N' to reflect this straightforward input format."}
{"name": "p02927 Japanese Student Championship 2019 Qualification - Takahashi Calendar", "description": "Today is August 24, one of the five Product Days in a year.\n\nA date m-d (m is the month, d is the date) is called a Product Day when d is a two-digit number, and all of the following conditions are satisfied (here d_{10} is the tens digit of the day and d_1 is the ones digit of the day):\n\n* d_1 \\geq 2\n* d_{10} \\geq 2\n* d_1 \\times d_{10} = m\n\n\n\nTakahashi wants more Product Days, and he made a new calendar called Takahashi Calendar where a year consists of M month from Month 1 to Month M, and each month consists of D days from Day 1 to Day D.\n\nIn Takahashi Calendar, how many Product Days does a year have?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq M \\leq 100\n* 1 \\leq D \\leq 99\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nM D", "grammar": {"productions": ["<S>->M <s> D"], "constraints": ["1<=M<=100", "1<=D<=99"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, M and D, which are not used as counters in this context, hence they are not enclosed in brackets. The input format requires M and D to be separated by a space, represented by <s>. Therefore, the grammar is constructed as '<S>->M <s> D' to reflect the input structure where M and D are integers separated by a space."}
{"name": "p02943 AtCoder Grand Contest 037 - Reversing and Concatenating", "description": "Constraints\n\n* 1 <= N <= 5000\n* 1 <= K <= 10^9\n* |S|=N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nS", "grammar": {"productions": ["<S>->[N] <s> K <n> [a-z]{N}"], "constraints": ["1<=N<=5000", "1<=K<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable for the length of the string S, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> K <n> [a-z]{N}'. The string S is represented using a regular expression [a-z]{N}, indicating a sequence of N lowercase English letters. This structure ensures the input format matches the specification where N and K are provided on the first line, followed by the string S of length N on the next line."}
{"name": "p02946 AtCoder Beginner Contest 137 - One Clue", "description": "There are 2000001 stones placed on a number line. The coordinates of these stones are -1000000, -999999, -999998, \\ldots, 999999, 1000000.\n\nAmong them, some K consecutive stones are painted black, and the others are painted white.\n\nAdditionally, we know that the stone at coordinate X is painted black.\n\nPrint all coordinates that potentially contain a stone painted black, in ascending order.\n\nConstraints\n\n* 1 \\leq K \\leq 100\n* 0 \\leq X \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "grammar": {"productions": ["<S>->K <s> X"], "constraints": ["1<=K<=100", "0<=X<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, K and X, which are separated by a space symbol denoted as <s>. Since neither K nor X serves as a counter variable in this context, they are not enclosed in brackets. The grammar is structured as '<S>->K <s> X', representing the input format where K and X are two integers separated by a space."}
{"name": "p02948 AtCoder Beginner Contest 137 - Summer Vacation", "description": "There are N one-off jobs available. If you take the i-th job and complete it, you will earn the reward of B_i after A_i days from the day you do it.\n\nYou can take and complete at most one of these jobs in a day.\n\nHowever, you cannot retake a job that you have already done.\n\nFind the maximum total reward that you can earn no later than M days from today.\n\nYou can already start working today.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq A_i \\leq 10^5\n* 1 \\leq B_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_N B_N", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=A_i<=10^5", "1<=B_i<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. Here, 'N' is used as a counter variable for the sequence of job entries, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> M <n> <T_N>', where 'M' is not a counter variable and thus not enclosed in brackets. The non-terminal <T_i> is a counter-driven rule for [N], representing each job entry as 'A_i <s> B_i' separated by a newline <n>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> A_i <s> B_i' and '<T_1>->A_1 <s> B_1' to systematically parse the sequence of job entries following the count [N]."}
{"name": "p02954 AtCoder Beginner Contest 136 - Gathering Children", "description": "Given is a string S consisting of `L` and `R`.\n\nLet N be the length of S. There are N squares arranged from left to right, and the i-th character of S from the left is written on the i-th square from the left.\n\nThe character written on the leftmost square is always `R`, and the character written on the rightmost square is always `L`.\n\nInitially, one child is standing on each square.\n\nEach child will perform the move below 10^{100} times:\n\n* Move one square in the direction specified by the character written in the square on which the child is standing. `L` denotes left, and `R` denotes right.\n\n\n\nFind the number of children standing on each square after the children performed the moves.\n\nConstraints\n\n* S is a string of length between 2 and 10^5 (inclusive).\n* Each character of S is `L` or `R`.\n* The first and last characters of S are `R` and `L`, respectively.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[LR]{2,10^5}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a string S composed of characters 'L' and 'R' with a length between 2 and 10^5. Since the length of S is variable and serves as a counter for the sequence of characters, it is represented using a regular expression [LR]{2,10^5}, which specifies a string of length between 2 and 10^5 consisting of 'L' and 'R' characters. The grammar is thus constructed as '<S>->[LR]{2,10^5}' to directly capture the input format without needing additional counter non-terminals, as the entire string is defined by the regex."}
{"name": "p02958 AtCoder Beginner Contest 135 - 0 or 1 Swap", "description": "We have a sequence p = {p_1,\\ p_2,\\ ...,\\ p_N} which is a permutation of {1,\\ 2,\\ ...,\\ N}.\n\nYou can perform the following operation at most once: choose integers i and j (1 \\leq i < j \\leq N), and swap p_i and p_j. Note that you can also choose not to perform it.\n\nPrint `YES` if you can sort p in ascending order in this way, and `NO` otherwise.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 50\n* p is a permutation of {1,\\ 2,\\ ...,\\ N}.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 ... p_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["2<=N<=50", "1<=p_i<=N", "p_i!=p_j"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequence elements, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The sequence elements 'p_i' are separated by a space symbol <s>, leading to the rules '<T_i>-><T_i-1> <s> p_i' and '<T_1>->p_1'. This setup ensures the grammar correctly parses the sequence of elements following the count [N]."}
{"name": "p02960 AtCoder Beginner Contest 135 - Digits Parade", "description": "Given is a string S. Each character in S is either a digit (`0`, ..., `9`) or `?`.\n\nAmong the integers obtained by replacing each occurrence of `?` with a digit, how many have a remainder of 5 when divided by 13? An integer may begin with 0.\n\nSince the answer can be enormous, print the count modulo 10^9+7.\n\nConstraints\n\n* S is a string consisting of digits (`0`, ..., `9`) and `?`.\n* 1 \\leq |S| \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[0-9?]{1,10^5}"], "constraints": []}, "reason": "The grammar starts with the start non-terminal <S>. The input is a string S consisting of digits and '?', with a length constraint of 1 to 10^5 characters. Since the entire string is to be matched without any internal structure or counters, it is represented directly using a regular expression [0-9?]{1,10^5}, which covers all possible characters (digits and '?') and the length constraint. Thus, the grammar is simply '<S>->[0-9?]{1,10^5}'."}
{"name": "p02964 AtCoder Grand Contest 036 - Do Not Duplicate", "description": "We have a sequence of N \\times K integers: X=(X_0,X_1,\\cdots,X_{N \\times K-1}). Its elements are represented by another sequence of N integers: A=(A_0,A_1,\\cdots,A_{N-1}). For each pair i, j (0 \\leq i \\leq K-1,\\ 0 \\leq j \\leq N-1), X_{i \\times N + j}=A_j holds.\n\nSnuke has an integer sequence s, which is initially empty. For each i=0,1,2,\\cdots,N \\times K-1, in this order, he will perform the following operation:\n\n* If s does not contain X_i: add X_i to the end of s.\n* If s does contain X_i: repeatedly delete the element at the end of s until s no longer contains X_i. Note that, in this case, we do not add X_i to the end of s.\n\n\n\nFind the elements of s after Snuke finished the operations.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq K \\leq 10^{12}\n* 1 \\leq A_i \\leq 2 \\times 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_0 A_1 \\cdots A_{N-1}", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=K<=10^12", "1<=A_i<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'N' and 'K', where 'N' serves as a counter variable for the sequence elements, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each element of the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> K <n> <T_N>', '<T_i>-><T_i-1> <s> A_i', and '<T_1>->A_1' to systematically parse the sequence of elements following the count [N]."}
{"name": "p02969 AtCoder Beginner Contest 134 - Dodecagon", "description": "It is known that the area of a regular dodecagon inscribed in a circle of radius a is 3a^2.\n\nGiven an integer r, find the area of a regular dodecagon inscribed in a circle of radius r.\n\nConstraints\n\n* 1 \\leq r \\leq 100\n* r is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nr", "grammar": {"productions": ["<S>->r"], "constraints": ["1<=r<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'r' is not a counter variable, so it is represented simply as 'r' without brackets. The grammar is straightforward as it only requires the input of a single integer 'r', hence the grammar is constructed as '<S>->r'."}
{"name": "p02970 AtCoder Beginner Contest 134 - Golden Apple", "description": "There are N apple trees in a row. People say that one of them will bear golden apples.\n\nWe want to deploy some number of inspectors so that each of these trees will be inspected.\n\nEach inspector will be deployed under one of the trees. For convenience, we will assign numbers from 1 through N to the trees. An inspector deployed under the i-th tree (1 \\leq i \\leq N) will inspect the trees with numbers between i-D and i+D (inclusive).\n\nFind the minimum number of inspectors that we need to deploy to achieve the objective.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 20\n* 1 \\leq D \\leq 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN D", "grammar": {"productions": ["<S>->N <s> D"], "constraints": ["1<=N<=20", "1<=D<=20"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'N' and 'D', which are not used as counter variables in this context, hence they are not enclosed in brackets. The grammar is structured as '<S>->N <s> D', representing the input format where 'N' and 'D' are two integers separated by a space."}
{"name": "p02971 AtCoder Beginner Contest 134 - Exception Handling", "description": "You are given a sequence of length N: A_1, A_2, ..., A_N. For each integer i between 1 and N (inclusive), answer the following question:\n\n* Find the maximum value among the N-1 elements other than A_i in the sequence.\n\nConstraints\n\n* 2 \\leq N \\leq 200000\n* 1 \\leq A_i \\leq 200000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=200000", "1<=A_i<=200000"]}, "reason": "The grammar construction begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence elements, hence it is enclosed in brackets as [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The sequence elements 'A_i' are listed each on a new line, represented by the counter non-terminal <T_i>, which decrements until it reaches <T_1>. The grammar rules '<T_i>-><T_i-1> <n> A_i' and '<T_1>->A_1' ensure the correct parsing of the sequence elements, each separated by a newline token <n>."}
{"name": "p02972 AtCoder Beginner Contest 134 - Preparing Boxes", "description": "There are N empty boxes arranged in a row from left to right. The integer i is written on the i-th box from the left (1 \\leq i \\leq N).\n\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\n\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\n* For every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\n\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* a_i is 0 or 1.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> [01]{1}", "<T_1>->[01]{1}"], "constraints": ["1<=N<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of binary digits (0 or 1), hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter non-terminal for [N]. The sequence of binary digits is represented using the regular expression [01]{1}, ensuring each digit is either 0 or 1. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> [01]{1}' and '<T_1>->[01]{1}' to parse the sequence of binary digits following the count [N]."}
{"name": "p02975 AtCoder Grand Contest 035 - XOR Circle", "description": "Snuke has N hats. The i-th hat has an integer a_i written on it.\n\nThere are N camels standing in a circle. Snuke will put one of his hats on each of these camels.\n\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print `Yes`; otherwise, print `No`.\n\n* The bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\nWhat is XOR? The bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows: - When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even. For example, 3 \\oplus 5 = 6.\n\nConstraints\n\n* All values in input are integers.\n* 3 \\leq N \\leq 10^{5}\n* 0 \\leq a_i \\leq 10^{9}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\ldots a_{N}", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["3<=N<=10^5", "0<=A_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of integers, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates the sequence of integers separated by spaces. The rules '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' are used to systematically parse the sequence of integers, with each integer represented as A_i. This structure ensures the input format matches the specification where the first line is the count [N] and the second line is the sequence of N integers."}
{"name": "p02981 AtCoder Beginner Contest 133 - T or T", "description": "N of us are going on a trip, by train or taxi.\n\nThe train will cost each of us A yen (the currency of Japan).\n\nThe taxi will cost us a total of B yen.\n\nHow much is our minimum total travel expense?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 20\n* 1 \\leq A \\leq 50\n* 1 \\leq B \\leq 50\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B", "grammar": {"productions": ["<S>->N <s> A <s> B"], "constraints": ["1<=N<=20", "1<=A<=50", "1<=B<=50"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables, N, A, and B, none of which serve as counter variables in this context. Therefore, they are represented without brackets. The input format requires these variables to be separated by spaces, denoted by <s>. Thus, the grammar is constructed as '<S>->N <s> A <s> B', reflecting the sequence of variables N, A, and B separated by spaces in the input."}
{"name": "p02983 AtCoder Beginner Contest 133 - Remainder Minimization 2019", "description": "You are given two non-negative integers L and R. We will choose two integers i and j such that L \\leq i < j \\leq R. Find the minimum possible value of (i \\times j) \\mbox{ mod } 2019.\n\nConstraints\n\n* All values in input are integers.\n* 0 \\leq L < R \\leq 2 \\times 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nL R", "grammar": {"productions": ["<S>->L <s> R"], "constraints": ["0<=L<2*10^9", "L<R<=2*10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'L' and 'R', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->L <s> R', representing the input format where 'L' and 'R' are two integers separated by a space. Since neither 'L' nor 'R' serve as counter variables, they are not enclosed in brackets."}
{"name": "p02988 AtCoder Beginner Contest 132 - Ordinary Number", "description": "We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\n\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\n* p_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.\n\nConstraints\n\n* All values in input are integers.\n* 3 \\leq n \\leq 20\n* p is a permutation of {1,\\ 2,\\ ...,\\ n}.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\np_1 p_2 ... p_n", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["3<=n<=20", "1<=p_i<=n"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'n' serves as a counter for the sequence of elements in the permutation, hence it is enclosed in brackets as [n]. The grammar is structured as '<S>->[n] <n> <T_n>', where <T_n> is a counter non-terminal that generates the sequence of permutation elements p_1 to p_n, each separated by a space <s>. The rules '<T_i>-><T_i-1> <s> p_i' and '<T_1>->p_1' ensure the correct generation of the permutation sequence, decrementing the counter until it reaches 1."}
{"name": "p02989 AtCoder Beginner Contest 132 - Divide the Problems", "description": "Takahashi made N problems for competitive programming. The problems are numbered 1 to N, and the difficulty of Problem i is represented as an integer d_i (the higher, the harder).\n\nHe is dividing the problems into two categories by choosing an integer K, as follows:\n\n* A problem with difficulty K or higher will be for ARCs.\n* A problem with difficulty lower than K will be for ABCs.\n\n\n\nHow many choices of the integer K make the number of problems for ARCs and the number of problems for ABCs the same?\n\n* 2 \\leq N \\leq 10^5\n* N is an even number.\n* 1 \\leq d_i \\leq 10^5\n* All values in input are integers.\n\n\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1 d_2 ... d_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> d_i", "<T_1>->d_1"], "constraints": ["2<=N<=10^5", "1<=d_i<=10^5", "N%2==0"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of difficulties 'd_i', hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates the sequence of 'd_i' values separated by spaces. The counter non-terminal <T_i> is defined to recursively produce each 'd_i' in the sequence, decrementing until it reaches <T_1>, which produces the first element 'd_1'. This setup accurately reflects the input format where the first line is the count [N], followed by a sequence of 'N' integers on the next line."}
{"name": "p02990 AtCoder Beginner Contest 132 - Blue and Red Balls", "description": "There are K blue balls and N-K red balls. The balls of the same color cannot be distinguished. Snuke and Takahashi are playing with these balls.\n\nFirst, Snuke will arrange the N balls in a row from left to right.\n\nThen, Takahashi will collect only the K blue balls. In one move, he can collect any number of consecutive blue balls. He will collect all the blue balls in the fewest moves possible.\n\nHow many ways are there for Snuke to arrange the N balls in a row so that Takahashi will need exactly i moves to collect all the blue balls? Compute this number modulo 10^9+7 for each i such that 1 \\leq i \\leq K.\n\nConstraints\n\n* 1 \\leq K \\leq N \\leq 2000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["1<=K<=N<=2000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'N' and 'K', which are not used as counters in this context, so they are not enclosed in brackets. The grammar is structured as '<S>->N <s> K', representing the input format where 'N' and 'K' are two integers separated by a space. Since neither 'N' nor 'K' serves as a counter variable, no counter non-terminals are needed in this grammar."}
{"name": "p02996 AtCoder Beginner Contest 131 - Megalomania", "description": "Kizahashi, who was appointed as the administrator of ABC at National Problem Workshop in the Kingdom of AtCoder, got too excited and took on too many jobs.\n\nLet the current time be time 0. Kizahashi has N jobs numbered 1 to N.\n\nIt takes A_i units of time for Kizahashi to complete Job i. The deadline for Job i is time B_i, and he must complete the job before or at this time.\n\nKizahashi cannot work on two or more jobs simultaneously, but when he completes a job, he can start working on another immediately.\n\nCan Kizahashi complete all the jobs in time? If he can, print `Yes`; if he cannot, print `No`.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i, B_i \\leq 10^9 (1 \\leq i \\leq N)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n.\n.\n.\nA_N B_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=N<=2*10^5", "1<=A_i,B_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of job entries, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates each job entry consisting of 'A_i' and 'B_i' separated by a space <s>. The counter non-terminal <T_i> is defined to recursively generate each job entry until it reaches the base case <T_1>, which produces the first job entry 'A_1 <s> B_1'. This structure ensures that all N job entries are correctly formatted and separated by newlines."}
{"name": "p03000 AtCoder Beginner Contest 130 - Bounding", "description": "A ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 \\leq i \\leq N+1) at coordinate D_i = D_{i-1} + L_{i-1}.\n\nHow many times will the ball make a bounce where the coordinate is at most X?\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 1 \\leq L_i \\leq 100\n* 1 \\leq X \\leq 10000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nL_1 L_2 ... L_{N-1} L_N", "grammar": {"productions": ["<S>->[N] <s> X <n> <T_N>", "<T_i>-><T_i-1> <s> L_i", "<T_1>->L_1"], "constraints": ["1<=N<=100", "1<=L_i<=100", "1<=X<=10000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter for the sequence of 'L_i' values, hence it is enclosed in brackets as [N]. The grammar is initiated with '<S>->[N] <s> X <n> <T_N>', where 'X' is a non-counter variable and thus not enclosed in brackets. The non-terminal <T_i> is a counter-driven rule for [N], generating each 'L_i' separated by a space <s>. The grammar constructs are '<S>->[N] <s> X <n> <T_N>', '<T_i>-><T_i-1> <s> L_i', and '<T_1>->L_1' to systematically parse the sequence of 'L_i' values following the count [N]."}
{"name": "p03008 diverta 2019 Programming Contest 2 - Squirrel Merchant", "description": "The squirrel Chokudai has N acorns. One day, he decides to do some trades in multiple precious metal exchanges to make more acorns.\n\nHis plan is as follows:\n\n1. Get out of the nest with N acorns in his hands.\n2. Go to Exchange A and do some trades.\n3. Go to Exchange B and do some trades.\n4. Go to Exchange A and do some trades.\n5. Go back to the nest.\n\n\n\nIn Exchange X (X = A, B), he can perform the following operations any integer number of times (possibly zero) in any order:\n\n* Lose g_{X} acorns and gain 1 gram of gold.\n* Gain g_{X} acorns and lose 1 gram of gold.\n* Lose s_{X} acorns and gain 1 gram of silver.\n* Gain s_{X} acorns and lose 1 gram of silver.\n* Lose b_{X} acorns and gain 1 gram of bronze.\n* Gain b_{X} acorns and lose 1 gram of bronze.\n\n\n\nNaturally, he cannot perform an operation that would leave him with a negative amount of acorns, gold, silver, or bronze.\n\nWhat is the maximum number of acorns that he can bring to the nest? Note that gold, silver, or bronze brought to the nest would be worthless because he is just a squirrel.\n\nConstraints\n\n* 1 \\leq N \\leq 5000\n* 1 \\leq g_{X} \\leq 5000\n* 1 \\leq s_{X} \\leq 5000\n* 1 \\leq b_{X} \\leq 5000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\ng_A s_A b_A\ng_B s_B b_B", "grammar": {"productions": ["<S>->[N] <n> gA <s> sA <s> bA <n> gB <s> sB <s> bB"], "constraints": ["1<=N<=5000", "1<=gA,sA,bA,gB,sB,bB<=5000"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> gA <s> sA <s> bA <n> gB <s> sB <s> bB'. The variables gA, sA, bA, gB, sB, and bB are not counter variables, so they are not enclosed in brackets. The structure reflects the input format where [N] is followed by three pairs of values separated by spaces and newlines."}
{"name": "p03014 AtCoder Beginner Contest 129 - Lamp", "description": "There is a grid with H horizontal rows and W vertical columns, and there are obstacles on some of the squares.\n\nSnuke is going to choose one of the squares not occupied by an obstacle and place a lamp on it. The lamp placed on the square will emit straight beams of light in four cardinal directions: up, down, left, and right. In each direction, the beam will continue traveling until it hits a square occupied by an obstacle or it hits the border of the grid. It will light all the squares on the way, including the square on which the lamp is placed, but not the square occupied by an obstacle.\n\nSnuke wants to maximize the number of squares lighted by the lamp.\n\nYou are given H strings S_i (1 \\leq i \\leq H), each of length W. If the j-th character (1 \\leq j \\leq W) of S_i is `#`, there is an obstacle on the square at the i-th row from the top and the j-th column from the left; if that character is `.`, there is no obstacle on that square.\n\nFind the maximum possible number of squares lighted by the lamp.\n\nConstraints\n\n* 1 \\leq H \\leq 2,000\n* 1 \\leq W \\leq 2,000\n* S_i is a string of length W consisting of `#` and `.`.\n* `.` occurs at least once in one of the strings S_i (1 \\leq i \\leq H).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nS_1\n:\nS_H", "grammar": {"productions": ["<S>->[H] <s> [W] <n> <T_H>", "<T_i>-><T_i-1> <n> [#.]{W}", "<T_1>->[#.]{W}"], "constraints": ["1<=H<=2000", "1<=W<=2000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, H and W, both serving as counter variables, hence they are enclosed in [H] and [W]. The grammar is initiated with '<S>->[H] <s> [W] <n> <T_H>'. The non-terminal <T_i> is a counter-driven rule for [H], where each line represents a string of length W consisting of '#' and '.'. The regular expression [#.]{W} is used to represent each string of length W. The grammar constructs are laid out as '<S>->[H] <s> [W] <n> <T_H>', '<T_i>-><T_i-1> <n> [#.]{W}', and '<T_1>->[#.]{W}' to systematically parse the sequence of strings following the count [H]."}
{"name": "p03025 M-SOLUTIONS Programming Contest - Best-of-(2n-1)", "description": "Constraints\n\n* 1 <= N <= 100000\n* 0 <= A,B,C <= 100\n* 1 <= A+B\n* A+B+C=100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B C", "grammar": {"productions": ["<S>->N <s> A <s> B <s> C"], "constraints": ["1<=N<=100000", "0<=A,B,C<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes variables N, A, B, and C, but none of them serve as counter variables in this context, hence they are not enclosed in brackets. The input format specifies these variables separated by spaces, leading to the grammar structure '<S>->N <s> A <s> B <s> C'. This structure directly reflects the input format where N, A, B, and C are integers listed in sequence, each separated by a space."}
{"name": "p03026 M-SOLUTIONS Programming Contest - Maximum Sum of Minimum", "description": "You are given a tree with N vertices 1,2,\\ldots,N, and positive integers c_1,c_2,\\ldots,c_N. The i-th edge in the tree (1 \\leq i \\leq N-1) connects Vertex a_i and Vertex b_i.\n\nWe will write a positive integer on each vertex in T and calculate our score as follows:\n\n* On each edge, write the smaller of the integers written on the two endpoints.\n* Let our score be the sum of the integers written on all the edges.\n\n\n\nFind the maximum possible score when we write each of c_1,c_2,\\ldots,c_N on one vertex in T, and show one way to achieve it. If an integer occurs multiple times in c_1,c_2,\\ldots,c_N, we must use it that number of times.\n\nConstraints\n\n* 1 \\leq N \\leq 10000\n* 1 \\leq a_i,b_i \\leq N\n* 1 \\leq c_i \\leq 10^5\n* The given graph is a tree.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1\n:\na_{N-1} b_{N-1}\nc_1 \\ldots c_N", "grammar": {"productions": ["<S>->[N] <n> <T_N-1> <n> <L_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1", "<L_i>-><L_i-1> <s> c_i", "<L_1>->c_1"], "constraints": ["1<=N<=1000", "1<=a_i<=N", "1<=b_i<=N", "1<=c_i<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the edges and the list of integers, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <n> <T_N-1> <n> <L_N>'. The non-terminal <T_i> is a counter-driven rule for [N-1], representing each edge 'a_i b_i' separated by a space symbol <s> and a newline <n>. The non-terminal <L_i> is another counter-driven rule for [N], representing each integer 'c_i' separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <n> <T_N-1> <n> <L_N>', '<T_i>-><T_i-1> <n> a_i <s> b_i', '<T_1>->a_1 <s> b_1', '<L_i>-><L_i-1> <s> c_i', and '<L_1>->c_1' to systematically parse the sequence of edges and integers following the count [N]."}
{"name": "p03029 AtCoder Beginner Contest 128 - Apple Pie", "description": "We have A apples and P pieces of apple.\n\nWe can cut an apple into three pieces of apple, and make one apple pie by simmering two pieces of apple in a pan.\n\nFind the maximum number of apple pies we can make with what we have now.\n\nConstraints\n\n* All values in input are integers.\n* 0 \\leq A, P \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA P", "grammar": {"productions": ["<S>->A <s> P"], "constraints": ["0<=A,P<=100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'A' and 'P', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> P', representing the input format where 'A' and 'P' are two integers separated by a space. Since neither 'A' nor 'P' serve as counter variables, they are not enclosed in brackets."}
{"name": "p03031 AtCoder Beginner Contest 128 - Switches", "description": "We have N switches with \"on\" and \"off\" state, and M bulbs. The switches are numbered 1 to N, and the bulbs are numbered 1 to M.\n\nBulb i is connected to k_i switches: Switch s_{i1}, s_{i2}, ..., and s_{ik_i}. It is lighted when the number of switches that are \"on\" among these switches is congruent to p_i modulo 2.\n\nHow many combinations of \"on\" and \"off\" states of the switches light all the bulbs?\n\nConstraints\n\n* 1 \\leq N, M \\leq 10\n* 1 \\leq k_i \\leq N\n* 1 \\leq s_{ij} \\leq N\n* s_{ia} \\neq s_{ib} (a \\neq b)\n* p_i is 0 or 1.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nk_1 s_{11} s_{12} ... s_{1k_1}\n:\nk_M s_{M1} s_{M2} ... s_{Mk_M}\np_1 p_2 ... p_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M> <n> <L_M>", "<T_i>-><T_i-1> <n> [k] <s> <Z_k>", "<T_1>->[k] <s> <Z_k>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}", "<Z_i>-><Z_i-1> <s> s_i", "<Z_1>->s_1"], "constraints": ["1<=N,M<=10", "1<=k<=N", "1<=s_i<=N"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables N and M are present, where M serves as a counter variable, hence it is denoted as [M]. The grammar is initiated with '<S>->N <s> [M] <n> <T_M> <n> <L_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each line starts with [k] followed by a space <s> and then a sequence of s_i elements controlled by the counter non-terminal <Z_k>. The non-terminal <L_i> handles the sequence of p_i values, which are either 0 or 1, represented by the regex [01]{1}. The grammar systematically parses the input format by breaking down each component into counter-driven sequences."}
{"name": "p03038 AtCoder Beginner Contest 127 - Integer Cards", "description": "You have N cards. On the i-th card, an integer A_i is written.\n\nFor each j = 1, 2, ..., M in this order, you will perform the following operation once:\n\nOperation: Choose at most B_j cards (possibly zero). Replace the integer written on each chosen card with C_j.\n\nFind the maximum possible sum of the integers written on the N cards after the M operations.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq A_i, C_i \\leq 10^9\n* 1 \\leq B_i \\leq N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 A_2 ... A_N\nB_1 C_1\nB_2 C_2\n\\vdots\nB_M C_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <n> B_i <s> C_i", "<L_1>->B_1 <s> C_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=A_i<=10^9", "1<=C_i<=10^9", "1<=B_i<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, both serving as counter variables, hence they are enclosed in [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_N> <n> <L_M>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' to systematically parse the sequence of array elements following the count [N]. Similarly, the non-terminal <L_i> is a counter-driven rule for [M], where 'B_i' and 'C_i' are separated by a space symbol <s>. The grammar constructs are laid out as '<L_i>-><L_i-1> <n> B_i <s> C_i' and '<L_1>->B_1 <s> C_1' to systematically parse the sequence of pairs following the count [M]."}
{"name": "p03043 AtCoder Beginner Contest 126 - Dice and Coin", "description": "Snuke has a fair N-sided die that shows the integers from 1 to N with equal probability and a fair coin. He will play the following game with them:\n\n1. Throw the die. The current score is the result of the die.\n2. As long as the score is between 1 and K-1 (inclusive), keep flipping the coin. The score is doubled each time the coin lands heads up, and the score becomes 0 if the coin lands tails up.\n3. The game ends when the score becomes 0 or becomes K or above. Snuke wins if the score is K or above, and loses if the score is 0.\n\n\n\nYou are given N and K. Find the probability that Snuke wins the game.\n\nConstraints\n\n* 1 ≤ N ≤ 10^5\n* 1 ≤ K ≤ 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["1<=N<=10^5", "1<=K<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, which are not used as counters but simply represent integers. Therefore, they are not enclosed in brackets. The grammar is structured as '<S>->N <s> K', representing the input format where N and K are two integers separated by a space. Since neither N nor K serves as a counter variable, no counter non-terminals are needed in this grammar."}
{"name": "p03048 diverta 2019 Programming Contest - RGB Boxes", "description": "Snuke has come to a store that sells boxes containing balls. The store sells the following three kinds of boxes:\n\n* Red boxes, each containing R red balls\n* Green boxes, each containing G green balls\n* Blue boxes, each containing B blue balls\n\n\n\nSnuke wants to get a total of exactly N balls by buying r red boxes, g green boxes and b blue boxes. How many triples of non-negative integers (r,g,b) achieve this?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq R,G,B,N \\leq 3000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR G B N", "grammar": {"productions": ["<S>->R <s> G <s> B <s> N"], "constraints": ["1<=R,G,B,N<=3000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables: R, G, B, and N. None of these variables serve as counter variables in the grammar, so they are not enclosed in brackets. The input format requires these four integers to be separated by spaces, which is represented by the space token <s>. Thus, the grammar is constructed as '<S>->R <s> G <s> B <s> N', reflecting the input format where R, G, B, and N are listed in sequence, each separated by a single space."}
{"name": "p03052 diverta 2019 Programming Contest - Edge Ordering", "description": "Constraints\n\n* All values in input are integers.\n* 2 <= N <= 20\n* N-1 <= M <= N(N-1)/2\n* 1 <= a_i, b_i <= N\n* G does not have self-loops or multiple edges.\n* The subgraph consisting of Vertex 1,2,...,N and Edge 1,2,...,N-1 is a spanning tree of G.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\n\\vdots\na_M b_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=20", "N-1<=M<=N*(N-1)/2", "1<=a_i,b_i<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, both serving as counter variables, hence they are enclosed in [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each line contains 'a_i' and 'b_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of pairs following the count [M]."}
{"name": "p03054 AtCoder Grand Contest 033 - LRUD Game", "description": "We have a rectangular grid of squares with H horizontal rows and W vertical columns. Let (i,j) denote the square at the i-th row from the top and the j-th column from the left. On this grid, there is a piece, which is initially placed at square (s_r,s_c).\n\nTakahashi and Aoki will play a game, where each player has a string of length N. Takahashi's string is S, and Aoki's string is T. S and T both consist of four kinds of letters: `L`, `R`, `U` and `D`.\n\nThe game consists of N steps. The i-th step proceeds as follows:\n\n* First, Takahashi performs a move. He either moves the piece in the direction of S_i, or does not move the piece.\n* Second, Aoki performs a move. He either moves the piece in the direction of T_i, or does not move the piece.\n\n\n\nHere, to move the piece in the direction of `L`, `R`, `U` and `D`, is to move the piece from square (r,c) to square (r,c-1), (r,c+1), (r-1,c) and (r+1,c), respectively. If the destination square does not exist, the piece is removed from the grid, and the game ends, even if less than N steps are done.\n\nTakahashi wants to remove the piece from the grid in one of the N steps. Aoki, on the other hand, wants to finish the N steps with the piece remaining on the grid. Determine if the piece will remain on the grid at the end of the game when both players play optimally.\n\nConstraints\n\n* 2 \\leq H,W \\leq 2 \\times 10^5\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq s_r \\leq H\n* 1 \\leq s_c \\leq W\n* |S|=|T|=N\n* S and T consists of the four kinds of letters `L`, `R`, `U` and `D`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W N\ns_r s_c\nS\nT", "grammar": {"productions": ["<S>->H <s> W <s> [N] <n> sr <s> sc <n> [LRUD]{N} <n> [LRUD]{N}"], "constraints": ["2<=H<=2*10^5", "2<=W<=2*10^5", "2<=N<=2*10^5", "1<=sr<=H", "1<=sc<=W"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables H, W, sr, and sc are not counter variables, so they are written as is. The variable N serves as a counter for the length of strings S and T, hence it is enclosed in [N]. The strings S and T are represented using the regular expression [LRUD]{N}, indicating they consist of exactly N characters from the set {'L', 'R', 'U', 'D'}. The grammar is structured to reflect the input format: '<S>->H <s> W <s> [N] <n> sr <s> sc <n> [LRUD]{N} <n> [LRUD]{N}'. This ensures the input is parsed correctly with the given constraints."}
{"name": "p03060 AtCoder Beginner Contest 125 - Resale", "description": "There are N gems. The value of the i-th gem is V_i.\n\nYou will choose some of these gems, possibly all or none, and get them.\n\nHowever, you need to pay a cost of C_i to get the i-th gem.\n\nLet X be the sum of the values of the gems obtained, and Y be the sum of the costs paid.\n\nFind the maximum possible value of X-Y.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 20\n* 1 \\leq C_i, V_i \\leq 50\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nV_1 V_2 ... V_N\nC_1 C_2 ... C_N", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> <L_N>", "<T_i>-><T_i-1> <s> V_i", "<T_1>->V_1", "<L_i>-><L_i-1> <s> C_i", "<L_1>->C_1"], "constraints": ["1<=N<=20", "1<=C_i<=50", "1<=V_i<=50"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for both the sequence of 'V_i' and 'C_i', hence it is enclosed in [N]. The grammar is structured to first read 'N', followed by two sequences of 'V_i' and 'C_i' each separated by spaces and newlines. The non-terminals <T_i> and <L_i> are used to generate the sequences for 'V_i' and 'C_i' respectively, decrementing until they reach 1. The grammar constructs are '<S>->[N] <n> <T_N> <n> <L_N>', '<T_i>-><T_i-1> <s> V_i', '<T_1>->V_1', '<L_i>-><L_i-1> <s> C_i', and '<L_1>->C_1' to systematically parse the input format."}
{"name": "p03067 Tenka1 Programmer Beginner Contest 2019 - On the Way", "description": "There are three houses on a number line: House 1, 2 and 3, with coordinates A, B and C, respectively. Print `Yes` if we pass the coordinate of House 3 on the straight way from House 1 to House 2 without making a detour, and print `No` otherwise.\n\nConstraints\n\n* 0\\leq A,B,C\\leq 100\n* A, B and C are distinct integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["0<=A,B,C<=100"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. It defines three variables, 'A', 'B', and 'C', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B <s> C', representing the input format where 'A', 'B', and 'C' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets. The grammar directly reflects the input specification where three distinct integers are provided in a single line, separated by spaces."}
{"name": "p03069 Tenka1 Programmer Beginner Contest 2019 - Stones", "description": "There are N stones arranged in a row. Every stone is painted white or black. A string S represents the color of the stones. The i-th stone from the left is white if the i-th character of S is `.`, and the stone is black if the character is `#`.\n\nTakahashi wants to change the colors of some stones to black or white so that there will be no white stone immediately to the right of a black stone. Find the minimum number of stones that needs to be recolored.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* S is a string of length N consisting of `.` and `#`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->N <n> [.#]{N}"], "constraints": ["1<=N<=2*10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, N, which serves as a counter variable for the length of the string S, hence it is enclosed in [N]. The string S consists of characters '.' and '#', which is represented using the regular expression [.#]{N}, indicating a sequence of N characters where each character is either '.' or '#'. Thus, the grammar is constructed as '<S>->[N] <n> [.#]{N}' to reflect the input format where N is followed by a newline and then the string S of length N."}
{"name": "p03073 AtCoder Beginner Contest 124 - Coloring Colorfully", "description": "N tiles are arranged in a row from left to right. The initial color of each tile is represented by a string S of length N.\n\nThe i-th tile from the left is painted black if the i-th character of S is `0`, and painted white if that character is `1`.\n\nYou want to repaint some of the tiles black or white, so that any two adjacent tiles have different colors.\n\nAt least how many tiles need to be repainted to satisfy the condition?\n\nConstraints\n\n* 1 \\leq |S| \\leq 10^5\n* S_i is `0` or `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[01]{1,10^5}"], "constraints": []}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a string S composed of characters '0' and '1', with a length between 1 and 10^5. Since the length of S is variable and defined by the problem constraints, the grammar uses a regular expression [01]{1,10^5} to represent the string S, which matches any sequence of '0's and '1's with a length from 1 to 10^5. This approach efficiently captures the input format without needing counter variables, as the entire string is defined by the regex pattern."}
{"name": "p03074 AtCoder Beginner Contest 124 - Handstand", "description": "N people are arranged in a row from left to right.\n\nYou are given a string S of length N consisting of `0` and `1`, and a positive integer K.\n\nThe i-th person from the left is standing on feet if the i-th character of S is `0`, and standing on hands if that character is `1`.\n\nYou will give the following direction at most K times (possibly zero):\n\nDirection: Choose integers l and r satisfying 1 \\leq l \\leq r \\leq N, and flip the l-th, (l+1)-th, ..., and r-th persons. That is, for each i = l, l+1, ..., r, the i-th person from the left now stands on hands if he/she was standing on feet, and stands on feet if he/she was standing on hands.\n\nFind the maximum possible number of consecutive people standing on hands after at most K directions.\n\nConstraints\n\n* N is an integer satisfying 1 \\leq N \\leq 10^5.\n* K is an integer satisfying 1 \\leq K \\leq 10^5.\n* The length of the string S is N.\n* Each character of the string S is `0` or `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nS", "grammar": {"productions": ["<S>->[N] <s> K <n> [01]{N}"], "constraints": ["1<=N<=10^5", "1<=K<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable for the length of the string S, hence it is enclosed in [N]. The variable K is not a counter variable, so it is written as K. The string S consists of characters '0' and '1' and has a length of N, which is represented using the regular expression [01]{N}. Thus, the grammar is constructed as '<S>->[N] <s> K <n> [01]{N}' to reflect the input format where N and K are given first, followed by the string S of length N."}
{"name": "p03075 AtCoder Beginner Contest 123 - Five Antennas", "description": "In AtCoder city, there are five antennas standing in a straight line. They are called Antenna A, B, C, D and E from west to east, and their coordinates are a, b, c, d and e, respectively.\nTwo antennas can communicate directly if the distance between them is k or less, and they cannot if the distance is greater than k.\nDetermine if there exists a pair of antennas that cannot communicate directly.\nHere, assume that the distance between two antennas at coordinates p and q (p < q) is q - p.\n\nConstraints\n\n* a, b, c, d, e and k are integers between 0 and 123 (inclusive).\n* a < b < c < d < e\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na\nb\nc\nd\ne\nk", "grammar": {"productions": ["<S>->a <n> b <n> c <n> d <n> e <n> k"], "constraints": ["0<=a,b,c,d,e,k<=123", "a<b<c<d<e"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes six variables: a, b, c, d, e, and k. None of these variables serve as counter variables, so they are not enclosed in brackets. The input format requires each variable to be on a new line, represented by the newline token <n>. Thus, the grammar is structured as '<S>->a <n> b <n> c <n> d <n> e <n> k' to reflect the input format where each variable is listed sequentially on separate lines."}
{"name": "p03077 AtCoder Beginner Contest 123 - Five Transportations", "description": "In 2028 and after a continuous growth, AtCoder Inc. finally built an empire with six cities (City 1, 2, 3, 4, 5, 6)!\n\nThere are five means of transport in this empire:\n\n* Train: travels from City 1 to 2 in one minute. A train can occupy at most A people.\n* Bus: travels from City 2 to 3 in one minute. A bus can occupy at most B people.\n* Taxi: travels from City 3 to 4 in one minute. A taxi can occupy at most C people.\n* Airplane: travels from City 4 to 5 in one minute. An airplane can occupy at most D people.\n* Ship: travels from City 5 to 6 in one minute. A ship can occupy at most E people.\n\n\n\nFor each of them, one vehicle leaves the city at each integer time (time 0, 1, 2, ...).\n\nThere is a group of N people at City 1, and they all want to go to City 6.\nAt least how long does it take for all of them to reach there? You can ignore the time needed to transfer.\n\nConstraints\n\n* 1 \\leq N, A, B, C, D, E \\leq 10^{15}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA\nB\nC\nD\nE", "grammar": {"productions": ["<S>->N <n> A <n> B <n> C <n> D <n> E"], "constraints": ["1<=N,A,B,C,D,E<=10^15"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes variables N, A, B, C, D, and E, none of which serve as counter variables in this context. Therefore, they are represented directly without brackets. The input format consists of each variable on a new line, denoted by the newline token <n>. Thus, the grammar is structured as '<S>->N <n> A <n> B <n> C <n> D <n> E' to reflect the sequence of inputs provided."}
{"name": "p03078 AtCoder Beginner Contest 123 - Cake 123", "description": "The Patisserie AtCoder sells cakes with number-shaped candles. There are X, Y and Z kinds of cakes with 1-shaped, 2-shaped and 3-shaped candles, respectively. Each cake has an integer value called deliciousness, as follows:\n\n* The deliciousness of the cakes with 1-shaped candles are A_1, A_2, ..., A_X.\n* The deliciousness of the cakes with 2-shaped candles are B_1, B_2, ..., B_Y.\n* The deliciousness of the cakes with 3-shaped candles are C_1, C_2, ..., C_Z.\n\n\n\nTakahashi decides to buy three cakes, one for each of the three shapes of the candles, to celebrate ABC 123.\nThere are X \\times Y \\times Z such ways to choose three cakes.\nWe will arrange these X \\times Y \\times Z ways in descending order of the sum of the deliciousness of the cakes.\nPrint the sums of the deliciousness of the cakes for the first, second, ..., K-th ways in this list.\n\nConstraints\n\n* 1 \\leq X \\leq 1 \\ 000\n* 1 \\leq Y \\leq 1 \\ 000\n* 1 \\leq Z \\leq 1 \\ 000\n* 1 \\leq K \\leq \\min(3 \\ 000, X \\times Y \\times Z)\n* 1 \\leq A_i \\leq 10 \\ 000 \\ 000 \\ 000\n* 1 \\leq B_i \\leq 10 \\ 000 \\ 000 \\ 000\n* 1 \\leq C_i \\leq 10 \\ 000 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y Z K\nA_1 \\ A_2 \\ A_3 \\ ... \\ A_X\nB_1 \\ B_2 \\ B_3 \\ ... \\ B_Y\nC_1 \\ C_2 \\ C_3 \\ ... \\ C_Z", "grammar": {"productions": ["<S>->X <s> Y <s> Z <s> K <n> <T_X> <n> <L_Y> <n> <Z_Z>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_i", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1", "<Z_i>-><Z_i-1> <s> C_i", "<Z_1>->C_1"], "constraints": ["1<=X<=1000", "1<=Y<=1000", "1<=Z<=1000", "1<=K<=min(3000,X*Y*Z)", "1<=A_i<=10000000000", "1<=B_i<=10000000000", "1<=C_i<=10000000000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables X, Y, Z, and K are provided in the input, where X, Y, and Z serve as counter variables for the sequences A_i, B_i, and C_i respectively. Hence, they are enclosed in brackets as [X], [Y], and [Z]. The grammar is structured to first list these variables followed by the sequences they count. The sequences are generated using counter non-terminals <T_X>, <L_Y>, and <Z_Z>, each decrementing until they reach 1. The sequences are separated by spaces and newlines as specified. The grammar ensures that each sequence is correctly formatted according to the input requirements, with each element separated by a space and each sequence on a new line."}
{"name": "p03080 ExaWizards 2019 - Red or Blue", "description": "Constraints\n\n* 1 <= N <= 100\n* |s| = N\n* s_i is `R` or `B`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\ns", "grammar": {"productions": ["<S>->[N] <n> [RB]{N}"], "constraints": ["1<=N<=100"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, N, which is used as a counter variable to specify the length of the string s. Consequently, the variable is represented as [N] to indicate its role as a length specifier for the sequence of characters, which consist only of 'R' and 'B'. This sequence is described using the regular expression [RB]{N}, meaning a string of N characters, each of which is either 'R' or 'B'. Thus, the grammar is constructed to reflect this format: '<S>->[N] <n> [RB]{N}'."}
{"name": "p03086 AtCoder Beginner Contest 122 - ATCoder", "description": "You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\n\nHere, a ACGT string is a string that contains no characters other than `A`, `C`, `G` and `T`.\n\nConstraints\n\n* S is a string of length between 1 and 10 (inclusive).\n* Each character in S is an uppercase English letter.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[A-Z]{1,10}"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a string S composed of uppercase English letters, with a length constraint of 1 to 10 characters. Since the entire string S is to be matched directly without any counter variables or specific separators, the grammar is represented using a regular expression [A-Z]{1,10} to denote a sequence of uppercase letters with a length between 1 and 10. Thus, the grammar is constructed as '<S>->[A-Z]{1,10}'."}
{"name": "p03096 AtCoder Grand Contest 031 - Reversi", "description": "There are N stones arranged in a row. The i-th stone from the left is painted in the color C_i.\n\nSnuke will perform the following operation zero or more times:\n\n* Choose two stones painted in the same color. Repaint all the stones between them, with the color of the chosen stones.\n\n\n\nFind the number of possible final sequences of colors of the stones, modulo 10^9+7.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq C_i \\leq 2\\times 10^5(1\\leq i\\leq N)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nC_1\n:\nC_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> C_i", "<T_1>->C_1"], "constraints": ["1<=N<=2*10^5", "1<=C_i<=2*10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of colors, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The non-terminal <T_i> generates the sequence of colors C_i, each separated by a newline <n>, decrementing until it reaches <T_1>, which produces the first color C_1. This structure accurately reflects the input format where 'N' is followed by 'N' lines of color values."}
{"name": "p03101 AtCoder Beginner Contest 121 - White Cells", "description": "There are H rows and W columns of white square cells.\n\nYou will choose h of the rows and w of the columns, and paint all of the cells contained in those rows or columns.\n\nHow many white cells will remain?\n\nIt can be proved that this count does not depend on what rows and columns are chosen.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq H, W \\leq 20\n* 1 \\leq h \\leq H\n* 1 \\leq w \\leq W\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nh w", "grammar": {"productions": ["<S>->H <s> W <n> h <s> w"], "constraints": ["1<=H<=20", "1<=W<=20", "1<=h<=H", "1<=w<=W"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes variables H, W, h, and w, where none serve as counter variables for sequences or repetitions. Hence, they are represented without brackets. The input format is structured as two lines: the first line contains H and W separated by a space, and the second line contains h and w separated by a space. The grammar is thus constructed as '<S>->H <s> W <n> h <s> w' to reflect this input structure."}
{"name": "p03107 AtCoder Beginner Contest 120 - Unification", "description": "There are N cubes stacked vertically on a desk.\n\nYou are given a string S of length N. The color of the i-th cube from the bottom is red if the i-th character in S is `0`, and blue if that character is `1`.\n\nYou can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.\n\nAt most how many cubes can be removed?\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* |S| = N\n* Each character in S is `0` or `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[01]{N}"], "constraints": ["1<=N<=10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a string S of length N, where each character is either '0' or '1'. Since N is the length of the string and serves as a counter variable, it is enclosed in [N]. The string S is represented using the regular expression [01]{N}, which specifies a sequence of N characters, each being '0' or '1'. Thus, the grammar is constructed as '<S>->[01]{N}' to reflect the input format."}
{"name": "p03110 AtCoder Beginner Contest 119 - Digital Gifts", "description": "Takahashi received otoshidama (New Year's money gifts) from N of his relatives.\n\nYou are given N values x_1, x_2, ..., x_N and N strings u_1, u_2, ..., u_N as input. Each string u_i is either `JPY` or `BTC`, and x_i and u_i represent the content of the otoshidama from the i-th relative.\n\nFor example, if x_1 = `10000` and u_1 = `JPY`, the otoshidama from the first relative is 10000 Japanese yen; if x_2 = `0.10000000` and u_2 = `BTC`, the otoshidama from the second relative is 0.1 bitcoins.\n\nIf we convert the bitcoins into yen at the rate of 380000.0 JPY per 1.0 BTC, how much are the gifts worth in total?\n\nConstraints\n\n* 2 \\leq N \\leq 10\n* u_i = `JPY` or `BTC`.\n* If u_i = `JPY`, x_i is an integer such that 1 \\leq x_i \\leq 10^8.\n* If u_i = `BTC`, x_i is a decimal with 8 decimal digits, such that 0.00000001 \\leq x_i \\leq 100.00000000.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 u_1\nx_2 u_2\n:\nx_N u_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> x_i <s> JPY|BTC", "<T_1>->x_1 <s> JPY|BTC"], "constraints": ["2<=N<=10", "1<=x_i<=10^8", "0.00000001<=x_i<=100.0000000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the number of relatives, hence it is enclosed in brackets as [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. Each line in the input consists of 'x_i' followed by a space <s> and either 'JPY' or 'BTC', hence the rule '<T_i>-><T_i-1> <n> x_i <s> JPY|BTC' is used. The base case '<T_1>->x_1 <s> JPY|BTC' handles the first relative's input. The constraints ensure the values of 'N', 'x_i' (both integer and decimal), and the currency type are within specified limits."}
{"name": "p03111 AtCoder Beginner Contest 119 - Synthetic Kadomatsu", "description": "Constraints\n\n* 3 <= N <= 8\n* 1 <= C < B < A <= 1000\n* 1 <= l_i <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B C\nl_1\nl_2\n:\nl_N", "grammar": {"productions": ["<S>->[N] <s> A <s> B <s> C <n> <T_N>", "<T_i>-><T_i-1> <n> l_i", "<T_1>->l_1"], "constraints": ["3<=N<=8", "1<=C<B<A<=1000", "1<=l_i<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of 'l_i' elements, hence it is enclosed in [N]. The grammar is structured as '<S>->[N] <s> A <s> B <s> C <n> <T_N>', where 'A', 'B', and 'C' are variables not serving as counters, thus not enclosed in brackets. The non-terminal <T_i> is a counter-driven rule for [N], generating each 'l_i' followed by a newline <n>. The grammar constructs are '<T_i>-><T_i-1> <n> l_i' and '<T_1>->l_1' to systematically parse the sequence of 'l_i' elements following the count [N]."}
{"name": "p03127 AtCoder Beginner Contest 118 - Monsters Battle Royale", "description": "There are N monsters, numbered 1, 2, ..., N.\n\nInitially, the health of Monster i is A_i.\n\nBelow, a monster with at least 1 health is called alive.\n\nUntil there is only one alive monster, the following is repeated:\n\n* A random alive monster attacks another random alive monster.\n* As a result, the health of the monster attacked is reduced by the amount equal to the current health of the monster attacking.\n\n\n\nFind the minimum possible final health of the last monster alive.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "1<=A_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of integers, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates the sequence of integers A_i separated by spaces. The counter non-terminal <T_i> is defined to decrement until it reaches 1, generating each A_i in the sequence. The constraints specify the range for N and each A_i, ensuring they adhere to the problem's requirements."}
{"name": "p03129 Yahoo Programming Contest 2019 - Anti-Adjacency", "description": "Determine if we can choose K different integers between 1 and N (inclusive) so that no two of them differ by 1.\n\nConstraints\n\n* 1\\leq N,K\\leq 100\n* N and K are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["1<=N<=100", "1<=K<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'N' and 'K', which are not used as counters in this context, so they are not enclosed in brackets. The grammar is structured as '<S>->N <s> K', representing the input format where 'N' and 'K' are two integers separated by a space."}
{"name": "p03131 Yahoo Programming Contest 2019 - When I hit my pocket...", "description": "Snuke has one biscuit and zero Japanese yen (the currency) in his pocket. He will perform the following operations exactly K times in total, in the order he likes:\n\n* Hit his pocket, which magically increases the number of biscuits by one.\n* Exchange A biscuits to 1 yen.\n* Exchange 1 yen to B biscuits.\n\n\n\nFind the maximum possible number of biscuits in Snuke's pocket after K operations.\n\nConstraints\n\n* 1 \\leq K,A,B \\leq 10^9\n* K,A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK A B", "grammar": {"productions": ["<S>->K <s> A <s> B"], "constraints": ["1<=K<=10^9", "1<=A<=10^9", "1<=B<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables K, A, and B, none of which serve as counter variables in this context, so they are represented without brackets. The input format requires these three integers to be separated by spaces. Thus, the grammar is structured as '<S>->K <s> A <s> B', where <s> denotes the space character separating the integers."}
{"name": "p03136 AtCoder Beginner Contest 117 - Polygon", "description": "Determine if an N-sided polygon (not necessarily convex) with sides of length L_1, L_2, ..., L_N can be drawn in a two-dimensional plane.\n\nYou can use the following theorem:\n\nTheorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n\nConstraints\n\n* All values in input are integers.\n* 3 \\leq N \\leq 10\n* 1 \\leq L_i \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nL_1 L_2 ... L_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> L_i", "<T_1>->L_1"], "constraints": ["3<=N<=10", "1<=L_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. Here, 'N' is used as a counter variable for the sequence of lengths, thus it is denoted as [N] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'L_i' represents each length separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <s> L_i', and '<T_1>->L_1' to systematically parse the sequence of lengths following the count [N]."}
{"name": "p03143 NIKKEI Programming Contest 2019 - Weights on Vertices and Edges", "description": "Constraints\n\n* 1 <= N <= 10^5\n* N-1 <= M <= 10^5\n* 1 <= X_i <= 10^9\n* 1 <= A_i < B_i <= N\n* 1 <= Y_i <= 10^9\n* (A_i,B_i) != (A_j,B_j) (i != j)\n* The given graph is connected.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_N\nA_1 B_1 Y_1\nA_2 B_2 Y_2\n:\nA_M B_M Y_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> X_i", "<T_1>->X_1", "<L_i>-><L_i-1> <n> A_i <s> B_i <s> Y_i", "<T_1>->A_1 <s> B_1 <s> Y_1"], "constraints": ["1<=N<=10^5", "N-1<=M<=10^5", "1<=X_i<=10^9", "1<=A_i<B_i<=N", "1<=Y_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, both serving as counter variables, hence they are enclosed in [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_N> <n> <L_M>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'X_i' represents each element separated by a space symbol <s>. The non-terminal <L_i> is a counter-driven rule for [M], where each line contains 'A_i', 'B_i', and 'Y_i' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> X_i', '<T_1>->X_1', '<L_i>-><L_i-1> <n> A_i <s> B_i <s> Y_i', and '<L_1>->A_1 <s> B_1 <s> Y_1' to systematically parse the sequence of elements following the counts [N] and [M]."}
{"name": "p03147 AtCoder Beginner Contest 116 - Grand Garden", "description": "In a flower bed, there are N flowers, numbered 1,2,......,N. Initially, the heights of all flowers are 0. You are given a sequence h=\\\\{h_1,h_2,h_3,......\\\\} as input. You would like to change the height of Flower k to h_k for all k (1 \\leq k \\leq N), by repeating the following \"watering\" operation:\n\n* Specify integers l and r. Increase the height of Flower x by 1 for all x such that l \\leq x \\leq r.\n\n\n\nFind the minimum number of watering operations required to satisfy the condition.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 0 \\leq h_i \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nh_1 h_2 h_3 ...... h_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=N<=100", "0<=h_i<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of 'h_i' values, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The sequence of 'h_i' values is constructed using '<T_i>-><T_i-1> <s> h_i' for each subsequent element, and '<T_1>->h_1' for the first element. This structure ensures the input format where 'N' is followed by 'N' space-separated integers representing the heights of the flowers."}
{"name": "p03150 KEYENCE Programming Contest 2019 - KEYENCE String", "description": "Constraints\n\n* The length of S is between 7 and 100 (inclusive).\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[[a-z]{7,100}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a single string S, which is represented using a regular expression [a-z]{7,100} to denote that S is a string of lowercase English letters with a length between 7 and 100 characters. This directly replaces the variable S in the grammar, hence the grammar is constructed as '<S>->[a-z]{7,100}'."}
{"name": "p03151 KEYENCE Programming Contest 2019 - Exam and Wizard", "description": "A university student, Takahashi, has to take N examinations and pass all of them. Currently, his readiness for the i-th examination is A_{i}, and according to his investigation, it is known that he needs readiness of at least B_{i} in order to pass the i-th examination.\n\nTakahashi thinks that he may not be able to pass all the examinations, and he has decided to ask a magician, Aoki, to change the readiness for as few examinations as possible so that he can pass all of them, while not changing the total readiness.\n\nFor Takahashi, find the minimum possible number of indices i such that A_i and C_i are different, for a sequence C_1, C_2, ..., C_{N} that satisfies the following conditions:\n\n* The sum of the sequence A_1, A_2, ..., A_{N} and the sum of the sequence C_1, C_2, ..., C_{N} are equal.\n* For every i, B_i \\leq C_i holds.\n\n\n\nIf such a sequence C_1, C_2, ..., C_{N} cannot be constructed, print -1.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n* 1 \\leq B_i \\leq 10^9\n* A_i and B_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_{N}\nB_1 B_2 ... B_{N}", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> <L_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1"], "constraints": ["1<=N<=10^5", "1<=A_i<=10^9", "1<=B_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. Here, 'N' is used as a counter variable for both sequences A and B, hence it is denoted as [N] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[N] <n> <T_N> <n> <L_N>', where <T_N> and <L_N> are counter non-terminals for sequences A and B respectively. Each sequence is constructed with elements separated by a space symbol <s>, leading to the rules '<T_i>-><T_i-1> <s> A_i', '<T_1>->A_1', '<L_i>-><L_i-1> <s> B_i', and '<L_1>->B_1'. This structure systematically parses the input format where two sequences of N elements each are provided, separated by a newline."}
{"name": "p03153 KEYENCE Programming Contest 2019 - Connecting Cities", "description": "Constraints\n\n* 1 <= N <= 2 * 10^5\n* 1 <= D <= 10^9\n* 1 <= A_{i} <= 10^9\n* A_{i} and D are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN D\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> D <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=D<=10^9", "1<=A_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of elements 'A_i', hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> D <n> <T_N>', where 'D' is a non-counter variable and thus not enclosed in brackets. The non-terminal <T_i> is a counter-driven rule for [N], where each 'A_i' is separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> A_i' and '<T_1>->A_1' to systematically parse the sequence of elements following the count [N]."}
{"name": "p03160 Educational DP Contest - Frog 1", "description": "There are N stones, numbered 1, 2, \\ldots, N. For each i (1 \\leq i \\leq N), the height of Stone i is h_i.\n\nThere is a frog who is initially on Stone 1. He will repeat the following action some number of times to reach Stone N:\n\n* If the frog is currently on Stone i, jump to Stone i + 1 or Stone i + 2. Here, a cost of |h_i - h_j| is incurred, where j is the stone to land on.\n\n\n\nFind the minimum possible total cost incurred before the frog reaches Stone N.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq h_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nh_1 h_2 \\ldots h_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["2<=N<=10^5", "1<=h_i<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of heights, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter non-terminal for [N], generating the sequence of heights 'h_i' separated by spaces <s>. The grammar rules '<T_i>-><T_i-1> <s> h_i' and '<T_1>->h_1' systematically parse the sequence of heights following the count [N]."}
{"name": "p03161 Educational DP Contest - Frog 2", "description": "There are N stones, numbered 1, 2, \\ldots, N. For each i (1 \\leq i \\leq N), the height of Stone i is h_i.\n\nThere is a frog who is initially on Stone 1. He will repeat the following action some number of times to reach Stone N:\n\n* If the frog is currently on Stone i, jump to one of the following: Stone i + 1, i + 2, \\ldots, i + K. Here, a cost of |h_i - h_j| is incurred, where j is the stone to land on.\n\n\n\nFind the minimum possible total cost incurred before the frog reaches Stone N.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq K \\leq 100\n* 1 \\leq h_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 \\ldots h_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["2<=N<=10^5", "1<=K<=100", "1<=h_i<=10^4"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable for the sequence of heights, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'h_i' represents each height separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> h_i' and '<T_1>->h_1' to systematically parse the sequence of heights following the count [N]."}
{"name": "p03162 Educational DP Contest - Vacation", "description": "Taro's summer vacation starts tomorrow, and he has decided to make plans for it now.\n\nThe vacation consists of N days. For each i (1 \\leq i \\leq N), Taro will choose one of the following activities and do it on the i-th day:\n\n* A: Swim in the sea. Gain a_i points of happiness.\n* B: Catch bugs in the mountains. Gain b_i points of happiness.\n* C: Do homework at home. Gain c_i points of happiness.\n\n\n\nAs Taro gets bored easily, he cannot do the same activities for two or more consecutive days.\n\nFind the maximum possible total points of happiness that Taro gains.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq a_i, b_i, c_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1 c_1\na_2 b_2 c_2\n:\na_N b_N c_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["1<=N<=10^5", "1<=a_i,b_i,c_i<=10^4"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the number of days, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. Each day's activities (a_i, b_i, c_i) are separated by spaces <s> and each day's entry is separated by a newline <n>. The counter non-terminal <T_i> is defined to recursively include the activities for each day, decrementing until it reaches the base case <T_1>, which represents the activities for the first day. This structure ensures the input format is correctly parsed, with each day's activities listed in sequence."}
{"name": "p03169 Educational DP Contest - Sushi", "description": "There are N dishes, numbered 1, 2, \\ldots, N. Initially, for each i (1 \\leq i \\leq N), Dish i has a_i (1 \\leq a_i \\leq 3) pieces of sushi on it.\n\nTaro will perform the following operation repeatedly until all the pieces of sushi are eaten:\n\n* Roll a die that shows the numbers 1, 2, \\ldots, N with equal probabilities, and let i be the outcome. If there are some pieces of sushi on Dish i, eat one of them; if there is none, do nothing.\n\n\n\nFind the expected number of times the operation is performed before all the pieces of sushi are eaten.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 300\n* 1 \\leq a_i \\leq 3\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\ldots a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=300", "1<=a_i<=3"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the array elements, hence it is denoted as [N] in the grammar. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter-driven rule for [N]. Each 'a_i' represents an array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p03171 Educational DP Contest - Deque", "description": "Taro and Jiro will play the following game against each other.\n\nInitially, they are given a sequence a = (a_1, a_2, \\ldots, a_N). Until a becomes empty, the two players perform the following operation alternately, starting from Taro:\n\n* Remove the element at the beginning or the end of a. The player earns x points, where x is the removed element.\n\n\n\nLet X and Y be Taro's and Jiro's total score at the end of the game, respectively. Taro tries to maximize X - Y, while Jiro tries to minimize X - Y.\n\nAssuming that the two players play optimally, find the resulting value of X - Y.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 3000\n* 1 \\leq a_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\ldots a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=3000", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence elements, hence it is denoted as [N] in the grammar. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter-driven rule for [N], representing each element 'a_i' separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of elements following the count [N]."}
{"name": "p03172 Educational DP Contest - Candies", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 100\n* 0 <= K <= 10^5\n* 0 <= a_i <= K\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=100", "0<=K<=10^5", "0<=a_i<=K"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'N' and 'K', where 'N' serves as a counter variable for the sequence of 'a_i' elements, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'a_i' represents each element in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> K <n> <T_N>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of elements following the count [N]."}
{"name": "p03186 AtCoder Grand Contest 030 - Poisonous Cookies", "description": "Takahashi has A untasty cookies containing antidotes, B tasty cookies containing antidotes and C tasty cookies containing poison.\n\nEating a cookie containing poison results in a stomachache, and eating a cookie containing poison while having a stomachache results in a death. As he wants to live, he cannot eat one in such a situation. Eating a cookie containing antidotes while having a stomachache cures it, and there is no other way to cure stomachaches.\n\nFind the maximum number of tasty cookies that Takahashi can eat.\n\nConstraints\n\n* 0 \\leq A,B,C \\leq 10^9\n* A,B and C are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["0<=A,B,C<=10^9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'A', 'B', and 'C', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B <s> C', representing the input format where 'A', 'B', and 'C' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets, and no counter non-terminals are needed."}
{"name": "p03200 AtCoder Grand Contest 029 - Irreversible operation", "description": "There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.) The state of each piece is represented by a string S of length N. If S_i=`B`, the i-th piece from the left is showing black; If S_i=`W`, the i-th piece from the left is showing white.\n\nConsider performing the following operation:\n\n* Choose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\n\n\nFind the maximum possible number of times this operation can be performed.\n\nConstraints\n\n* 1 \\leq |S| \\leq 2\\times 10^5\n* S_i=`B` or `W`\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[BW]{1,2*10^5}"], "constraints": []}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a string S of length between 1 and 2×10^5, composed exclusively of the characters 'B' and 'W'. Since the length of S is variable and acts as a counter for the characters in the string, it is represented using a regular expression [BW]{1,2*10^5} to specify the allowed characters and their length range. Thus, the grammar is constructed as '<S>->[BW]{1,2*10^5}' to directly represent the input format where S is a string of 'B's and 'W's with the specified length constraints."}
{"name": "p03206 AtCoder Beginner Contest 115 - Christmas Eve Eve Eve", "description": "In some other world, today is December D-th.\n\nWrite a program that prints `Christmas` if D = 25, `Christmas Eve` if D = 24, `Christmas Eve Eve` if D = 23 and `Christmas Eve Eve Eve` if D = 22.\n\nConstraints\n\n* 22 \\leq D \\leq 25\n* D is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD", "grammar": {"productions": ["<S>->D"], "constraints": ["22<=D<=25"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'D' is not a counter variable, so it is not enclosed in brackets. The grammar is simply '<S>->D', representing the input format where 'D' is given as a single integer. The constraints specify that 'D' must be an integer between 22 and 25, inclusive."}
{"name": "p03210 AtCoder Beginner Contest 114 - 753", "description": "Shichi-Go-San (literally \"Seven-Five-Three\") is a traditional event in a certain country to celebrate the growth of seven-, five- and three-year-old children.\n\nTakahashi is now X years old. Will his growth be celebrated in Shichi-Go-San this time?\n\nConstraints\n\n* 1 ≤ X ≤ 9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["1<=X<=9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'X' is given as input, which is an integer between 1 and 9. Since 'X' is not used as a counter variable, it is represented simply as 'X' in the grammar. The grammar is constructed as '<S>->X' to reflect the input format where 'X' is the only input provided."}
{"name": "p03212 AtCoder Beginner Contest 114 - 755", "description": "You are given an integer N. Among the integers between 1 and N (inclusive), how many Shichi-Go-San numbers (literally \"Seven-Five-Three numbers\") are there?\n\nHere, a Shichi-Go-San number is a positive integer that satisfies the following condition:\n\n* When the number is written in base ten, each of the digits `7`, `5` and `3` appears at least once, and the other digits never appear.\n\nConstraints\n\n* 1 \\leq N < 10^9\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is not used as a counter variable in this context, so it is represented simply as 'N' without brackets. The grammar is straightforward as it only requires the input of a single integer 'N', hence the grammar is constructed as '<S>->N'."}
{"name": "p03229 Tenka1 Programmer Beginner Contest - Align", "description": "You are given N integers; the i-th of them is A_i. Find the maximum possible sum of the absolute differences between the adjacent elements after arranging these integers in a row in any order you like.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "1<=A_i<=10^9"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'N' is used as a counter variable for the array elements, thus it is denoted as [N] in the grammar to reflect its role as a counter. The non-terminal <T_i> is a counter-driven rule for [N], where 'A_i' represents each array element separated by a newline symbol <n>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <n> A_i', and '<T_1>->A_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p03231 AtCoder Grand Contest 028 - Two Abbreviations", "description": "You are given a string S of length N and another string T of length M. These strings consist of lowercase English letters.\n\nA string X is called a good string when the following conditions are all met:\n\n* Let L be the length of X. L is divisible by both N and M.\n* Concatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\n* Concatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\n\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.\n\nConstraints\n\n* 1 \\leq N,M \\leq 10^5\n* S and T consist of lowercase English letters.\n* |S|=N\n* |T|=M\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS\nT", "grammar": {"productions": ["<S>->[N] <s> [M] <n> [a-z]{N} <n> [a-z]{M}"], "constraints": ["1<=N,M<=10^5"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables N and M are used as counters for the lengths of strings S and T, respectively, hence they are enclosed in brackets as [N] and [M]. The grammar is structured to first read N and M separated by a space <s> and followed by a newline <n>. The next line contains string S, which is represented by the regex [a-z]{N} to denote a string of lowercase letters of length N. Similarly, the following line contains string T, represented by [a-z]{M}. Thus, the grammar is constructed as '<S>->[N] <s> [M] <n> [a-z]{N} <n> [a-z]{M}' to accurately parse the input format."}
{"name": "p03241 AtCoder Beginner Contest 112 - Partition", "description": "You are given integers N and M.\n\nConsider a sequence a of length N consisting of positive integers such that a_1 + a_2 + ... + a_N = M. Find the maximum possible value of the greatest common divisor of a_1, a_2, ..., a_N.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* N \\leq M \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M", "grammar": {"productions": ["<S>->N <s> M"], "constraints": ["1<=N<=10^5", "1<=M<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, which are not used as counter variables in this context, hence they are not enclosed in brackets. The input format is straightforward with N and M separated by a space, represented as '<S>->N <s> M'. Since neither N nor M serves as a counter for generating sequences or repetitions, no counter non-terminals are required in this grammar."}
{"name": "p03244 AtCoder Beginner Contest 111 - /\\/\\/\\/", "description": "A sequence a_1,a_2,... ,a_n is said to be /\\/\\/\\/ when the following conditions are satisfied:\n\n* For each i = 1,2,..., n-2, a_i = a_{i+2}.\n* Exactly two different numbers appear in the sequence.\n\n\n\nYou are given a sequence v_1,v_2,...,v_n whose length is even. We would like to make this sequence /\\/\\/\\/ by replacing some of its elements. Find the minimum number of elements that needs to be replaced.\n\nConstraints\n\n* 2 \\leq n \\leq 10^5\n* n is even.\n* 1 \\leq v_i \\leq 10^5\n* v_i is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nv_1 v_2 ... v_n", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> V_i", "<T_1>->V_1"], "constraints": ["2<=N<=10^5", "1<=V_i<=10^5", "N is even"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequence elements, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The sequence elements 'V_i' are separated by a space symbol <s>, leading to the rules '<T_i>-><T_i-1> <s> V_i' and '<T_1>->V_1'. This setup ensures the grammar correctly parses the sequence of elements following the count [N]."}
{"name": "p03252 AtCoder Beginner Contest 110 - String Transformation", "description": "You are given strings S and T consisting of lowercase English letters.\n\nYou can perform the following operation on S any number of times:\n\nOperation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.\n\nDetermine if S and T can be made equal by performing the operation zero or more times.\n\nConstraints\n\n* 1 \\leq |S| \\leq 2 \\times 10^5\n* |S| = |T|\n* S and T consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[a-z]{1,10} <n> [a-z]{1,10}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of two strings, S and T, each composed of lowercase English letters. Since both strings are of variable length and consist of lowercase letters, they are represented using the regular expression [a-z]{1,10}, where {1,10} denotes the length range of the strings. The grammar is structured as '<S>->[a-z]{1,10} <n> [a-z]{1,10}', indicating that the input consists of two strings separated by a newline. The constraints ensure that both strings are of the same length and consist of lowercase English letters."}
{"name": "p03254 AtCoder Grand Contest 027 - Candy Distribution Again", "description": "Constraints\n\n* All values in input are integers.\n* 2 <= N <= 100\n* 1 <= x <= 10^9\n* 1 <= a_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN x\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <s> x <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=100", "1<=x<=10^9", "1<=a_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter for the sequence of elements 'a_i', hence it is enclosed in brackets as [N]. The variable 'x' is not a counter, so it remains as 'x'. The grammar is structured as '<S>->[N] <s> x <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The sequence of 'a_i' elements is generated by the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1', ensuring each element is separated by a space. This setup accurately reflects the input format where 'N' and 'x' are given first, followed by 'N' integers separated by spaces."}
{"name": "p03260 AtCoder Beginner Contest 109 - ABC333", "description": "You are given integers A and B, each between 1 and 3 (inclusive).\n\nDetermine if there is an integer C between 1 and 3 (inclusive) such that A \\times B \\times C is an odd number.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B \\leq 3\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=3", "1<=B<=3"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'A' and 'B', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space. Since neither 'A' nor 'B' serve as counter variables, they are not enclosed in brackets."}
{"name": "p03264 AtCoder Beginner Contest 108 - Pair", "description": "Find the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.\n\nConstraints\n\n* 2\\leq K\\leq 100\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["2<=K<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'K' is not used as a counter variable in this context, so it is represented simply as 'K' without brackets. The grammar is straightforward as it only requires the input of a single integer 'K'. Thus, the grammar is constructed as '<S>->K' to reflect this input format."}
{"name": "p03265 AtCoder Beginner Contest 108 - Ruined Square", "description": "There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order. (Assume that the positive x-axis points right, and the positive y-axis points up.)\n\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\n\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.\n\nConstraints\n\n* |x_1|,|y_1|,|x_2|,|y_2| \\leq 100\n* (x_1,y_1) ≠ (x_2,y_2)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nx_1 y_1 x_2 y_2", "grammar": {"productions": ["<S>->x1 <s> y1 <s> x2 <s> y2"], "constraints": ["-100<=x1<=100", "-100<=y1<=100", "-100<=x2<=100", "-100<=y2<=100", "(x1,y1)!=(x2,y2)"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables: x1, y1, x2, and y2, which are not counter variables, so they are not enclosed in brackets. The variables are separated by space symbols <s> to reflect the input format where the coordinates are given in sequence. The grammar is constructed as '<S>->x1 <s> y1 <s> x2 <s> y2' to represent the input format where the four coordinates are listed in order, separated by spaces."}
{"name": "p03274 AtCoder Beginner Contest 107 - Candles", "description": "There are N candles placed on a number line. The i-th candle from the left is placed on coordinate x_i. Here, x_1 < x_2 < ... < x_N holds.\n\nInitially, no candles are burning. Snuke decides to light K of the N candles.\n\nNow, he is at coordinate 0. He can move left and right along the line with speed 1. He can also light a candle when he is at the same position as the candle, in negligible time.\n\nFind the minimum time required to light K candles.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq K \\leq N\n* x_i is an integer.\n* |x_i| \\leq 10^8\n* x_1 < x_2 < ... < x_N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nx_1 x_2 ... x_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=N<=10^5", "1<=K<=N", "-10^8<=x_i<=10^8", "x_i<=x_i+1"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable for the sequence of x_i values, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each x_i is separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> x_i' and '<T_1>->x_1' to systematically parse the sequence of x_i values following the count [N]."}
{"name": "p03284 AtCoder Beginner Contest 105 - AtCoder Crackers", "description": "Takahashi has decided to distribute N AtCoder Crackers to K users of as evenly as possible. When all the crackers are distributed, find the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.\n\nConstraints\n\n* 1 \\leq N,K \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["1<=N,K<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, which are not counter variables, so they are represented as 'N' and 'K' without brackets. The variables are separated by a space symbol <s>. The grammar is structured as '<S>->N <s> K', representing the input format where 'N' and 'K' are two integers separated by a space."}
{"name": "p03285 AtCoder Beginner Contest 105 - Cakes and Donuts", "description": "La Confiserie d'ABC sells cakes at 4 dollars each and doughnuts at 7 dollars each. Determine if there is a way to buy some of them for exactly N dollars. You can buy two or more doughnuts and two or more cakes, and you can also choose to buy zero doughnuts or zero cakes.\n\nConstraints\n\n* N is an integer between 1 and 100, inclusive.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is not used as a counter variable, hence it is represented simply as 'N' without brackets. The grammar is straightforward as the input consists only of 'N' without any additional elements or counters. Thus, the grammar is constructed as '<S>->N'."}
{"name": "p03286 AtCoder Beginner Contest 105 - Base -2 Number", "description": "Given an integer N, find the base -2 representation of N.\n\nHere, S is the base -2 representation of N when the following are all satisfied:\n\n* S is a string consisting of `0` and `1`.\n* Unless S = `0`, the initial character of S is `1`.\n* Let S = S_k S_{k-1} ... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 + ... + S_k \\times (-2)^k = N.\n\n\n\nIt can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n\nConstraints\n\n* Every value in input is integer.\n* -10^9 \\leq N \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["-10^9<=N<=10^9"]}, "reason": "The grammar begins with the starting non-terminal <S>. The variable 'N' is not used as a counter variable in the input format, so it is represented simply as 'N' without brackets. The input format is straightforward, consisting of a single integer 'N'. Thus, the grammar is constructed as '<S>->N' to reflect this simple input structure."}
{"name": "p03289 AtCoder Beginner Contest 104 - AcCepted", "description": "You are given a string S. Each character of S is uppercase or lowercase English letter. Determine if S satisfies all of the following conditions:\n\n* The initial character of S is an uppercase `A`.\n* There is exactly one occurrence of `C` between the third character from the beginning and the second to last character (inclusive).\n* All letters except the `A` and `C` mentioned above are lowercase.\n\nConstraints\n\n* 4 ≤ |S| ≤ 10 (|S| is the length of the string S.)\n* Each character of S is uppercase or lowercase English letter.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[a-zA-Z]{4,10}"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. The variable S is a string of uppercase or lowercase English letters with a length between 4 and 10 characters, as specified by the constraints. Since the length of S is variable and the characters can be any combination of uppercase or lowercase letters, the grammar uses a regular expression [a-zA-Z]{4,10} to represent the string S. This regex ensures the string meets the length requirement and character type constraints without needing additional counter non-terminals, as the variable S itself is not a counter variable."}
{"name": "p03294 AtCoder Beginner Contest 103 - Modulo Summation", "description": "You are given N positive integers a_1, a_2, ..., a_N.\n\nFor a non-negative integer m, let f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) + ... + (m\\ mod\\ a_N).\n\nHere, X\\ mod\\ Y denotes the remainder of the division of X by Y.\n\nFind the maximum value of f.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 3000\n* 2 \\leq a_i \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=3000", "2<=a_i<=10^5"]}, "reason": "The grammar begins with the start symbol <S>. Here, 'N' is used as a counter variable for the array elements, thus it is denoted as [N] in the grammar to reflect its role as a counter. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p03304 SoundHound Inc. Programming Contest 2018 -Masters Tournament- - Ordinary Beauty", "description": "Let us define the beauty of a sequence (a_1,... ,a_n) as the number of pairs of two adjacent elements in it whose absolute differences are d. For example, when d=1, the beauty of the sequence (3, 2, 3, 10, 9) is 3.\n\nThere are a total of n^m sequences of length m where each element is an integer between 1 and n (inclusive). Find the beauty of each of these n^m sequences, and print the average of those values.\n\nConstraints\n\n* 0 \\leq d < n \\leq 10^9\n* 2 \\leq m \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn m d", "grammar": {"productions": ["<S>->n <s> m <s> d"], "constraints": ["0<=d<n<=10^9", "2<=m<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables n, m, and d are provided, but none of them serve as counter variables in this context. Therefore, they are represented directly as 'n', 'm', and 'd' without enclosing brackets. The input format consists of these three variables separated by spaces, leading to the grammar '<S>->n <s> m <s> d'. Since no counter variables are involved, no counter non-terminals like <T_i> or <L_i> are needed."}
{"name": "p03315 AtCoder Beginner Contest 101 - Eating Symbols Easy", "description": "There is always an integer in Takahashi's mind.\n\nInitially, the integer in Takahashi's mind is 0. Takahashi is now going to eat four symbols, each of which is `+` or `-`. When he eats `+`, the integer in his mind increases by 1; when he eats `-`, the integer in his mind decreases by 1.\n\nThe symbols Takahashi is going to eat are given to you as a string S. The i-th character in S is the i-th symbol for him to eat.\n\nFind the integer in Takahashi's mind after he eats all the symbols.\n\nConstraints\n\n* The length of S is 4.\n* Each character in S is `+` or `-`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[+-]{4}"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. The input is a string S of length 4, consisting of the characters '+' or '-'. Since the length is fixed and the characters are restricted to these two options, the grammar is represented using a regular expression [+-]{4}, which directly specifies the allowed characters and their exact count. Thus, the grammar is constructed as '<S>->[+-]{4}' to match the input format precisely."}
{"name": "p03318 AtCoder Beginner Contest 101 - Snuke Numbers", "description": "Let S(n) denote the sum of the digits in the decimal notation of n. For example, S(123) = 1 + 2 + 3 = 6.\n\nWe will call an integer n a Snuke number when, for all positive integers m such that m > n, \\frac{n}{S(n)} \\leq \\frac{m}{S(m)} holds.\n\nGiven an integer K, list the K smallest Snuke numbers.\n\nConstraints\n\n* 1 \\leq K\n* The K-th smallest Snuke number is not greater than 10^{15}.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["1<=K<=10^15"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, K, which is not used as a counter variable but as a single input. Therefore, it is represented simply as 'K' without brackets. The grammar is constructed as '<S>->K' to reflect the input format where only the integer K is provided."}
{"name": "p03323 AtCoder Beginner Contest 100 - Happy Birthday!", "description": "E869120's and square1001's 16-th birthday is coming soon.\nTakahashi from AtCoder Kingdom gave them a round cake cut into 16 equal fan-shaped pieces.\n\nE869120 and square1001 were just about to eat A and B of those pieces, respectively,\nwhen they found a note attached to the cake saying that \"the same person should not take two adjacent pieces of cake\".\n\nCan both of them obey the instruction in the note and take desired numbers of pieces of cake?\n\nConstraints\n\n* A and B are integers between 1 and 16 (inclusive).\n* A+B is at most 16.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=16", "1<=B<=16", "A+B<=16"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'A' and 'B', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space. Since neither 'A' nor 'B' serve as counter variables in this context, they are not enclosed in brackets."}
{"name": "p03326 AtCoder Beginner Contest 100 - Patisserie ABC", "description": "Takahashi became a pastry chef and opened a shop La Confiserie d'ABC to celebrate AtCoder Beginner Contest 100.\n\nThe shop sells N kinds of cakes.\nEach kind of cake has three parameters \"beauty\", \"tastiness\" and \"popularity\". The i-th kind of cake has the beauty of x_i, the tastiness of y_i and the popularity of z_i.\nThese values may be zero or negative.\n\nRingo has decided to have M pieces of cakes here. He will choose the set of cakes as follows:\n\n* Do not have two or more pieces of the same kind of cake.\n* Under the condition above, choose the set of cakes to maximize (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity).\n\n\n\nFind the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.\n\nConstraints\n\n* N is an integer between 1 and 1 \\ 000 (inclusive).\n* M is an integer between 0 and N (inclusive).\n* x_i, y_i, z_i \\ (1 \\leq i \\leq N) are integers between -10 \\ 000 \\ 000 \\ 000 and 10 \\ 000 \\ 000 \\ 000 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nx_1 y_1 z_1\nx_2 y_2 z_2\n:  :\nx_N y_N z_N", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <n> x_i <s> y_i <s> z_i", "<T_1>->x_1 <s> y_1 <s> z_1"], "constraints": ["1<=N<=1000", "0<=M<=N", "-10000000000<=x_i,y_i,z_i<=10000000000"]}, "reason": "The grammar starts with the initial non-terminal <S>. Here, 'N' is used as a counter variable for the number of cake entries, hence it is denoted as [N] in the grammar. The variable 'M' is not a counter, so it remains as 'M'. The grammar is initiated with '<S>->[N] <s> M <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each line consists of 'x_i', 'y_i', and 'z_i' separated by spaces. The grammar constructs are laid out as '<S>->[N] <s> M <n> <T_N>', '<T_i>-><T_i-1> <n> x_i <s> y_i <s> z_i', and '<T_1>->x_1 <s> y_1 <s> z_1' to systematically parse the sequence of cake entries following the count [N]."}
{"name": "p03328 AtCoder Beginner Contest 099 - Stone Monument", "description": "In some village, there are 999 towers that are 1,(1+2),(1+2+3),...,(1+2+3+...+999) meters high from west to east, at intervals of 1 meter.\n\nIt had been snowing for a while before it finally stopped. For some two adjacent towers located 1 meter apart, we measured the lengths of the parts of those towers that are not covered with snow, and the results are a meters for the west tower, and b meters for the east tower.\n\nAssuming that the depth of snow cover and the altitude are the same everywhere in the village, find the amount of the snow cover.\n\nAssume also that the depth of the snow cover is always at least 1 meter.\n\nConstraints\n\n* 1 \\leq a < b < 499500(=1+2+3+...+999)\n* All values in input are integers.\n* There is no input that contradicts the assumption.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na b", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<b<499500"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space. Neither 'a' nor 'b' serve as counter variables in this context, hence they are not enclosed in brackets."}
{"name": "p03331 AtCoder Grand Contest 025 - Digits Sum", "description": "Takahashi has two positive integers A and B.\n\nIt is known that A plus B equals N. Find the minimum possible value of \"the sum of the digits of A\" plus \"the sum of the digits of B\" (in base 10).\n\nConstraints\n\n* 2 ≤ N ≤ 10^5\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["2<=N<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is not used as a counter variable but simply represents an integer input, so it is not enclosed in brackets. The grammar is thus constructed as '<S>->N', reflecting the input format where 'N' is the only input provided."}
{"name": "p03341 AtCoder Regular Contest 098 - Attention", "description": "There are N people standing in a row from west to east. Each person is facing east or west. The directions of the people is given as a string S of length N. The i-th person from the west is facing east if S_i = `E`, and west if S_i = `W`.\n\nYou will appoint one of the N people as the leader, then command the rest of them to face in the direction of the leader. Here, we do not care which direction the leader is facing.\n\nThe people in the row hate to change their directions, so you would like to select the leader so that the number of people who have to change their directions is minimized. Find the minimum number of people who have to change their directions.\n\nConstraints\n\n* 2 \\leq N \\leq 3 \\times 10^5\n* |S| = N\n* S_i is `E` or `W`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->[N] <n> [EW]{N}"], "constraints": ["2<=N<=3*10^5"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, N, which serves as a counter variable for the length of the string S, hence it is enclosed in [N]. The string S consists of characters 'E' or 'W' and has a length equal to N, which is represented using the regular expression [EW]{N}. Thus, the grammar is constructed as '<S>->[N] <n> [EW]{N}' to reflect the input format where N is followed by a newline and a string of length N composed of 'E' and 'W' characters."}
{"name": "p03343 AtCoder Regular Contest 098 - Range Minimum Queries", "description": "Constraints\n\n* 1 <= N <= 2000\n* 1 <= K <= N\n* 1 <= Q <= N-K+1\n* 1 <= A_i <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K Q\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> [K] <s> [Q] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2000", "1<=K<=N", "1<=Q<=N-K+1", "1<=A_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables, N, K, and Q, where N and K serve as counter variables, hence they are enclosed in [N] and [K]. The grammar is structured as '<S>->[N] <s> [K] <s> [Q] <n> <T_N>', where <T_N> is a counter non-terminal for the sequence of A_i elements. The non-terminal <T_i> is defined to recursively generate the sequence of A_i elements separated by spaces, decrementing until it reaches <T_1>, which simply produces A_1. This setup accurately reflects the input format where N, K, and Q are given first, followed by a sequence of N integers."}
{"name": "p03360 AtCoder Beginner Contest 096 - Maximum Sum", "description": "There are three positive integers A, B and C written on a blackboard. E869120 performs the following operation K times:\n\n* Choose one integer written on the blackboard and let the chosen integer be n. Replace the chosen integer with 2n.\n\n\n\nWhat is the largest possible sum of the integers written on the blackboard after K operations?\n\nConstraints\n\n* A, B and C are integers between 1 and 50 (inclusive).\n* K is an integer between 1 and 10 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C\nK", "grammar": {"productions": ["<S>->A <s> B <s> C <n> K"], "constraints": ["1<=A<=50", "1<=B<=50", "1<=C<=50", "1<=K<=10"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes four variables: A, B, C, and K. Since none of these variables serve as counters (they are not used to control repetitions or sequences), they are represented directly without brackets. The input format is structured as three integers A, B, and C separated by spaces, followed by a newline and the integer K. Hence, the grammar is constructed as '<S>->A <s> B <s> C <n> K' to reflect this input structure."}
{"name": "p03362 AtCoder Beginner Contest 096 - Five  Five Everywhere", "description": "Print a sequence a_1, a_2, ..., a_N whose length is N that satisfies the following conditions:\n\n* a_i (1 \\leq i \\leq N) is a prime number at most 55 555.\n* The values of a_1, a_2, ..., a_N are all different.\n* In every choice of five different integers from a_1, a_2, ..., a_N, the sum of those integers is a composite number.\n\n\n\nIf there are multiple such sequences, printing any of them is accepted.\n\nConstraints\n\n* N is an integer between 5 and 55 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["5<=N<=55"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequence length, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N]', representing the input format where 'N' is the only input given. Since 'N' is a counter variable, it is denoted with brackets to reflect its role in the grammar."}
{"name": "p03385 AtCoder Beginner Contest 093 - abc of ABC", "description": "You are given a string S of length 3 consisting of `a`, `b` and `c`. Determine if S can be obtained by permuting `abc`.\n\nConstraints\n\n* |S|=3\n* S consists of `a`, `b` and `c`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[abc]{3}"], "constraints": []}, "reason": "The grammar begins with the starting non-terminal <S>. The input is a string S of length 3, consisting of characters 'a', 'b', and 'c'. Since the length is fixed and the characters are restricted to these three, the grammar is represented using a regular expression [abc]{3}, which matches any permutation of 'a', 'b', and 'c' of length 3. Thus, the grammar is constructed as '<S>->[abc]{3}' to reflect this input format."}
{"name": "p03407 AtCoder Beginner Contest 091 - Two Coins", "description": "An elementary school student Takahashi has come to a variety store.\n\nHe has two coins, A-yen and B-yen coins (yen is the currency of Japan), and wants to buy a toy that costs C yen. Can he buy it?\n\nNote that he lives in Takahashi Kingdom, and may have coins that do not exist in Japan.\n\nConstraints\n\n* All input values are integers.\n* 1 \\leq A, B \\leq 500\n* 1 \\leq C \\leq 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A<=500", "1<=B<=500", "1<=C<=1000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'A', 'B', and 'C', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B <s> C', representing the input format where 'A', 'B', and 'C' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets."}
{"name": "p03408 AtCoder Beginner Contest 091 - Two Colors Card Game", "description": "Takahashi has N blue cards and M red cards. A string is written on each card. The string written on the i-th blue card is s_i, and the string written on the i-th red card is t_i.\n\nTakahashi will now announce a string, and then check every card. Each time he finds a blue card with the string announced by him, he will earn 1 yen (the currency of Japan); each time he finds a red card with that string, he will lose 1 yen.\n\nHere, we only consider the case where the string announced by Takahashi and the string on the card are exactly the same. For example, if he announces `atcoder`, he will not earn money even if there are blue cards with `atcoderr`, `atcode`, `btcoder`, and so on. (On the other hand, he will not lose money even if there are red cards with such strings, either.)\n\nAt most how much can he earn on balance?\n\nNote that the same string may be written on multiple cards.\n\nConstraints\n\n* N and M are integers.\n* 1 \\leq N, M \\leq 100\n* s_1, s_2, ..., s_N, t_1, t_2, ..., t_M are all strings of lengths between 1 and 10 (inclusive) consisting of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\ns_1\ns_2\n:\ns_N\nM\nt_1\nt_2\n:\nt_M", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> [M] <n> <L_M>", "<T_i>-><T_i-1> <n> [a-z]{1,10}", "<T_1>->[a-z]{1,10}", "<L_i>-><L_i-1> <n> [a-z]{1,10}", "<L_1>->[a-z]{1,10}"], "constraints": ["1<=N<=100", "1<=M<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables N and M are used as counter variables for the sequences of strings on the blue and red cards, respectively, hence they are enclosed in brackets as [N] and [M]. The grammar is structured to first read N, followed by N strings (each on a new line), then M, followed by M strings (each on a new line). The strings are represented using a regular expression [a-z]{1,10} to denote lowercase English letters of lengths between 1 and 10. The counter non-terminals <T_i> and <L_i> are used to generate the sequences of strings for the blue and red cards, respectively, decrementing until they reach 1. The grammar ensures that each string is separated by a newline token <n>."}
{"name": "p03414 AtCoder Regular Contest 092 - Two Faced Edges", "description": "Constraints\n\n* 2 <= N <= 1000\n* 1 <= M <= 200,000\n* 1 <= a_i, b_i <= N\n* a_i != b_i\n* If i != j, then a_i != a_j or b_i != b_j.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\na_2 b_2\n:\na_M b_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=1000", "1<=M<=200000", "1<=a_i,b_i<=N", "a_i!=b_i"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, N and M, both serving as counter variables, hence they are enclosed in brackets as [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each line contains 'a_i' and 'b_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of pairs following the count [M]."}
{"name": "p03416 AtCoder Beginner Contest 090 - Palindromic Numbers", "description": "Find the number of palindromic numbers among the integers between A and B (inclusive). Here, a palindromic number is a positive integer whose string representation in base 10 (without leading zeros) reads the same forward and backward.\n\nConstraints\n\n* 10000 \\leq A \\leq B \\leq 99999\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["10000<=A<=B<=99999"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'A' and 'B', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space. Since neither 'A' nor 'B' serve as counter variables, they are not enclosed in brackets."}
{"name": "p03425 AtCoder Beginner Contest 089 - March", "description": "There are N people. The name of the i-th person is S_i.\n\nWe would like to choose three people so that the following conditions are met:\n\n* The name of every chosen person begins with `M`, `A`, `R`, `C` or `H`.\n* There are no multiple people whose names begin with the same letter.\n\n\n\nHow many such ways are there to choose three people, disregarding order?\n\nNote that the answer may not fit into a 32-bit integer type.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* S_i consists of uppercase English letters.\n* 1 \\leq |S_i| \\leq 10\n* S_i \\neq S_j (i \\neq j)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS_1\n:\nS_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> [A-Z]{1,10}", "<T_1>->[A-Z]{1,10}"], "constraints": ["1<=N<=10^5", "S_i!=S_j"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable for the number of people, hence it is enclosed in brackets as [N]. The grammar is initiated with '<S>->[N] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each 'S_i' represents a name consisting of uppercase English letters with a length between 1 and 10 characters, denoted by the regular expression [A-Z]{1,10}. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <n> [A-Z]{1,10}', and '<T_1>->[A-Z]{1,10}' to systematically parse the sequence of names following the count [N]."}
{"name": "p03435 AtCoder Beginner Contest 088 - Takahashi's Information", "description": "We have a 3 \\times 3 grid. A number c_{i, j} is written in the square (i, j), where (i, j) denotes the square at the i-th row from the top and the j-th column from the left.\nAccording to Takahashi, there are six integers a_1, a_2, a_3, b_1, b_2, b_3 whose values are fixed, and the number written in the square (i, j) is equal to a_i + b_j.\nDetermine if he is correct.\n\nConstraints\n\n* c_{i, j} \\ (1 \\leq i \\leq 3, 1 \\leq j \\leq 3) is an integer between 0 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nc_{1,1} c_{1,2} c_{1,3}\nc_{2,1} c_{2,2} c_{2,3}\nc_{3,1} c_{3,2} c_{3,3}", "grammar": {"productions": ["<S>->C <s> C <s> C <n> C <s> C <s> C <n> C <s> C <s> C"], "constraints": ["0<=C<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a 3x3 grid of integers, each represented by 'C'. Since the grid is fixed in size (3 rows and 3 columns), no counter variables are needed. Each 'C' is separated by a space <s>, and each row is separated by a newline <n>. The grammar is constructed as '<S>->C <s> C <s> C <n> C <s> C <s> C <n> C <s> C <s> C' to represent the grid structure. The constraint '0<=C<=100' is applied to each 'C' in the grid."}
{"name": "p03443 AtCoder Petrozavodsk Contest 001 - Colorful Doors", "description": "Constraints\n\n* 1 <= N <= 10^5\n* |s| = 2 N - 1\n* s consists of `0` and `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\ns", "grammar": {"productions": ["<S>->[N] <n> [0-1]{2*N-1}"], "constraints": ["1<=N<=10^5", "|s|=2*N-1"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, N, which serves as a counter variable and is enclosed in [N]. The input format specifies that after N, there is a newline <n> followed by a string s of length 2*N-1 consisting of '0' and '1'. Since the length of s is directly related to N, the string s is represented using the regular expression [0-1]{2*N-1}, which ensures the string is exactly 2*N-1 characters long and consists only of '0' and '1'. Thus, the grammar is constructed as '<S>->[N] <n> [0-1]{2*N-1}' to reflect this input structure."}
{"name": "p03447 AtCoder Beginner Contest 087 - Buying Sweets", "description": "You went shopping to buy cakes and donuts with X yen (the currency of Japan).\n\nFirst, you bought one cake for A yen at a cake shop. Then, you bought as many donuts as possible for B yen each, at a donut shop.\n\nHow much do you have left after shopping?\n\nConstraints\n\n* 1 \\leq A, B \\leq 1 000\n* A + B \\leq X \\leq 10 000\n* X, A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX\nA\nB", "grammar": {"productions": ["<S>->X <n> A <n> B"], "constraints": ["1<=A<=1000", "1<=B<=1000", "A+B<=X<=10000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'X', 'A', and 'B', each separated by a newline symbol denoted as <n>. The structure of the grammar is formulated as '<S>->X <n> A <n> B', representing the input format where 'X', 'A', and 'B' are integers each on a new line."}
{"name": "p03452 AtCoder Regular Contest 090 - People on a Line", "description": "Constraints\n\n* 1 <= N <= 100 000\n* 0 <= M <= 200 000\n* 1 <= L_i, R_i <= N (1 <= i <= M)\n* 0 <= D_i <= 10 000 (1 <= i <= M)\n* L_i != R_i (1 <= i <= M)\n* If i != j, then (L_i, R_i) != (L_j, R_j) and (L_i, R_i) != (R_j, L_j).\n* D_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nL_1 R_1 D_1\nL_2 R_2 D_2\n:\nL_M R_M D_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> L_i <s> R_i <s> D_i", "<T_1>->L_i <s> R_i <s> D_i"], "constraints": ["1<=N<=100000", "0<=M<=200000", "1<=L_i<=N", "1<=R_i<=N", "L_i!=R_i", "0<=D_i<=10000"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, both serving as counter variables, hence they are enclosed in [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each line consists of L_i, R_i, and D_i separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> L_i <s> R_i <s> D_i' and '<T_1>->L_i <s> R_i <s> D_i' to systematically parse the sequence of lines following the count [M]."}
{"name": "p03455 AtCoder Beginner Contest 086 - Product", "description": "AtCoDeer the deer found two positive integers, a and b. Determine whether the product of a and b is even or odd.\n\nConstraints\n\n* 1 ≤ a,b ≤ 10000\n* a and b are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na b", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=10000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'a' and 'b', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b', representing the input format where 'a' and 'b' are two integers separated by a space."}
{"name": "p03457 AtCoder Beginner Contest 086 - Traveling", "description": "AtCoDeer the deer is going on a trip in a two-dimensional plane. In his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\n\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1). Note that he cannot stay at his place. Determine whether he can carry out his plan.\n\nConstraints\n\n* 1 ≤ N ≤ 10^5\n* 0 ≤ x_i ≤ 10^5\n* 0 ≤ y_i ≤ 10^5\n* 1 ≤ t_i ≤ 10^5\n* t_i < t_{i+1} (1 ≤ i ≤ N-1)\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nt_1 x_1 y_1\nt_2 x_2 y_2\n:\nt_N x_N y_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> t_i <s> x_i <s> y_i", "<T_1>->t_1 <s> x_1 <s> y_1"], "constraints": ["1<=N<=10^5", "0<=x_i<=10^5", "0<=y_i<=10^5", "1<=t_i<=10^5", "t_i<=t_i+1"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of inputs, hence it is enclosed in brackets as [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter non-terminal for [N]. Each line in the input consists of three variables: t_i, x_i, and y_i, separated by spaces. The grammar rules '<T_i>-><T_i-1> <n> t_i <s> x_i <s> y_i' and '<T_1>->t_1 <s> x_1 <s> y_1' are used to parse each line of the input, ensuring the correct format and sequence of values."}
{"name": "p03469 AtCoder Beginner Contest 085 - Already 2018", "description": "On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in `yyyy/mm/dd` format. For example, January 23, 2018 should be written as `2018/01/23`.\n\nAfter finishing the document, she noticed that she had mistakenly wrote `2017` at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to `2018` and prints it.\n\nConstraints\n\n* S is a string of length 10.\n* The first eight characters in S are `2017/01/`.\n* The last two characters in S are digits and represent an integer between 1 and 31 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->2017/01/ S"], "constraints": ["1<=S<=31"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input string S is fixed in format with the first eight characters as '2017/01/' followed by two digits representing the day. Since the day part is variable and must be between 1 and 31, it is represented directly in the grammar as '2017/01/' followed by the variable part S. The grammar is constructed as '<S>->2017/01/ S' to reflect this structure, where S is constrained to be a two-digit number between 1 and 31."}
{"name": "p03471 AtCoder Beginner Contest 085 - Otoshidama", "description": "The commonly used bills in Japan are 10000-yen, 5000-yen and 1000-yen bills. Below, the word \"bill\" refers to only these.\n\nAccording to Aohashi, he received an otoshidama (New Year money gift) envelope from his grandfather that contained N bills for a total of Y yen, but he may be lying. Determine whether such a situation is possible, and if it is, find a possible set of bills contained in the envelope. Assume that his grandfather is rich enough, and the envelope was large enough.\n\nConstraints\n\n* 1 ≤ N ≤ 2000\n* 1000 ≤ Y ≤ 2 × 10^7\n* N is an integer.\n* Y is a multiple of 1000.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Y", "grammar": {"productions": ["<S>->N <s> Y"], "constraints": ["1<=N<=2000", "1000<=Y<=2*10^7"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes two variables, N and Y, which are not used as counters but represent the number of bills and the total yen amount, respectively. Since neither N nor Y serves as a counter variable, they are not enclosed in brackets. The input format is straightforward, with N and Y separated by a space, represented as '<S>->N <s> Y'."}
{"name": "p03474 AtCoder Beginner Contest 084 - Postal Code", "description": "Constraints\n\n* 1<=A,B<=5\n* |S|=A+B+1\n* S consists of `-` and digits from `0` through `9`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B\nS", "grammar": {"productions": ["<S>->[A] <s> [B] <n> [0-9-]{1,A+B+1}"], "constraints": ["1<=A<=5", "1<=B<=5"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, A and B, both serving as counter variables, hence they are enclosed in brackets as [A] and [B]. The grammar is structured as '<S>->[A] <s> [B] <n> [0-9-]{1,A+B+1}', where [0-9-]{1,A+B+1} is a regex expression representing the string S, which consists of digits and hyphens with a length of A+B+1. The regex ensures the string meets the specified constraints of containing only digits and hyphens, with the exact length derived from the sum of A and B plus one."}
{"name": "p03477 AtCoder Beginner Contest 083 - Libra", "description": "A balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\n\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\n\nPrint `Left` if the balance scale tips to the left; print `Balanced` if it balances; print `Right` if it tips to the right.\n\nConstraints\n\n* 1\\leq A,B,C,D \\leq 10\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C D", "grammar": {"productions": ["<S>->A <s> B <s> C <s> D"], "constraints": ["1<=A<=10", "1<=B<=10", "1<=C<=10", "1<=D<=10"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines four variables, 'A', 'B', 'C', and 'D', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B <s> C <s> D', representing the input format where 'A', 'B', 'C', and 'D' are four integers separated by spaces. None of these variables serve as counters, so they are not enclosed in brackets."}
{"name": "p03479 AtCoder Beginner Contest 083 - Multiple Gift", "description": "As a token of his gratitude, Takahashi has decided to give his mother an integer sequence. The sequence A needs to satisfy the conditions below:\n\n* A consists of integers between X and Y (inclusive).\n* For each 1\\leq i \\leq |A|-1, A_{i+1} is a multiple of A_i and strictly greater than A_i.\n\n\n\nFind the maximum possible length of the sequence.\n\nConstraints\n\n* 1 \\leq X \\leq Y \\leq 10^{18}\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->X <s> Y"], "constraints": ["1<=X<=Y<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, X and Y, which are not counter variables, hence they are not enclosed in brackets. The input format requires X and Y to be separated by a space, represented by <s>. Therefore, the grammar is constructed as '<S>->X <s> Y' to reflect the input structure where X and Y are two integers separated by a space."}
{"name": "p03480 AtCoder Beginner Contest 083 - Wide Flip", "description": "You are given a string S consisting of `0` and `1`. Find the maximum integer K not greater than |S| such that we can turn all the characters of S into `0` by repeating the following operation some number of times.\n\n* Choose a contiguous segment [l,r] in S whose length is at least K (that is, r-l+1\\geq K must be satisfied). For each integer i such that l\\leq i\\leq r, do the following: if S_i is `0`, replace it with `1`; if S_i is `1`, replace it with `0`.\n\nConstraints\n\n* 1\\leq |S|\\leq 10^5\n* S_i(1\\leq i\\leq N) is either `0` or `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[01]{1,10^5}"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a string S composed of '0' and '1' characters, with a length constraint of 1 to 10^5. Since the entire string S is to be represented and its length is variable, the grammar uses a regular expression [01]{1,10^5} to denote a sequence of '0's and '1's with a length ranging from 1 to 100,000. This approach efficiently captures the input format without the need for counter variables, as the string's composition and length are directly specified by the regex."}
{"name": "p03494 AtCoder Beginner Contest 081 - Shift only", "description": "There are N positive integers written on a blackboard: A_1, ..., A_N.\n\nSnuke can perform the following operation when all integers on the blackboard are even:\n\n* Replace each integer X on the blackboard by X divided by 2.\n\n\n\nFind the maximum possible number of operations that Snuke can perform.\n\nConstraints\n\n* 1 \\leq N \\leq 200\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=200", "1<=A_i<=10^9"]}, "reason": "The grammar construction starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of integers, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates the sequence of integers A_i separated by spaces. The counter non-terminal <T_i> is defined to decrement until it reaches 1, producing the sequence 'A_1 A_2 ... A_N' with each element separated by a space token <s>. The constraints ensure that 'N' and each 'A_i' are within their specified ranges."}
{"name": "p03502 AtCoder Beginner Contest 080 - Harshad Number", "description": "An integer X is called a Harshad number if X is divisible by f(X), where f(X) is the sum of the digits in X when written in base 10.\n\nGiven an integer N, determine whether it is a Harshad number.\n\nConstraints\n\n* 1?N?10^8\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^8"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is not used as a counter variable but simply represents an integer input. Therefore, it is not enclosed in brackets and is directly represented as 'N' in the grammar. The grammar is constructed as '<S>->N' to reflect the input format where 'N' is the only input provided."}
{"name": "p03523 CODE FESTIVAL 2017 Final - AKIBA", "description": "You are given a string S.\n\nTakahashi can insert the character `A` at any position in this string any number of times.\n\nCan he change S into `AKIHABARA`?\n\nConstraints\n\n* 1 \\leq |S| \\leq 50\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[A-Z]{1,50}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a string S, which is represented using a regular expression [A-Z]{1,50} to denote that it can contain uppercase English letters with a length between 1 and 50 characters. Since there are no counter variables involved, the grammar is simply defined as '<S>->[A-Z]{1,50}'."}
{"name": "p03534 CODE FESTIVAL 2017 Final (Parallel) - Palindrome-phobia", "description": "Constraints\n\n* 1 <= |S| <= 10^5\n* S consists of `a`, `b` and `c`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[abc]{1,10^5}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The input consists of a string S, which can include characters 'a', 'b', or 'c' and has a length between 1 and 10^5. Since the variable S is not a counter but a string of variable length, it is represented using a regular expression [abc]{1,10^5} to specify the allowed characters and length range. Thus, the grammar is constructed as '<S>->[abc]{1,10^5}' to directly capture the input format."}
{"name": "p03547 AtCoder Beginner Contest 078 - HEX", "description": "In programming, hexadecimal notation is often used.\n\nIn hexadecimal notation, besides the ten digits 0, 1, ..., 9, the six letters `A`, `B`, `C`, `D`, `E` and `F` are used to represent the values 10, 11, 12, 13, 14 and 15, respectively.\n\nIn this problem, you are given two letters X and Y. Each X and Y is `A`, `B`, `C`, `D`, `E` or `F`.\n\nWhen X and Y are seen as hexadecimal numbers, which is larger?\n\nConstraints\n\n* Each X and Y is `A`, `B`, `C`, `D`, `E` or `F`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->[A-F]{1} <s> [A-F]{1}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of two variables, X and Y, each of which is a single character from the set 'A' to 'F'. Since these variables are not counters but are constrained to specific characters, they are represented using the regular expression [A-F]{1}, which matches exactly one character from 'A' to 'F'. The grammar is structured as '<S>->[A-F]{1} <s> [A-F]{1}', indicating two hexadecimal characters separated by a space."}
{"name": "p03556 AtCoder Beginner Contest 077 - Around Square", "description": "Find the largest square number not exceeding N. Here, a square number is an integer that can be represented as the square of an integer.\n\nConstraints\n\n* 1 \\leq N \\leq 10^9\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is not used as a counter variable, hence it is represented simply as 'N'. The grammar is constructed as '<S>->N' to reflect the input format where 'N' is the only input provided."}
{"name": "p03558 AtCoder Beginner Contest 077 - Small Multiple", "description": "Find the smallest possible sum of the digits in the decimal notation of a positive multiple of K.\n\nConstraints\n\n* 2 \\leq K \\leq 10^5\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["2<=K<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'K' is given as input, but it does not serve as a counter variable, so it is represented simply as 'K' without brackets. The grammar is constructed as '<S>->K' to reflect the input format where only 'K' is provided."}
{"name": "p03565 AtCoder Beginner Contest 076 - Dubious Document 2", "description": "E869120 found a chest which is likely to contain treasure.\nHowever, the chest is locked. In order to open it, he needs to enter a string S consisting of lowercase English letters.\nHe also found a string S', which turns out to be the string S with some of its letters (possibly all or none) replaced with `?`.\n\nOne more thing he found is a sheet of paper with the following facts written on it:\n\n* Condition 1: The string S contains a string T as a contiguous substring.\n* Condition 2: S is the lexicographically smallest string among the ones that satisfy Condition 1.\n\n\n\nPrint the string S.\nIf such a string does not exist, print `UNRESTORABLE`.\n\nConstraints\n\n* 1 \\leq |S'|, |T| \\leq 50\n* S' consists of lowercase English letters and `?`.\n* T consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT'", "grammar": {"productions": ["<S>->[a-z?]{1,50} <n> [a-z]{1,50}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of two lines: the first line is a string S' which can include lowercase English letters and '?', and the second line is a string T consisting of lowercase English letters. Since both S' and T have length constraints (1 to 50 characters), they are represented using regular expressions [a-z?]{1,50} and [a-z]{1,50} respectively. The grammar is structured as '<S>->[a-z?]{1,50} <n> [a-z]{1,50}' to reflect the input format where the two strings are separated by a newline token <n>."}
{"name": "p03570 CODE FESTIVAL 2017 qual C - Yet Another Palindrome Partitioning", "description": "Constraints\n\n* 1 <= |s| <= 2 * 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->[a-z]{1,200000}"], "constraints": [""]}, "reason": "The grammar begins with the starting non-terminal <S>. The variable 's' is a string of lowercase English letters with a length between 1 and 200,000 characters. Since the length of 's' is variable and specified by the constraints, it is represented using a regular expression [a-z]{1,200000} to cover all possible valid strings within the given length range. Thus, the grammar is constructed as '<S>->[a-z]{1,200000}' to directly parse the input string 's'."}
{"name": "p03574 AtCoder Beginner Contest 075 - Minesweeper", "description": "Constraints\n\n* 1 <= H,W <= 50\n* S_i is a string of length W consisting of `#` and `.`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nS_1\n:\nS_H", "grammar": {"productions": ["<S>->[H] <s> [W] <n> <T_H>", "<T_i>-><T_i-1> <n> [.#]{W}", "<T_1>->[.#]{W}"], "constraints": ["1<=H,W<=50"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, H and W, both serving as counter variables, hence they are enclosed in [H] and [W]. The grammar is initiated with '<S>->[H] <s> [W] <n> <T_H>'. The non-terminal <T_i> is a counter-driven rule for [H], where each line consists of a string of length W made up of '#' and '.' characters, represented by the regular expression [.#]{W}. The grammar constructs are laid out as '<S>->[H] <s> [W] <n> <T_H>', '<T_i>-><T_i-1> <n> [.#]{W}', and '<T_1>->[.#]{W}' to systematically parse each line of the input following the count [H]."}
{"name": "p03603 AtCoder Regular Contest 083 - Bichrome Tree", "description": "Constraints\n\n* 1 <= N <= 1 000\n* 1 <= P_i <= i - 1\n* 0 <= X_i <= 5 000\n\nInputs\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_2 P_3 ... P_N\nX_1 X_2 ... X_N\n\n\nOutputs\n\nIf it is possible to allocate colors and weights to the vertices so that the condition is satisfied, print `POSSIBLE`; otherwise, print `IMPOSSIBLE`.\n\nExamples\n\nInput\n\n3\n1 1\n4 3 2", "grammar": {"productions": ["<S>->[N] <n> <T_N-1> <n> <L_N>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1", "<L_i>-><L_i-1> <s> X_i", "<L_1>->X_1"], "constraints": ["1<=N<=1000", "1<=P_i<=N", "0<=X_i<=5000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' serves as a counter variable for the sequences 'P_2 P_3 ... P_N' and 'X_1 X_2 ... X_N', hence it is enclosed in [N]. The grammar is structured as '<S>->[N] <n> <T_N-1> <n> <L_N>', where <T_i> and <L_i> are counter non-terminals for the sequences of 'P_i' and 'X_i' respectively. The sequences are separated by spaces <s> and newlines <n>. The counter non-terminals decrement until they reach 1, ensuring the correct number of elements in each sequence. The constraints reflect the ranges for 'N', 'P_i', and 'X_i'."}
{"name": "p03612 AtCoder Beginner Contest 072 - Derangement", "description": "Constraints\n\n* 2<=N<=10^5\n* p_1,p_2,..,p_N is a permutation of 1,2,..,N.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\np_1 p_2 .. p_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_i"], "constraints": ["2<=N<=10^5", "1<=p_i<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of permutations, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter non-terminal for [N], representing the sequence of permutation elements 'p_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> p_i' and '<T_1>->p_i' to systematically parse the sequence of permutation elements following the count [N]."}
{"name": "p03630 AtCoder Regular Contest 081 - Flip and Rectangles", "description": "Constraints\n\n* 2 <= H <= 2000\n* 2 <= W <= 2000\n* |S_i| = W\n* S_i consists of `#` and `.`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nS_1\nS_2\n:\nS_H", "grammar": {"productions": ["<S>->[H] <s> [W] <n> <T_H>", "<T_i>-><T_i-1> <n> [#.]{W}", "<T_1>->[#.]{W}"], "constraints": ["2<=H<=2000", "2<=W<=2000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, H and W, both serving as counter variables, hence they are enclosed in brackets as [H] and [W]. The grammar is initiated with '<S>->[H] <s> [W] <n> <T_H>', where <T_H> is a counter non-terminal for [H]. Each line S_i is represented by a regular expression [#.]{W}, indicating a string of length W composed of '#' and '.' characters. The grammar rules '<T_i>-><T_i-1> <n> [#.]{W}' and '<T_1>->[#.]{W}' ensure the correct parsing of H lines, each containing W characters of '#' or '.'."}
{"name": "p03631 AtCoder Beginner Contest 070 - Palindromic Number", "description": "You are given a three-digit positive integer N.\nDetermine whether N is a palindromic number.\nHere, a palindromic number is an integer that reads the same backward as forward in decimal notation.\n\nConstraints\n\n* 100≤N≤999\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["100<=N<=999"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is a three-digit integer, but it does not serve as a counter variable in this context, so it is not enclosed in brackets. The grammar is simply constructed as '<S>->N', representing the input format where 'N' is a single three-digit integer. The constraints specify that 'N' must be between 100 and 999, inclusive."}
{"name": "p03657 AtCoder Beginner Contest 067 - Sharing Cookies", "description": "Snuke is giving cookies to his three goats.\n\nHe has two cookie tins. One contains A cookies, and the other contains B cookies. He can thus give A cookies, B cookies or A+B cookies to his goats (he cannot open the tins).\n\nYour task is to determine whether Snuke can give cookies to his three goats so that each of them can have the same number of cookies.\n\nConstraints\n\n* 1 \\leq A,B \\leq 100\n* Both A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=100", "1<=B<=100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'A' and 'B', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space. Since neither 'A' nor 'B' serve as counter variables in this context, they are not enclosed in brackets."}
{"name": "p03664 AtCoder Regular Contest 078 - Mole and Abandoned Mine", "description": "Constraints\n\n* 2 <= N <= 15\n* N-1 <= M <= N(N-1)/2\n* 1 <= a_i, b_i <= N\n* 1 <= c_i <= 10^{6}\n* There are neither multiple edges nor self-loops in the given graph.\n* The given graph is connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 b_1 c_1\n:\na_M b_M c_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["2<=N<=15", "N-1<=M<=(N*(N-1))/2", "1<=a_i,b_i<=N", "1<=c_i<=10^6"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, which serve as counter variables, hence they are enclosed in [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each line consists of three elements: a_i, b_i, and c_i, separated by spaces <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i' and '<T_1>->a_1 <s> b_1 <s> c_1' to systematically parse the sequence of lines following the count [M]."}
{"name": "p03674 AtCoder Beginner Contest 066 - 11", "description": "You are given an integer sequence of length n+1, a_1,a_2,...,a_{n+1}, which consists of the n integers 1,...,n. It is known that each of the n integers 1,...,n appears at least once in this sequence.\n\nFor each integer k=1,...,n+1, find the number of the different subsequences (not necessarily contiguous) of the given sequence with length k, modulo 10^9+7.\n\nConstraints\n\n* 1 \\leq n \\leq 10^5\n* 1 \\leq a_i \\leq n\n* Each of the integers 1,...,n appears in the sequence.\n* n and a_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\na_1 a_2 ... a_{n+1}", "grammar": {"productions": ["<S>->[n] <n> <T_n+1>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "1<=a_i<=n"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'n' serves as a counter variable for the sequence length, hence it is enclosed in [n]. The grammar is initiated with '<S>->[n] <n> <T_n+1>', where <T_i> is a counter non-terminal for the sequence elements. The sequence elements 'a_i' are separated by a space symbol <s>, leading to the rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to parse the sequence of 'n+1' elements."}
{"name": "p03693 AtCoder Beginner Contest 064 - RGB Cards", "description": "AtCoDeer has three cards, one red, one green and one blue.\nAn integer between 1 and 9 (inclusive) is written on each card: r on the red card, g on the green card and b on the blue card.\nWe will arrange the cards in the order red, green and blue from left to right, and read them as a three-digit integer.\nIs this integer a multiple of 4?\n\nConstraints\n\n* 1 ≤ r, g, b ≤ 9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nr g b", "grammar": {"productions": ["<S>->r <s> g <s> b"], "constraints": ["1<=r,g,b<=9"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'r', 'g', and 'b', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->r <s> g <s> b', representing the input format where 'r', 'g', and 'b' are three integers separated by spaces. None of these variables serve as counters, hence they are not enclosed in brackets."}
{"name": "p03696 AtCoder Beginner Contest 064 - Insertion", "description": "You are given a string S of length N consisting of `(` and `)`. Your task is to insert some number of `(` and `)` into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:\n\n* `()` is a correct bracket sequence.\n* If X is a correct bracket sequence, the concatenation of `(`, X and `)` in this order is also a correct bracket sequence.\n* If X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\n* Every correct bracket sequence can be derived from the rules above.\n\n\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.\n\nConstraints\n\n* The length of S is N.\n* 1 ≤ N ≤ 100\n* S consists of `(` and `)`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->[N] <n> [()]{N}"], "constraints": ["1<=N<=100"]}, "reason": "The grammar begins with the starting non-terminal <S>. It includes one variable, N, which serves as a counter variable for the length of the string S, hence it is enclosed in [N]. The string S consists of characters '(' and ')' and has a length of N, so it is represented using the regular expression [()]{N}. The grammar is constructed to reflect the input format where the first line contains [N] followed by a newline <n>, and the second line contains the string S of length N. Thus, the grammar is formulated as '<S>->[N] <n> [()]{N}'."}
{"name": "p03719 AtCoder Beginner Contest 061 - Between Two Integers", "description": "You are given three integers A, B and C. Determine whether C is not less than A and not greater than B.\n\nConstraints\n\n* -100≤A,B,C≤100\n* A, B and C are all integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["-100<=A<=100", "-100<=B<=100", "-100<=C<=100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'A', 'B', and 'C', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B <s> C', representing the input format where 'A', 'B', and 'C' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets."}
{"name": "p03729 AtCoder Beginner Contest 060 - Shiritori", "description": "Constraints\n\n* A, B and C are all composed of lowercase English letters (`a` - `z`).\n* 1 <= |A|, |B|, |C| <= 10, where |A|, |B| and |C| are the lengths of A, B and C, respectively.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->[a-z]{1,10} <s> [a-z]{1,10} <s> [a-z]{1,10}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of three strings A, B, and C, each composed of lowercase English letters with lengths between 1 and 10. Since the lengths of A, B, and C are not used as counters, they are not enclosed in brackets. Instead, each string is directly represented using a regular expression [a-z]{1,10} to specify the allowed characters and length range. The grammar is structured as '<S>->[a-z]{1,10} <s> [a-z]{1,10} <s> [a-z]{1,10}', where <s> denotes a space separating the three strings."}
{"name": "p03730 AtCoder Beginner Contest 060 - Choose Integers", "description": "We ask you to select some number of positive integers, and calculate the sum of them.\n\nIt is allowed to select as many integers as you like, and as large integers as you wish. You have to follow these, however: each selected integer needs to be a multiple of A, and you need to select at least one integer.\n\nYour objective is to make the sum congruent to C modulo B. Determine whether this is possible.\n\nIf the objective is achievable, print `YES`. Otherwise, print `NO`.\n\nConstraints\n\n* 1 ≤ A ≤ 100\n* 1 ≤ B ≤ 100\n* 0 ≤ C < B\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A<=100", "1<=B<=100", "0<=C<B"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables A, B, and C, none of which serve as counter variables, hence they are not enclosed in brackets. The input format requires these variables to be separated by spaces, represented by <s>. Thus, the grammar is structured as '<S>->A <s> B <s> C', which directly reflects the input format where A, B, and C are given in a single line separated by spaces."}
{"name": "p03752 square869120Contest #4 - Buildings are Colorful!", "description": "Input Format\n\n\nN K\na_1 a_2 a_3 ... a_N\n\n\nOutput Format\n\nPrint the minimum cost in one line. In the end put a line break.\n\n\nConstraints\n\n* 1 ≤ K ≤ N ≤ 15\n* 1 ≤ a_i ≤ 10^9\n\n\n\nScoring\n\nSubtask 1 [120 points]\n\n\n* N = K\n\nSubtask 2 [90 points]\n\n\n* N ≤ 5\n* a_i ≤ 7\n\nSubtask 3 [140 points]\n\n\n* There are no additional constraints.\n\nOutput Format\n\nPrint the minimum cost in one line. In the end put a line break.\n\n\nConstraints\n\n* 1 ≤ K ≤ N ≤ 15\n* 1 ≤ a_i ≤ 10^9\n\n\n\nScoring\n\nSubtask 1 [120 points]\n\n\n* N = K\n\nSubtask 2 [90 points]\n\n\n* N ≤ 5\n* a_i ≤ 7\n\nSubtask 3 [140 points]\n\n\n* There are no additional constraints.\n\nInput Format\n\n\nN K\na_1 a_2 a_3 ... a_N\n\nExample\n\nInput\n\n5 5\n3949 3774 3598 3469 3424", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=K<=15", "1<=N<=15", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable for the sequence of elements, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'a_i' represents each element in the sequence separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of elements following the count [N]."}
{"name": "p03762 AtCoder Beginner Contest 058 - ###", "description": "Constraints\n\n* 2 <= n,m <= 10^5\n* -10^9 <= x_1 < ... < x_n <= 10^9\n* -10^9 <= y_1 < ... < y_m <= 10^9\n* x_i and y_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn m\nx_1 x_2 ... x_n\ny_1 y_2 ... y_m", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1", "<L_i>-><L_i-1> <s> y_i", "<L_1>->y_1"], "constraints": ["2<=n<=10^5", "2<=m<=10^5", "-10^9<=x_i<=10^9", "-10^9<=y_i<=10^9"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'n' and 'm', both serving as counter variables, hence they are enclosed in brackets as [n] and [m]. The grammar is initiated with '<S>->[n] <s> [m] <n> <T_n> <n> <L_m>'. The non-terminal <T_i> is a counter-driven rule for [n], where 'x_i' represents each element separated by a space symbol <s>. Similarly, <L_i> is a counter-driven rule for [m], where 'y_i' represents each element separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> x_i', '<T_1>->x_1', '<L_i>-><L_i-1> <s> y_i', and '<L_1>->y_1' to systematically parse the sequences of 'x_i' and 'y_i' following the counts [n] and [m] respectively."}
{"name": "p03773 AtCoder Beginner Contest 057 - Remaining Time", "description": "Dolphin loves programming contests. Today, he will take part in a contest in AtCoder.\nIn this country, 24-hour clock is used. For example, 9:00 p.m. is referred to as \"21 o'clock\".\nThe current time is A o'clock, and a contest will begin in exactly B hours. When will the contest begin? Answer in 24-hour time.\n\nConstraints\n\n* 0 \\leq A,B \\leq 23\n* A and B are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["0<=A<=23", "0<=B<=23"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'A' and 'B', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space. Neither 'A' nor 'B' serves as a counter variable, so they are not enclosed in brackets."}
{"name": "p03774 AtCoder Beginner Contest 057 - Checkpoints", "description": "There are N students and M checkpoints on the xy-plane.\nThe coordinates of the i-th student (1 \\leq i \\leq N) is (a_i,b_i), and the coordinates of the checkpoint numbered j (1 \\leq j \\leq M) is (c_j,d_j).\nWhen the teacher gives a signal, each student has to go to the nearest checkpoint measured in Manhattan distance.\nThe Manhattan distance between two points (x_1,y_1) and (x_2,y_2) is |x_1-x_2|+|y_1-y_2|.\nHere, |x| denotes the absolute value of x.\nIf there are multiple nearest checkpoints for a student, he/she will select the checkpoint with the smallest index.\nWhich checkpoint will each student go to?\n\nConstraints\n\n* 1 \\leq N,M \\leq 50\n* -10^8 \\leq a_i,b_i,c_j,d_j \\leq 10^8\n* All input values are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\n:\na_N b_N\nc_1 d_1\n:\nc_M d_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1", "<L_i>-><L_i-1> <n> c_i <s> d_i", "<L_1>->c_1 <s> d_1"], "constraints": ["1<=N<=50", "1<=M<=50", "-10^8<=a_i<=10^8", "-10^8<=b_i<=10^8", "-10^8<=c_i<=10^8", "-10^8<=d_i<=10^8"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, N and M, both serving as counter variables, hence they are enclosed in brackets as [N] and [M]. The grammar is structured to first read N and M separated by a space and followed by a newline. Then, it processes N lines of student coordinates (a_i, b_i) using the counter non-terminal <T_N>, and M lines of checkpoint coordinates (c_i, d_i) using the counter non-terminal <L_M>. Each line of coordinates is separated by a newline. The grammar rules are designed to systematically parse the sequence of student and checkpoint coordinates following the counts [N] and [M] respectively."}
{"name": "p03776 AtCoder Beginner Contest 057 - Maximum Average Sets", "description": "You are given N items.\nThe value of the i-th item (1 \\leq i \\leq N) is v_i.\nYour have to select at least A and at most B of these items.\nUnder this condition, find the maximum possible arithmetic mean of the values of selected items.\nAdditionally, find the number of ways to select items so that the mean of the values of selected items is maximized.\n\nConstraints\n\n* 1 \\leq N \\leq 50\n* 1 \\leq A,B \\leq N\n* 1 \\leq v_i \\leq 10^{15}\n* Each v_i is an integer.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN A B\nv_1\nv_2\n...\nv_N", "grammar": {"productions": ["<S>->[N] <s> A <s> B <n> <T_N>", "<T_i>-><T_i-1> <s> v_i", "<T_1>->v_1"], "constraints": ["1<=N<=50", "1<=A,B<=N", "1<=v_i<=10^15"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes three variables: N, A, and B. Among these, N serves as a counter variable for the sequence of items, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> A <s> B <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each 'v_i' represents an item value separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> v_i' and '<T_1>->v_1' to systematically parse the sequence of item values following the count [N]."}
{"name": "p03780 AtCoder Beginner Contest 056 - No Need", "description": "AtCoDeer the deer has N cards with positive integers written on them. The number on the i-th card (1≤i≤N) is a_i. Because he loves big numbers, he calls a subset of the cards good when the sum of the numbers written on the cards in the subset, is K or greater.\n\nThen, for each card i, he judges whether it is unnecessary or not, as follows:\n\n* If, for any good subset of the cards containing card i, the set that can be obtained by eliminating card i from the subset is also good, card i is unnecessary.\n* Otherwise, card i is NOT unnecessary.\n\n\n\nFind the number of the unnecessary cards. Here, he judges each card independently, and he does not throw away cards that turn out to be unnecessary.\n\nConstraints\n\n* All input values are integers.\n* 1≤N≤5000\n* 1≤K≤5000\n* 1≤a_i≤10^9 (1≤i≤N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN K\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=5000", "1<=K<=5000", "1<=a_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'N' and 'K', where 'N' serves as a counter variable for the array elements, hence it is denoted as [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'a_i' represents each array element separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> K <n> <T_N>', '<T_i>-><T_i-1> <s> a_i', and '<T_1>->a_1' to systematically parse the sequence of array elements following the count [N]."}
{"name": "p03788 AtCoder Grand Contest 011 - Half Reflector", "description": "Constraints\n\n* 1 <= N <= 200,000\n* 1 <= K <= 10^9\n* |S|=N\n* Each character in S is either `A` or `B`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN K\nS", "grammar": {"productions": ["<S>->[N] <s> K <n> [AB]{N}"], "constraints": ["1<=N<=200000", "1<=K<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and K, where N serves as a counter variable for the length of the string S, hence it is enclosed in [N]. The variable K is not a counter, so it remains as K. The string S is composed of characters 'A' or 'B' and has a length of N, which is represented by the regular expression [AB]{N}. The grammar is structured as '<S>->[N] <s> K <n> [AB]{N}' to reflect the input format where N and K are given on the first line, followed by the string S on the next line."}
{"name": "p03794 Mujin Programming Challenge 2017 - Oriented Tree", "description": "Constraints\n\n* 2 <= N <= 1000\n* 1 <= a_i,\\ b_i <= N\n* The given graph is a tree.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\na_1 b_1\na_2 b_2\n:\na_{N - 1} b_{N - 1}", "grammar": {"productions": ["<S>->[N] <n> <T_N-1>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=1000", "1<=a_i<=N", "1<=b_i<=N"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter for the number of edges in the tree, hence it is enclosed in brackets as [N]. The grammar is structured to first output [N] followed by a newline <n>, then a sequence of edges represented by the counter non-terminal <T_N-1>. Each edge consists of two integers 'a_i' and 'b_i' separated by a space <s>, and each edge is separated by a newline <n>. The counter non-terminal <T_i> is defined to recursively produce each edge until it reaches the base case <T_1>, which outputs the first edge 'a_1 <s> b_1'. This structure ensures the input format matches the specified sequence of edges following the initial count [N]."}
{"name": "p03798 AtCoder Beginner Contest 055 - Menagerie", "description": "Snuke, who loves animals, built a zoo.\n\nThere are N animals in this zoo. They are conveniently numbered 1 through N, and arranged in a circle. The animal numbered i (2≤i≤N-1) is adjacent to the animals numbered i-1 and i+1. Also, the animal numbered 1 is adjacent to the animals numbered 2 and N, and the animal numbered N is adjacent to the animals numbered N-1 and 1.\n\nThere are two kinds of animals in this zoo: honest sheep that only speak the truth, and lying wolves that only tell lies.\n\nSnuke cannot tell the difference between these two species, and asked each animal the following question: \"Are your neighbors of the same species?\" The animal numbered i answered s_i. Here, if s_i is `o`, the animal said that the two neighboring animals are of the same species, and if s_i is `x`, the animal said that the two neighboring animals are of different species.\n\nMore formally, a sheep answered `o` if the two neighboring animals are both sheep or both wolves, and answered `x` otherwise. Similarly, a wolf answered `x` if the two neighboring animals are both sheep or both wolves, and answered `o` otherwise.\n\nSnuke is wondering whether there is a valid assignment of species to the animals that is consistent with these responses. If there is such an assignment, show one such assignment. Otherwise, print `-1`.\n\nConstraints\n\n* 3 ≤ N ≤ 10^{5}\n* s is a string of length N consisting of `o` and `x`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\ns", "grammar": {"productions": ["<S>->[N] <n> [ox]{N}"], "constraints": ["3<=N<=10^5"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes one variable, N, which serves as a counter variable for the length of the string s, hence it is enclosed in [N]. The string s consists of characters 'o' and 'x' and has a length equal to N, which is represented using the regular expression [ox]{N}. Thus, the grammar is constructed as '<S>->[N] <n> [ox]{N}' to reflect the input format where N is followed by a newline and a string of length N composed of 'o' and 'x'."}
{"name": "p03803 AtCoder Beginner Contest 054 - One Card Poker", "description": "Alice and Bob are playing One Card Poker.\nOne Card Poker is a two-player game using playing cards.\n\nEach card in this game shows an integer between `1` and `13`, inclusive.\nThe strength of a card is determined by the number written on it, as follows:\n\nWeak `2` < `3` < `4` < `5` < `6` < `7` < `8` < `9` < `10` < `11` < `12` < `13` < `1` Strong\n\nOne Card Poker is played as follows:\n\n1. Each player picks one card from the deck. The chosen card becomes the player's hand.\n2. The players reveal their hands to each other. The player with the stronger card wins the game.\nIf their cards are equally strong, the game is drawn.\n\n\n\nYou are watching Alice and Bob playing the game, and can see their hands.\nThe number written on Alice's card is A, and the number written on Bob's card is B.\nWrite a program to determine the outcome of the game.\n\nConstraints\n\n* 1≦A≦13\n* 1≦B≦13\n* A and B are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=13", "1<=B<=13"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines two variables, 'A' and 'B', which are separated by a space symbol denoted as <s>. The structure of the grammar is formulated as '<S>->A <s> B', representing the input format where 'A' and 'B' are two integers separated by a space. Neither 'A' nor 'B' serves as a counter variable in this context, so they are not enclosed in brackets. The constraints specify that both 'A' and 'B' must be integers between 1 and 13, inclusive."}
{"name": "p03806 AtCoder Beginner Contest 054 - Mixing Experiment", "description": "Dolphin is planning to generate a small amount of a certain chemical substance C.\nIn order to generate the substance C, he must prepare a solution which is a mixture of two substances A and B in the ratio of M_a:M_b.\nHe does not have any stock of chemicals, however, so he will purchase some chemicals at a local pharmacy.\nThe pharmacy sells N kinds of chemicals. For each kind of chemical, there is exactly one package of that chemical in stock.\nThe package of chemical i contains a_i grams of the substance A and b_i grams of the substance B, and is sold for c_i yen (the currency of Japan).\nDolphin will purchase some of these packages. For some reason, he must use all contents of the purchased packages to generate the substance C.\nFind the minimum amount of money required to generate the substance C.\nIf it is not possible to generate the substance C by purchasing any combination of packages at the pharmacy, report that fact.\n\nConstraints\n\n* 1≦N≦40\n* 1≦a_i,b_i≦10\n* 1≦c_i≦100\n* 1≦M_a,M_b≦10\n* gcd(M_a,M_b)=1\n* a_i, b_i, c_i, M_a and M_b are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M_a M_b\na_1 b_1 c_1\na_2 b_2 c_2\n:\na_N b_N c_N", "grammar": {"productions": ["<S>->[N] <s> Ma <s> Mb <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["1<=N<=40", "1<=a_i,b_i<=10", "1<=c_i<=100", "1<=Ma<=Mb<=10", "gcd(Ma,Mb)=1"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the number of packages, hence it is enclosed in [N]. The variables 'Ma' and 'Mb' are not counter variables, so they are written as is. The grammar is initiated with '<S>->[N] <s> Ma <s> Mb <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each line contains 'a_i', 'b_i', and 'c_i' separated by spaces. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i' and '<T_1>->a_1 <s> b_1 <s> c_1' to systematically parse the sequence of package details following the count [N]."}
{"name": "p03814 AtCoder Beginner Contest 053 - A to Z String", "description": "Snuke has decided to construct a string that starts with `A` and ends with `Z`, by taking out a substring of a string s (that is, a consecutive part of s).\n\nFind the greatest length of the string Snuke can construct. Here, the test set guarantees that there always exists a substring of s that starts with `A` and ends with `Z`.\n\nConstraints\n\n* 1 ≦ |s| ≦ 200{,}000\n* s consists of uppercase English letters.\n* There exists a substring of s that starts with `A` and ends with `Z`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->[A-Z]{1,2000000}"], "constraints": []}, "reason": "The grammar begins with the start non-terminal <S>. The input consists of a string 's' composed of uppercase English letters with a length between 1 and 200,000 characters. Since the string 's' is directly provided without any counters or specific separators, it is represented using a regular expression [A-Z]{1,200000} to denote the range of allowable characters and their length. The grammar is thus constructed as '<S>->[A-Z]{1,200000}', directly capturing the input format where 's' is a string of uppercase letters."}
{"name": "p03819 AtCoder Regular Contest 068 - Snuke Line", "description": "Constraints\n\n* 1 <= N <= 3 × 10^{5}\n* 1 <= M <= 10^{5}\n* 1 <= l_i <= r_i <= M\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\nl_1 r_1\n:\nl_{N} r_{N}", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1"], "constraints": ["1<=N<=3*10^5", "1<=M<=10^5", "1<=l_i<=r_i<=M"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, N and M, both serving as counter variables, hence they are enclosed in brackets as [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each line contains 'l_i' and 'r_i' separated by a space <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> l_i <s> r_i' and '<T_1>->l_1 <s> r_1' to systematically parse the sequence of pairs following the count [N]."}
{"name": "p03828 AtCoder Beginner Contest 052 - Factors of Factorial", "description": "You are given an integer N. Find the number of the positive divisors of N!, modulo 10^9+7.\n\nConstraints\n\n* 1≤N≤10^3\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^3"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is not used as a counter variable in this context, so it is represented simply as 'N' without brackets. The input format consists of a single integer 'N', so the grammar is straightforwardly constructed as '<S>->N'."}
{"name": "p03836 AtCoder Beginner Contest 051 - Back and Forth", "description": "Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.\n\nConstraints\n\n* -1000 ≤ sx < tx ≤ 1000\n* -1000 ≤ sy < ty ≤ 1000\n* sx,sy,tx and ty are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nsx sy tx ty", "grammar": {"productions": ["<S>->sx <s> sy <s> tx <s> ty"], "constraints": ["-1000<=sx<=1000", "-1000<tx<=1000", "-1000<=sy<=1000", "-1000<ty<=1000"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines four variables, 'sx', 'sy', 'tx', and 'ty', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->sx <s> sy <s> tx <s> ty', representing the input format where 'sx', 'sy', 'tx', and 'ty' are four integers separated by spaces. None of these variables serve as counters, so they are not enclosed in brackets."}
{"name": "p03837 AtCoder Beginner Contest 051 - Candidates of No Shortest Paths", "description": "You are given an undirected connected weighted graph with N vertices and M edges that contains neither self-loops nor double edges.\nThe i-th (1≤i≤M) edge connects vertex a_i and vertex b_i with a distance of c_i.\nHere, a self-loop is an edge where a_i = b_i (1≤i≤M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1≤i<j≤M).\nA connected graph is a graph where there is a path between every pair of different vertices.\nFind the number of the edges that are not contained in any shortest path between any pair of different vertices.\n\nConstraints\n\n* 2≤N≤100\n* N-1≤M≤min(N(N-1)/2,1000)\n* 1≤a_i,b_i≤N\n* 1≤c_i≤1000\n* c_i is an integer.\n* The given graph contains neither self-loops nor double edges.\n* The given graph is connected.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1 c_1\na_2 b_2 c_2\n:\na_M b_M c_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["2<=N<=100", "N-1<=M<=min(N*(N-1)/2,1000)", "1<=a_i<=N", "1<=b_i<=N", "1<=c_i<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. The input includes two variables, N and M, where M serves as a counter variable for the number of edges, hence it is enclosed in [M]. The grammar is structured as '<S>->N <s> [M] <n> <T_M>', where <T_M> is a counter non-terminal for [M]. Each edge is represented by three components: a_i, b_i, and c_i, separated by spaces. The counter non-terminal <T_i> is defined to decrement until it reaches 1, constructing each line of edge data as '<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i' and terminating with '<T_1>->a_1 <s> b_1 <s> c_1'."}
{"name": "p03852 AtCoder Beginner Contest 049 - UOIAUAI", "description": "Given a lowercase English letter c, determine whether it is a vowel. Here, there are five vowels in the English alphabet: `a`, `e`, `i`, `o` and `u`.\n\nConstraints\n\n* c is a lowercase English letter.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nc", "grammar": {"productions": ["<S>->[a-z]{1}"], "constraints": []}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a single lowercase English letter 'c', which is represented using the regular expression [a-z]{1} to specify that it is exactly one character from the range 'a' to 'z'. Since there are no counter variables or additional constraints, the grammar is simply '<S>->[a-z]{1}'."}
{"name": "p03861 AtCoder Beginner Contest 048 - Between a and b ...", "description": "You are given nonnegative integers a and b (a ≤ b), and a positive integer x. Among the integers between a and b, inclusive, how many are divisible by x?\n\nConstraints\n\n* 0 ≤ a ≤ b ≤ 10^{18}\n* 1 ≤ x ≤ 10^{18}\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\na b x", "grammar": {"productions": ["<S>->a <s> b <s> x"], "constraints": ["0<=a<=b<=10^18", "1<=x<=10^18"]}, "reason": "The grammar starts with the initial non-terminal <S>. It defines three variables, 'a', 'b', and 'x', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> x', representing the input format where 'a', 'b', and 'x' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets."}
{"name": "p03889 CODE FESTIVAL 2016 Relay (Parallel) - Mirror String", "description": "Constraints\n\n* 1 <= |S| <= 10^5\n* S consists of letters `b`, `d`, `p`, and `q`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[bdpq]{1,10^5}"], "constraints": [""]}, "reason": "The grammar starts with the initial non-terminal <S>. The input consists of a string S, which is composed of the characters 'b', 'd', 'p', and 'q'. Since the length of S can vary from 1 to 10^5 and the characters are restricted to these four, the grammar is represented using a regular expression that matches any sequence of these characters within the specified length range. Thus, the grammar is constructed as '<S>->[bdpq]{1,10^5}', where the regular expression [bdpq]{1,10^5} ensures the input string adheres to the character and length constraints."}
{"name": "p03893 CODE FESTIVAL 2016 Relay (Parallel) - Trichotomy", "description": "Constraints\n\n* 1 <= X <= 40\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["1<=X<=40"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable X is not a counter variable, so it is represented simply as 'X' without brackets. The grammar is constructed as '<S>->X' to reflect the input format where only X is provided."}
{"name": "p03940 AtCoder Grand Contest 007 - Shik and Game", "description": "Constraints\n\n* 1 <= N <= 100,000\n* 1 <= T, E <= 10^9\n* 0 < x_i < E\n* x_i < x_{i+1} for 1 <= i < N\n* All input values are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN E T\nx_1 x_2 ... x_N", "grammar": {"productions": ["<S>->[N] <s> E <s> T <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=N<=100000", "1<=T<=10^9", "1<=E<=10^9", "0<x_i<E"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variables 'N', 'E', and 'T' are given, where 'N' serves as a counter variable for the sequence of 'x_i' values, hence it is enclosed in [N]. The grammar is structured as '<S>->[N] <s> E <s> T <n> <T_N>', where <T_N> is the counter non-terminal for [N], generating the sequence 'x_1 x_2 ... x_N' separated by spaces <s>. The counter non-terminal <T_i> is defined to decrement until it reaches <T_1>, which outputs 'x_1'. This setup ensures the input format where 'N', 'E', and 'T' are on the first line, followed by 'N' space-separated 'x_i' values on the next line."}
{"name": "p03951 AtCoder Grand Contest 006 - Prefix and Suffix", "description": "Snuke is interested in strings that satisfy the following conditions:\n\n* The length of the string is at least N.\n* The first N characters equal to the string s.\n* The last N characters equal to the string t.\n\n\n\nFind the length of the shortest string that satisfies the conditions.\n\nConstraints\n\n* 1≤N≤100\n* The lengths of s and t are both N.\n* s and t consist of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\ns\nt", "grammar": {"productions": ["<S>->[N] <n> [a-z]{N} <n> [a-z]{N}"], "constraints": ["1<=N<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable, hence it is enclosed in [N]. The input format includes 'N' followed by two strings 's' and 't', each of length 'N' and consisting of lowercase English letters. Since 's' and 't' are strings of fixed length 'N' and composed of lowercase letters, they are represented using the regular expression [a-z]{N}. The grammar is structured as '<S>->[N] <n> [a-z]{N} <n> [a-z]{N}' to reflect the input format where 'N' is followed by two strings of length 'N' on separate lines."}
{"name": "p03956 AtCoder Grand Contest 006 - Blackout", "description": "Constraints\n\n* 1<=N<=10^5\n* 1<=M<=10^5\n* 1<=a_i,b_i<=N\n* All pairs (a_i, b_i) are distinct.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\na_2 b_2\n:\na_M b_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=a_i,b_i<=N"]}, "reason": "The grammar starts with the initial non-terminal <S>. Here, 'N' and 'M' are used as counter variables, hence they are enclosed in brackets as [N] and [M]. The grammar is initiated with '<S>->[N] <s> [M] <n> <T_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each line contains 'a_i' and 'b_i' separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> a_i <s> b_i' and '<T_1>->a_1 <s> b_1' to systematically parse the sequence of pairs (a_i, b_i) following the count [M]."}
{"name": "p03959 CODE FESTIVAL 2016 qual C - Two Alpinists", "description": "Mountaineers Mr. Takahashi and Mr. Aoki recently trekked across a certain famous mountain range. The mountain range consists of N mountains, extending from west to east in a straight line as Mt. 1, Mt. 2, ..., Mt. N. Mr. Takahashi traversed the range from the west and Mr. Aoki from the east.\n\nThe height of Mt. i is h_i, but they have forgotten the value of each h_i. Instead, for each i (1 ≤ i ≤ N), they recorded the maximum height of the mountains climbed up to the time they reached the peak of Mt. i (including Mt. i). Mr. Takahashi's record is T_i and Mr. Aoki's record is A_i.\n\nWe know that the height of each mountain h_i is a positive integer. Compute the number of the possible sequences of the mountains' heights, modulo 10^9 + 7.\n\nNote that the records may be incorrect and thus there may be no possible sequence of the mountains' heights. In such a case, output 0.\n\nConstraints\n\n* 1 ≤ N ≤ 10^5\n* 1 ≤ T_i ≤ 10^9\n* 1 ≤ A_i ≤ 10^9\n* T_i ≤ T_{i+1} (1 ≤ i ≤ N - 1)\n* A_i ≥ A_{i+1} (1 ≤ i ≤ N - 1)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nT_1 T_2 ... T_N\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> <L_N>", "<T_i>-><T_i-1> <s> T_i", "<T_1>->T_1", "<L_i>-><L_i-1> <s> A_i", "<L_1>->A_1"], "constraints": ["1<=N<=10^5", "1<=T_i<=10^9", "1<=A_i<=10^9", "T_i<=T_i+1", "A_i>=A_i+1"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequences of 'T_i' and 'A_i', hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <n> <T_N> <n> <L_N>', where <T_N> and <L_N> are counter non-terminals for the sequences of 'T_i' and 'A_i' respectively. Each sequence is constructed by iterating through the counter variables, with elements separated by a space symbol <s>. The grammar rules '<T_i>-><T_i-1> <s> T_i' and '<L_i>-><L_i-1> <s> A_i' define the sequences, terminating at '<T_1>->T_1' and '<L_1>->A_1' respectively. This structure ensures the input format is correctly parsed with sequences of 'T_i' and 'A_i' following the count [N]."}
{"name": "p03962 AtCoder Beginner Contest 046 - AtCoDeer and Paint Cans", "description": "AtCoDeer the deer recently bought three paint cans. The color of the one he bought two days ago is a, the color of the one he bought yesterday is b, and the color of the one he bought today is c. Here, the color of each paint can is represented by an integer between 1 and 100, inclusive.\n\nSince he is forgetful, he might have bought more than one paint can in the same color. Count the number of different kinds of colors of these paint cans and tell him.\n\nConstraints\n\n* 1≦a,b,c≦100\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\na b c", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=c<=100"]}, "reason": "The grammar construction begins with the initial non-terminal <S>. It defines three variables, 'a', 'b', and 'c', which are separated by space symbols denoted as <s>. The structure of the grammar is formulated as '<S>->a <s> b <s> c', representing the input format where 'a', 'b', and 'c' are three integers separated by spaces. Since none of these variables serve as counters, they are not enclosed in brackets."}
{"name": "p03963 AtCoder Beginner Contest 046 - Painting Balls with AtCoDeer", "description": "Constraints\n\n* 1<=N<=1000\n* 2<=K<=1000\n* The correct answer is at most 2^{31}-1.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["1<=N<=1000", "2<=K<=1000"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes two variables, 'N' and 'K', which are not used as counter variables in this context, hence they are not enclosed in brackets. The grammar is structured as '<S>->N <s> K', representing the input format where 'N' and 'K' are two integers separated by a space."}
{"name": "p04006 AtCoder Grand Contest 004 - Colorful Slimes", "description": "Snuke lives in another world, where slimes are real creatures and kept by some people. Slimes come in N colors. Those colors are conveniently numbered 1 through N. Snuke currently has no slime. His objective is to have slimes of all the colors together.\n\nSnuke can perform the following two actions:\n\n* Select a color i (1≤i≤N), such that he does not currently have a slime in color i, and catch a slime in color i. This action takes him a_i seconds.\n\n* Cast a spell, which changes the color of all the slimes that he currently has. The color of a slime in color i (1≤i≤N-1) will become color i+1, and the color of a slime in color N will become color 1. This action takes him x seconds.\n\n\n\n\nFind the minimum time that Snuke needs to have slimes in all N colors.\n\nConstraints\n\n* 2≤N≤2,000\n* a_i are integers.\n* 1≤a_i≤10^9\n* x is an integer.\n* 1≤x≤10^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN x\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <s> x <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=2000", "1<=a_i<=10^9", "1<=x<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'N' and 'x', where 'N' serves as a counter variable for the sequence of 'a_i' values, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> x <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where each 'a_i' is separated by a space symbol <s>. The grammar constructs are laid out as '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' to systematically parse the sequence of 'a_i' values following the count [N]."}
{"name": "p04014 AtCoder Beginner Contest 044 - Digit Sum", "description": "For integers b (b \\geq 2) and n (n \\geq 1), let the function f(b,n) be defined as follows:\n\n* f(b,n) = n, when n < b\n* f(b,n) = f(b,\\,{\\rm floor}(n / b)) + (n \\ {\\rm mod} \\ b), when n \\geq b\n\n\n\nHere, {\\rm floor}(n / b) denotes the largest integer not exceeding n / b, and n \\ {\\rm mod} \\ b denotes the remainder of n divided by b.\n\nLess formally, f(b,n) is equal to the sum of the digits of n written in base b. For example, the following hold:\n\n* f(10,\\,87654)=8+7+6+5+4=30\n* f(100,\\,87654)=8+76+54=138\n\n\n\nYou are given integers n and s. Determine if there exists an integer b (b \\geq 2) such that f(b,n)=s. If the answer is positive, also find the smallest such b.\n\nConstraints\n\n* 1 \\leq n \\leq 10^{11}\n* 1 \\leq s \\leq 10^{11}\n* n,\\,s are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nn\ns", "grammar": {"productions": ["<S>->n <n> s"], "constraints": ["1<=n<=10^11", "1<=s<=10^11"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'n' and 's', which are not used as counters in this context, so they are not enclosed in brackets. The input format consists of 'n' followed by a newline <n> and then 's'. Therefore, the grammar is constructed as '<S>->n <n> s' to represent this input structure."}
{"name": "p04015 AtCoder Regular Contest 060 - Tak and Cards", "description": "Constraints\n\n* 1 <= N <= 50\n* 1 <= A <= 50\n* 1 <= x_i <= 50\n* N,\\,A,\\,x_i are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN A\nx_1 x_2 ... x_N", "grammar": {"productions": ["<S>->[N] <s> [A] <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=N<=50", "1<=A<=50", "1<=x_i<=50"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and A, both serving as counter variables, hence they are enclosed in brackets as [N] and [A]. The grammar is initiated with '<S>->[N] <s> [A] <n> <T_N>', where <T_N> is a counter non-terminal for [N]. The non-terminal <T_i> is used to generate the sequence of x_i values separated by spaces <s>, decrementing until it reaches <T_1>, which simply produces x_1. This structure accurately reflects the input format where N and A are given first, followed by N integers x_i."}
{"name": "p04020 AtCoder Grand Contest 003 - Simplified mahjong", "description": "Snuke has a large collection of cards. Each card has an integer between 1 and N, inclusive, written on it. He has A_i cards with an integer i.\n\nTwo cards can form a pair if the absolute value of the difference of the integers written on them is at most 1.\n\nSnuke wants to create the maximum number of pairs from his cards, on the condition that no card should be used in multiple pairs. Find the maximum number of pairs that he can create.\n\nConstraints\n\n* 1 ≦ N ≦ 10^5\n* 0 ≦ A_i ≦ 10^9 (1 ≦ i ≦ N)\n* All input values are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "grammar": {"productions": ["<S>->N <n> <T_N>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "0<=A_i<=10^9"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' serves as a counter variable for the sequence of 'A_i' values, hence it is denoted as [N] in the grammar. The grammar is initiated with '<S>->[N] <n> <T_N>', where <T_i> is a counter-driven rule for [N], representing each 'A_i' value separated by a newline symbol <n>. The grammar constructs are laid out as '<S>->[N] <n> <T_N>', '<T_i>-><T_i-1> <n> A_i', and '<T_1>->A_1' to systematically parse the sequence of 'A_i' values following the count [N]."}
{"name": "p04029 AtCoder Beginner Contest 043 - Children and Candies (ABC Edit)", "description": "There are N children in AtCoder Kindergarten. Mr. Evi will arrange the children in a line, then give 1 candy to the first child in the line, 2 candies to the second child, ..., N candies to the N-th child. How many candies will be necessary in total?\n\nConstraints\n\n* 1≦N≦100\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. The variable 'N' is used as a counter variable, hence it is enclosed in [N] to reflect its role as a counter. The grammar is constructed as '<S>->[N]', representing the input format where 'N' is the only input provided."}
{"name": "p04030 AtCoder Beginner Contest 043 - Unhappy Hacking (ABC Edit)", "description": "Sig has built his own keyboard. Designed for ultimate simplicity, this keyboard only has 3 keys on it: the `0` key, the `1` key and the backspace key.\n\nTo begin with, he is using a plain text editor with this keyboard. This editor always displays one string (possibly empty). Just after the editor is launched, this string is empty. When each key on the keyboard is pressed, the following changes occur to the string:\n\n* The `0` key: a letter `0` will be inserted to the right of the string.\n* The `1` key: a letter `1` will be inserted to the right of the string.\n* The backspace key: if the string is empty, nothing happens. Otherwise, the rightmost letter of the string is deleted.\n\n\n\nSig has launched the editor, and pressed these keys several times. You are given a string s, which is a record of his keystrokes in order. In this string, the letter `0` stands for the `0` key, the letter `1` stands for the `1` key and the letter `B` stands for the backspace key. What string is displayed in the editor now?\n\nConstraints\n\n* 1 ≦ |s| ≦ 10 (|s| denotes the length of s)\n* s consists of the letters `0`, `1` and `B`.\n* The correct answer is not an empty string.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->[01B]{1,10}"], "constraints": []}, "reason": "The grammar starts with the start non-terminal <S>. The input consists of a string 's' which can be of length 1 to 10 and includes characters '0', '1', and 'B'. Since the length of 's' is variable and the characters are restricted to '0', '1', and 'B', the grammar is represented using a regular expression [01B]{1,10} to cover all possible valid inputs within the specified length constraints. The grammar is thus constructed as '<S>->[01B]{1,10}' to directly match the input format."}
{"name": "p04031 AtCoder Beginner Contest 043 - Be Together", "description": "Evi has N integers a_1,a_2,..,a_N. His objective is to have N equal integers by transforming some of them.\n\nHe may transform each integer at most once. Transforming an integer x into another integer y costs him (x-y)^2 dollars. Even if a_i=a_j (i≠j), he has to pay the cost separately for transforming each of them (See Sample 2).\n\nFind the minimum total cost to achieve his objective.\n\nConstraints\n\n* 1≦N≦100\n* -100≦a_i≦100\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=100", "-100<=a_i<=100"]}, "reason": "The grammar starts with the initial non-terminal <S>. The variable 'N' is used as a counter variable for the sequence of integers, hence it is enclosed in brackets as [N]. The grammar is structured as '<S>->[N] <n> <T_N>', where <T_N> is a counter non-terminal that generates the sequence of integers separated by spaces. The rules '<T_i>-><T_i-1> <s> a_i' and '<T_1>->a_1' are used to systematically parse the sequence of integers following the count [N]. The constraints reflect the limits on N and the integers a_i."}
{"name": "p04034 AtCoder Grand Contest 002 - Box and Ball", "description": "We have N boxes, numbered 1 through N. At first, box 1 contains one red ball, and each of the other boxes contains one white ball.\n\nSnuke will perform the following M operations, one by one. In the i-th operation, he randomly picks one ball from box x_i, then he puts it into box y_i.\n\nFind the number of boxes that may contain the red ball after all operations are performed.\n\nConstraints\n\n* 2≤N≤10^5\n* 1≤M≤10^5\n* 1≤x_i,y_i≤N\n* x_i≠y_i\n* Just before the i-th operation is performed, box x_i contains at least 1 ball.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\nx_1 y_1\n:\nx_M y_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["2<=N<=10^5", "1<=M<=2*10^5", "1<=x_i,y_i<=N", "x_i!=y_i"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and M, where M serves as a counter variable for the number of operations, hence it is enclosed in [M]. The grammar is initiated with '<S>->N <s> [M] <n> <T_M>'. The non-terminal <T_i> is a counter-driven rule for [M], where each operation is represented by 'x_i <s> y_i' separated by a newline token <n>. The grammar constructs are laid out as '<S>->N <s> [M] <n> <T_M>', '<T_i>-><T_i-1> <n> x_i <s> y_i', and '<T_1>->x_1 <s> y_1' to systematically parse the sequence of operations following the count [M]."}
{"name": "p04043 AtCoder Beginner Contest 042 - Iroha and Haiku (ABC Edition)", "description": "Iroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\n\nTo create a Haiku, Iroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. Determine whether she can construct a Haiku by using each of the phrases once, in some order.\n\nConstraints\n\n* 1≦A,B,C≦10\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A,B,C<=10"]}, "reason": "The grammar starts with the initial non-terminal <S>. It includes three variables, 'A', 'B', and 'C', which are separated by space symbols denoted as <s>. Since none of these variables serve as counters, they are not enclosed in brackets. The structure of the grammar is formulated as '<S>->A <s> B <s> C', representing the input format where 'A', 'B', and 'C' are three integers separated by spaces."}
{"name": "p04044 AtCoder Beginner Contest 042 - Iroha Loves Strings (ABC Edition)", "description": "Iroha has a sequence of N strings S_1, S_2, ..., S_N. The length of each string is L.\n\nShe will concatenate all of the strings in some order, to produce a long string.\n\nAmong all strings that she can produce in this way, find the lexicographically smallest one.\n\nHere, a string s=s_1s_2s_3...s_n is lexicographically smaller than another string t=t_1t_2t_3...t_m if and only if one of the following holds:\n\n* There exists an index i(1≦i≦min(n,m)), such that s_j = t_j for all indices j(1≦j<i), and s_i<t_i.\n* s_i = t_i for all integers i(1≦i≦min(n,m)), and n<m.\n\nConstraints\n\n* 1 ≦ N, L ≦ 100\n* For each i, the length of S_i equals L.\n* For each i, S_i consists of lowercase letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN L\nS_1\nS_2\n:\nS_N", "grammar": {"productions": ["<S>->[N] <s> [L] <n> <T_N>", "<T_i>-><T_i-1> <n> [a-z]{L}", "<T_1>->[a-z]{L}"], "constraints": ["1<=N,L<=100"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and L, both serving as counter variables, hence they are enclosed in brackets as [N] and [L]. The grammar is initiated with '<S>->[N] <s> [L] <n> <T_N>', where <T_i> is a counter non-terminal for [N], representing each string S_i of length L. Each S_i consists of lowercase letters, which is represented by the regular expression [a-z]{L}. The grammar constructs are laid out as '<T_i>-><T_i-1> <n> [a-z]{L}' and '<T_1>->[a-z]{L}' to systematically parse the sequence of strings following the count [N]."}
{"name": "p04048 AtCoder Grand Contest 001 - Mysterious Light", "description": "Constraints\n\n* 2<=N<=10^{12}\n* 1<=X<=N-1\n* N and X are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN X", "grammar": {"productions": ["<S>->N <s> X"], "constraints": ["2<=N<=10^12", "1<=X<=N-1"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, N and X, which are not used as counters in this context, hence they are not enclosed in brackets. The grammar is structured as '<S>->N <s> X', representing the input format where N and X are two integers separated by a space. Since neither N nor X serve as counter variables, no counter non-terminals are needed in this grammar."}
{"name": "p04052 AtCoder Grand Contest 001 - Wide Swap", "description": "Constraints\n\n* 2<=N<=500,000\n* 1<=K<=N-1\n* P is a permutation of the set {1, 2, ..., N}.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN K\nP_1 P_2 ... P_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1"], "constraints": ["2<=N<=500000", "1<=K<=N-1", "1<=P_i<=N"]}, "reason": "The grammar begins with the start non-terminal <S>. It includes two variables, 'N' and 'K', where 'N' serves as a counter variable for the sequence of 'P_i' elements, hence it is enclosed in [N]. The grammar is initiated with '<S>->[N] <s> K <n> <T_N>'. The non-terminal <T_i> is a counter-driven rule for [N], where 'P_i' represents each element in the permutation separated by a space symbol <s>. The grammar constructs are laid out as '<S>->[N] <s> K <n> <T_N>', '<T_i>-><T_i-1> <s> P_i', and '<T_1>->P_1' to systematically parse the sequence of permutation elements following the count [N]."}
