{"name": "HumanEval/24", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: largest_divisor\nProblem Description:\ndef largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n; n must be an integer greater than 1.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\nContract Test Cases:\nassert_1:\n>>> largest_divisor(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def largest_divisor(n: int) -> int:\n\n\n    assert type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n > 1, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    for i in range(2, n):\n        if n % i == 0: return n // i\n    return 1", "constraints": {"assert_0": "assert type(n) == int, \"invalid inputs", "assert_1": "assert n > 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/162", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: string_to_md5\nProblem Description:\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', which must be a non-empty string, return its md5 hash equivalent string. If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\nContract Test Cases:\nassert_0:\n>>> string_to_md5(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def string_to_md5(text):\n\n\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n\n\n    if text == \"\": return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    return m.hexdigest()", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/49", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: modp\nProblem Description:\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics); both n and p must be integers, where n is non-negative and p is at least one.\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\nContract Test Cases:\nassert_0:\n>>> modp(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> modp(0, -21238)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def modp(n: int, p: int):\n\n\n    assert type(n) == int and type(p) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0 and p >= 1, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = res * x % p\n        x = x * x % p\n        n //= 2\n    return res % p", "constraints": {"assert_0": "assert type(n) == int and type(p) == int, \"invalid inputs", "assert_1": "assert n >= 0 and p >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/75", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_multiply_prime\nProblem Description:\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise; \u201ca\u201d must be an integer that is less than 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\nContract Test Cases:\nassert_1:\n>>> is_multiply_prime(100)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def is_multiply_prime(a):\n\n\n    assert type(a) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert a < 100, \"invalid inputs\" # $_CONTRACT_$\n\n\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3", "constraints": {"assert_0": "assert type(a) == int, \"invalid inputs", "assert_1": "assert a < 100, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/54", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: same_chars\nProblem Description:\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters; both inputs must be strings. \n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\nContract Test Cases:\nassert_0:\n>>> same_chars(3.0, 2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def same_chars(s0: str, s1: str):\n\n\n    assert type(s0) == type(s1) == str, \"invalid inputs\" # $_CONTRACT_$\n\n\n    return set(s0) == set(s1)", "constraints": {"assert_0": "assert type(s0) == type(s1) == str, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
