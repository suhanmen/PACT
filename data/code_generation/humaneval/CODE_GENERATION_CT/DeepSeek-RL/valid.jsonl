{"name": "HumanEval/22", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: filter_integers\nProblem Description:\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers; \"values\" must be a list. \n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\nContract Test Cases:\nassert_0:\n>>> filter_integers(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n\n\n    assert type(values) == list, \"invalid inputs\" # $_CONTRACT_$\n\n\n    return list(filter(lambda x: type(x) == int, values))", "constraints": {"assert_0": "assert type(values) == list, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
