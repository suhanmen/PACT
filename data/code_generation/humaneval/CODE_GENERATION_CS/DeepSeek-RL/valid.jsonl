{"name": "HumanEval/135", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: can_arrange\nProblem Description:\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values. The input 'arr' must be a list containing only integers or floats, and it must not contain any duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def can_arrange(arr):\n\n\n    assert type(arr) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) in [int, float] for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) == len(set(arr)), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            return i\n    return -1", "constraints": {"assert_0": "assert type(arr) == list, \"invalid inputs", "assert_1": "assert all(type(x) in [int, float] for x in arr), \"invalid inputs", "assert_2": "assert len(arr) == len(set(arr)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/115", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_fill\nProblem Description:\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells where each row represents a single well and each 1 in a row represents a single unit of water; \"grid\" must be a list of lists containing only 0s and 1s, all wells must have the same length, the length of \"grid\" must be between 1 and 100, and \"capacity\" must be an integer between 1 and 10. Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "import math\n\ndef max_fill(grid, capacity):\n\n\n    assert 1 <= len(grid) <= 100, \"invalid inputs\" # $_CONTRACT_$\n    lens = list(map(len, grid)) # $_CONTRACT_$\n    assert max(lens) == min(lens) and 1 <= max(lens) <= 100, \"invalid inputs\" # $_CONTRACT_$\n    for l in grid: # $_CONTRACT_$\n        for x in l: # $_CONTRACT_$\n            assert x == 0 or x == 1, \"invalid inputs\" # $_CONTRACT_$\n    assert 1 <= capacity <= 10, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans", "constraints": {"assert_0": "assert 1 <= len(grid) <= 100, \"invalid inputs", "assert_1": "assert max(lens) == min(lens) and 1 <= max(lens) <= 100, \"invalid inputs", "assert_2": "assert x == 0 or x == 1, \"invalid inputs", "assert_3": "assert 1 <= capacity <= 10, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/131", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: digits\nProblem Description:\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits; \"n\" must be a positive integer.\"\"\"\n    return 0 if n == 0 else n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def digits(n):\n\n\n    assert type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        if int(ch) % 2 == 1:\n            has_odd = True\n            prod *= int(ch)\n    return 0 if not has_odd else prod", "constraints": {"assert_0": "assert type(n) == int, \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/55", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: fib\nProblem Description:\ndef fib(n: int):\n    \"\"\"Return the n-th Fibonacci number; n must be a non-negative integer.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def fib(n: int):\n\n\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    if n == 0: return 0\n    if n <= 2: return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b", "constraints": {"assert_0": "assert n >= 0, \"invalid inputs", "assert_1": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/95", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_dict_case\nProblem Description:\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False; \n    \"dict\" must be of type dictionary. The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def check_dict_case(dict):\n\n\n    assert type(dict).__name__ == \"dict\", \"invalid inputs\" # $_CONTRACT_$\n\n\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str:\n            lower = upper = False\n            break\n        if not k.islower(): lower = False\n        if not k.isupper(): upper = False\n    return lower or upper", "constraints": {"assert_0": "assert type(dict).__name__ == \"dict\", \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/29", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: filter_by_prefix\nProblem Description:\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix; \n    \"strings\" must be a list of strings, and \"prefix\" must be a string.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n\n\n    assert all(isinstance(s, str) for s in strings), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(prefix, str), \"invalid inputs\" # $_CONTRACT_$\n\n\n    return list(filter(lambda x: x.startswith(prefix), strings))", "constraints": {"assert_0": "assert all(isinstance(s, str) for s in strings), \"invalid inputs", "assert_1": "assert isinstance(prefix, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/157", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: right_angle_triangle\nProblem Description:\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, which must each be positive numbers of type int or float, return True if the three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n\n    assert type(a) in [int, float] and type(b) in [int, float] and type(c) in [int, float], \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0 and b > 0 and c > 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n    \n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2", "constraints": {"assert_0": "assert type(a) in [int, float] and type(b) in [int, float] and type(c) in [int, float], \"invalid inputs", "assert_1": "assert a > 0 and b > 0 and c > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/51", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_vowels\nProblem Description:\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels; the input string must be of type string.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def remove_vowels(text):\n\n\n    assert type(text) == str, \"invalid inputs\" # $_CONTRACT_$\n\n\n    return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))", "constraints": {"assert_0": "assert type(text) == str, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/101", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: words_string\nProblem Description:\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces; the input string must be of type str. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def words_string(s):\n\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n\n\n    words = (s.replace(\",\", \" \")).split()\n    return [word for word in words if word != \"\"]", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/145", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: order_by_points\nProblem Description:\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers in ascending order according to the sum of their digits; \n    \"nums\" must be a list of integers.\n    \n    Note: if there are several items with similar sum of their digits, order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def order_by_points(nums):\n\n\n    assert all(type(x) == int for x in nums), \"invalid inputs\" # $_CONTRACT_$\n\n\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)", "constraints": {"assert_0": "assert all(type(x) == int for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/19", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sort_numbers\nProblem Description:\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine', and the input must be a string that is either empty or contains only valid choices which are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. \n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n\n\n    assert isinstance(numbers, str), \"invalid inputs\" # $_CONTRACT_$\n    assert numbers == \"\" or all(map(lambda x: x in [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"], numbers.split(\" \"))), \"invalid inputs\" # $_CONTRACT_$\n\n\n    \n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\": return \"\"\n    return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))", "constraints": {"assert_0": "assert isinstance(numbers, str), \"invalid inputs", "assert_1": "assert numbers == \"\" or all(map(lambda x: x in [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"], numbers.split(\" \"))), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/85", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: add\nProblem Description:\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices; \"lst\" must be a non-empty list containing only integers.\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def add(lst):\n\n\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in lst), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s", "constraints": {"assert_0": "assert len(lst) > 0, \"invalid inputs", "assert_1": "assert all(type(x) == int for x in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/15", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: string_sequence\nProblem Description:\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive; \"n\" must be an integer that is greater than or equal to zero.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def string_sequence(n: int) -> str:\n\n\n    assert type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    return \" \".join(map(str, range(n + 1)))", "constraints": {"assert_0": "assert type(n) == int, \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/66", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: digitSum\nProblem Description:\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes; the input string must be of type str.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def digitSum(s):\n\n\n    assert type(s) == str, \"invalid inputs\" # $_CONTRACT_$\n\n\n    return sum([ord(ch) for ch in s if ch.isupper()])", "constraints": {"assert_0": "assert type(s) == str, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/24", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: largest_divisor\nProblem Description:\ndef largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n; n must be an integer greater than 1.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def largest_divisor(n: int) -> int:\n\n\n    assert type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n > 1, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    for i in range(2, n):\n        if n % i == 0: return n // i\n    return 1", "constraints": {"assert_0": "assert type(n) == int, \"invalid inputs", "assert_1": "assert n > 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/30", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_positive\nProblem Description:\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list; the input 'l' must be of type list. \n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def get_positive(l: list):\n\n\n    assert type(l) == list, \"invalid inputs\" # $_CONTRACT_$\n\n\n    return list(filter(lambda x: x > 0, l))", "constraints": {"assert_0": "assert type(l) == list, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "HumanEval/132", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_nested\nProblem Description:\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets; \n    \u201cstring\u201d must be a string and contain only the characters \"[\" and \"]\". \n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(ch == \"[\" or ch == \"]\" for ch in string), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs", "assert_1": "assert all(ch == \"[\" or ch == \"]\" for ch in string), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
