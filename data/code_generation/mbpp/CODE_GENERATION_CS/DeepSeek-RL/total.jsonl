{"name": "Mbpp/2", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: similar_elements\nProblem Description:\n\"\"\"\nWrite a python function that finds the shared elements from the given two tuples; \u201ctest_tup1\u201d and \u201ctest_tup2\u201d must each be tuples.\n\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef similar_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/3", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_not_prime\nProblem Description:\n\"\"\"\nWrite a python function that identifies non-prime numbers; the input must be an integer and greater than zero.\n\nassert is_not_prime(2) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef is_not_prime(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/4", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: heap_queue_largest\nProblem Description:\n\"\"\"\nWrite a python function that finds the n largest integers from a given list of numbers, returned in descending order; the input must be a list of numbers, n must be an integer, n must be greater than zero, all elements in the list must be integers, and the length of the list must be greater than n.\n\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert isinstance(n, int), \"invalid inputs", "assert_2": "assert n > 0, \"invalid inputs", "assert_3": "assert all(isinstance(i, int) for i in nums), \"invalid inputs", "assert_4": "assert len(nums) > n, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/6", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: differ_At_One_Bit_Pos\nProblem Description:\n\"\"\"\nWrite a python function that checks whether two numbers differ at one bit position only; both inputs must be integers. \n\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$ \n    return is_Power_Of_Two(a ^ b)\n", "constraints": {"assert_0": "assert isinstance(a, int), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/7", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_char_long\nProblem Description:\n\"\"\"\nWrite a python function that finds all words which are at least 4 characters long in a string; the input must be a string. \n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef find_char_long(text):\n\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/8", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: square_nums\nProblem Description:\n\"\"\"\nWrite a python function that finds the squares of individual elements in a list, where the input must be a list and every element within that list must be either an integer or a float.\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_nums(nums):\n\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n return [i**2 for i in nums]\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/9", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_Rotations\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum number of rotations greater than zero required to get the same string; the input must be a string and it must not be empty.\n\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Rotations(s):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert len(s) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/11", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_Occ\nProblem Description:\n\"\"\"\nWrite a python function that removes the first and last occurrence of a given character from the string; the first input must be a non-empty string and the second input must be a string of length one. \n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_Occ(s,ch):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert isinstance(ch, str), \"invalid inputs", "assert_2": "assert len(s) > 0, \"invalid inputs", "assert_3": "assert len(ch) == 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/12", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sort_matrix\nProblem Description:\n\"\"\"\nWrite a python function that sorts a given matrix in ascending order according to the sum of its rows; the input must be a list, it must not be empty, every element of the list must also be a list, the first row must not be empty, every row must have the same length as the first row, and every item in the matrix must be either an integer or a float.\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sort_matrix(M):\n\n    assert isinstance(M, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(row, list) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(row) == len(M[0]) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for row in M for item in row), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted(M, key=sum)\n    return result\n", "constraints": {"assert_0": "assert isinstance(M, list), \"invalid inputs", "assert_1": "assert len(M) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(row, list) for row in M), \"invalid inputs", "assert_3": "assert len(M[0]) > 0, \"invalid inputs", "assert_4": "assert all(len(row) == len(M[0]) for row in M), \"invalid inputs", "assert_5": "assert all(isinstance(item, (int, float)) for row in M for item in row), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/14", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_Volume\nProblem Description:\n\"\"\"\nWrite a python function that finds the volume of a triangular prism; the length, base, and height must each be either an integer or a float and must all be greater than zero.\n\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Volume(l,b,h) :\n\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_3": "assert l > 0, \"invalid inputs", "assert_4": "assert b > 0, \"invalid inputs", "assert_5": "assert h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/16", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: text_lowercase_underscore\nProblem Description:\n\"\"\"\nWrite a python function that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise; the input must be a string and it must not be empty.\n\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_lowercase_underscore(text):\n\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        assert len(text) > 0, \"invalid inputs\" # $_CONTRACT_$\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs", "assert_1": "assert len(text) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/17", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: square_perimeter\nProblem Description:\n\"\"\"\nWrite a python function that returns the perimeter of a square given its side length as input; the side length must be either an integer or a float and it must be greater than zero.\n\nassert square_perimeter(10)==40\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_perimeter(a):\n\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 4*a\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert a > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/18", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_dirty_chars\nProblem Description:\n\"\"\"\nWrite a python function that removes characters from the first string which are present in the second string; both inputs must be strings, the first string must have a length greater than zero, and the second string must also have a length greater than zero.\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_dirty_chars(string, second_string):\n\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs", "assert_1": "assert isinstance(second_string, str), \"invalid inputs", "assert_2": "assert len(string) > 0, \"invalid inputs", "assert_3": "assert len(second_string) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/19", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: test_duplicate\nProblem Description:\n\"\"\"\nWrite a python function that determines if there are any duplicate elements in an array of integers, and the input must be a list containing only integers.\n\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef test_duplicate(arraynums):\n\n    assert isinstance(arraynums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) for item in arraynums), \"invalid inputs\" # $_CONTRACT_$\n    return len(arraynums) != len(set(arraynums))\n", "constraints": {"assert_0": "assert isinstance(arraynums, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, int) for item in arraynums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/20", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_woodall\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given number is a Woodall number; the input must be either an integer or a float.\n\nassert is_woodall(383) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_woodall(x):\n\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False\n", "constraints": {"assert_0": "assert isinstance(x, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/56", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check\nProblem Description:\n\"\"\"\nWrite a python function that checks if a given number is one less than twice its reverse, and the input must be an integer that is greater than or equal to zero.\n\nassert check(70) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n == 2 * int(str(n)[::-1]) - 1\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/57", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_Max_Num\nProblem Description:\n\"\"\"\nWrite a python function that finds the largest number that can be formed with the given list of digits; the input must be a list and every item in the list must be an integer between 0 and 9 inclusive.\n\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Max_Num(arr) :\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/58", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: opposite_Signs\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given two integers have opposite signs; both inputs must be integers.\n\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef opposite_Signs(x,y):\n\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n", "constraints": {"assert_0": "assert isinstance(x, int), \"invalid inputs", "assert_1": "assert isinstance(y, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/59", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_octagonal\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth octagonal number; the input n must be an integer and must be greater than zero.\n\nassert is_octagonal(5) == 65\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_octagonal(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 3 * n * n - 2 * n \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/61", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_Substrings\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of substrings with the sum of digits equal to their length; the input must be a string and it must consist only of digits. \n\nassert count_Substrings('112112') == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom collections import defaultdict\ndef count_Substrings(s):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert s.isdigit(), \"invalid inputs\" # $_CONTRACT_$\n    n, count, sum = len(s), 0, 0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - i - 1]\n        mp[sum - i - 1] += 1\n    return count\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert s.isdigit(), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/62", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: smallest_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the smallest number in a list, and the input must be a list and all items in the list must be either integers or floats.\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef smallest_num(xs):\n\n  assert isinstance(xs, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n", "constraints": {"assert_0": "assert isinstance(xs, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/63", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_difference\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum difference between available pairs in the given tuple list; the input must be a list, each item in the list must be a tuple of length two, and both elements of every tuple must be either an integer or a float.\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_difference(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) and len(item) == 2 for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return max(abs(a - b) for a, b in test_list)\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, tuple) and len(item) == 2 for item in test_list), \"invalid inputs", "assert_2": "assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/64", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: subject_marks\nProblem Description:\n\"\"\"\nWrite a python function that sorts a list of tuples using the second value of each tuple; the input must be a list, each item in the list must be a tuple with at least two elements, and the second element of each tuple must be either an integer or a float.\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef subject_marks(subjectmarks):\n\n assert isinstance(subjectmarks, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(item, tuple) and len(item) >= 2 for item in subjectmarks), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(item[1], (int, float)) for item in subjectmarks), \"invalid inputs\" # $_CONTRACT_$\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n", "constraints": {"assert_0": "assert isinstance(subjectmarks, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, tuple) and len(item) >= 2 for item in subjectmarks), \"invalid inputs", "assert_2": "assert all(isinstance(item[1], (int, float)) for item in subjectmarks), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/65", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: recursive_list_sum\nProblem Description:\n\"\"\"\nWrite a python function that flattens a list and sums all of its elements; the input must be a list and it must pass a structural check defined by the function list_check. \n\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef recursive_list_sum(data_list):\n\n\tdef list_check(l): # $_CONTRACT_$\n\t\tif not isinstance(l, list): # $_CONTRACT_$\n\t\t\treturn isinstance(l, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(list_check(item) for item in l) # $_CONTRACT_$\n\tassert isinstance(data_list, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert list_check(data_list), \"invalid inputs\" # $_CONTRACT_$\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n", "constraints": {"assert_0": "assert isinstance(data_list, list), \"invalid inputs", "assert_1": "assert list_check(data_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/66", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: pos_count\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of positive numbers in a list; the input must be a list and all items in the list must be either integers or floats.\n\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef pos_count(l):\n\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs\" # $_CONTRACT_$\n  return len([x for x in l if x > 0])\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/67", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: bell_number\nProblem Description:\n\"\"\"\nWrite a python function that finds the number of ways to partition a set of Bell numbers; the input must be an integer, it must be greater than or equal to zero, and it must be less than or equal to one hundred.\n\nassert bell_number(2)==2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef bell_number(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs", "assert_2": "assert n <= 100, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/68", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_Monotonic\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given array is monotonic or not; the input must be a list and all elements within that list must be either integers or floats.\n\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Monotonic(A):\n\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs\" # $_CONTRACT_$\n \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n", "constraints": {"assert_0": "assert isinstance(A, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/69", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_sublist\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a list contains the given sublist; both the main list and the sublist must be lists. \n\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_sublist(l, s):\n\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert isinstance(s, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/70", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_equal\nProblem Description:\n\"\"\"\nWrite a python function that determines if all the provided tuples have the same length; the input must be a list and every item within that list must be a tuple.\n\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_equal(Input):\n\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in Input), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n", "constraints": {"assert_0": "assert isinstance(Input, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, tuple) for item in Input), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/71", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: comb_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts a list of elements, ensuring that the input is a list and that every item in the list is either an integer or a float.\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef comb_sort(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs\" # $_CONTRACT_$\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/72", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: dif_Square\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number can be represented as the difference of two squares; the input number must be an integer and it must be greater than zero.\n\nassert dif_Square(5) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef dif_Square(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    # see https://www.quora.com/Which-numbers-can-be-expressed-as-the-difference-of-two-squares\n    return n % 4 != 2\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/74", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_samepatterns\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the sequence follows the patterns given in the patterns array; both \"colors\" and \"patterns\" must be lists. \n\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_samepatterns(colors, patterns):\n\n    assert isinstance(colors, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(patterns, list), \"invalid inputs\" # $_CONTRACT_$\n    \n    if len(colors) != len(patterns):\n        return False    \n    pattern_color_dict = {pattern: set() for pattern in patterns}\n    for color, pattern in zip(colors, patterns):\n        pattern_color_dict[pattern].add(color)\n    return all(len(pattern_color_dict[pattern]) == 1 for pattern in patterns)\n", "constraints": {"assert_0": "assert isinstance(colors, list), \"invalid inputs", "assert_1": "assert isinstance(patterns, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/75", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_tuples\nProblem Description:\n\"\"\"\nWrite a python function that finds tuples which have all elements divisible by k from the given list of tuples; the input must be a list, each item in the list must be a tuple, every element in those tuples must be an integer, k must be an integer, and k must be greater than zero.\n\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_tuples(test_list, K):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for tuple in test_list for item in tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  assert K > 0, \"invalid inputs\" # $_CONTRACT_$\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, tuple) for item in test_list), \"invalid inputs", "assert_2": "assert all(isinstance(item, int) for tuple in test_list for item in tuple), \"invalid inputs", "assert_3": "assert isinstance(K, int), \"invalid inputs", "assert_4": "assert K > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/77", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_Diff\nProblem Description:\n\"\"\"\nWrite a python function that finds whether a number is divisible by 11; the input must be an integer. \n\nassert is_Diff (12345) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Diff(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n % 11 == 0 \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/79", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: word_len\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the length of the word is odd or not; the input must be a string and it must contain only alphabetic characters. \n\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef word_len(s):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert s.isalpha(), \"invalid inputs\" # $_CONTRACT_$\n \n    return len(s) % 2 == 1\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert s.isalpha(), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/80", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: tetrahedral_number\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth tetrahedral number, where the input n must be an integer and n must be greater than or equal to zero.\n\nassert tetrahedral_number(5) == 35\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tetrahedral_number(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/82", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: volume_sphere\nProblem Description:\n\"\"\"\nWrite a python function that calculates the volume of a sphere given its radius; the radius must be either an integer or a float, and it must be greater than zero.\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef volume_sphere(r):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert r > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/84", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sequence\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth number in the newman conway sequence; the input n must be an integer and it must be greater than zero.\n\nassert sequence(10) == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sequence(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/85", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: surfacearea_sphere\nProblem Description:\n\"\"\"\nWrite a python function that calculates the surface area of a sphere; the radius must be a number that is either an integer or a float and must also be greater than zero.\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef surfacearea_sphere(r):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 4 * math.pi * (r**2)\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert r > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/86", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: centered_hexagonal_number\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth centered hexagonal number; the input n must be an integer and n must be greater than zero.\n\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef centered_hexagonal_number(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/87", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: merge_dictionaries_three\nProblem Description:\n\"\"\"\nWrite a python function that merges three dictionaries into a single dictionary; each of the three inputs must be a dictionary. \n\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(dict2, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(dict3, dict), \"invalid inputs\" # $_CONTRACT_$\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\n", "constraints": {"assert_0": "assert isinstance(dict1, dict), \"invalid inputs", "assert_1": "assert isinstance(dict2, dict), \"invalid inputs", "assert_2": "assert isinstance(dict3, dict), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/88", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: freq_count\nProblem Description:\n\"\"\"\nWrite a python function that gets the frequency of all the elements in a list and returns it as a dictionary; the input must be a list. \n\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport collections\ndef freq_count(list1):\n\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  freq_count= collections.Counter(list1)\n  return freq_count\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/89", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: closest_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the closest smaller number than n, where n must be an integer. \n\nassert closest_num(11) == 10\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef closest_num(N):\n\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n  return (N - 1)\n", "constraints": {"assert_0": "assert isinstance(N, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/90", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: len_log\nProblem Description:\n\"\"\"\nWrite a python function that finds the length of the longest word; the input must be a list, the list must not be empty, and all elements in the list must be strings.\n\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef len_log(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, str) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, str) for item in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/91", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_substring\nProblem Description:\n\"\"\"\nWrite a python function that checks if a string is present as a substring in a given list of string values; the first input must be a list, every element in that list must be a string, and the second input must also be a string.\n\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_substring(str1, sub_str):\n\n   assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n   assert all(isinstance(item, str) for item in str1), \"invalid inputs\" # $_CONTRACT_$\n   assert isinstance(sub_str, str), \"invalid inputs\" # $_CONTRACT_$\n   return any(sub_str in s for s in str1)\n", "constraints": {"assert_0": "assert isinstance(str1, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, str) for item in str1), \"invalid inputs", "assert_2": "assert isinstance(sub_str, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/92", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_undulating\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number is undulating or not; the input must be an integer and it must be non-negative.\n\nassert is_undulating(1212121) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_undulating(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tdigits = [int(digit) for digit in str(n)]\n\tif len(set(digits)) != 2:\n\t\treturn False\n\treturn all(a != b for a, b in zip(digits, digits[1:]))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/93", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: power\nProblem Description:\n\"\"\"\nWrite a python function that calculates the value of 'a' to the power 'b', where 'a' must be either an integer or a float, and 'b' must be an integer.\n\nassert power(3,4) == 81\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef power(a, b):\n\n\tassert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\treturn a ** b\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/94", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: index_minimum\nProblem Description:\n\"\"\"\nWrite a python function that returns the first value of the tuple with the smallest second value; the input must be a non-empty list and each element of the list must be a tuple with at least two elements, where the second element of each tuple must be either an integer or a float.\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom operator import itemgetter \ndef index_minimum(test_list):\n\n  assert isinstance(test_list, list) and len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) and len(item) >= 2 for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item[1], (int, float)) for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n", "constraints": {"assert_0": "assert isinstance(test_list, list) and len(test_list) > 0, \"invalid inputs", "assert_1": "assert all(isinstance(item, tuple) and len(item) >= 2 for item in test_list), \"invalid inputs", "assert_2": "assert all(isinstance(item[1], (int, float)) for item in test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/95", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: Find_Min_Length\nProblem Description:\n\"\"\"\nWrite a python function that finds the length of the smallest list in a list of lists; the input must be a list, it must contain at least one element, and every element within it must also be a list.\n\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Find_Min_Length(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in lst), \"invalid inputs\" # $_CONTRACT_$\n  \n    minLength = min(len(x) for x in lst )\n    return minLength \n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert len(lst) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, list) for item in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/96", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: divisor\nProblem Description:\n\"\"\"\nWrite a python function that finds the number of divisors of a given integer, and the input must be an integer greater than zero. \n\nassert divisor(15) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef divisor(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return sum(1 for i in range(1, n + 1) if n % i == 0)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/97", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: frequency_lists\nProblem Description:\n\"\"\"\nWrite a python function that finds the frequency of each element in a flattened list of lists, ensuring that the input is a list, it is not empty, every item in the list is also a list, and all items in the sublists are hashable. \n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef frequency_lists(list1):\n\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(item) for sublist in list1 for item in sublist), \"invalid inputs\" # $_CONTRACT_$\n    list1 = [item for sublist in list1 for item in sublist]\n    return {x: list1.count(x) for x in list1}\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, list) for item in list1), \"invalid inputs", "assert_3": "assert all(is_hashable(item) for sublist in list1 for item in sublist), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/98", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: multiply_num\nProblem Description:\n\"\"\"\nWrite a python function that multiplies all the numbers in a list and divides the result by the length of the list; the input must be either a tuple or a list, it must not be empty, and every item in the input must be either an integer or a float.\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef multiply_num(numbers):\n\n    assert isinstance(numbers, (tuple, list)), \"invalid inputs\" # $_CONTRACT_$\n    assert len(numbers) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in numbers), \"invalid inputs\" # $_CONTRACT_$\n  \n    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n", "constraints": {"assert_0": "assert isinstance(numbers, (tuple, list)), \"invalid inputs", "assert_1": "assert len(numbers) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, (int, float)) for item in numbers), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/99", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: decimal_to_binary\nProblem Description:\n\"\"\"\nWrite a python function that converts a given decimal number to its binary equivalent represented as a string with no leading zeros; the input must be an integer. \n\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef decimal_to_binary(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n).replace(\"0b\",\"\") \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/100", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: next_smallest_palindrome\nProblem Description:\n\"\"\"\nWrite a python function that finds the next smallest palindrome of a specified integer, where the input must be an integer and it must be non-negative.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef next_smallest_palindrome(num):\n\n    assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n    assert num >= 0, \"invalid inputs\" # $_CONTRACT_$\n    if all(digit == '9' for digit in str(num)):\n        return num + 2\n    else:\n        num = [int(digit) for digit in str(num)]\n        n = len(num)\n        mid = n // 2\n        left_smaller = False\n        # if n is odd, ignore the middle digit at first\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n        while i >= 0 and num[i] == num[j]:\n            i -= 1\n            j += 1\n        # stop if traverse end or difference found\n        if i < 0 or num[i] < num[j]:\n            left_smaller = True\n        # copy left to right\n        while i >= 0:\n            num[j] = num[i]\n            j += 1\n            i -= 1\n        # the middle digit must be incremented\n        if left_smaller:\n            carry = 1\n            i = mid - 1\n            if n % 2:\n                num[mid] += carry\n                carry = num[mid] // 10\n                num[mid] %= 10\n                j = mid + 1\n            else:\n                j = mid\n            while i >= 0:\n                num[i] += carry\n                carry = num[i] // 10\n                num[i] %= 10\n                num[j] = num[i]\n                j += 1\n                i -= 1\n    return int(\"\".join(map(str, num)))\n", "constraints": {"assert_0": "assert isinstance(num, int), \"invalid inputs", "assert_1": "assert num >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/101", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: kth_element\nProblem Description:\n\"\"\"\nWrite a python function that finds the kth element in the given array using 1-based indexing, where the first input must be a list and the second input must be an integer, and the length of the list must be greater than or equal to k and k must be at least 1.\n\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef kth_element(arr, k):\n\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$ \n  assert len(arr) >= k >= 1, \"invalid inputs\" # $_CONTRACT_$\n  return arr[k-1]\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert isinstance(k, int), \"invalid inputs", "assert_2": "assert len(arr) >= k >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/102", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: snake_to_camel\nProblem Description:\n\"\"\"\nWrite a python function that converts a snake case string to a camel case string; the input must be a string and it must not be empty.\n\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef snake_to_camel(word):\n\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(word) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "constraints": {"assert_0": "assert isinstance(word, str), \"invalid inputs", "assert_1": "assert len(word) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/103", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: eulerian_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the Eulerian number a(n, m) where n and m are both integers and n must be greater than or equal to zero and m must also be greater than or equal to zero. \n\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef eulerian_num(n, m):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert isinstance(m, int), \"invalid inputs", "assert_2": "assert n >= 0, \"invalid inputs", "assert_3": "assert m >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/104", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sort_sublists\nProblem Description:\n\"\"\"\nWrite a python function that sorts each sublist of strings in a given list of lists; the input must be either a list or a tuple, each element of the input must be a list, and every element within those lists must be a string.\n\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sort_sublists(input_list):\n\n    assert isinstance(input_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in input_list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(all(isinstance(y, str) for y in x) for x in input_list), \"invalid inputs\" # $_CONTRACT_$\n    return [sorted(x) for x in input_list]\n", "constraints": {"assert_0": "assert isinstance(input_list, (list, tuple)), \"invalid inputs", "assert_1": "assert all(isinstance(x, list) for x in input_list), \"invalid inputs", "assert_2": "assert all(all(isinstance(y, str) for y in x) for x in input_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/105", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of true booleans in the given list; the input must be a list and all elements in the list must be of boolean type.\n\nassert count([True,False,True]) == 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, bool) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n   \n    return sum(lst) \n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, bool) for x in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/106", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: add_lists\nProblem Description:\n\"\"\"\nWrite a python function that appends the given list to the given tuples; the first input must be a list and the second input must be a tuple.\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef add_lists(test_list, test_tup):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_tup + tuple(test_list)\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/108", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: merge_sorted_list\nProblem Description:\n\"\"\"\nWrite a python function that merges three lists into a single sorted list; each of the three inputs must be of type list and all elements within these lists must be either integers or floats. \n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n\n  assert isinstance(num1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num3, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n", "constraints": {"assert_0": "assert isinstance(num1, list), \"invalid inputs", "assert_1": "assert isinstance(num2, list), \"invalid inputs", "assert_2": "assert isinstance(num3, list), \"invalid inputs", "assert_3": "assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs", "assert_4": "assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs", "assert_5": "assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/109", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: odd_Equivalent\nProblem Description:\n\"\"\"\nWrite a python function that finds the number of numbers with an odd value when rotating a binary string the given number of times; the first input must be a string, the second input must be an integer, the string must only contain the characters '0' and '1', and the integer must be non-negative.\n\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_Equivalent(s,n):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert isinstance(n, int), \"invalid inputs", "assert_2": "assert all([c in '01' for c in s]), \"invalid inputs", "assert_3": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/111", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: common_in_nested_lists\nProblem Description:\n\"\"\"\nWrite a python function that finds the common elements in given nested lists; the input must be a list and every item within that list must also be a list.\n\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef common_in_nested_lists(nestedlist):\n\n    assert isinstance(nestedlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in nestedlist), \"invalid inputs\" # $_CONTRACT_$\n    return list(set.intersection(*map(set, nestedlist)))\n", "constraints": {"assert_0": "assert isinstance(nestedlist, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, list) for item in nestedlist), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/113", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_integer\nProblem Description:\n\"\"\"\nWrite a python function that checks if a string represents an integer or not; the input must be a string. \n\nassert check_integer(\"python\")==False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_integer(text):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/116", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: tuple_to_int\nProblem Description:\n\"\"\"\nWrite a python function that converts a given tuple of positive integers into a single integer; the input must be a tuple, it must contain at least one element, all elements in the tuple must be integers, and all integers must be positive.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_to_int(nums):\n\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x > 0 for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n", "constraints": {"assert_0": "assert isinstance(nums, tuple), \"invalid inputs", "assert_1": "assert len(nums) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in nums), \"invalid inputs", "assert_3": "assert all(x > 0 for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/118", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: string_to_list\nProblem Description:\n\"\"\"\nWrite a python function that converts a string to a list of strings split on the space character; the input must be a string. \n\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef string_to_list(string):\n\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return string.split(\" \")\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/119", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: search\nProblem Description:\n\"\"\"\nWrite a python function that finds the element that appears only once in a sorted array; the input \u201carr\u201d must be a list, every element in \u201carr\u201d must be an integer, and the elements in \u201carr\u201d must be sorted in non-decreasing order.\n\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef search(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in arr), \"invalid inputs", "assert_2": "assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/120", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_product_tuple\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum absolute product between numbers in pairs of tuples within a given list; the input must be a list, every element in the list must be a tuple, each tuple must contain exactly two elements, both elements of the tuples must be integers or floats. \n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_product_tuple(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[0], (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[1], (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max(abs(x * y) for x, y in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) for x in list1), \"invalid inputs", "assert_2": "assert all(len(x) == 2 for x in list1), \"invalid inputs", "assert_3": "assert all(isinstance(x[0], (int, float)) for x in list1), \"invalid inputs", "assert_4": "assert all(isinstance(x[1], (int, float)) for x in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/123", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: amicable_numbers_sum\nProblem Description:\n\"\"\"\nWrite a python function that sums all amicable numbers from 1 to a specified number, where the input must be an integer and it must be greater than or equal to 1.\n\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    assert limit >= 1, \"invalid inputs\" # $_CONTRACT_$\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n", "constraints": {"assert_0": "assert isinstance(limit, int), \"invalid inputs", "assert_1": "assert limit >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/124", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: angle_complex\nProblem Description:\n\"\"\"\nWrite a python function that returns the angle of a complex number; the first input must be an integer or a float, the second input must be a complex number or a float, and the real part of the second input must be zero.\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport cmath\ndef angle_complex(a,b):\n\n  assert isinstance(a, (int, float)) or isinstance(a, float), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, complex) or isinstance(b, float), \"invalid inputs\" # $_CONTRACT_$\n  assert b.real == 0, \"invalid inputs\" # $_CONTRACT_$\n  angle=cmath.phase(a+b)\n  return angle\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)) or isinstance(a, float), \"invalid inputs", "assert_1": "assert isinstance(b, complex) or isinstance(b, float), \"invalid inputs", "assert_2": "assert b.real == 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/125", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_length\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum difference between the number of 0s and the number of 1s in any sub-string of the given binary string; the input must be a string and all characters in the string must be either '0' or '1'.\n\nassert find_length(\"11000010001\") == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_length(string):\n\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert all([c in '01' for c in string]), \"invalid inputs\" # $_CONTRACT_$\n \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs", "assert_1": "assert all([c in '01' for c in string]), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/126", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of common divisors of two given numbers; both inputs must be integers and greater than zero. \n\nassert sum(10,15) == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef sum(a,b):\n\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n", "constraints": {"assert_0": "assert isinstance(a, int), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs", "assert_2": "assert a > 0, \"invalid inputs", "assert_3": "assert b > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/127", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: multiply_int\nProblem Description:\n\"\"\"\nWrite a python function that multiplies two integers and both inputs must be integers. \n\nassert multiply_int(10,20)==200\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef multiply_int(x, y):\n\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n    return x * y\n", "constraints": {"assert_0": "assert isinstance(x, int), \"invalid inputs", "assert_1": "assert isinstance(y, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/128", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: long_words\nProblem Description:\n\"\"\"\nWrite a python function that finds words that are longer than n characters from a given list of words; n must be an integer, s must be a string, and n must be non-negative.\n\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef long_words(n, s):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return list(filter(lambda x: len(x) > n, s.split(' ')))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert isinstance(s, str), \"invalid inputs", "assert_2": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/129", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: magic_square_test\nProblem Description:\n\"\"\"\nWrite a python function that calculates whether the matrix is a magic square; the input must be a list, it must not be empty, every element in the list must be a list, the first row must not be empty, every row must have the same length as the first row, and all items in the matrix must be either integers or floats.\n\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef magic_square_test(my_matrix):\n\n    assert isinstance(my_matrix, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(my_matrix) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(row, list) for row in my_matrix), \"invalid inputs\" # $_CONTRACT_$\n    assert len(my_matrix[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(row) == len(my_matrix[0]) for row in my_matrix), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for row in my_matrix for item in row), \"invalid inputs\" # $_CONTRACT_$\n    s = sum(my_matrix[0])\n    # row\n    if any(sum(row) != s for row in my_matrix):\n        return False\n    # column\n    if any(sum(row[i] for row in my_matrix) != s for i in range(len(my_matrix[0]))):\n        return False\n    # diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != s:\n        return False\n    # anti-diagonal\n    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))) != s:\n        return False\n    return True\n", "constraints": {"assert_0": "assert isinstance(my_matrix, list), \"invalid inputs", "assert_1": "assert len(my_matrix) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(row, list) for row in my_matrix), \"invalid inputs", "assert_3": "assert len(my_matrix[0]) > 0, \"invalid inputs", "assert_4": "assert all(len(row) == len(my_matrix[0]) for row in my_matrix), \"invalid inputs", "assert_5": "assert all(isinstance(item, (int, float)) for row in my_matrix for item in row), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/130", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_occurrences\nProblem Description:\n\"\"\"\nWrite a python function that finds the item with maximum frequency in a given list; the input must be a list and all elements of the list must be either integers, floats, or strings.\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom collections import defaultdict\ndef max_occurrences(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float, str)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, (int, float, str)) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/131", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: reverse_vowels\nProblem Description:\n\"\"\"\nWrite a python function that reverses only the vowels of a given string where the input must be of type string. \n\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef reverse_vowels(str1):\n\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/132", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: tup_string\nProblem Description:\n\"\"\"\nWrite a python function that converts a tuple to a string; the input must be a tuple and every item in the tuple must be a string.\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tup_string(tup1):\n\n  assert isinstance(tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, str) for item in tup1), \"invalid inputs\" # $_CONTRACT_$\n  return ''.join(tup1)\n", "constraints": {"assert_0": "assert isinstance(tup1, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(item, str) for item in tup1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/133", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_negativenum\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of the negative numbers from a given list of numbers; the input must be a list and every element in the list must be either an integer or a float.\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_negativenum(nums):\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return sum(x for x in nums if x < 0)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/135", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: hexagonal_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth hexagonal number, where n must be an integer and n must be greater than or equal to zero.\n\nassert hexagonal_num(10) == 190\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef hexagonal_num(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/137", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: zero_count\nProblem Description:\n\"\"\"\nWrite a python function that finds the ratio of zeroes to non-zeroes in an array of integers; the input must be a list, all elements in the list must be integers, and the list must not be empty.\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef zero_count(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in nums), \"invalid inputs", "assert_2": "assert len(nums) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/138", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_Sum_Of_Powers_Of_Two\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number can be represented as a sum of non-zero powers of 2; the input must be an integer. \n\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Sum_Of_Powers_Of_Two(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n > 0 and n % 2 == 0\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/139", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: circle_circumference\nProblem Description:\n\"\"\"\nWrite a python function that calculates the circumference of a circle given its radius; the radius must be an integer and greater than zero.\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef circle_circumference(r):\n\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n", "constraints": {"assert_0": "assert isinstance(r, int), \"invalid inputs", "assert_1": "assert r > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/140", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: extract_singly\nProblem Description:\n\"\"\"\nWrite a python function that flattens a list of lists into a single set of numbers, where the input must be a list or tuple, each element of the input must be a list or tuple, and every element within those lists or tuples must be either an integer or a float.\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_singly(test_list):\n\n  assert isinstance(test_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return set([item for sublist in test_list for item in sublist])\n", "constraints": {"assert_0": "assert isinstance(test_list, (list, tuple)), \"invalid inputs", "assert_1": "assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs", "assert_2": "assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/141", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: pancake_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts a list of elements while ensuring that the input is a list and every element in that list is either an integer or a float.\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef pancake_sort(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/142", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_samepair\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of items that are identical in the same position of three given lists; the first input must be a list, the second input must also be a list, and the third input must be a list.\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_samepair(list1,list2,list3):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(list2, list), \"invalid inputs", "assert_2": "assert isinstance(list3, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/145", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_Abs_Diff\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum difference between any two elements in a given array; the input must be either a tuple or a list, the length of the input array must be greater than zero, and all elements in the array must be either integers or floats.\n\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_Abs_Diff(arr):\n\n    assert isinstance(arr, (tuple, list)), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return max(arr) - min(arr)\n", "constraints": {"assert_0": "assert isinstance(arr, (tuple, list)), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/160", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_solution\nProblem Description:\n\"\"\"\nWrite a python function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists; the inputs a, b, and n must all be integers.\n\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_solution(a, b, n):\n\n\tassert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n", "constraints": {"assert_0": "assert isinstance(a, int), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs", "assert_2": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/161", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_elements\nProblem Description:\n\"\"\"\nWrite a python function that removes all elements from a given list that are present in another list; both inputs must be lists. \n\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_elements(list1, list2):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(list2, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/162", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_series\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of (n - 2*i) from i equals 0 to n divided by 2, where n must be an integer. \n\nassert sum_series(6) == 12\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_series(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/165", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_char_position\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of characters in a string that occur at the same position in the string as in the English alphabet, where the input must be a string and all characters in the string must be alphabetic.\n\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_char_position(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x.isalpha() for x in str1), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(ord(ch.lower()) - ord('a') == i for i, ch in enumerate(str1))\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs", "assert_1": "assert all(x.isalpha() for x in str1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/166", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_even_pair\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of pairs of integers in a list that xor to an even number; the input must be a list and all elements in the list must be integers.\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_even_pair(A):\n\n  assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])\n", "constraints": {"assert_0": "assert isinstance(A, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in A), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/167", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: next_power_of_2\nProblem Description:\n\"\"\"\nWrite a python function that finds the smallest power of 2 greater than or equal to n; the input n must be an integer and it must be greater than or equal to zero.\n\nassert next_power_of_2(0) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef next_power_of_2(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res; \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/168", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: frequency\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of occurrences of a number in a given list; the first argument must be a list and the second argument must be either an integer or a float.\n\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef frequency(a,x):\n\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return a.count(x)\n", "constraints": {"assert_0": "assert isinstance(a, list), \"invalid inputs", "assert_1": "assert isinstance(x, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/170", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_range_list\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of numbers in a list within a range specified by two indices; the first input must be a list, all elements of the list must be either integers or floats, both indices must be integers, and the indices must be within the valid range of the list's length. \n\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_range_list(list1, m, n):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in list1), \"invalid inputs", "assert_2": "assert isinstance(m, int), \"invalid inputs", "assert_3": "assert isinstance(n, int), \"invalid inputs", "assert_4": "assert 0 <= m < len(list1), \"invalid inputs", "assert_5": "assert 0 <= n < len(list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/171", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: perimeter_pentagon\nProblem Description:\n\"\"\"\nWrite a python function that calculates the perimeter of a regular pentagon based on the length of its sides; the input must be either an integer or a float. \n\nassert perimeter_pentagon(5) == 25\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef perimeter_pentagon(a):\n\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 5 * a\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/172", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_occurance\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of occurrences of the string 'std' in a given string; the input must be a string. \n\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_occurance(s):\n\n  assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n  return s.count('std')\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/222", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_type\nProblem Description:\n\"\"\"\nWrite a python function that checks if all the elements in a tuple have the same data type; the input must be a tuple and it must contain at least one element.\n\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_type(test_tuple):\n\n    assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(test_tuple) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n", "constraints": {"assert_0": "assert isinstance(test_tuple, tuple), \"invalid inputs", "assert_1": "assert len(test_tuple) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/223", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_majority\nProblem Description:\n\"\"\"\nWrite a python function that takes in a sorted array, its length as an integer, and an element which is either an integer or a float, and returns whether the element is the majority element in the given sorted array; the input must be a list, all items in the list must be either integers or floats, the list must be sorted in non-decreasing order, the length must be an integer, the element must be either an integer or a float, and the length of the array must be less than or equal to the provided length.\n\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom bisect import bisect_left, bisect_right\ndef is_majority(arr, n, x):\n\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(item, (int, float)) for item in arr), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(a <= b for a, b in zip(arr[:n], arr[1:n])), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) <= n, \"invalid inputs\" # $_CONTRACT_$\n\tif x not in arr:\n\t\treturn False\n\tl = bisect_left(arr, x)\n\tr = bisect_right(arr, x)\n\treturn r - l > n / 2\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in arr), \"invalid inputs", "assert_2": "assert all(a <= b for a, b in zip(arr[:n], arr[1:n])), \"invalid inputs", "assert_3": "assert isinstance(n, int), \"invalid inputs", "assert_4": "assert isinstance(x, (int, float)), \"invalid inputs", "assert_5": "assert len(arr) <= n, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/224", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_Set_Bits\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of set bits in a given non-negative integer; the input must be an integer and it must be greater than or equal to zero.\n\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_Set_Bits(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/226", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: odd_values_string\nProblem Description:\n\"\"\"\nWrite a python function that removes the characters which have odd index values of a given string; the input must be a string. \n\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_values_string(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/227", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: min_of_three\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum of three numbers; the inputs must be either integers or floats. \n\nassert min_of_three(10,20,0)==0\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef min_of_three(a,b,c):\n\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(c, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/230", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: replace_blank\nProblem Description:\n\"\"\"\nWrite a python function that takes in a string and a character, replaces blank spaces in the string with the character, and returns the string; the first input must be a string, the second input must be a string, and the second input must be a single character.\n\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_blank(str1, char):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs", "assert_1": "assert isinstance(char, str), \"invalid inputs", "assert_2": "assert len(char) == 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/232", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: larg_nnum\nProblem Description:\n\"\"\"\nWrite a python function that returns a list containing the n largest items from the input list; the first input must be a list, all elements in the list must be either integers or floats, the second input must be an integer, and the integer must be between zero and the length of the list.\n\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport heapq\ndef larg_nnum(list1, n):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n    return heapq.nlargest(n,list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs", "assert_2": "assert isinstance(n, int), \"invalid inputs", "assert_3": "assert 0 <= n <= len(list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/233", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: lateralsuface_cylinder\nProblem Description:\n\"\"\"\nWrite a python function that calculates the lateral surface area of a cylinder; both the radius and height must be either integers or floats, the radius must be greater than zero, and the height must also be greater than zero.\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef lateralsuface_cylinder(r, h):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_2": "assert r > 0, \"invalid inputs", "assert_3": "assert h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/234", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: volume_cube\nProblem Description:\n\"\"\"\nWrite a python function that calculates the volume of a cube based on its side length, where the side length must be either an integer or a float and it must be greater than zero.\n\nassert volume_cube(3)==27\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef volume_cube(l):\n\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert l > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/235", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: even_bit_set_number\nProblem Description:\n\"\"\"\nWrite a python function that sets all even bits of a given number; the input must be an integer and must be greater than or equal to zero.\n\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_bit_set_number(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/237", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_occurences\nProblem Description:\n\"\"\"\nWrite a python function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list; the input must be a list and every element in that list must be a tuple.\n\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom collections import Counter \ndef check_occurences(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return dict(Counter(tuple(sorted(t)) for t in test_list))\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/238", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: number_of_substrings\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of non-empty substrings of a given string; the input must be a string. \n\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef number_of_substrings(str1):\n\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/239", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_total_number_of_sequences\nProblem Description:\n\"\"\"\nWrite a python function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m; both m and n must be integers and greater than zero. \n\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_total_number_of_sequences(m, n):\n\n\tassert isinstance(m, int) and m > 0, \"invalid inputs\" # $_CONTRACT_$ \n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n\tT=[[0 for _ in range(n + 1)] for _ in range(m + 1)] \n\tfor i in range(m + 1): \n\t\tfor j in range(n + 1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j] = 0\n\t\t\telif i<j: \n\t\t\t\tT[i][j] = 0\n\t\t\telif j==1: \n\t\t\t\tT[i][j] = i \n\t\t\telse: \n\t\t\t\tT[i][j] = T[i-1][j] + T[i//2][j-1] \n\treturn T[m][n]\n", "constraints": {"assert_0": "assert isinstance(m, int) and m > 0, \"invalid inputs", "assert_1": "assert isinstance(n, int) and n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/240", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: replace_list\nProblem Description:\n\"\"\"\nWrite a python function that takes in two lists and replaces the last element of the first list with the elements of the second list; both inputs must be lists, the first list must not be empty. \n\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_list(list1, list2):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:-1] + list2\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert isinstance(list2, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/242", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_charac\nProblem Description:\n\"\"\"\nWrite a python function that counts the total number of characters in a string; the input must be a string. \n\nassert count_charac(\"python programming\")==18\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_charac(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return len(str1)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/244", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: next_Perfect_Square\nProblem Description:\n\"\"\"\nWrite a python function that finds the next perfect square greater than a given number; the input must be either an integer or a float.\n\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math  \ndef next_Perfect_Square(N):\n\n    assert isinstance(N, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n", "constraints": {"assert_0": "assert isinstance(N, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/245", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_sum\nProblem Description:\n\"\"\"\nWrite a python function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_sum(arr):\n\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/247", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: lps\nProblem Description:\n\"\"\"\nWrite a python function that finds the length of the longest palindromic subsequence in the given string; the input must be a string. \n\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef lps(str1):\n\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/250", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_X\nProblem Description:\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple; the input must be a tuple. \n\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_X(tup, x):\n\n    assert isinstance(tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n \n    return tup.count(x)\n", "constraints": {"assert_0": "assert isinstance(tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/251", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: insert_element\nProblem Description:\n\"\"\"\nWrite a python function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list; the first input must be a list. \n\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef insert_element(list1, element):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    list1 = [v for elt in list1 for v in (element, elt)]\n    return list1\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/252", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: convert\nProblem Description:\n\"\"\"\nWrite a python function that converts complex numbers to polar coordinates; the input must be an integer, float, or complex number.\n\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport cmath  \ndef convert(numbers):\n\n  assert isinstance(numbers, (int, float, complex)), \"invalid inputs\" # $_CONTRACT_$ \n    \n  return cmath.polar(numbers)  \n", "constraints": {"assert_0": "assert isinstance(numbers, (int, float, complex)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/253", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_integer\nProblem Description:\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list; the input must be a list. \n\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_integer(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(isinstance(x, int) for x in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/255", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: combinations_colors\nProblem Description:\n\"\"\"\nWrite a python function that generates all combinations with repetition of the elements from a given list and returns a list containing a tuple for each combination; the first input must be a list and the second input must be a non-negative integer.\n\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return list(combinations_with_replacement(l, n))\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert isinstance(n, int), \"invalid inputs", "assert_2": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/256", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_Primes_nums\nProblem Description:\n\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number; the input must be an integer and it must be non-negative. \n\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_Primes_nums(n):\n\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n", "constraints": {"assert_0": "assert isinstance(n, int) and n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/257", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: swap_numbers\nProblem Description:\n\"\"\"\nWrite a python function that takes in two numbers and returns a tuple with the second number and then the first number; both inputs must be either integers or floats. \n\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef swap_numbers(a,b):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/259", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: maximize_elements\nProblem Description:\n\"\"\"\nWrite a python function that maximizes the elements from two tuples where each input must be a tuple, both tuples must be of the same length, both tuples must have a length greater than zero, each element of the first tuple must be a tuple of length two, each element of the second tuple must also be a tuple of length two, and each element of both tuples must consist of two numbers that are either integers or floats. \n\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef maximize_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple((max(a, c), max(b, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert len(test_tup1) == len(test_tup2), \"invalid inputs", "assert_3": "assert len(test_tup1) > 0, \"invalid inputs", "assert_4": "assert len(test_tup2) > 0, \"invalid inputs", "assert_5": "assert all(isinstance(x, tuple) for x in test_tup1), \"invalid inputs", "assert_6": "assert all(isinstance(x, tuple) for x in test_tup2), \"invalid inputs", "assert_7": "assert all(len(x) == 2 for x in test_tup1), \"invalid inputs", "assert_8": "assert all(len(x) == 2 for x in test_tup2), \"invalid inputs", "assert_9": "assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup1), \"invalid inputs", "assert_10": "assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/260", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: newman_prime\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth newman\u2013shanks\u2013williams prime number; the input n must be an integer and it must be greater than or equal to zero.\n\nassert newman_prime(3) == 7\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef newman_prime(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/261", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: division_elements\nProblem Description:\n\"\"\"\nWrite a python function that takes in two tuples and performs mathematical division operation element-wise across the given tuples; the first tuple must be of type tuple, the second tuple must also be of type tuple, both tuples must have the same length, every element in the first tuple must be either an integer or a float, and every element in the second tuple must be either an integer or a float and must not be zero.\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef division_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) and ele != 0 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert len(test_tup1) == len(test_tup2), \"invalid inputs", "assert_3": "assert all(isinstance(ele, (int, float)) for ele in test_tup1), \"invalid inputs", "assert_4": "assert all(isinstance(ele, (int, float)) and ele != 0 for ele in test_tup2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/262", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: split_two_parts\nProblem Description:\n\"\"\"\nWrite a python function that splits a given list into two parts where the length of the first part is determined by the integer L, and the input must be a list for the first argument and an integer for the second argument, with L constrained to be between 0 and the length of the list. \n\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef split_two_parts(list1, L):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(L, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:L], list1[L:]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(L, int), \"invalid inputs", "assert_2": "assert 0 <= L <= len(list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/264", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: dog_age\nProblem Description:\n\"\"\"\nWrite a python function that calculates a dog's age in dog years; the input must be an integer and it must be non-negative. \n\nassert dog_age(12)==61\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef dog_age(h_age):\n\n\tassert isinstance(h_age, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert h_age >= 0, \"invalid inputs\" # $_CONTRACT_$\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age\n", "constraints": {"assert_0": "assert isinstance(h_age, int), \"invalid inputs", "assert_1": "assert h_age >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/265", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: list_split\nProblem Description:\n\"\"\"\nWrite a python function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists; the first input must be a list, the second input must be an integer, and the integer must be greater than zero.\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef list_split(S, step):\n\n    assert isinstance(S, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(step, int), \"invalid inputs\" # $_CONTRACT_$\n    assert step > 0, \"invalid inputs\" # $_CONTRACT_$\n    return [S[i::step] for i in range(step)]\n", "constraints": {"assert_0": "assert isinstance(S, list), \"invalid inputs", "assert_1": "assert isinstance(step, int), \"invalid inputs", "assert_2": "assert step > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/266", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: lateralsurface_cube\nProblem Description:\n\"\"\"\nWrite a python function that calculates the lateral surface area of a cube given its side length, ensuring that the side length is either an integer or a float and that it is greater than zero.\n\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef lateralsurface_cube(l):\n\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 4 * l * l\n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert l > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/267", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: square_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers; n must be an integer and n must be greater than zero.\n\nassert square_Sum(2) == 10\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return n * (4 * n * n - 1) / 3\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/268", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_star_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the n'th star number, where the input n must be an integer greater than zero. \n\nassert find_star_num(3) == 37\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_star_num(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/269", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: ascii_value\nProblem Description:\n\"\"\"\nWrite a python function that finds the ascii value of a character; the input must be a string and its length must be exactly one character. \n\nassert ascii_value('A')==65\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef ascii_value(k):\n\n  assert isinstance(k, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(k)==1, \"invalid inputs\" # $_CONTRACT_$\n  return ord(k)\n", "constraints": {"assert_0": "assert isinstance(k, str), \"invalid inputs", "assert_1": "assert len(k)==1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/270", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_even_and_even_index\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of even numbers at even positions of a list; the input must be a list and all elements of the list must be integers. \n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_even_and_even_index(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(x for x in arr[::2] if x % 2 == 0)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/271", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: even_Power_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power; n must be an integer and n must be greater than zero.\n\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_Power_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/272", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: rear_extract\nProblem Description:\n\"\"\"\nWrite a python function that returns a list containing the rear element of each tuple from a given list of tuples; the input must be a list and every element in the list must be a non-empty tuple. \n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef rear_extract(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return [x[-1] for x in test_list]\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/273", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: substract_elements\nProblem Description:\n\"\"\"\nWrite a python function that subtracts the elements of the first tuple by the elements of the second tuple with the same index; both inputs must be tuples, they must be of the same length, and all elements in both tuples must be either integers or floats.\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef substract_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert len(test_tup1) == len(test_tup2), \"invalid inputs", "assert_3": "assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs", "assert_4": "assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/274", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: even_binomial_Coeff_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients; n must be an integer and n must be greater than zero.\n\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/276", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: volume_cylinder\nProblem Description:\n\"\"\"\nWrite a python function that takes in the radius and height of a cylinder and returns the volume; the radius must be a number, the height must be a number, the radius must be greater than zero, and the height must be greater than zero.\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef volume_cylinder(r,h):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.pi * r * r * h\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_2": "assert r > 0, \"invalid inputs", "assert_3": "assert h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/277", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: dict_filter\nProblem Description:\n\"\"\"\nWrite a python function that filters a dictionary to only include entries with values greater than or equal to a given integer n; the first input must be a dictionary, all values in the dictionary must be integers, and the second input must be an integer.\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef dict_filter(dict1, n):\n\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in dict1.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n", "constraints": {"assert_0": "assert isinstance(dict1, dict), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in dict1.values()), \"invalid inputs", "assert_2": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/278", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_first_elements\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of elements that occur before a specified element in a given tuple, and the input must be a tuple. \n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_first_elements(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return count\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/279", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_num_decagonal\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth decagonal number; the input n must be an integer and it must be greater than zero.\n\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_num_decagonal(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/280", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sequential_search\nProblem Description:\n\"\"\"\nWrite a python function that takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found); the array must be a list. \n\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sequential_search(dlist, item):\n\n    assert isinstance(dlist, list), \"invalid inputs\" # $_CONTRACT_$\n    return item in dlist, (dlist.index(item) if item in dlist else -1)\n", "constraints": {"assert_0": "assert isinstance(dlist, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/281", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: all_unique\nProblem Description:\n\"\"\"\nWrite a python function that checks if the elements of a given list are unique or not; the input must be a list. \n\nassert all_unique([1,2,3]) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef all_unique(test_list):\n\n    assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n    return len(test_list) == len(set(test_list))\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/282", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sub_list\nProblem Description:\n\"\"\"\nWrite a python function that subtracts two lists element-wise, where both inputs must be lists, each list must not be empty, both lists must be of the same length, and all elements in both lists must be either integers or floats.\n\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sub_list(nums1,nums2):\n\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n", "constraints": {"assert_0": "assert isinstance(nums1, list), \"invalid inputs", "assert_1": "assert isinstance(nums2, list), \"invalid inputs", "assert_2": "assert len(nums1) > 0, \"invalid inputs", "assert_3": "assert len(nums2) > 0, \"invalid inputs", "assert_4": "assert len(nums1) == len(nums2), \"invalid inputs", "assert_5": "assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs", "assert_6": "assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/283", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: validate\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself; the input must be an integer and it must be non-negative.\n\nassert validate(1234) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef validate(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    digits = [int(digit) for digit in str(n)]\n    return all(digit >= digits.count(digit) for digit in digits)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/284", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_element\nProblem Description:\n\"\"\"\nWrite a python function that takes in a list and an element and checks whether all items in the list are equal to the given element; the first input must be a list, and all elements in the list must be of the same type as the second input. \n\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_element(list1, element):\n\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, type(element)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n  return all(v == element for v in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, type(element)) for x in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/285", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: text_match_two_three\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a string contains the 'a' character followed by two or three 'b' characters; the input must be a string. \n\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_two_three(text):\n\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/286", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_sub_array_sum_repeated\nProblem Description:\n\"\"\"\nWrite a python function that finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times; the first argument must be a list, the list must not be empty, all elements in the list must be integers or floats, the second argument must be an integer equal to the length of the list, and the third argument must be a non-negative integer.\n\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_sub_array_sum_repeated(a, n, k):\n\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(a) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int) and n == len(a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int) and k >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tmodifed = a * k\n\tpre = 0\t# dp[i-1]\n\tres = modifed[0]\n\tfor n in modifed:\n\t\tpre = max(pre + n, n)\n\t\tres = max(pre, res)\n\treturn res\n", "constraints": {"assert_0": "assert isinstance(a, list), \"invalid inputs", "assert_1": "assert len(a) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs", "assert_3": "assert isinstance(n, int) and n == len(a), \"invalid inputs", "assert_4": "assert isinstance(k, int) and k >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/287", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: square_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of squares of first n even natural numbers; n must be an integer and n must be greater than or equal to zero.\n\nassert square_Sum(2) == 20\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return 2 * n * (n + 1) * (2 * n + 1) /3\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/290", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_length\nProblem Description:\n\"\"\"\nWrite a python function that finds the list of maximum length in a list of lists; the input must be a list and every element within that list must also be a list. \n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_length(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, list) for x in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/292", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find\nProblem Description:\n\"\"\"\nWrite a python function that finds the quotient of two numbers rounded down to the nearest integer; both inputs must be integers and the second input must not be zero.\n\nassert find(10,3) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find(n,m):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert m != 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return n // m \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert isinstance(m, int), \"invalid inputs", "assert_2": "assert m != 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/293", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: otherside_rightangle\nProblem Description:\n\"\"\"\nWrite a python function that finds the third side of a right angled triangle; both \"w\" and \"h\" must be either integers or floats and greater than zero. \n\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef otherside_rightangle(w,h):\n\n  assert isinstance(w, (int, float)) and w > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)) and h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(w * w + h * h)\n", "constraints": {"assert_0": "assert isinstance(w, (int, float)) and w > 0, \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)) and h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/294", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_val\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum value in a given heterogeneous list, where the input must be a list, the list must not be empty, and it must contain at least one integer. \n\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_val(listval):\n\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val\n", "constraints": {"assert_0": "assert isinstance(listval, list), \"invalid inputs", "assert_1": "assert len(listval) > 0, \"invalid inputs", "assert_2": "assert any(isinstance(i, int) for i in listval), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/296", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_Inv_Count\nProblem Description:\n\"\"\"\nWrite a python function that counts inversions in an array; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_Inv_Count(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/297", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: flatten_list\nProblem Description:\n\"\"\"\nWrite a python function that flattens a given nested list structure; the input must be a list and it must pass a structural check to ensure it contains valid elements. \n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef flatten_list(list1):\n\n\tdef list_check(l): # $_CONTRACT_$\n\t\tif not isinstance(l, list): # $_CONTRACT_$\n\t\t\treturn isinstance(l, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(list_check(item) for item in l) # $_CONTRACT_$\n\tassert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert list_check(list1), \"invalid inputs\" # $_CONTRACT_$\n\tresult = []\n\tfor item in list1:\n\t\tif isinstance(item, list):\n\t\t\tresult.extend(flatten_list(item))\n\t\telse:\n\t\t\tresult.append(item)\n\treturn result\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert list_check(list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/299", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_aggregate\nProblem Description:\n\"\"\"\nWrite a python function that calculates the maximum aggregate from a list of tuples, where the input must be a list, each element of the list must be a tuple, each tuple must contain exactly two elements, and the second element of each tuple must be either an integer or a float.\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n\n    assert isinstance(stdata, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[1], (int, float)) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n", "constraints": {"assert_0": "assert isinstance(stdata, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs", "assert_2": "assert all(len(x) == 2 for x in stdata), \"invalid inputs", "assert_3": "assert all(isinstance(x[1], (int, float)) for x in stdata), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/300", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_binary_seq\nProblem Description:\n\"\"\"\nWrite a python function that finds the count of all binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits; the input n must be an integer greater than zero.\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_binary_seq(n):\n\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \n", "constraints": {"assert_0": "assert isinstance(n, int) and n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/301", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: dict_depth\nProblem Description:\n\"\"\"\nWrite a python function that finds the depth of a dictionary; the input must be a dictionary. \n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n    return dict_depth_aux(d)\n", "constraints": {"assert_0": "assert isinstance(d, dict), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/305", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: start_withp\nProblem Description:\n\"\"\"\nWrite a python function that returns two words from a list of words starting with letter 'p'; the input must be a list and all elements in the list must be strings.\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef start_withp(words):\n\n    assert isinstance(words, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in words), \"invalid inputs\" # $_CONTRACT_$\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n", "constraints": {"assert_0": "assert isinstance(words, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in words), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/306", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_sum_increasing_subseq\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum sum of increasing subsequence from prefix until the ith index and also includes a given kth element which is after i, i.e., k must be greater than i, the input must be a list, all elements in the list must be either integers or floats, n must be an integer equal to the length of the list, index must be an integer within the range of 0 and n-1, k must be an integer greater than index and less than n. \n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_sum_increasing_subseq(a, n, index, k):\n\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n == len(a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(index, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert 0 <= index < n, \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert index < k < n, \"invalid inputs\" # $_CONTRACT_$\n\tdp = [[0 for _ in range(n)] for _ in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\n", "constraints": {"assert_0": "assert isinstance(a, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in a), \"invalid inputs", "assert_2": "assert isinstance(n, int), \"invalid inputs", "assert_3": "assert n == len(a), \"invalid inputs", "assert_4": "assert isinstance(index, int), \"invalid inputs", "assert_5": "assert 0 <= index < n, \"invalid inputs", "assert_6": "assert isinstance(k, int), \"invalid inputs", "assert_7": "assert index < k < n, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/308", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: large_product\nProblem Description:\n\"\"\"\nWrite a python function that finds the specified number of largest products from two given lists, selecting one factor from each list; both inputs must be lists, all elements in the first list must be either integers or floats, the second input must also be a list, all elements in the second list must be either integers or floats, the specified number of largest products must be an integer, and this number must be between zero and the product of the lengths of the two lists inclusive.\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef large_product(nums1, nums2, N):\n\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n", "constraints": {"assert_0": "assert isinstance(nums1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs", "assert_2": "assert isinstance(nums2, list), \"invalid inputs", "assert_3": "assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs", "assert_4": "assert isinstance(N, int), \"invalid inputs", "assert_5": "assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/309", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: maximum\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum of two numbers; both inputs must be either integers or floats. \n\nassert maximum(5,10) == 10\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef maximum(a,b):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return max(a, b)\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/310", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: string_to_tuple\nProblem Description:\n\"\"\"\nWrite a python function that converts a given string to a tuple of characters; the input must be a string. \n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef string_to_tuple(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/311", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: set_left_most_unset_bit\nProblem Description:\n\"\"\"\nWrite a python function that sets the left most unset bit of a given integer; the input must be a non-negative integer. \n\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef set_left_most_unset_bit(n):\n\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n", "constraints": {"assert_0": "assert isinstance(n, int) and n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/312", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: volume_cone\nProblem Description:\n\"\"\"\nWrite a python function that calculates the volume of a cone; the radius must be a positive integer or float. \n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef volume_cone(r,h):\n\n  assert isinstance(r, (int, float)) and r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return (1.0 / 3) * math.pi * r * r * h\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)) and r > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/388", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: highest_Power_of_2\nProblem Description:\n\"\"\"\nWrite a python function that finds the highest power of 2 that is less than or equal to n; n must be an integer and must be greater than 0.\n\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef highest_Power_of_2(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/389", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_lucas\nProblem Description:\n\"\"\"\nWrite a python function that finds the n'th lucas number; the input n must be an integer that is greater than or equal to zero. \n\nassert find_lucas(9) == 76\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_lucas(n):\n\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n", "constraints": {"assert_0": "assert isinstance(n, int) and n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/390", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: add_string\nProblem Description:\n\"\"\"\nWrite a python function that applies a given format string to all of the elements in a list; the first input must be a list and the second input must be a string. \n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef add_string(list_, string):\n\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n", "constraints": {"assert_0": "assert isinstance(list_, list), \"invalid inputs", "assert_1": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/391", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: convert_list_dictionary\nProblem Description:\n\"\"\"\nWrite a python function that converts more than one list to a nested dictionary; the first input must be a list, the second input must be a list, and the third input must also be a list.\n\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef convert_list_dictionary(l1, l2, l3):\n\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n", "constraints": {"assert_0": "assert isinstance(l1, list), \"invalid inputs", "assert_1": "assert isinstance(l2, list), \"invalid inputs", "assert_2": "assert isinstance(l3, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/392", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_max_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n), where the input n must be an integer and must be greater than or equal to zero.\n\nassert get_max_sum(60) == 106\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_max_sum (n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/394", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_distinct\nProblem Description:\n\"\"\"\nWrite a python function that checks if a given tuple contains no duplicates, and the input must be a tuple. \n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_distinct(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return len(test_tup) == len(set(test_tup))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/395", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: first_non_repeating_character\nProblem Description:\n\"\"\"\nWrite a python function that finds the first non-repeated character in a given string; the input must be a string and its length must be greater than zero.\n\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef first_non_repeating_character(str1):\n\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(str1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  for ch in str1:\n    if str1.count(ch) == 1:\n      return ch\n  return None\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs", "assert_1": "assert len(str1) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/397", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: median_numbers\nProblem Description:\n\"\"\"\nWrite a python function that finds the median of three numbers; the inputs must be of type integer or float for each of the three numbers provided. \n\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef median_numbers(a,b,c):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(c, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/398", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_of_digits\nProblem Description:\n\"\"\"\nWrite a python function that computes the sum of digits of each number in a given list, where the input must be a list. \n\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_of_digits(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/404", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: minimum\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum of two numbers; both inputs must be either integers or floats. \n\nassert minimum(1,2) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef minimum(a,b):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n   \n    return min(a,b)\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/405", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_tuplex\nProblem Description:\n\"\"\"\nWrite a python function that checks whether an element exists within a tuple; the first input must be a tuple. \n\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_tuplex(tuplex, element):\n\n  assert isinstance(tuplex, tuple), \"invalid inputs\" # $_CONTRACT_$\n \n  return element in tuplex\n", "constraints": {"assert_0": "assert isinstance(tuplex, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/406", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_Parity\nProblem Description:\n\"\"\"\nWrite a python function that determines whether the parity of a given number is odd; the input must be an integer.\n\nassert find_Parity(12) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Parity(x):\n\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return x % 2 != 0\n", "constraints": {"assert_0": "assert isinstance(x, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/409", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: min_product_tuple\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum product from the pairs of tuples within a given list; the input must be a list, it must not be empty, every element in the list must be a tuple, and each element of those tuples must be either an integer or a float.\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef min_product_tuple(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for sub in list1 for ele in sub), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs", "assert_3": "assert all(isinstance(ele, (int, float)) for sub in list1 for ele in sub), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/410", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: min_val\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum value in a given heterogeneous list where the input must be a list, the list must not be empty, and it must contain at least one integer. \n\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef min_val(listval):\n\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n", "constraints": {"assert_0": "assert isinstance(listval, list), \"invalid inputs", "assert_1": "assert len(listval) > 0, \"invalid inputs", "assert_2": "assert any(isinstance(i, int) for i in listval), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/412", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_odd\nProblem Description:\n\"\"\"\nWrite a python function that removes odd numbers from a given list; the input must be a list and all elements of the list must be integers.\n\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_odd(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in l), \"invalid inputs\" # $_CONTRACT_$\n    return [i for i in l if i % 2 == 0]\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, int) for i in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/413", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: extract_nth_element\nProblem Description:\n\"\"\"\nWrite a python function that extracts the nth element from a given list of tuples; the input must be a list, each item in the list must be a tuple, the index n must be an integer, and n must be less than the length of each tuple in the list. \n\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_nth_element(list1, n):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(tup, tuple) for tup in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all(n < len(tup) for tup in list1), \"invalid inputs\" # $_CONTRACT_$\n    return [x[n] for x in list1]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(tup, tuple) for tup in list1), \"invalid inputs", "assert_2": "assert isinstance(n, int), \"invalid inputs", "assert_3": "assert all(n < len(tup) for tup in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/414", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: overlapping\nProblem Description:\n\"\"\"\nWrite a python function that checks whether any value in one list exists in another list; both inputs must be lists and every element in the first list must be either an integer or a float while every element in the second list must also be either an integer or a float.\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef overlapping(list1,list2):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(list2, list), \"invalid inputs", "assert_2": "assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs", "assert_3": "assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/415", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_Product\nProblem Description:\n\"\"\"\nWrite a python function that finds a pair with the highest product from a given array of integers; the input must be a list, the list must contain at least two elements, and all elements in the list must be integers.\n\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_Product(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) >= 2, \"invalid inputs", "assert_2": "assert all(isinstance(i, int) for i in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/418", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: Find_Max\nProblem Description:\n\"\"\"\nWrite a python function that finds the element of a list having maximum length; the input must be a list, and every element within that list must also be a list.\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Find_Max(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, list) for i in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return max(lst, key = len)\n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, list) for i in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/419", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: round_and_sum\nProblem Description:\n\"\"\"\nWrite a python function that rounds every number in a given list of numbers and prints the total sum multiplied by the length of the list; the input must be a list, and every element in that list must be either an integer or a float.\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef round_and_sum(list1):\n\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/420", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: cube_Sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the cube sum of the first n even natural numbers; n must be an integer and n must be greater than or equal to zero.\n\nassert cube_Sum(2) == 72\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef cube_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/421", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: concatenate_tuple\nProblem Description:\n\"\"\"\nWrite a python function that concatenates each element of a tuple by the delimiter; the input must be a tuple. \n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef concatenate_tuple(test_tup):\n\n    assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/422", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_Average_Of_Cube\nProblem Description:\n\"\"\"\nWrite a python function that finds the average of cubes of the first n natural numbers; the input n must be an integer and must be greater than or equal to zero.\n\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Average_Of_Cube(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum([(i ** 3) for i in range(1, n + 1)]) / n\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/424", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: extract_rear\nProblem Description:\n\"\"\"\nWrite a python function that extracts only the rear index element of each string in the given tuple; the input must be a tuple, every element in the tuple must be a string, and every string must have a length greater than zero.\n\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_rear(test_tuple):\n\n  assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, str) for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) > 0 for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n  return [ele[-1] for ele in test_tuple]\n", "constraints": {"assert_0": "assert isinstance(test_tuple, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(ele, str) for ele in test_tuple), \"invalid inputs", "assert_2": "assert all(len(ele) > 0 for ele in test_tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/425", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_element_in_list\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of sublists containing a particular element; the input must be a list and every element within that list must also be a list. \n\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_element_in_list(list1, x):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, list) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(x in sublist for sublist in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, list) for i in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/426", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: filter_oddnumbers\nProblem Description:\n\"\"\"\nWrite a python function that filters odd numbers from a list; the input must be a list and all elements in the list must be integers.\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef filter_oddnumbers(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in nums if n % 2 == 1]\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, int) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/427", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: change_date_format\nProblem Description:\n\"\"\"\nWrite a python function that converts a date from yyyy-mm-dd format to dd-mm-yyyy format; the input must be a string and it must match the pattern of four digits followed by a hyphen, one or two digits, another hyphen, and one or two digits.\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef change_date_format(dt):\n\n    assert isinstance(dt, str), \"invalid inputs\" # $_CONTRACT_$\n    assert re.match(r'\\d{4}-\\d{1,2}-\\d{1,2}', dt), \"invalid inputs\" # $_CONTRACT_$\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n", "constraints": {"assert_0": "assert isinstance(dt, str), \"invalid inputs", "assert_1": "assert re.match(r'\\d{4}-\\d{1,2}-\\d{1,2}', dt), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/428", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: shell_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts the given array using shell sort, and the input must be a list where all elements are either integers or floats. \n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef shell_sort(my_list):\n\n    assert isinstance(my_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n", "constraints": {"assert_0": "assert isinstance(my_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/429", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: and_tuples\nProblem Description:\n\"\"\"\nWrite a python function that extracts the elementwise and tuples from the given two tuples; both input parameters must be tuples and they must have the same length. \n\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef and_tuples(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert len(test_tup1) == len(test_tup2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/430", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: parabola_directrix\nProblem Description:\n\"\"\"\nWrite a python function that finds the directrix of a parabola; the inputs \"a\", \"b\", and \"c\" must each be either an integer or a float. \n\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef parabola_directrix(a, b, c):\n\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(c, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/432", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: median_trapezium\nProblem Description:\n\"\"\"\nWrite a python function that finds the median length of a trapezium, ensuring that both base1 and base2 are either integers or floats. \n\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef median_trapezium(base1,base2,height):\n\n    assert isinstance(base1, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(base2, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (base1 + base2) / 2\n", "constraints": {"assert_0": "assert isinstance(base1, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(base2, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/433", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_greater\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the entered number is greater than the elements of the given array; the input \"arr\" must be a list, all elements in \"arr\" must be either integers or floats, and \"number\" must also be an integer or a float.\n\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_greater(arr, number):\n\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(number, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return all(number > el for el in arr)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(el, (int, float)) for el in arr), \"invalid inputs", "assert_2": "assert isinstance(number, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/435", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: last_Digit\nProblem Description:\n\"\"\"\nWrite a python function that finds the last digit of a given number; the input must be an integer. \n\nassert last_Digit(123) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef last_Digit(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n < 0: \n        n = -n\n    return n % 10\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/436", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: neg_nos\nProblem Description:\n\"\"\"\nWrite a python function that returns the negative numbers in a list; the input must be a list and all elements in the list must be either integers or floats.\n\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef neg_nos(list1):\n\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  return [i for i in list1 if i < 0]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/437", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_odd\nProblem Description:\n\"\"\"\nWrite a python function that removes odd characters in a string; the input must be a string. \n\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_odd(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1[1::2]\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/439", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: multiple_to_single\nProblem Description:\n\"\"\"\nWrite a python function that joins a list of multiple integers into a single integer; the input must be a list, the list must contain at least one element, all elements in the list must be integers, and all elements except the first must be greater than zero.\n\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef multiple_to_single(L):\n\n  assert isinstance(L, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(L) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n", "constraints": {"assert_0": "assert isinstance(L, list), \"invalid inputs", "assert_1": "assert len(L) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, int) for item in L), \"invalid inputs", "assert_3": "assert all(item > 0 for item in L[1:]), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/440", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_adverb_position\nProblem Description:\n\"\"\"\nWrite a python function that finds the first adverb and their positions in a given sentence; the input must be a string. \n\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef find_adverb_position(text):\n\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/441", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: surfacearea_cube\nProblem Description:\n\"\"\"\nWrite a python function that calculates the surface area of a cube given its size; the input must be either an integer or a float.\n\nassert surfacearea_cube(5)==150\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef surfacearea_cube(l):\n\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 6 * l * l\n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/445", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: index_multiplication\nProblem Description:\n\"\"\"\nWrite a python function that performs index wise multiplication of tuple elements in the given two tuples; both inputs must be tuples, each element of the first tuple must also be a tuple, each element of the second tuple must also be a tuple, each tuple in the first input must contain exactly two elements, each tuple in the second input must also contain exactly two elements, and all elements in both input tuples must be either integers or floats.\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef index_multiplication(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert all(isinstance(ele, tuple) for ele in test_tup1), \"invalid inputs", "assert_3": "assert all(isinstance(ele, tuple) for ele in test_tup2), \"invalid inputs", "assert_4": "assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs", "assert_5": "assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs", "assert_6": "assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs", "assert_7": "assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/446", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_Occurrence\nProblem Description:\n\"\"\"\nWrite a python function that counts the occurrence of all elements of a list in a tuple; the first input must be a tuple and the second input must be a list.\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom collections import Counter \ndef count_Occurrence(tup, lst):\n\n    assert isinstance(tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(tup.count(ele) for ele in lst)\n", "constraints": {"assert_0": "assert isinstance(tup, tuple), \"invalid inputs", "assert_1": "assert isinstance(lst, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/447", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: cube_nums\nProblem Description:\n\"\"\"\nWrite a python function that calculates the cubes of individual elements in a list; the input must be a list and all elements in the list must be either integers or floats.\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef cube_nums(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n**3 for n in nums]\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/448", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: cal_sum\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of perrin numbers; the input \u201cn\u201d must be an integer. \n\nassert cal_sum(9) == 49\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef cal_sum(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/450", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: extract_string\nProblem Description:\n\"\"\"\nWrite a python function that extracts specified size of strings from a given list of string values; the first input must be a list, every element in that list must be a string, and the second input must be an integer.\n\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_string(str1, l):\n\n    assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    return [e for e in str1 if len(e) == l] \n", "constraints": {"assert_0": "assert isinstance(str1, list), \"invalid inputs", "assert_1": "assert all(isinstance(ele, str) for ele in str1), \"invalid inputs", "assert_2": "assert isinstance(l, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/451", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_whitespaces\nProblem Description:\n\"\"\"\nWrite a python function that removes all whitespaces from the given string while ensuring that the input is a string. \n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef remove_whitespaces(text1):\n\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return text1.replace(' ', '')\n", "constraints": {"assert_0": "assert isinstance(text1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/453", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sumofFactors\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of even factors of a number, where the input must be an integer and it must be non-negative.\n\nassert sumofFactors(18) == 26\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math \ndef sumofFactors(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if (n % 2 != 0) : \n        return 0\n    return sum([i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0])\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/454", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: text_match_wordz\nProblem Description:\n\"\"\"\nWrite a python function that checks if a given string contains a word with the letter 'z'; the input must be a string. \n\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_wordz(text):\n\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return 'z' in text\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/455", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_monthnumb_number\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given month number contains 31 days or not; the input month number must be an integer and it must be between 1 and 12 inclusive.\n\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_monthnumb_number(monthnum2):\n\n  assert isinstance(monthnum2, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum2 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n", "constraints": {"assert_0": "assert isinstance(monthnum2, int), \"invalid inputs", "assert_1": "assert 1 <= monthnum2 <= 12, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/456", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: reverse_string_list\nProblem Description:\n\"\"\"\nWrite a python function that reverses each string in a given list of string values; the input must be a list, and every element within that list must be a string.\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef reverse_string_list(stringlist):\n\n    assert isinstance(stringlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n    return [x[::-1] for x in stringlist]\n", "constraints": {"assert_0": "assert isinstance(stringlist, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in stringlist), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/457", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: Find_Min\nProblem Description:\n\"\"\"\nWrite a python function that finds the sublist having minimum length; the input must be a list and every element in that list must also be a list.\n\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Find_Min(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return min(lst, key=len) \n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, list) for x in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/458", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: rectangle_area\nProblem Description:\n\"\"\"\nWrite a python function that finds the area of a rectangle; both length and breadth must be numbers either of type integer or float, and both must be greater than zero.\n\nassert rectangle_area(10,20)==200\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef rectangle_area(l,b):\n\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert l > 0, \"invalid inputs", "assert_3": "assert b > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/459", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_uppercase\nProblem Description:\n\"\"\"\nWrite a python function that removes uppercase substrings from a given string; the input must be a string. \n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_uppercase(str1):\n\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return ''.join(c for c in str1 if c.islower())\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/460", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: Extract\nProblem Description:\n\"\"\"\nWrite a python function that retrieves the first element of each sublist, where the input must be a list, each element of the input list must also be a list, and each sublist must contain at least one element.\n\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Extract(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(l, list) for l in lst), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(l) > 0 for l in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return [item[0] for item in lst] \n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert all(isinstance(l, list) for l in lst), \"invalid inputs", "assert_2": "assert all(len(l) > 0 for l in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/462", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: combinations_list\nProblem Description:\n\"\"\"\nWrite a python function that finds all possible combinations of the elements of a given list; the input must be a list. \n\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef combinations_list(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/463", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_subarray_product\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum product subarray of the given array, where the input must be a list, the list must not be empty, and all elements of the list must be either integers or floats.\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_subarray_product(arr):\n\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/465", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: drop_empty\nProblem Description:\n\"\"\"\nWrite a python function that drops empty items from a given dictionary; the input must be a dictionary. \n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef drop_empty(dict1):\n\n  assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n", "constraints": {"assert_0": "assert isinstance(dict1, dict), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/468", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_product\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum product formed by multiplying numbers of an increasing subsequence of the given array; the input must be a list, all elements in the list must be either integers or floats, and the list must contain at least one element.\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_product(arr):\n\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs", "assert_2": "assert len(arr) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/470", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: add_pairwise\nProblem Description:\n\"\"\"\nWrite a python function that finds the pairwise addition of the neighboring elements of the given tuple; the input must be a tuple and all elements within that tuple must be either integers or floats.\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef add_pairwise(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/471", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_remainder\nProblem Description:\n\"\"\"\nWrite a python function that finds the product of the array multiplication modulo n, where the input must be a list, the list must not be empty, all elements in the list must be either integers or floats, and n must be either an integer or a float.\n\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_remainder(arr, n):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    from functools import reduce\n    return reduce(lambda x, y: x * y, arr) % n\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs", "assert_3": "assert isinstance(n, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/472", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_Consecutive\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given list contains consecutive numbers or not; the input must be a list, the list must not be empty, and all elements in the list must be integers.\n\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_Consecutive(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return sorted(l) == list(range(min(l),max(l)+1)) \n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert len(l) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/473", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: tuple_intersection\nProblem Description:\n\"\"\"\nWrite a python function that finds the tuple intersection of elements in the given tuple list irrespective of their order; the first input must be a list, the second input must also be a list, and all elements in both lists must be tuples.\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_intersection(test_list1, test_list2):\n\n  assert isinstance(test_list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_list2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n", "constraints": {"assert_0": "assert isinstance(test_list1, list), \"invalid inputs", "assert_1": "assert isinstance(test_list2, list), \"invalid inputs", "assert_2": "assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs", "assert_3": "assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/474", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: replace_char\nProblem Description:\n\"\"\"\nWrite a python function that replaces characters in a string, ensuring that the first input is a string, the second input is a string of length one, the third input is a string, and the fourth input is also a string of length one. \n\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_char(str1, ch, newch):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(newch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newch) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(ch, newch)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs", "assert_1": "assert isinstance(ch, str), \"invalid inputs", "assert_2": "assert len(ch) == 1, \"invalid inputs", "assert_3": "assert isinstance(newch, str), \"invalid inputs", "assert_4": "assert len(newch) == 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/475", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sort_counter\nProblem Description:\n\"\"\"\nWrite a python function that sorts a dictionary by value; the input must be a dictionary and all values in that dictionary must be either integers or floats.\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sort_counter(dict1):\n\n assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(x, (int, float)) for x in dict1.values()), \"invalid inputs\" # $_CONTRACT_$\n return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n", "constraints": {"assert_0": "assert isinstance(dict1, dict), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in dict1.values()), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/476", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: big_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of the largest and smallest value in a given array; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef big_sum(nums):\n\n      assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n      assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n      return max(nums) + min(nums)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert len(nums) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/477", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_lower\nProblem Description:\n\"\"\"\nWrite a python function that converts the given string to lower case; the input must be a string. \n\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_lower(string):\n\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return string.lower()\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/478", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_lowercase\nProblem Description:\n\"\"\"\nWrite a python function that removes lowercase substrings from a given string; the input must be a string.\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef remove_lowercase(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return re.sub('[a-z]', '', str1)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/479", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: first_Digit\nProblem Description:\n\"\"\"\nWrite a python function that finds the first digit of a given number; the input must be an integer and it must be non-negative. \n\nassert first_Digit(123) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef first_Digit(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/554", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: Split\nProblem Description:\n\"\"\"\nWrite a python function that takes a list of integers and returns only the odd ones; the input must be a list, it must contain more than zero elements, and every element in the list must be an integer.\n\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Split(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(filter(lambda x: x % 2 == 1, l))\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert len(l) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/555", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: difference\nProblem Description:\n\"\"\"\nWrite a python function that finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers; the input n must be an integer and must be greater than or equal to zero.\n\nassert difference(3) == 30\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef difference(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/556", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_Odd_Pair\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of pairs whose xor value is odd; the first input must be a list, all elements in the list must be integers, and the second input must be an integer.\n\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Odd_Pair(A,N) :\n\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n", "constraints": {"assert_0": "assert isinstance(A, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in A), \"invalid inputs", "assert_2": "assert isinstance(N, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/557", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: toggle_string\nProblem Description:\n\"\"\"\nWrite a python function that toggles the case of all characters in a string; the input must be a string. \n\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef toggle_string(string):\n\n assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n return string.swapcase()\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/558", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: digit_distance_nums\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of the per-digit difference between two integers; both inputs must be integers, and each integer must be non-negative.\n\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef digit_distance_nums(n1, n2):\n\n    assert isinstance(n1, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n2, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n", "constraints": {"assert_0": "assert isinstance(n1, int), \"invalid inputs", "assert_1": "assert isinstance(n2, int), \"invalid inputs", "assert_2": "assert n1 >= 0, \"invalid inputs", "assert_3": "assert n2 >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/559", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_sub_array_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of the largest contiguous sublist in the given list; the input must be a list and the size must be an integer that is less than or equal to the length of the list. \n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_sub_array_sum(a, size):\n\n  assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(size, int), \"invalid inputs\" # $_CONTRACT_$\n  assert size <= len(a), \"invalid inputs\" # $_CONTRACT_$\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\n", "constraints": {"assert_0": "assert isinstance(a, list), \"invalid inputs", "assert_1": "assert isinstance(size, int), \"invalid inputs", "assert_2": "assert size <= len(a), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/560", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: union_elements\nProblem Description:\n\"\"\"\nWrite a python function that finds the union of the elements of two given tuples and outputs them in sorted order; both inputs must be tuples, and all elements in each tuple must be either integers or floats. \n\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef union_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs", "assert_3": "assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/562", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: Find_Max_Length\nProblem Description:\n\"\"\"\nWrite a python function that finds the length of the longest sublists; the input must be a list, it must not be empty, and every element in the input list must also be a list.\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Find_Max_Length(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n  \n    return len(max(lst, key = len))\n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert len(lst) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, list) for x in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/563", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: extract_values\nProblem Description:\n\"\"\"\nWrite a python function that extracts values between quotation marks from a string; the input parameter must be a string. \n\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef extract_values(text):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return (re.findall(r'\"(.*?)\"', text))\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/564", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_Pairs\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of possible unordered pairs from a list of integers where both elements are unequal; the input must be a list, all elements in the list must be integers, the second input must be an integer, and the integer must not exceed the length of the list. \n\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_Pairs(arr,n):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in arr), \"invalid inputs", "assert_2": "assert isinstance(n, int), \"invalid inputs", "assert_3": "assert n <= len(arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/565", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: split\nProblem Description:\n\"\"\"\nWrite a python function that splits a string into characters; the input must be a string. \n\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef split(word):\n\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(word)\n", "constraints": {"assert_0": "assert isinstance(word, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/566", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_digits\nProblem Description:\n\"\"\"\nWrite a python function that returns the sum of the digits of a non-negative integer; the input must be an integer and it must be non-negative. \n\nassert sum_digits(345)==12\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_digits(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  return sum(map(int, str(n)))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/567", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: issort_list\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a specified list is sorted or not and the input must be a list.\n\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef issort_list(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return all(a <= b for a, b in zip(list1, list1[1:]))\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/568", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: empty_list\nProblem Description:\n\"\"\"\nWrite a python function that creates a list of N empty dictionaries where N is a non-negative integer; the length must be an integer and it must be greater than or equal to zero.\n\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef empty_list(length):\n\n assert isinstance(length, int), \"invalid inputs\" # $_CONTRACT_$\n assert length >= 0, \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n", "constraints": {"assert_0": "assert isinstance(length, int), \"invalid inputs", "assert_1": "assert length >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/569", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sort_sublists\nProblem Description:\n\"\"\"\nWrite a python function that sorts each sublist of strings in a given list of lists; the input must be a list, it must not be empty, every element of the list must also be a list, and each sublist must only contain strings.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sort_sublists(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for sublist in list1 for x in sublist), \"invalid inputs\" # $_CONTRACT_$\n    return list(map(sorted,list1)) \n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, list) for x in list1), \"invalid inputs", "assert_3": "assert all(isinstance(x, str) for sublist in list1 for x in sublist), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/572", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: two_unique_nums\nProblem Description:\n\"\"\"\nWrite a python function that removes duplicate numbers from a given number of lists; the input must be a list and every item in the list must be either an integer or a float.\n\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef two_unique_nums(nums):\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return [n for n in nums if nums.count(n)==1]\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/573", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: unique_product\nProblem Description:\n\"\"\"\nWrite a python function that calculates the product of the unique numbers in a given list; the input must be a list and all elements within that list must be either integers or floats.\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef unique_product(list_data):\n\n    assert isinstance(list_data, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs\" # $_CONTRACT_$\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))\n", "constraints": {"assert_0": "assert isinstance(list_data, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/576", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_Sub_Array\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a list is a sublist of another list; both inputs must be lists. \n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Sub_Array(A,B):\n\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(B, list), \"invalid inputs\" # $_CONTRACT_$\n \n    a = 0\n    b = 0\n    while a < len(A) and b < len(B):\n        if A[a] == B[b]:\n            a += 1\n            b += 1\n        else:\n            a += 1\n    return b == len(B)\n", "constraints": {"assert_0": "assert isinstance(A, list), \"invalid inputs", "assert_1": "assert isinstance(B, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/577", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: last_Digit_Factorial\nProblem Description:\n\"\"\"\nWrite a python function that finds the last digit in the factorial of a given number; the input must be a number that is either an integer or a float and must be greater than or equal to zero.\n\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef last_Digit_Factorial(n):\n\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0\n", "constraints": {"assert_0": "assert isinstance(n, (int, float)), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/578", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: interleave_lists\nProblem Description:\n\"\"\"\nWrite a python function that interleaves three lists of the same length into a single flat list; all inputs must be lists and the lengths of the three lists must be equal. \n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef interleave_lists(list1, list2, list3):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) == len(list2) == len(list3), \"invalid inputs\" # $_CONTRACT_$\n    return [el for pair in zip(list1, list2, list3) for el in pair]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(list2, list), \"invalid inputs", "assert_2": "assert isinstance(list3, list), \"invalid inputs", "assert_3": "assert len(list1) == len(list2) == len(list3), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/579", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_dissimilar\nProblem Description:\n\"\"\"\nWrite a python function that finds the dissimilar elements in the given two tuples; \"test_tup1\" and \"test_tup2\" must each be tuples. \n\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_dissimilar(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) ^ set(test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/580", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: extract_even\nProblem Description:\n\"\"\"\nWrite a python function that removes uneven elements from a nested mixed tuple; the input must be a tuple and it must satisfy the structural integrity defined by the tuple_check function.\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_ele(test_tuple, ): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele), ) \n\t\telif ele % 2 == 0: \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n\n\tdef tuple_check(t): # $_CONTRACT_$\n\t\tif not isinstance(t, tuple): # $_CONTRACT_$\n\t\t\treturn isinstance(t, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(tuple_check(item) for item in t) # $_CONTRACT_$\n\tassert isinstance(test_tuple, tuple) # $_CONTRACT_$\n\tassert tuple_check(test_tuple) # $_CONTRACT_$\n\treturn even_ele(test_tuple)\n", "constraints": {"assert_0": "assert isinstance(test_tuple, tuple)", "assert_1": "assert tuple_check(test_tuple)"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/581", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: surface_Area\nProblem Description:\n\"\"\"\nWrite a python function that finds the surface area of a square pyramid with a given base edge and height; the base edge and height must each be either an integer or a float, and both must be greater than zero.\n\nassert surface_Area(3,4) == 33\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef surface_Area(b,s):\n\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n", "constraints": {"assert_0": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(s, (int, float)), \"invalid inputs", "assert_2": "assert b > 0, \"invalid inputs", "assert_3": "assert s > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/583", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: catalan_number\nProblem Description:\n\"\"\"\nWrite a python function that returns the nth catalan number; the input must be an integer and it must be greater than or equal to zero. \n\nassert catalan_number(10)==16796\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef catalan_number(num):\n\n    assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n    assert num >= 0, \"invalid inputs\" # $_CONTRACT_$\n    if num <= 1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num - i - 1)\n    return res_num\n", "constraints": {"assert_0": "assert isinstance(num, int), \"invalid inputs", "assert_1": "assert num >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/585", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: expensive_items\nProblem Description:\n\"\"\"\nWrite a python function that finds the n most expensive items in a given dataset; the items input must be a list, n must be an integer greater than zero, each element of items must be a dictionary, each dictionary must contain the key 'name', each dictionary must also contain the key 'price', and the value associated with 'price' must be either an integer or a float.\n\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport heapq\ndef expensive_items(items,n):\n\n  assert isinstance(items, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, dict) for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all('name' in x.keys() for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all('price' in x.keys() for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x['price'], (int, float)) for x in items), \"invalid inputs\" # $_CONTRACT_$\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\n", "constraints": {"assert_0": "assert isinstance(items, list), \"invalid inputs", "assert_1": "assert isinstance(n, int), \"invalid inputs", "assert_2": "assert n > 0, \"invalid inputs", "assert_3": "assert all(isinstance(x, dict) for x in items), \"invalid inputs", "assert_4": "assert all('name' in x.keys() for x in items), \"invalid inputs", "assert_5": "assert all('price' in x.keys() for x in items), \"invalid inputs", "assert_6": "assert all(isinstance(x['price'], (int, float)) for x in items), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/586", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: split_Arr\nProblem Description:\n\"\"\"\nWrite a python function that splits a list at the nth element and adds the first part to the end; the first input must be a list and the second input must be an integer, and the integer must be within the range from 0 to the length of the list inclusive.\n\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef split_Arr(l, n):\n\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= len(l), \"invalid inputs\" # $_CONTRACT_$\n  return l[n:] + l[:n]\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert isinstance(n, int), \"invalid inputs", "assert_2": "assert 0 <= n <= len(l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/587", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: list_tuple\nProblem Description:\n\"\"\"\nWrite a python function that converts a list to a tuple; the input must be a list. \n\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef list_tuple(listx):\n\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(listx)\n", "constraints": {"assert_0": "assert isinstance(listx, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/588", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: big_diff\nProblem Description:\n\"\"\"\nWrite a python function that finds the difference between the largest and smallest value in a given list; the input must be a list, it must not be empty, and all elements in the list must be either integers or floats.\n\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef big_diff(nums):\n\n     assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n     return max(nums) - min(nums)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert len(nums) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/589", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: perfect_squares\nProblem Description:\n\"\"\"\nWrite a python function that finds perfect squares between two given numbers, ensuring that both inputs must be integers. \n\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef perfect_squares(a, b):\n\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n", "constraints": {"assert_0": "assert isinstance(a, int), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/590", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: polar_rect\nProblem Description:\n\"\"\"\nWrite a python function that converts polar coordinates to rectangular coordinates, ensuring that both inputs must be either integers or floats. \n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport cmath\ndef polar_rect(x,y):\n\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    cn = cmath.polar(complex(x, y))\n    cn1 = cmath.rect(2, cmath.pi)\n    return (cn, cn1)\n", "constraints": {"assert_0": "assert isinstance(x, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(y, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/591", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: swap_List\nProblem Description:\n\"\"\"\nWrite a python function that interchanges the first and last elements in a list; the input must be a list and it must not be empty.\n\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef swap_List(newList):\n\n    assert isinstance(newList, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newList) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return newList[-1:] + newList[1:-1] + newList[:1]\n", "constraints": {"assert_0": "assert isinstance(newList, list), \"invalid inputs", "assert_1": "assert len(newList) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/592", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_Of_product\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of the product of consecutive binomial coefficients; the input must be an integer and must be non-negative. \n\nassert sum_Of_product(3) == 15\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/593", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: removezero_ip\nProblem Description:\n\"\"\"\nWrite a python function that removes leading zeroes from an ip address; the input must be a string and cannot be empty.\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef removezero_ip(ip):\n\n assert isinstance(ip, str), \"invalid inputs\" # $_CONTRACT_$\n assert len(ip) > 0, \"invalid inputs\" # $_CONTRACT_$\n return re.sub('\\.[0]*', '.', ip)\n", "constraints": {"assert_0": "assert isinstance(ip, str), \"invalid inputs", "assert_1": "assert len(ip) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/594", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: diff_even_odd\nProblem Description:\n\"\"\"\nWrite a python function that finds the difference between the first even and first odd number of a given list; the input must be a list, all elements in the list must be integers, the list must contain at least one even number, and the list must contain at least one odd number.\n\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef diff_even_odd(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(el%2==0 for el in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(el%2!=0 for el in list1), \"invalid inputs\" # $_CONTRACT_$\n    first_even = next((el for el in list1 if el%2==0), -1)\n    first_odd = next((el for el in list1 if el%2!=0), -1)\n    return (first_even - first_odd)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, int) for i in list1), \"invalid inputs", "assert_2": "assert any(el%2==0 for el in list1), \"invalid inputs", "assert_3": "assert any(el%2!=0 for el in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/596", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: tuple_size\nProblem Description:\n\"\"\"\nWrite a python function that finds the size in bytes of the given tuple and the input must be a tuple. \n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport sys \ndef tuple_size(tuple_list):\n\n  assert isinstance(tuple_list, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return sys.getsizeof(tuple_list)\n", "constraints": {"assert_0": "assert isinstance(tuple_list, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/597", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_kth\nProblem Description:\n\"\"\"\nWrite a python function that finds the kth element from the given two sorted arrays, where both input parameters must be lists and the third input must be an integer, and k must be greater than 0 and less than or equal to the combined length of both lists.\n\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_kth(arr1, arr2, k):\n\n\tassert isinstance(arr1, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(arr2, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert 0 < k <= len(arr1) + len(arr2), \"invalid inputs\" # $_CONTRACT_$j\n\treturn sorted(arr1 + arr2)[k - 1]\n", "constraints": {"assert_0": "assert isinstance(arr1, list), \"invalid inputs", "assert_1": "assert isinstance(arr2, list), \"invalid inputs", "assert_2": "assert isinstance(k, int), \"invalid inputs", "assert_3": "assert 0 < k <= len(arr1) + len(arr2), \"invalid inputs\" j"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/598", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: armstrong_number\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number is an Armstrong number; the input must be an integer and it must be greater than zero.\n\nassert armstrong_number(153)==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef armstrong_number(number):\n\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n", "constraints": {"assert_0": "assert isinstance(number, int), \"invalid inputs", "assert_1": "assert number > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/599", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_average\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum and average of the first n natural numbers; the input must be an integer and must be greater than zero.\n\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_average(number):\n\n   assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n   assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n", "constraints": {"assert_0": "assert isinstance(number, int), \"invalid inputs", "assert_1": "assert number > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/600", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_Even\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number is even or not; the input must be an integer. \n\nassert is_Even(1) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Even(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n % 2 == 0\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/602", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: first_repeated_char\nProblem Description:\n\"\"\"\nWrite a python function that finds the first repeated character in a given string; the input must be a string. \n\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef first_repeated_char(str1):\n\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$I\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs\" I"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/603", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_ludic\nProblem Description:\n\"\"\"\nWrite a python function that returns all lucid numbers smaller than or equal to a given integer; the input must be an integer and it must be greater than zero.\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_ludic(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/604", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: reverse_words\nProblem Description:\n\"\"\"\nWrite a python function that reverses words separated by spaces in a given string; the input must be a string. \n\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef reverse_words(s):\n\n\tassert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn ' '.join(reversed(s.split()))\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/605", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: prime_num\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given integer is a prime number; the input must be an integer. \n\nassert prime_num(13)==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef prime_num(num):\n\n  assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n", "constraints": {"assert_0": "assert isinstance(num, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/606", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: radian_degree\nProblem Description:\n\"\"\"\nWrite a python function that converts degrees to radians; the input \"degree\" must be an integer. \n\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef radian_degree(degree):\n\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n    return degree * math.pi / 180\n", "constraints": {"assert_0": "assert isinstance(degree, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/607", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_literals\nProblem Description:\n\"\"\"\nWrite a python function that searches a string for a regex pattern and returns the matching substring along with its start index and end index; the input \"text\" must be a string and the input \"pattern\" must also be a string.\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef find_literals(text, pattern):\n\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs", "assert_1": "assert isinstance(pattern, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/608", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: bell_Number\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth bell number; the input n must be an integer and must be greater than or equal to zero.\n\nassert bell_Number(2) == 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef bell_Number(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/610", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_kth_element\nProblem Description:\n\"\"\"\nWrite a python function that takes a list and returns a list with the same elements, but the k'th element removed; the input must be a list and k must be an integer such that k is greater than 0 and less than or equal to the length of the list.\n\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_kth_element(list1, k):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 < k <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:k-1] + list1[k:]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(k, int), \"invalid inputs", "assert_2": "assert 0 < k <= len(list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/611", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_of_nth\nProblem Description:\n\"\"\"\nWrite a python function that returns the maximum value of the n'th column from a matrix represented as a list of lists; the input must be a list, it must not be empty, each element of the list must be a list, the first list must not be empty, all inner lists must be of the same length, all elements within the lists must be either integers or floats, and the column index must be less than the length of the first inner list.\n\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_of_nth(test_list, N):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(row, list) for row in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(row) == len(test_list[0]) for row in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for row in test_list for item in row), \"invalid inputs\" # $_CONTRACT_$\n  assert N < len(test_list[0]), \"invalid inputs\" # $_CONTRACT_$\n  return max([sub[N] for sub in test_list])\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert len(test_list) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(row, list) for row in test_list), \"invalid inputs", "assert_3": "assert len(test_list[0]) > 0, \"invalid inputs", "assert_4": "assert all(len(row) == len(test_list[0]) for row in test_list), \"invalid inputs", "assert_5": "assert all(isinstance(item, (int, float)) for row in test_list for item in row), \"invalid inputs", "assert_6": "assert N < len(test_list[0]), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/612", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: merge\nProblem Description:\n\"\"\"\nWrite a python function that takes a list of lists where each sublist contains exactly two elements and returns a list of two lists where the first list has the first element of each sublist and the second one has the second; the input must be a list, it must not be empty, and each sublist must contain exactly two elements.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef merge(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(sublist) == 2 for sublist in lst), \"invalid inputs\" # $_CONTRACT_$\n  \n    return [list(ele) for ele in list(zip(*lst))] \n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert len(lst) > 0, \"invalid inputs", "assert_2": "assert all(len(sublist) == 2 for sublist in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/614", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: cummulative_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the cumulative sum of all the values that are present in the given tuple list; the input must be a list, every element in the list must be a tuple, and all elements within those tuples must be integers or floats.\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef cummulative_sum(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, tuple) for el in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in sum(test_list, ())), \"invalid inputs\" # $_CONTRACT_$\n  return sum(map(sum, test_list))\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(el, tuple) for el in test_list), \"invalid inputs", "assert_2": "assert all(isinstance(el, (int, float)) for el in sum(test_list, ())), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/615", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: average_tuple\nProblem Description:\n\"\"\"\nWrite a python function that takes a tuple of tuples and returns the average value for each tuple as a list; the input must be a tuple, each element of the input tuple must also be a tuple, and all elements within the inner tuples must be either integers or floats.\n\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef average_tuple(nums):\n\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in sum(nums, ())), \"invalid inputs\" # $_CONTRACT_$\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n", "constraints": {"assert_0": "assert isinstance(nums, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) for x in nums), \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in sum(nums, ())), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/616", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: tuple_modulo\nProblem Description:\n\"\"\"\nWrite a python function that takes two tuples of the same length and performs the element wise modulo; each input must be a tuple, both tuples must have the same length, all elements in both tuples must be integers, and all elements in the second tuple must be greater than zero.\n\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_modulo(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup1 + test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x > 0 for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert len(test_tup1) == len(test_tup2), \"invalid inputs", "assert_3": "assert all(isinstance(x, int) for x in test_tup1 + test_tup2), \"invalid inputs", "assert_4": "assert all(x > 0 for x in test_tup2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/618", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: div_list\nProblem Description:\n\"\"\"\nWrite a python function that divides two lists element wise; both inputs must be lists, neither list can be empty, both lists must be of the same length, all elements in both lists must be either integers or floats, and the second list must not contain any zeros.\n\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef div_list(nums1,nums2):\n\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums1 + nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x != 0 for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n", "constraints": {"assert_0": "assert isinstance(nums1, list), \"invalid inputs", "assert_1": "assert isinstance(nums2, list), \"invalid inputs", "assert_2": "assert len(nums1) > 0, \"invalid inputs", "assert_3": "assert len(nums2) > 0, \"invalid inputs", "assert_4": "assert len(nums1) == len(nums2), \"invalid inputs", "assert_5": "assert all(isinstance(x, (int, float)) for x in nums1 + nums2), \"invalid inputs", "assert_6": "assert all(x != 0 for x in nums2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/619", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: move_num\nProblem Description:\n\"\"\"\nWrite a python function that moves all the numbers to the end of the given string, and the input must be a string. \n\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef move_num(test_str):\n\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  num_str = ''.join(i for i in test_str if i.isdigit())\n  else_str = ''.join(i for i in test_str if not i.isdigit())\n  return else_str + num_str\n", "constraints": {"assert_0": "assert isinstance(test_str, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/620", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: largest_subset\nProblem Description:\n\"\"\"\nWrite a python function that finds the size of the largest subset of a list of numbers such that every pair is divisible; the input must be a list, the list must contain at least two elements, and all elements in the list must be either integers or floats.\n\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef largest_subset(a):\n\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(a) >= 2, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(el, (int, float)) for el in a), \"invalid inputs\" # $_CONTRACT_$\n\tn = len(a)\n\tdp = [0 for _ in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\n", "constraints": {"assert_0": "assert isinstance(a, list), \"invalid inputs", "assert_1": "assert len(a) >= 2, \"invalid inputs", "assert_2": "assert all(isinstance(el, (int, float)) for el in a), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/622", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_median\nProblem Description:\n\"\"\"\nWrite a python function that finds the median of two sorted lists of the same size, where both inputs must be lists, the integer n must be between zero and the minimum length of either list, all elements in both lists must be either integers or floats, and both lists must be sorted in non-decreasing order up to the first n elements. \n\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_median(arr1, arr2, n):\n\n  assert isinstance(arr1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(arr2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= min(len(arr1), len(arr2)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in arr1 + arr2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x <= y for x, y in zip(arr1[0:n], arr1[1:n])), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x <= y for x, y in zip(arr2[0:n], arr2[1:n])), \"invalid inputs\" # $_CONTRACT_$\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n", "constraints": {"assert_0": "assert isinstance(arr1, list), \"invalid inputs", "assert_1": "assert isinstance(arr2, list), \"invalid inputs", "assert_2": "assert 0 <= n <= min(len(arr1), len(arr2)), \"invalid inputs", "assert_3": "assert all(isinstance(el, (int, float)) for el in arr1 + arr2), \"invalid inputs", "assert_4": "assert all(x <= y for x, y in zip(arr1[0:n], arr1[1:n])), \"invalid inputs", "assert_5": "assert all(x <= y for x, y in zip(arr2[0:n], arr2[1:n])), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/623", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: nth_nums\nProblem Description:\n\"\"\"\nWrite a python function that computes the n-th power of each number in a list, where the input must be a list of numbers and the exponent must be a number. \n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef nth_nums(nums, n):\n\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs", "assert_2": "assert isinstance(n, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/624", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_upper\nProblem Description:\n\"\"\"\nWrite a python function that converts a given string to uppercase and ensures that the input must be a string.\n\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_upper(string):\n\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.upper()\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/626", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: triangle_area\nProblem Description:\n\"\"\"\nWrite a python function that finds the area of the largest triangle that can be inscribed in a semicircle with a given radius; the radius must be a number, either an integer or a float. \n\nassert triangle_area(-1) == None\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef triangle_area(r) :\n\n    assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  \n    if r < 0 : \n        return None\n    return r * r \n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/628", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: replace_spaces\nProblem Description:\n\"\"\"\nWrite a python function that replaces all spaces in the given string with '%20'; the input must be a string. \n\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_spaces(string):\n\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.replace(\" \", \"%20\")\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/629", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: Split\nProblem Description:\n\"\"\"\nWrite a python function that finds even numbers from a list of numbers; the input must be a list and all elements in the list must be integers.\n\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Split(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return [num for num in l if num % 2 == 0]\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/630", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_coordinates\nProblem Description:\n\"\"\"\nWrite a python function that extracts all the adjacent coordinates of the given coordinate tuple; the input must be a tuple and all elements of the tuple must be integers.\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n  return list(adjac(test_tup))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in test_tup), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/631", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: replace_spaces\nProblem Description:\n\"\"\"\nWrite a python function that replaces whitespaces with an underscore and vice versa in a given string; the input must be a string. \n\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_spaces(text):\n\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/632", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: move_zero\nProblem Description:\n\"\"\"\nWrite a python function that moves all zeroes to the end of the given list; the input must be a list and every element in the list must be either an integer or a float.\n\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef move_zero(num_list):\n\n    assert isinstance(num_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n", "constraints": {"assert_0": "assert isinstance(num_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/633", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: pair_xor_Sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of xor of all pairs of numbers in the given list, where the input must be a list, all elements of the list must be either integers or floats, and the integer n must not exceed the length of the list. \n\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef pair_xor_Sum(arr,n) :\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs", "assert_2": "assert n <= len(arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/635", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: heap_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts the given list; the input must be a list and all elements in the list must be either integers or floats.\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport heapq as hq\ndef heap_sort(iterable):\n\n    assert isinstance(iterable, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n", "constraints": {"assert_0": "assert isinstance(iterable, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/637", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: noprofit_noloss\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given amount has no profit and no loss; both the actual_cost and sale_amount must be either an integer or a float. \n\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef noprofit_noloss(actual_cost, sale_amount):\n\n  assert isinstance(actual_cost, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(sale_amount, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return actual_cost == sale_amount\n", "constraints": {"assert_0": "assert isinstance(actual_cost, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(sale_amount, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/638", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: wind_chill\nProblem Description:\n\"\"\"\nWrite a python function that calculates the wind chill index rounded to the next integer given the wind velocity in kilometers per hour and a temperature in degrees Celsius; both the wind velocity and temperature must be either an integer or a float.\n\nassert wind_chill(120,35)==40\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef wind_chill(v,t):\n\n assert isinstance(v, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(t, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\n", "constraints": {"assert_0": "assert isinstance(v, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(t, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/639", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sample_nam\nProblem Description:\n\"\"\"\nWrite a python function that sums the lengths of the names from a given list of names after removing those that start with a lowercase letter; the input must be a list and every element in that list must be a string.\n\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sample_nam(sample_names):\n\n  assert isinstance(sample_names, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in sample_names), \"invalid inputs\" # $_CONTRACT_$\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n", "constraints": {"assert_0": "assert isinstance(sample_names, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in sample_names), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/641", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_nonagonal\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth nonagonal number; the input n must be an integer and n must be greater than or equal to zero.\n\nassert is_nonagonal(10) == 325\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_nonagonal(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/643", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: text_match_wordz_middle\nProblem Description:\n\"\"\"\nWrite a python function that checks if a string contains 'z', except at the start and end of the word; the input must be a string. \n\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_wordz_middle(text):\n\n\tassert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn re.search(r'\\Bz\\B',  text) is not None\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/644", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: reverse_Array_Upto_K\nProblem Description:\n\"\"\"\nWrite a python function that reverses an array up to a given position; the input must be a list and the position must be greater than zero and less than or equal to the length of the list.\n\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef reverse_Array_Upto_K(input, k):\n\n  assert isinstance(input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 < k <= len(input), \"invalid inputs\" # $_CONTRACT_$\n \n  return input[k-1::-1] + input[k:]\n", "constraints": {"assert_0": "assert isinstance(input, list), \"invalid inputs", "assert_1": "assert 0 < k <= len(input), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/720", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: add_dict_to_tuple\nProblem Description:\n\"\"\"\nWrite a python function that adds a dictionary to a tuple, ensuring that the first input is a tuple and the second input is a dictionary. \n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef add_dict_to_tuple(test_tup, test_dict):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_dict, dict), \"invalid inputs\" # $_CONTRACT_$\n  return test_tup + (test_dict, )\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_dict, dict), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/721", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: maxAverageOfPath\nProblem Description:\n\"\"\"\nWrite a python function that finds a path with the maximum average cost in a square matrix where each cell contains a cost; the input must be a non-empty list of lists, each inner list must also be a list, all inner lists must have the same length as the outer list, and all elements in the matrix must be either integers or floats.\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef maxAverageOfPath(cost):\n\n  assert isinstance(cost, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(cost) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, list) for x in cost), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == len(cost) == len(cost[0]) for x in cost), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in sum(cost, [])), \"invalid inputs\" # $_CONTRACT_$\n  N = len(cost)\n  dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n  # all paths are of length 2 * N - 1, so just divide by that\n  return dp[N - 1][N - 1] / (2 * N - 1)\n", "constraints": {"assert_0": "assert isinstance(cost, list), \"invalid inputs", "assert_1": "assert len(cost) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, list) for x in cost), \"invalid inputs", "assert_3": "assert all(len(x) == len(cost) == len(cost[0]) for x in cost), \"invalid inputs", "assert_4": "assert all(isinstance(x, (int, float)) for x in sum(cost, [])), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/722", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: filter_data\nProblem Description:\n\"\"\"\nWrite a python function that filters a dictionary of students with their heights and weights, ensuring the input is a dictionary where each key is a string representing a student name and each value is a tuple of two floats, and the minimum height and weight must both be numbers that are non-negative. \n\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef filter_data(students,h,w):\n\n    assert isinstance(students, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in students.keys()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(height, (int, float)) and isinstance(weight, (int, float)) for height, weight in students.values()) # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(w, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert h >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert w >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}\n", "constraints": {"assert_0": "assert isinstance(students, dict), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in students.keys()), \"invalid inputs", "assert_2": "assert all(isinstance(x, tuple) for x in students.values()), \"invalid inputs", "assert_3": "assert all(len(x) == 2 for x in students.values()), \"invalid inputs", "assert_4": "assert all(isinstance(height, (int, float)) and isinstance(weight, (int, float)) for height, weight in students.values())", "assert_5": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_6": "assert isinstance(w, (int, float)), \"invalid inputs", "assert_7": "assert h >= 0, \"invalid inputs", "assert_8": "assert w >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/723", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_same_pair\nProblem Description:\n\"\"\"\nWrite a python function that counts indices where two lists of the same length have the same values; both inputs must be lists, they must be of the same length, and all corresponding elements in the two lists must be comparable and of the same type. \n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert all(hasattr(a, '__eq__') and isinstance(a, type(b)) for a, b in zip(nums1, nums2)), \"invalid inputs\" # $_CONTRACT_$\n    result = sum(map(eq, nums1, nums2))\n    return result\n", "constraints": {"assert_0": "assert isinstance(nums1, list), \"invalid inputs", "assert_1": "assert isinstance(nums2, list), \"invalid inputs", "assert_2": "assert len(nums1) == len(nums2), \"invalid inputs", "assert_3": "assert all(hasattr(a, '__eq__') and isinstance(a, type(b)) for a, b in zip(nums1, nums2)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/724", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: power_base_sum\nProblem Description:\n\"\"\"\nWrite a python function that takes base and power as arguments and calculates the sum of all digits of the base raised to the specified power; both base and power must be integers, base must be non-negative, and power must also be an integer. \n\nassert power_base_sum(2,100)==115\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef power_base_sum(base, power):\n\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n", "constraints": {"assert_0": "assert isinstance(base, int), \"invalid inputs", "assert_1": "assert base >= 0, \"invalid inputs", "assert_2": "assert isinstance(power, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/725", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: extract_quotation\nProblem Description:\n\"\"\"\nWrite a python function that extracts values between quotation marks from the given string, and the input must be a string.\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef extract_quotation(text1):\n\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.findall(r'\"(.*?)\"', text1)\n", "constraints": {"assert_0": "assert isinstance(text1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/726", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: multiply_elements\nProblem Description:\n\"\"\"\nWrite a python function that takes as input a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}; the input must be a tuple and all elements in the tuple must be either integers or floats.\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef multiply_elements(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/728", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_list\nProblem Description:\n\"\"\"\nWrite a python function that takes as input two lists and returns a new list where each element is the sum of the corresponding elements from the input lists; both input lists must be of type list and they must have the same length. \n\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_list(lst1,lst2):\n\n  assert isinstance(lst1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(lst2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(lst1) == len(lst2), \"invalid inputs\" # $_CONTRACT_$\n  return [a + b for a, b in zip(lst1, lst2)] \n", "constraints": {"assert_0": "assert isinstance(lst1, list), \"invalid inputs", "assert_1": "assert isinstance(lst2, list), \"invalid inputs", "assert_2": "assert len(lst1) == len(lst2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/730", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: consecutive_duplicates\nProblem Description:\n\"\"\"\nWrite a python function that removes consecutive duplicates from a given list; the input must be a list. \n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return [key for key, _ in groupby(nums)] \n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/731", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: lateralsurface_cone\nProblem Description:\n\"\"\"\nWrite a python function that calculates the lateral surface area of a cone given a radius r and a height h, where r must be a number, h must be a number, r must be greater than zero, and h must be greater than zero.\n\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef lateralsurface_cone(r,h):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_2": "assert r > 0, \"invalid inputs", "assert_3": "assert h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/732", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: replace_specialchar\nProblem Description:\n\"\"\"\nWrite a python function that replaces all occurrences of spaces, commas, or dots with a colon; the input must be a string. \n\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef replace_specialchar(text):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return re.sub(\"[ ,.]\", \":\", text)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/733", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_first_occurrence\nProblem Description:\n\"\"\"\nWrite a python function that finds the index of the first occurrence of a given number in a sorted array; the first input must be a list, all elements in the list must be either integers or floats, the list must be sorted in non-decreasing order, the number being searched for must be present in the list, and the second input must be an integer.\n\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_first_occurrence(A, x):\n\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(a, (int, float)) for a in A), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(A, A[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert x in A, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n", "constraints": {"assert_0": "assert isinstance(A, list), \"invalid inputs", "assert_1": "assert all(isinstance(a, (int, float)) for a in A), \"invalid inputs", "assert_2": "assert all(a <= b for a, b in zip(A, A[1:])), \"invalid inputs", "assert_3": "assert x in A, \"invalid inputs", "assert_4": "assert isinstance(x, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/734", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_Of_Subarray_Prod\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of products of all possible sublists of a given list; the input must be a list, the list must not be empty, and all elements within the list must be either integers or floats.\n\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_Of_Subarray_Prod(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/735", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: toggle_middle_bits\nProblem Description:\n\"\"\"\nWrite a python function that toggles the bits of a number except for the first and the last bit; the input must be an integer and it must be non-negative. \n\nassert toggle_middle_bits(9) == 15\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef toggle_middle_bits(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/736", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: left_insertion\nProblem Description:\n\"\"\"\nWrite a python function that locates the left insertion point for a specified value in sorted order; the input must be a list, the elements of the list must be sorted in non-decreasing order, and all elements must be either integers or floats.\n\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport bisect\ndef left_insertion(a, x):\n\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x <= y for x, y in zip(a, a[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in a), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_left(a, x)\n", "constraints": {"assert_0": "assert isinstance(a, list), \"invalid inputs", "assert_1": "assert all(x <= y for x, y in zip(a, a[1:])), \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in a), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/737", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_str\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given string starts with a vowel; the input must be a string. \n\nassert check_str(\"annie\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re \ndef check_str(string):\n\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/739", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_Index\nProblem Description:\n\"\"\"\nWrite a python function that finds the index of the smallest triangular number with n digits; n must be an integer and n must be greater than or equal to 1.\n\nassert find_Index(2) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math \ndef find_Index(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/740", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: tuple_to_dict\nProblem Description:\n\"\"\"\nWrite a python function that converts the given tuple to a key-value dictionary using adjacent elements; the input must be a tuple and its length must be even. \n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_to_dict(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs", "assert_1": "assert len(test_tup) % 2 == 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/741", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: all_Characters_Same\nProblem Description:\n\"\"\"\nWrite a python function that checks whether all the characters in a given string are the same; the input must be a string. \n\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef all_Characters_Same(s) :\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return all(ch == s[0] for ch in s[1:])\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/742", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: area_tetrahedron\nProblem Description:\n\"\"\"\nWrite a python function that calculates the area of a tetrahedron; the input \"side\" must be either an integer or a float, and it must be greater than zero.\n\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef area_tetrahedron(side):\n\n  assert isinstance(side, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert side > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(3)*(side*side)\n", "constraints": {"assert_0": "assert isinstance(side, (int, float)), \"invalid inputs", "assert_1": "assert side > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/743", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: rotate_right\nProblem Description:\n\"\"\"\nWrite a python function that rotates a given list by a specified number of items to the right direction; the first input must be a list and the second input must be an integer that is greater than or equal to zero and less than or equal to the length of the list. \n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef rotate_right(l, m):\n\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n  return l[-m:] + l[:-m]\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert isinstance(m, int), \"invalid inputs", "assert_2": "assert 0 <= m <= len(l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/744", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_none\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given tuple contains any None values, and the input must be a tuple. \n\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_none(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return any(ele is None for ele in test_tup)\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/745", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: divisible_by_digits\nProblem Description:\n\"\"\"\nWrite a python function that finds numbers within a given range from startnum to endnum where every number is divisible by every digit it contains; both startnum and endnum must be integers and startnum must be less than or equal to endnum. \n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef divisible_by_digits(startnum, endnum):\n\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n", "constraints": {"assert_0": "assert isinstance(startnum, int), \"invalid inputs", "assert_1": "assert isinstance(endnum, int), \"invalid inputs", "assert_2": "assert startnum <= endnum, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/748", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: capital_words_spaces\nProblem Description:\n\"\"\"\nWrite a python function that puts spaces between words starting with capital letters in a given string; the input must be a string. \n\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef capital_words_spaces(str1):\n\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/749", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sort_numeric_strings\nProblem Description:\n\"\"\"\nWrite a python function that sorts a given list of strings of numbers numerically; the input must be a list, each element of the list must be a string, and every string must represent a numeric value. \n\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sort_numeric_strings(nums_str):\n\n    def check_numeric(num: str): # $_CONTRACT_$\n        return num.lstrip('-').rstrip(' ').isdigit() # $_CONTRACT_$\n    assert isinstance(nums_str, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in nums_str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(check_numeric(num) for num in nums_str), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([int(x) for x in nums_str])\n", "constraints": {"assert_0": "assert isinstance(nums_str, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in nums_str), \"invalid inputs", "assert_2": "assert all(check_numeric(num) for num in nums_str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/750", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: add_tuple\nProblem Description:\n\"\"\"\nWrite a python function that adds the given tuple to the given list; the first input must be a list and the second input must be a tuple.\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef add_tuple(test_list, test_tup):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/751", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_min_heap\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given array represents a min heap; the input must be a list and all elements in the list must be integers. \n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  return check_min_heap_helper(arr, 0)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/752", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: jacobsthal_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth jacobsthal number; the input n must be an integer and must be greater than or equal to zero.\n\nassert jacobsthal_num(5) == 11\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef jacobsthal_num(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/753", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: min_k\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum k records from a list of tuples, where the input must be a list, each element of the list must be a tuple, the second element of each tuple must be either an integer or a float, and k must be less than or equal to the length of the list.  \n\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef min_k(test_list, K):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x[1], (int, float)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert K <= len(test_list), \"invalid inputs\" # $_CONTRACT_$\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs", "assert_2": "assert all(isinstance(x[1], (int, float)) for x in test_list), \"invalid inputs", "assert_3": "assert K <= len(test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/754", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: extract_index_list\nProblem Description:\n\"\"\"\nWrite a python function that finds common elements from three lists l1, l2, l3 where each list must be of type list. \n\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_index_list(l1, l2, l3):\n\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n    return [a for a, b, c in zip(l1, l2, l3) if a == b == c]\n", "constraints": {"assert_0": "assert isinstance(l1, list), \"invalid inputs", "assert_1": "assert isinstance(l2, list), \"invalid inputs", "assert_2": "assert isinstance(l3, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/755", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: second_smallest\nProblem Description:\n\"\"\"\nWrite a python function that finds the second smallest number in a list; the input must be a list, and every element in that list must be either an integer or a float.\n\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef second_smallest(numbers):\n\n  assert isinstance(numbers, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs\" # $_CONTRACT_$\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]\n", "constraints": {"assert_0": "assert isinstance(numbers, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/757", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_reverse_pairs\nProblem Description:\n\"\"\"\nWrite a python function that counts the pairs of reverse strings in the given string list; the input must be a list and all elements within that list must be strings.\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_reverse_pairs(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/758", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: unique_sublists\nProblem Description:\n\"\"\"\nWrite a python function that counts lists within a list and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list; the input must be a list, every element of that list must also be a list, and each of those lists must be hashable tuples. \n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef unique_sublists(list1):\n\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(tuple(x)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return {tuple(x): list1.count(x) for x in list1}\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, list) for x in list1), \"invalid inputs", "assert_2": "assert all(is_hashable(tuple(x)) for x in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/759", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_decimal\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a given string is a decimal number with a precision of 2; the input must be a string. \n\nassert is_decimal('123.11')==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_decimal(num):\n\n    assert isinstance(num, str), \"invalid inputs\" # $_CONTRACT_$\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None\n", "constraints": {"assert_0": "assert isinstance(num, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/760", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: unique_Element\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a list of numbers contains only one distinct element or not; the input must be a list and it must not be empty.\n\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef unique_Element(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return arr.count(arr[0]) == len(arr)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/762", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_monthnumber_number\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given month number contains 30 days or not; the input must be an integer and it must be a number from 1 to 12.\n\nassert check_monthnumber_number(6)==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_monthnumber_number(monthnum3):\n\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n", "constraints": {"assert_0": "assert isinstance(monthnum3, int), \"invalid inputs", "assert_1": "assert 1 <= monthnum3 <= 12, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/763", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_min_diff\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum difference between any two elements in a given array; the input must be a tuple, all elements in the tuple must be either integers or floats, the second input must be an integer, and the integer must be equal to the length of the tuple. \n\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_min_diff(arr,n):\n\n    assert isinstance(arr, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n == len(arr), \"invalid inputs\" # $_CONTRACT_$ \n \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \n", "constraints": {"assert_0": "assert isinstance(arr, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs", "assert_2": "assert isinstance(n, int), \"invalid inputs", "assert_3": "assert n == len(arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/764", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: number_ctr\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of digits in a given string; the input must be a string.\n\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef number_ctr(s):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return sum(c.isdigit() for c in s)\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/765", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_polite\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth polite number, where the input n must be an integer and n must be greater than or equal to one.\n\nassert is_polite(7) == 11\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math \ndef is_polite(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/766", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: pair_wise\nProblem Description:\n\"\"\"\nWrite a python function that returns a list of all pairs of consecutive items in a given list; the input must be a list. \n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef pair_wise(l1):\n\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    return list(zip(l1, l1[1:]))\n", "constraints": {"assert_0": "assert isinstance(l1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/767", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_pairs_count\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of pairs in a list of numbers that sum to a specified value; the input must be a list, all elements in the list must be either integers or floats, and the specified sum must also be an integer or a float.\n\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_pairs_count(arr, sum_):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(sum_, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    cnt = 0\n    for n in arr:\n        cnt += arr.count(sum_ - n)\n        if sum_ - n == n:\n            cnt -= 1\n    return cnt / 2\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs", "assert_2": "assert isinstance(sum_, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/769", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: Diff\nProblem Description:\n\"\"\"\nWrite a python function that gets the difference between two lists, ensuring that both inputs must be lists.\n\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Diff(li1,li2):\n\n    assert isinstance(li1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(li2, list), \"invalid inputs\" # $_CONTRACT_$\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \n", "constraints": {"assert_0": "assert isinstance(li1, list), \"invalid inputs", "assert_1": "assert isinstance(li2, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/770", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: odd_num_sum\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of the fourth power of the first n odd natural numbers; the input n must be an integer, and n must be greater than or equal to 1.\n\nassert odd_num_sum(2) == 82\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_num_sum(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/771", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_expression\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given expression is balanced or not; the input must be a string. \n\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom collections import deque\ndef check_expression(exp):\n\n    assert isinstance(exp, str), \"invalid inputs\" # $_CONTRACT_$\n    if len(exp) == 0 or len(exp) % 2 == 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n", "constraints": {"assert_0": "assert isinstance(exp, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/772", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_length\nProblem Description:\n\"\"\"\nWrite a python function that removes all the words of a specified length from a given string; the input must be a string and the length must be an integer.\n\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_length(test_str, K):\n\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n", "constraints": {"assert_0": "assert isinstance(test_str, str), \"invalid inputs", "assert_1": "assert isinstance(K, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/773", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: occurance_substring\nProblem Description:\n\"\"\"\nWrite a python function that finds the occurrence and position of the substrings within a string, ensuring that the input \"text\" is a string and the input \"pattern\" is also a string; return None if there is no match.\n\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef occurance_substring(text,pattern):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs", "assert_1": "assert isinstance(pattern, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/775", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: odd_position\nProblem Description:\n\"\"\"\nWrite a python function that checks whether every odd index contains odd numbers in a given list; the input must be a list and every element in that list must be an integer.\n\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_position(nums):\n\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(n % 2 == 1 for n in nums[1::2])\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, int) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/777", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of non-repeated elements in a given list; the input must be a list, and all elements in the list must be either integers or floats.\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_sum(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/778", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: pack_consecutive_duplicates\nProblem Description:\n\"\"\"\nWrite a python function that packs consecutive duplicates of a given list elements into sublists; the input must be a list. \n\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [list(group) for _, group in groupby(list1)]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/780", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_combinations\nProblem Description:\n\"\"\"\nWrite a python function that finds the combinations of sums with tuples in the given tuple list; the input must be a list, the list must not be empty, each element of the list must be a tuple, all tuples must have the same length, and every element in the tuples must be either an integer or a float.\n\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom itertools import combinations \ndef find_combinations(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(t, tuple) for t in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(t) == len(test_list[0]) for t in test_list), \"invalid inputs\" # $_CONTRACT_$))\n  assert all(isinstance(x, (int, float)) for t in test_list for x in t), \"invalid inputs\" # $_CONTRACT_$\n  return [tuple(map(sum, zip(*t))) for t in combinations(test_list, 2)]\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert len(test_list) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(t, tuple) for t in test_list), \"invalid inputs", "assert_3": "assert all(len(t) == len(test_list[0]) for t in test_list), \"invalid inputs\" ))", "assert_4": "assert all(isinstance(x, (int, float)) for t in test_list for x in t), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/781", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_divisors\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the count of divisors of a given positive integer is even; the input must be an integer and it must be greater than zero.\n\nassert count_divisors(10)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math \ndef count_divisors(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/782", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: odd_length_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of all odd length subarrays; the input must be a list and every element in the list must be either an integer or a float.\n\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_length_sum(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/784", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: mul_even_odd\nProblem Description:\n\"\"\"\nWrite a python function that finds the product of the first even and odd number from a given list, and the input must be a list, the list must contain at least one even number, the list must contain at least one odd number, and all elements in the list must be either integers or floats.\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef mul_even_odd(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert any(x % 2 == 0 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(x % 2 != 0 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert any(x % 2 == 0 for x in list1), \"invalid inputs", "assert_2": "assert any(x % 2 != 0 for x in list1), \"invalid inputs", "assert_3": "assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/785", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: tuple_str_int\nProblem Description:\n\"\"\"\nWrite a python function that converts a tuple string to an integer tuple, and the input must be a string, it must start with an opening parenthesis, it must end with a closing parenthesis, and the content within the parentheses must consist solely of digits, commas, and optional whitespace. \n\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_str_int(test_str):\n\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.startswith('('), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.endswith(')'), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.lstrip('(').rstrip(')').replace('...', '').replace(',', '').replace(' ', '').isdigit(), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n", "constraints": {"assert_0": "assert isinstance(test_str, str), \"invalid inputs", "assert_1": "assert test_str.startswith('('), \"invalid inputs", "assert_2": "assert test_str.endswith(')'), \"invalid inputs", "assert_3": "assert test_str.lstrip('(').rstrip(')').replace('...', '').replace(',', '').replace(' ', '').isdigit(), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/786", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: right_insertion\nProblem Description:\n\"\"\"\nWrite a python function that locates the right insertion point for a specified value in sorted order; the first input must be a list, all elements in the list must be either integers or floats, and the specified value must also be an integer or a float.\n\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport bisect\ndef right_insertion(a, x):\n\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n", "constraints": {"assert_0": "assert isinstance(a, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs", "assert_2": "assert isinstance(x, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/787", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: text_match_three\nProblem Description:\n\"\"\"\nWrite a python function that matches a string that has an a followed by three 'b'; the input must be a string.\n\nassert not text_match_three(\"ac\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_three(text):\n\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/788", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: new_tuple\nProblem Description:\n\"\"\"\nWrite a python function that creates a new tuple from the given string and list, where the input must be a list for the first argument and a string for the second argument. \n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef new_tuple(test_list, test_str):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(test_list + [test_str])\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert isinstance(test_str, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/790", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: even_position\nProblem Description:\n\"\"\"\nWrite a python function that checks whether every even index of a given list contains even numbers; the input must be a list and all elements within that list must be integers.\n\nassert even_position([3,2,1]) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_position(nums):\n\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, int) for i in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/791", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_nested\nProblem Description:\n\"\"\"\nWrite a python function that removes tuples from the given tuple; the input must be a tuple. \n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_nested(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(e for e in test_tup if not isinstance(e, tuple))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/792", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_list\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of lists in a given number of lists; the input must be a list. \n\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_list(input_list):\n\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(isinstance(e, list) for e in input_list)\n", "constraints": {"assert_0": "assert isinstance(input_list, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/793", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: last\nProblem Description:\n\"\"\"\nWrite a python function that finds the last position of an element in a sorted array; the first input must be a list, all elements in the list must be either integers or floats, the list must be sorted in non-decreasing order, the second input must be either an integer or a float, and the element must be present in the list. \n\nassert last([1,2,3],1) == 0\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef last(arr,x):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs", "assert_2": "assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs", "assert_3": "assert isinstance(x, (int, float)), \"invalid inputs", "assert_4": "assert x in arr, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/794", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: text_starta_endb\nProblem Description:\n\"\"\"\nWrite a python function that matches a string that has an 'a' followed by anything, ending in 'b'; the input must be a string. \n\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_starta_endb(text):\n\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/796", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: return_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of all items in the given dictionary; the input must be a dictionary and all values in the dictionary must be either integers or floats.\n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef return_sum(d):\n\n  assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in d.values()), \"invalid inputs\" # $_CONTRACT_$\n  return sum(d.values())\n", "constraints": {"assert_0": "assert isinstance(d, dict), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in d.values()), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/797", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_in_range\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of all odd natural numbers within the range l and r; both l and r must be integers, and l must be less than or equal to r and greater than or equal to zero.\n\nassert sum_in_range(2,5) == 8\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r):\n\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum_odd(r) - sum_odd(l - 1)\n", "constraints": {"assert_0": "assert isinstance(l, int), \"invalid inputs", "assert_1": "assert isinstance(r, int), \"invalid inputs", "assert_2": "assert 0 <= l <= r, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/798", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: _sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of an array; the input must be a list and all elements within the list must be either integers or floats.\n\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef _sum(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(arr)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/799", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: left_rotate\nProblem Description:\n\"\"\"\nWrite a python function that rotates left bits by d bits for a given number, where the number must be an integer, d must also be an integer, and the number must be within the range of 0 to 4294967295 inclusive. \n\nassert left_rotate(16,2) == 64\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef left_rotate(n,d):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(d, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n <= 0xffffffff, \"invalid inputs\" # $_CONTRACT_$\n   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert isinstance(d, int), \"invalid inputs", "assert_2": "assert 0 <= n <= 0xffffffff, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/800", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_all_spaces\nProblem Description:\n\"\"\"\nWrite a python function that removes all whitespaces from a string; the input must be a string.\n\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_all_spaces(text):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return text.replace(' ', '')\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/801", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: test_three_equal\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of equal numbers from three given integers; all three inputs must be integers.\n\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef test_three_equal(x,y,z):\n\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n", "constraints": {"assert_0": "assert isinstance(x, int), \"invalid inputs", "assert_1": "assert isinstance(y, int), \"invalid inputs", "assert_2": "assert isinstance(z, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/803", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_perfect_square\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number is a perfect square or not; the input must be an integer.\n\nassert not is_perfect_square(10)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_perfect_square(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/804", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_product_even\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the product of numbers in a list is even or not; the input must be a list, the list must contain more than zero elements, and all elements in the list must be integers.\n\nassert is_product_even([1,2,3])\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_product_even(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return any(x % 2 == 0 for x in arr)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/805", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_sum_list\nProblem Description:\n\"\"\"\nWrite a python function that returns the list in a list of lists whose sum of elements is the highest; the input must be a list, each element of the input must be a list, and every element within these inner lists must be either an integer or a float.\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_sum_list(lists):\n\n assert isinstance(lists, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(x, list) for x in lists), \"invalid inputs\" # $_CONTRACT_$\n assert all(all(isinstance(y, (int, float)) for y in x) for x in lists), \"invalid inputs\" # $_CONTRACT_$\n return max(lists, key=sum)\n", "constraints": {"assert_0": "assert isinstance(lists, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, list) for x in lists), \"invalid inputs", "assert_2": "assert all(all(isinstance(y, (int, float)) for y in x) for x in lists), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/806", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_run_uppercase\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum run of uppercase characters in the given string; the input must be a string and its length must be greater than zero.\n\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_run_uppercase(test_str):\n\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_str) > 0, \"invalid inputs\" # $_CONTRACT_$\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n", "constraints": {"assert_0": "assert isinstance(test_str, str), \"invalid inputs", "assert_1": "assert len(test_str) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/807", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: first_odd\nProblem Description:\n\"\"\"\nWrite a python function that finds the first odd number in a given list of numbers; the input must be a list, all elements in the list must be integers, and there must be at least one odd number in the list.\n\nassert first_odd([1,3,5]) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef first_odd(nums):\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert any(el % 2 != 0 for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(el, int) for el in nums), \"invalid inputs", "assert_2": "assert any(el % 2 != 0 for el in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/808", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_K\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given tuples contain the k or not; the first input must be a tuple. \n\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_K(test_tup, K):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return K in test_tup\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/809", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_smaller\nProblem Description:\n\"\"\"\nWrite a python function that checks if each element of the second tuple is smaller than its corresponding element in the first tuple; both input arguments must be tuples, they must be of the same length, and all elements in both tuples must be integers.\n\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_smaller(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert len(test_tup1) == len(test_tup2), \"invalid inputs", "assert_3": "assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs", "assert_4": "assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
