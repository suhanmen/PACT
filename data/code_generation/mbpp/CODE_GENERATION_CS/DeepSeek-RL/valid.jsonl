{"name": "Mbpp/623", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: nth_nums\nProblem Description:\n\"\"\"\nWrite a python function that computes the n-th power of each number in a list, where the input must be a list of numbers and the exponent must be a number. \n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef nth_nums(nums, n):\n\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs", "assert_2": "assert isinstance(n, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/751", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_min_heap\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given array represents a min heap; the input must be a list and all elements in the list must be integers. \n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  return check_min_heap_helper(arr, 0)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/743", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: rotate_right\nProblem Description:\n\"\"\"\nWrite a python function that rotates a given list by a specified number of items to the right direction; the first input must be a list and the second input must be an integer that is greater than or equal to zero and less than or equal to the length of the list. \n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef rotate_right(l, m):\n\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n  return l[-m:] + l[:-m]\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert isinstance(m, int), \"invalid inputs", "assert_2": "assert 0 <= m <= len(l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/284", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_element\nProblem Description:\n\"\"\"\nWrite a python function that takes in a list and an element and checks whether all items in the list are equal to the given element; the first input must be a list, and all elements in the list must be of the same type as the second input. \n\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_element(list1, element):\n\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, type(element)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n  return all(v == element for v in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, type(element)) for x in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/102", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: snake_to_camel\nProblem Description:\n\"\"\"\nWrite a python function that converts a snake case string to a camel case string; the input must be a string and it must not be empty.\n\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef snake_to_camel(word):\n\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(word) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "constraints": {"assert_0": "assert isinstance(word, str), \"invalid inputs", "assert_1": "assert len(word) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/168", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: frequency\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of occurrences of a number in a given list; the first argument must be a list and the second argument must be either an integer or a float.\n\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef frequency(a,x):\n\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return a.count(x)\n", "constraints": {"assert_0": "assert isinstance(a, list), \"invalid inputs", "assert_1": "assert isinstance(x, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/764", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: number_ctr\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of digits in a given string; the input must be a string.\n\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef number_ctr(s):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return sum(c.isdigit() for c in s)\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/139", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: circle_circumference\nProblem Description:\n\"\"\"\nWrite a python function that calculates the circumference of a circle given its radius; the radius must be an integer and greater than zero.\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef circle_circumference(r):\n\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n", "constraints": {"assert_0": "assert isinstance(r, int), \"invalid inputs", "assert_1": "assert r > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/796", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: return_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of all items in the given dictionary; the input must be a dictionary and all values in the dictionary must be either integers or floats.\n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef return_sum(d):\n\n  assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in d.values()), \"invalid inputs\" # $_CONTRACT_$\n  return sum(d.values())\n", "constraints": {"assert_0": "assert isinstance(d, dict), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in d.values()), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/287", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: square_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of squares of first n even natural numbers; n must be an integer and n must be greater than or equal to zero.\n\nassert square_Sum(2) == 20\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return 2 * n * (n + 1) * (2 * n + 1) /3\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/630", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_coordinates\nProblem Description:\n\"\"\"\nWrite a python function that extracts all the adjacent coordinates of the given coordinate tuple; the input must be a tuple and all elements of the tuple must be integers.\n\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n  return list(adjac(test_tup))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in test_tup), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/451", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_whitespaces\nProblem Description:\n\"\"\"\nWrite a python function that removes all whitespaces from the given string while ensuring that the input is a string. \n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef remove_whitespaces(text1):\n\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return text1.replace(' ', '')\n", "constraints": {"assert_0": "assert isinstance(text1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/77", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_Diff\nProblem Description:\n\"\"\"\nWrite a python function that finds whether a number is divisible by 11; the input must be an integer. \n\nassert is_Diff (12345) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Diff(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n % 11 == 0 \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/165", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_char_position\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of characters in a string that occur at the same position in the string as in the English alphabet, where the input must be a string and all characters in the string must be alphabetic.\n\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_char_position(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x.isalpha() for x in str1), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(ord(ch.lower()) - ord('a') == i for i, ch in enumerate(str1))\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs", "assert_1": "assert all(x.isalpha() for x in str1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/797", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_in_range\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of all odd natural numbers within the range l and r; both l and r must be integers, and l must be less than or equal to r and greater than or equal to zero.\n\nassert sum_in_range(2,5) == 8\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r):\n\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum_odd(r) - sum_odd(l - 1)\n", "constraints": {"assert_0": "assert isinstance(l, int), \"invalid inputs", "assert_1": "assert isinstance(r, int), \"invalid inputs", "assert_2": "assert 0 <= l <= r, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/790", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: even_position\nProblem Description:\n\"\"\"\nWrite a python function that checks whether every even index of a given list contains even numbers; the input must be a list and all elements within that list must be integers.\n\nassert even_position([3,2,1]) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_position(nums):\n\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, int) for i in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/581", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: surface_Area\nProblem Description:\n\"\"\"\nWrite a python function that finds the surface area of a square pyramid with a given base edge and height; the base edge and height must each be either an integer or a float, and both must be greater than zero.\n\nassert surface_Area(3,4) == 33\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef surface_Area(b,s):\n\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n", "constraints": {"assert_0": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(s, (int, float)), \"invalid inputs", "assert_2": "assert b > 0, \"invalid inputs", "assert_3": "assert s > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/245", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_sum\nProblem Description:\n\"\"\"\nWrite a python function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_sum(arr):\n\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/762", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_monthnumber_number\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given month number contains 30 days or not; the input must be an integer and it must be a number from 1 to 12.\n\nassert check_monthnumber_number(6)==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_monthnumber_number(monthnum3):\n\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n", "constraints": {"assert_0": "assert isinstance(monthnum3, int), \"invalid inputs", "assert_1": "assert 1 <= monthnum3 <= 12, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/238", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: number_of_substrings\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of non-empty substrings of a given string; the input must be a string. \n\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef number_of_substrings(str1):\n\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/56", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check\nProblem Description:\n\"\"\"\nWrite a python function that checks if a given number is one less than twice its reverse, and the input must be an integer that is greater than or equal to zero.\n\nassert check(70) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n == 2 * int(str(n)[::-1]) - 1\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/280", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sequential_search\nProblem Description:\n\"\"\"\nWrite a python function that takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found); the array must be a list. \n\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sequential_search(dlist, item):\n\n    assert isinstance(dlist, list), \"invalid inputs\" # $_CONTRACT_$\n    return item in dlist, (dlist.index(item) if item in dlist else -1)\n", "constraints": {"assert_0": "assert isinstance(dlist, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/398", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_of_digits\nProblem Description:\n\"\"\"\nWrite a python function that computes the sum of digits of each number in a given list, where the input must be a list. \n\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_of_digits(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/2", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: similar_elements\nProblem Description:\n\"\"\"\nWrite a python function that finds the shared elements from the given two tuples; \u201ctest_tup1\u201d and \u201ctest_tup2\u201d must each be tuples.\n\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef similar_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/131", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: reverse_vowels\nProblem Description:\n\"\"\"\nWrite a python function that reverses only the vowels of a given string where the input must be of type string. \n\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef reverse_vowels(str1):\n\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/428", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: shell_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts the given array using shell sort, and the input must be a list where all elements are either integers or floats. \n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef shell_sort(my_list):\n\n    assert isinstance(my_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n", "constraints": {"assert_0": "assert isinstance(my_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/67", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: bell_number\nProblem Description:\n\"\"\"\nWrite a python function that finds the number of ways to partition a set of Bell numbers; the input must be an integer, it must be greater than or equal to zero, and it must be less than or equal to one hundred.\n\nassert bell_number(2)==2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef bell_number(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs", "assert_2": "assert n <= 100, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/791", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_nested\nProblem Description:\n\"\"\"\nWrite a python function that removes tuples from the given tuple; the input must be a tuple. \n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_nested(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(e for e in test_tup if not isinstance(e, tuple))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/14", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_Volume\nProblem Description:\n\"\"\"\nWrite a python function that finds the volume of a triangular prism; the length, base, and height must each be either an integer or a float and must all be greater than zero.\n\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Volume(l,b,h) :\n\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_3": "assert l > 0, \"invalid inputs", "assert_4": "assert b > 0, \"invalid inputs", "assert_5": "assert h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/251", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: insert_element\nProblem Description:\n\"\"\"\nWrite a python function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list; the first input must be a list. \n\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef insert_element(list1, element):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    list1 = [v for elt in list1 for v in (element, elt)]\n    return list1\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/478", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: remove_lowercase\nProblem Description:\n\"\"\"\nWrite a python function that removes lowercase substrings from a given string; the input must be a string.\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef remove_lowercase(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return re.sub('[a-z]', '', str1)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/279", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_num_decagonal\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth decagonal number; the input n must be an integer and it must be greater than zero.\n\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_num_decagonal(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/454", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: text_match_wordz\nProblem Description:\n\"\"\"\nWrite a python function that checks if a given string contains a word with the letter 'z'; the input must be a string. \n\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_wordz(text):\n\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return 'z' in text\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/89", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: closest_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the closest smaller number than n, where n must be an integer. \n\nassert closest_num(11) == 10\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef closest_num(N):\n\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n  return (N - 1)\n", "constraints": {"assert_0": "assert isinstance(N, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/133", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_negativenum\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of the negative numbers from a given list of numbers; the input must be a list and every element in the list must be either an integer or a float.\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_negativenum(nums):\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return sum(x for x in nums if x < 0)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/86", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: centered_hexagonal_number\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth centered hexagonal number; the input n must be an integer and n must be greater than zero.\n\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef centered_hexagonal_number(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/93", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: power\nProblem Description:\n\"\"\"\nWrite a python function that calculates the value of 'a' to the power 'b', where 'a' must be either an integer or a float, and 'b' must be an integer.\n\nassert power(3,4) == 81\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef power(a, b):\n\n\tassert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\treturn a ** b\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/806", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_run_uppercase\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum run of uppercase characters in the given string; the input must be a string and its length must be greater than zero.\n\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_run_uppercase(test_str):\n\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_str) > 0, \"invalid inputs\" # $_CONTRACT_$\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n", "constraints": {"assert_0": "assert isinstance(test_str, str), \"invalid inputs", "assert_1": "assert len(test_str) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
