{"name": "Mbpp/479", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: first_Digit\nProblem Description:\n\"\"\"\nWrite a python function that finds the first digit of a given number; the input must be an integer and it must be non-negative. \n\nassert first_Digit(123) == 1\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> first_Digit(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> first_Digit(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef first_Digit(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/726", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: multiply_elements\nProblem Description:\n\"\"\"\nWrite a python function that takes as input a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}; the input must be a tuple and all elements in the tuple must be either integers or floats.\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> multiply_elements(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef multiply_elements(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/18", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_dirty_chars\nProblem Description:\n\"\"\"\nWrite a python function that removes characters from the first string which are present in the second string; both inputs must be strings, the first string must have a length greater than zero, and the second string must also have a length greater than zero.\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> remove_dirty_chars([], [])\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> remove_dirty_chars(2.0, [])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> remove_dirty_chars([], 2.0)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> remove_dirty_chars(3.0, [])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_dirty_chars(string, second_string):\n\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs", "assert_1": "assert isinstance(second_string, str), \"invalid inputs", "assert_2": "assert len(string) > 0, \"invalid inputs", "assert_3": "assert len(second_string) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/90", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: len_log\nProblem Description:\n\"\"\"\nWrite a python function that finds the length of the longest word; the input must be a list, the list must not be empty, and all elements in the list must be strings.\n\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> len_log(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> len_log([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> len_log([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef len_log(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, str) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, str) for item in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/287", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: square_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of squares of first n even natural numbers; n must be an integer and n must be greater than or equal to zero.\n\nassert square_Sum(2) == 20\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> square_Sum(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return 2 * n * (n + 1) * (2 * n + 1) /3\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/792", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_list\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of lists in a given number of lists; the input must be a list. \n\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> count_list(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_list(input_list):\n\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(isinstance(e, list) for e in input_list)\n", "constraints": {"assert_0": "assert isinstance(input_list, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/803", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_perfect_square\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number is a perfect square or not; the input must be an integer.\n\nassert not is_perfect_square(10)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_perfect_square(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_perfect_square(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/404", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: minimum\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum of two numbers; both inputs must be either integers or floats. \n\nassert minimum(1,2) == 1\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> minimum('!0!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> minimum('1', '!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef minimum(a,b):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n   \n    return min(a,b)\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/84", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sequence\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth number in the newman conway sequence; the input n must be an integer and it must be greater than zero.\n\nassert sequence(10) == 6\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> sequence(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sequence(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/806", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_run_uppercase\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum run of uppercase characters in the given string; the input must be a string and its length must be greater than zero.\n\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> max_run_uppercase(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> max_run_uppercase('')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_run_uppercase(test_str):\n\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_str) > 0, \"invalid inputs\" # $_CONTRACT_$\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n", "constraints": {"assert_0": "assert isinstance(test_str, str), \"invalid inputs", "assert_1": "assert len(test_str) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/67", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: bell_number\nProblem Description:\n\"\"\"\nWrite a python function that finds the number of ways to partition a set of Bell numbers; the input must be an integer, it must be greater than or equal to zero, and it must be less than or equal to one hundred.\n\nassert bell_number(2)==2\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> bell_number(101)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef bell_number(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs", "assert_2": "assert n <= 100, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/437", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_odd\nProblem Description:\n\"\"\"\nWrite a python function that removes odd characters in a string; the input must be a string. \n\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> remove_odd(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_odd(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1[1::2]\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/725", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: extract_quotation\nProblem Description:\n\"\"\"\nWrite a python function that extracts values between quotation marks from the given string, and the input must be a string.\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> extract_quotation(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef extract_quotation(text1):\n\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.findall(r'\"(.*?)\"', text1)\n", "constraints": {"assert_0": "assert isinstance(text1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/141", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: pancake_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts a list of elements while ensuring that the input is a list and every element in that list is either an integer or a float.\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> pancake_sort(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef pancake_sort(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/125", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_length\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum difference between the number of 0s and the number of 1s in any sub-string of the given binary string; the input must be a string and all characters in the string must be either '0' or '1'.\n\nassert find_length(\"11000010001\") == 6\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find_length(0.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> find_length('A')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_length(string):\n\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert all([c in '01' for c in string]), \"invalid inputs\" # $_CONTRACT_$\n \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs", "assert_1": "assert all([c in '01' for c in string]), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/755", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: second_smallest\nProblem Description:\n\"\"\"\nWrite a python function that finds the second smallest number in a list; the input must be a list, and every element in that list must be either an integer or a float.\n\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> second_smallest(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef second_smallest(numbers):\n\n  assert isinstance(numbers, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs\" # $_CONTRACT_$\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]\n", "constraints": {"assert_0": "assert isinstance(numbers, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/311", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: set_left_most_unset_bit\nProblem Description:\n\"\"\"\nWrite a python function that sets the left most unset bit of a given integer; the input must be a non-negative integer. \n\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> set_left_most_unset_bit(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef set_left_most_unset_bit(n):\n\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n", "constraints": {"assert_0": "assert isinstance(n, int) and n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/167", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: next_power_of_2\nProblem Description:\n\"\"\"\nWrite a python function that finds the smallest power of 2 greater than or equal to n; the input n must be an integer and it must be greater than or equal to zero.\n\nassert next_power_of_2(0) == 1\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> next_power_of_2([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef next_power_of_2(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res; \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/605", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: prime_num\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given integer is a prime number; the input must be an integer. \n\nassert prime_num(13)==True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> prime_num(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef prime_num(num):\n\n  assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n", "constraints": {"assert_0": "assert isinstance(num, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/62", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: smallest_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the smallest number in a list, and the input must be a list and all items in the list must be either integers or floats.\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> smallest_num(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> smallest_num(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef smallest_num(xs):\n\n  assert isinstance(xs, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n", "constraints": {"assert_0": "assert isinstance(xs, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/409", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: min_product_tuple\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum product from the pairs of tuples within a given list; the input must be a list, it must not be empty, every element in the list must be a tuple, and each element of those tuples must be either an integer or a float.\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> min_product_tuple([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> min_product_tuple(['!0!'])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> min_product_tuple(['!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef min_product_tuple(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for sub in list1 for ele in sub), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs", "assert_3": "assert all(isinstance(ele, (int, float)) for sub in list1 for ele in sub), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/230", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: replace_blank\nProblem Description:\n\"\"\"\nWrite a python function that takes in a string and a character, replaces blank spaces in the string with the character, and returns the string; the first input must be a string, the second input must be a string, and the second input must be a single character.\n\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> replace_blank(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> replace_blank(5.0, 4.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> replace_blank(2.0, '')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_blank(str1, char):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs", "assert_1": "assert isinstance(char, str), \"invalid inputs", "assert_2": "assert len(char) == 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/578", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: interleave_lists\nProblem Description:\n\"\"\"\nWrite a python function that interleaves three lists of the same length into a single flat list; all inputs must be lists and the lengths of the three lists must be equal. \n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n\nContract Test Cases:\nassert_3:\n>>> interleave_lists([], [2.0], [])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef interleave_lists(list1, list2, list3):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) == len(list2) == len(list3), \"invalid inputs\" # $_CONTRACT_$\n    return [el for pair in zip(list1, list2, list3) for el in pair]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(list2, list), \"invalid inputs", "assert_2": "assert isinstance(list3, list), \"invalid inputs", "assert_3": "assert len(list1) == len(list2) == len(list3), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/105", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of true booleans in the given list; the input must be a list and all elements in the list must be of boolean type.\n\nassert count([True,False,True]) == 2\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> count([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, bool) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n   \n    return sum(lst) \n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, bool) for x in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/807", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: first_odd\nProblem Description:\n\"\"\"\nWrite a python function that finds the first odd number in a given list of numbers; the input must be a list, all elements in the list must be integers, and there must be at least one odd number in the list.\n\nassert first_odd([1,3,5]) == 1\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> first_odd([2.0])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> first_odd([4.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef first_odd(nums):\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert any(el % 2 != 0 for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(el, int) for el in nums), \"invalid inputs", "assert_2": "assert any(el % 2 != 0 for el in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/477", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_lower\nProblem Description:\n\"\"\"\nWrite a python function that converts the given string to lower case; the input must be a string. \n\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_lower(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_lower(string):\n\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return string.lower()\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/743", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: rotate_right\nProblem Description:\n\"\"\"\nWrite a python function that rotates a given list by a specified number of items to the right direction; the first input must be a list and the second input must be an integer that is greater than or equal to zero and less than or equal to the length of the list. \n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> rotate_right([], 1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef rotate_right(l, m):\n\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n  return l[-m:] + l[:-m]\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert isinstance(m, int), \"invalid inputs", "assert_2": "assert 0 <= m <= len(l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/406", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Parity\nProblem Description:\n\"\"\"\nWrite a python function that determines whether the parity of a given number is odd; the input must be an integer.\n\nassert find_Parity(12) == False\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find_Parity(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Parity(x):\n\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return x % 2 != 0\n", "constraints": {"assert_0": "assert isinstance(x, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/641", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_nonagonal\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth nonagonal number; the input n must be an integer and n must be greater than or equal to zero.\n\nassert is_nonagonal(10) == 325\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_nonagonal([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_nonagonal(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/800", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_all_spaces\nProblem Description:\n\"\"\"\nWrite a python function that removes all whitespaces from a string; the input must be a string.\n\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> remove_all_spaces(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_all_spaces(text):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return text.replace(' ', '')\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/257", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: swap_numbers\nProblem Description:\n\"\"\"\nWrite a python function that takes in two numbers and returns a tuple with the second number and then the first number; both inputs must be either integers or floats. \n\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> swap_numbers('!0!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> swap_numbers('1', '!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef swap_numbers(a,b):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/460", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: Extract\nProblem Description:\n\"\"\"\nWrite a python function that retrieves the first element of each sublist, where the input must be a list, each element of the input list must also be a list, and each sublist must contain at least one element.\n\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> Extract([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Extract(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(l, list) for l in lst), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(l) > 0 for l in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return [item[0] for item in lst] \n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert all(isinstance(l, list) for l in lst), \"invalid inputs", "assert_2": "assert all(len(l) > 0 for l in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/567", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: issort_list\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a specified list is sorted or not and the input must be a list.\n\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> issort_list(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef issort_list(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return all(a <= b for a, b in zip(list1, list1[1:]))\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/290", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_length\nProblem Description:\n\"\"\"\nWrite a python function that finds the list of maximum length in a list of lists; the input must be a list and every element within that list must also be a list. \n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> max_length([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_length(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, list) for x in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/476", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: big_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of the largest and smallest value in a given array; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> big_sum([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> big_sum(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef big_sum(nums):\n\n      assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n      assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n      return max(nums) + min(nums)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert len(nums) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/244", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: next_Perfect_Square\nProblem Description:\n\"\"\"\nWrite a python function that finds the next perfect square greater than a given number; the input must be either an integer or a float.\n\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> next_Perfect_Square('!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math  \ndef next_Perfect_Square(N):\n\n    assert isinstance(N, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n", "constraints": {"assert_0": "assert isinstance(N, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/264", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: dog_age\nProblem Description:\n\"\"\"\nWrite a python function that calculates a dog's age in dog years; the input must be an integer and it must be non-negative. \n\nassert dog_age(12)==61\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> dog_age([2.0, 3.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef dog_age(h_age):\n\n\tassert isinstance(h_age, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert h_age >= 0, \"invalid inputs\" # $_CONTRACT_$\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age\n", "constraints": {"assert_0": "assert isinstance(h_age, int), \"invalid inputs", "assert_1": "assert h_age >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/296", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: get_Inv_Count\nProblem Description:\n\"\"\"\nWrite a python function that counts inversions in an array; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> get_Inv_Count([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> get_Inv_Count(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_Inv_Count(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/724", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: power_base_sum\nProblem Description:\n\"\"\"\nWrite a python function that takes base and power as arguments and calculates the sum of all digits of the base raised to the specified power; both base and power must be integers, base must be non-negative, and power must also be an integer. \n\nassert power_base_sum(2,100)==115\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> power_base_sum(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> power_base_sum(-1, 2.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> power_base_sum(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef power_base_sum(base, power):\n\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n", "constraints": {"assert_0": "assert isinstance(base, int), \"invalid inputs", "assert_1": "assert base >= 0, \"invalid inputs", "assert_2": "assert isinstance(power, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/420", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: cube_Sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the cube sum of the first n even natural numbers; n must be an integer and n must be greater than or equal to zero.\n\nassert cube_Sum(2) == 72\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> cube_Sum(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> cube_Sum(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef cube_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/233", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: lateralsuface_cylinder\nProblem Description:\n\"\"\"\nWrite a python function that calculates the lateral surface area of a cylinder; both the radius and height must be either integers or floats, the radius must be greater than zero, and the height must also be greater than zero.\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> lateralsuface_cylinder('!0!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> lateralsuface_cylinder('0', '!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> lateralsuface_cylinder(False, False)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> lateralsuface_cylinder('!0!', 0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef lateralsuface_cylinder(r, h):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_2": "assert r > 0, \"invalid inputs", "assert_3": "assert h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/728", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_list\nProblem Description:\n\"\"\"\nWrite a python function that takes as input two lists and returns a new list where each element is the sum of the corresponding elements from the input lists; both input lists must be of type list and they must have the same length. \n\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> sum_list([2.0], [])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_list(lst1,lst2):\n\n  assert isinstance(lst1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(lst2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(lst1) == len(lst2), \"invalid inputs\" # $_CONTRACT_$\n  return [a + b for a, b in zip(lst1, lst2)] \n", "constraints": {"assert_0": "assert isinstance(lst1, list), \"invalid inputs", "assert_1": "assert isinstance(lst2, list), \"invalid inputs", "assert_2": "assert len(lst1) == len(lst2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/421", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: concatenate_tuple\nProblem Description:\n\"\"\"\nWrite a python function that concatenates each element of a tuple by the delimiter; the input must be a tuple. \n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> concatenate_tuple(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef concatenate_tuple(test_tup):\n\n    assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/392", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: get_max_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n), where the input n must be an integer and must be greater than or equal to zero.\n\nassert get_max_sum(60) == 106\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> get_max_sum(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> get_max_sum(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_max_sum (n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/635", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: heap_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts the given list; the input must be a list and all elements in the list must be either integers or floats.\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> heap_sort(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport heapq as hq\ndef heap_sort(iterable):\n\n    assert isinstance(iterable, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n", "constraints": {"assert_0": "assert isinstance(iterable, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/310", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: string_to_tuple\nProblem Description:\n\"\"\"\nWrite a python function that converts a given string to a tuple of characters; the input must be a string. \n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> string_to_tuple(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef string_to_tuple(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/391", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: convert_list_dictionary\nProblem Description:\n\"\"\"\nWrite a python function that converts more than one list to a nested dictionary; the first input must be a list, the second input must be a list, and the third input must also be a list.\n\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> convert_list_dictionary(2.0, 4.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> convert_list_dictionary(6.0, 5.0, 7.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> convert_list_dictionary(9.0, 10.0, 8.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef convert_list_dictionary(l1, l2, l3):\n\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n", "constraints": {"assert_0": "assert isinstance(l1, list), \"invalid inputs", "assert_1": "assert isinstance(l2, list), \"invalid inputs", "assert_2": "assert isinstance(l3, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/240", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: replace_list\nProblem Description:\n\"\"\"\nWrite a python function that takes in two lists and replaces the last element of the first list with the elements of the second list; both inputs must be lists, the first list must not be empty. \n\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> replace_list([], [])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_list(list1, list2):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:-1] + list2\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert isinstance(list2, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/450", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: extract_string\nProblem Description:\n\"\"\"\nWrite a python function that extracts specified size of strings from a given list of string values; the first input must be a list, every element in that list must be a string, and the second input must be an integer.\n\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> extract_string([2.0], 2)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_string(str1, l):\n\n    assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    return [e for e in str1 if len(e) == l] \n", "constraints": {"assert_0": "assert isinstance(str1, list), \"invalid inputs", "assert_1": "assert all(isinstance(ele, str) for ele in str1), \"invalid inputs", "assert_2": "assert isinstance(l, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/89", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: closest_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the closest smaller number than n, where n must be an integer. \n\nassert closest_num(11) == 10\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> closest_num(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef closest_num(N):\n\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n  return (N - 1)\n", "constraints": {"assert_0": "assert isinstance(N, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/418", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: Find_Max\nProblem Description:\n\"\"\"\nWrite a python function that finds the element of a list having maximum length; the input must be a list, and every element within that list must also be a list.\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> Find_Max([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Find_Max(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, list) for i in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return max(lst, key = len)\n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, list) for i in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/397", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: median_numbers\nProblem Description:\n\"\"\"\nWrite a python function that finds the median of three numbers; the inputs must be of type integer or float for each of the three numbers provided. \n\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> median_numbers('!0!', '!2!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> median_numbers('0', '!', '0!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> median_numbers('1', '1!', '!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef median_numbers(a,b,c):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(c, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/267", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: square_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers; n must be an integer and n must be greater than zero.\n\nassert square_Sum(2) == 10\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> square_Sum([2.0, 3.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return n * (4 * n * n - 1) / 3\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/9", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Rotations\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum number of rotations greater than zero required to get the same string; the input must be a string and it must not be empty.\n\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> find_Rotations('')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Rotations(s):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert len(s) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/142", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_samepair\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of items that are identical in the same position of three given lists; the first input must be a list, the second input must also be a list, and the third input must be a list.\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> count_samepair(2.0, 4.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> count_samepair(6.0, 5.0, 7.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> count_samepair(9.0, 10.0, 8.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_samepair(list1,list2,list3):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(list2, list), \"invalid inputs", "assert_2": "assert isinstance(list3, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/456", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: reverse_string_list\nProblem Description:\n\"\"\"\nWrite a python function that reverses each string in a given list of string values; the input must be a list, and every element within that list must be a string.\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> reverse_string_list([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef reverse_string_list(stringlist):\n\n    assert isinstance(stringlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n    return [x[::-1] for x in stringlist]\n", "constraints": {"assert_0": "assert isinstance(stringlist, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in stringlist), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/773", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: occurance_substring\nProblem Description:\n\"\"\"\nWrite a python function that finds the occurrence and position of the substrings within a string, ensuring that the input \"text\" is a string and the input \"pattern\" is also a string; return None if there is no match.\n\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> occurance_substring(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> occurance_substring(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef occurance_substring(text,pattern):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs", "assert_1": "assert isinstance(pattern, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/473", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: tuple_intersection\nProblem Description:\n\"\"\"\nWrite a python function that finds the tuple intersection of elements in the given tuple list irrespective of their order; the first input must be a list, the second input must also be a list, and all elements in both lists must be tuples.\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> tuple_intersection([3.0], [2.0])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> tuple_intersection([4.0], [5.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_intersection(test_list1, test_list2):\n\n  assert isinstance(test_list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_list2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n", "constraints": {"assert_0": "assert isinstance(test_list1, list), \"invalid inputs", "assert_1": "assert isinstance(test_list2, list), \"invalid inputs", "assert_2": "assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs", "assert_3": "assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/224", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_Set_Bits\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of set bits in a given non-negative integer; the input must be an integer and it must be greater than or equal to zero.\n\nassert count_Set_Bits(2) == 1\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> count_Set_Bits(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> count_Set_Bits(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_Set_Bits(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/741", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: all_Characters_Same\nProblem Description:\n\"\"\"\nWrite a python function that checks whether all the characters in a given string are the same; the input must be a string. \n\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> all_Characters_Same(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef all_Characters_Same(s) :\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return all(ch == s[0] for ch in s[1:])\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/445", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: index_multiplication\nProblem Description:\n\"\"\"\nWrite a python function that performs index wise multiplication of tuple elements in the given two tuples; both inputs must be tuples, each element of the first tuple must also be a tuple, each element of the second tuple must also be a tuple, each tuple in the first input must contain exactly two elements, each tuple in the second input must also contain exactly two elements, and all elements in both input tuples must be either integers or floats.\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\nContract Test Cases:\nassert_4:\n>>> index_multiplication([[]], [])\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> index_multiplication([], [[]])\n \"AssertionError: invalid input\"\n\nassert_6:\n>>> index_multiplication([[[]]], [])\n \"AssertionError: invalid input\"\n\nassert_7:\n>>> index_multiplication([[[[]]], [], []], [[[]]])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef index_multiplication(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert all(isinstance(ele, tuple) for ele in test_tup1), \"invalid inputs", "assert_3": "assert all(isinstance(ele, tuple) for ele in test_tup2), \"invalid inputs", "assert_4": "assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs", "assert_5": "assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs", "assert_6": "assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs", "assert_7": "assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/793", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: last\nProblem Description:\n\"\"\"\nWrite a python function that finds the last position of an element in a sorted array; the first input must be a list, all elements in the list must be either integers or floats, the list must be sorted in non-decreasing order, the second input must be either an integer or a float, and the element must be present in the list. \n\nassert last([1,2,3],1) == 0\n\"\"\"\n\nContract Test Cases:\nassert_3:\n>>> last([2.0], '!0!')\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> last([3.0], '!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef last(arr,x):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs", "assert_2": "assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs", "assert_3": "assert isinstance(x, (int, float)), \"invalid inputs", "assert_4": "assert x in arr, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/459", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_uppercase\nProblem Description:\n\"\"\"\nWrite a python function that removes uppercase substrings from a given string; the input must be a string. \n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> remove_uppercase(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_uppercase(str1):\n\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return ''.join(c for c in str1 if c.islower())\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/93", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: power\nProblem Description:\n\"\"\"\nWrite a python function that calculates the value of 'a' to the power 'b', where 'a' must be either an integer or a float, and 'b' must be an integer.\n\nassert power(3,4) == 81\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> power([3.0, 5.0], [4.0, 2.0])\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> power([9.0, 7.0], [6.0, 8.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef power(a, b):\n\n\tassert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\treturn a ** b\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/20", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_woodall\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given number is a Woodall number; the input must be either an integer or a float.\n\nassert is_woodall(383) == True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_woodall('!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_woodall(x):\n\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False\n", "constraints": {"assert_0": "assert isinstance(x, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/99", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: decimal_to_binary\nProblem Description:\n\"\"\"\nWrite a python function that converts a given decimal number to its binary equivalent represented as a string with no leading zeros; the input must be an integer. \n\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> decimal_to_binary(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef decimal_to_binary(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n).replace(\"0b\",\"\") \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/88", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: freq_count\nProblem Description:\n\"\"\"\nWrite a python function that gets the frequency of all the elements in a list and returns it as a dictionary; the input must be a list. \n\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> freq_count(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport collections\ndef freq_count(list1):\n\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  freq_count= collections.Counter(list1)\n  return freq_count\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/116", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: tuple_to_int\nProblem Description:\n\"\"\"\nWrite a python function that converts a given tuple of positive integers into a single integer; the input must be a tuple, it must contain at least one element, all elements in the tuple must be integers, and all integers must be positive.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> tuple_to_int([2.0])\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> tuple_to_int([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> tuple_to_int([3.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_to_int(nums):\n\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x > 0 for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n", "constraints": {"assert_0": "assert isinstance(nums, tuple), \"invalid inputs", "assert_1": "assert len(nums) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in nums), \"invalid inputs", "assert_3": "assert all(x > 0 for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/572", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: two_unique_nums\nProblem Description:\n\"\"\"\nWrite a python function that removes duplicate numbers from a given number of lists; the input must be a list and every item in the list must be either an integer or a float.\n\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> two_unique_nums(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef two_unique_nums(nums):\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return [n for n in nums if nums.count(n)==1]\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/71", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: comb_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts a list of elements, ensuring that the input is a list and that every item in the list is either an integer or a float.\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> comb_sort(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef comb_sort(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs\" # $_CONTRACT_$\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/279", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_num_decagonal\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth decagonal number; the input n must be an integer and it must be greater than zero.\n\nassert is_num_decagonal(3) == 27\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_num_decagonal(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> is_num_decagonal(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_num_decagonal(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/632", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: move_zero\nProblem Description:\n\"\"\"\nWrite a python function that moves all zeroes to the end of the given list; the input must be a list and every element in the list must be either an integer or a float.\n\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> move_zero(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef move_zero(num_list):\n\n    assert isinstance(num_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n", "constraints": {"assert_0": "assert isinstance(num_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/781", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_divisors\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the count of divisors of a given positive integer is even; the input must be an integer and it must be greater than zero.\n\nassert count_divisors(10)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> count_divisors(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> count_divisors(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math \ndef count_divisors(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/137", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: zero_count\nProblem Description:\n\"\"\"\nWrite a python function that finds the ratio of zeroes to non-zeroes in an array of integers; the input must be a list, all elements in the list must be integers, and the list must not be empty.\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> zero_count([2.0])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> zero_count([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef zero_count(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in nums), \"invalid inputs", "assert_2": "assert len(nums) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/285", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: text_match_two_three\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a string contains the 'a' character followed by two or three 'b' characters; the input must be a string. \n\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> text_match_two_three(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_two_three(text):\n\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/454", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: text_match_wordz\nProblem Description:\n\"\"\"\nWrite a python function that checks if a given string contains a word with the letter 'z'; the input must be a string. \n\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> text_match_wordz(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_wordz(text):\n\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return 'z' in text\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/643", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: text_match_wordz_middle\nProblem Description:\n\"\"\"\nWrite a python function that checks if a string contains 'z', except at the start and end of the word; the input must be a string. \n\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> text_match_wordz_middle(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_wordz_middle(text):\n\n\tassert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn re.search(r'\\Bz\\B',  text) is not None\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/245", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_sum\nProblem Description:\n\"\"\"\nWrite a python function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> max_sum([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> max_sum(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_sum(arr):\n\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/113", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_integer\nProblem Description:\n\"\"\"\nWrite a python function that checks if a string represents an integer or not; the input must be a string. \n\nassert check_integer(\"python\")==False\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> check_integer(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_integer(text):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/389", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_lucas\nProblem Description:\n\"\"\"\nWrite a python function that finds the n'th lucas number; the input n must be an integer that is greater than or equal to zero. \n\nassert find_lucas(9) == 76\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find_lucas(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_lucas(n):\n\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n", "constraints": {"assert_0": "assert isinstance(n, int) and n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/468", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_product\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum product formed by multiplying numbers of an increasing subsequence of the given array; the input must be a list, all elements in the list must be either integers or floats, and the list must contain at least one element.\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> max_product(['!0!'])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> max_product([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_product(arr):\n\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs", "assert_2": "assert len(arr) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/256", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_Primes_nums\nProblem Description:\n\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number; the input must be an integer and it must be non-negative. \n\nassert count_Primes_nums(5) == 2\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> count_Primes_nums(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_Primes_nums(n):\n\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n", "constraints": {"assert_0": "assert isinstance(n, int) and n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/566", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_digits\nProblem Description:\n\"\"\"\nWrite a python function that returns the sum of the digits of a non-negative integer; the input must be an integer and it must be non-negative. \n\nassert sum_digits(345)==12\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> sum_digits([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_digits(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  return sum(map(int, str(n)))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/85", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: surfacearea_sphere\nProblem Description:\n\"\"\"\nWrite a python function that calculates the surface area of a sphere; the radius must be a number that is either an integer or a float and must also be greater than zero.\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> surfacearea_sphere('!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef surfacearea_sphere(r):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 4 * math.pi * (r**2)\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert r > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/797", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_in_range\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of all odd natural numbers within the range l and r; both l and r must be integers, and l must be less than or equal to r and greater than or equal to zero.\n\nassert sum_in_range(2,5) == 8\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> sum_in_range(0, -21238)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r):\n\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum_odd(r) - sum_odd(l - 1)\n", "constraints": {"assert_0": "assert isinstance(l, int), \"invalid inputs", "assert_1": "assert isinstance(r, int), \"invalid inputs", "assert_2": "assert 0 <= l <= r, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/563", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: extract_values\nProblem Description:\n\"\"\"\nWrite a python function that extracts values between quotation marks from a string; the input parameter must be a string. \n\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> extract_values(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef extract_values(text):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return (re.findall(r'\"(.*?)\"', text))\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/607", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_literals\nProblem Description:\n\"\"\"\nWrite a python function that searches a string for a regex pattern and returns the matching substring along with its start index and end index; the input \"text\" must be a string and the input \"pattern\" must also be a string.\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find_literals(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> find_literals(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef find_literals(text, pattern):\n\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs", "assert_1": "assert isinstance(pattern, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/451", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_whitespaces\nProblem Description:\n\"\"\"\nWrite a python function that removes all whitespaces from the given string while ensuring that the input is a string. \n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> remove_whitespaces(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef remove_whitespaces(text1):\n\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return text1.replace(' ', '')\n", "constraints": {"assert_0": "assert isinstance(text1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/2", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: similar_elements\nProblem Description:\n\"\"\"\nWrite a python function that finds the shared elements from the given two tuples; \u201ctest_tup1\u201d and \u201ctest_tup2\u201d must each be tuples.\n\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> similar_elements(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> similar_elements(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef similar_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/4", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: heap_queue_largest\nProblem Description:\n\"\"\"\nWrite a python function that finds the n largest integers from a given list of numbers, returned in descending order; the input must be a list of numbers, n must be an integer, n must be greater than zero, all elements in the list must be integers, and the length of the list must be greater than n.\n\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> heap_queue_largest([2.0], 0)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> heap_queue_largest([3.0], -8855)\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> heap_queue_largest([2.0], 1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert isinstance(n, int), \"invalid inputs", "assert_2": "assert n > 0, \"invalid inputs", "assert_3": "assert all(isinstance(i, int) for i in nums), \"invalid inputs", "assert_4": "assert len(nums) > n, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/247", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: lps\nProblem Description:\n\"\"\"\nWrite a python function that finds the length of the longest palindromic subsequence in the given string; the input must be a string. \n\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> lps(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef lps(str1):\n\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/126", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of common divisors of two given numbers; both inputs must be integers and greater than zero. \n\nassert sum(10,15) == 6\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> sum([3.0, 5.0], [4.0, 2.0])\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> sum([9.0, 7.0], [6.0, 8.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef sum(a,b):\n\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n", "constraints": {"assert_0": "assert isinstance(a, int), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs", "assert_2": "assert a > 0, \"invalid inputs", "assert_3": "assert b > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/294", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_val\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum value in a given heterogeneous list, where the input must be a list, the list must not be empty, and it must contain at least one integer. \n\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> max_val([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> max_val([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_val(listval):\n\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val\n", "constraints": {"assert_0": "assert isinstance(listval, list), \"invalid inputs", "assert_1": "assert len(listval) > 0, \"invalid inputs", "assert_2": "assert any(isinstance(i, int) for i in listval), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/419", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: round_and_sum\nProblem Description:\n\"\"\"\nWrite a python function that rounds every number in a given list of numbers and prints the total sum multiplied by the length of the list; the input must be a list, and every element in that list must be either an integer or a float.\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> round_and_sum(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef round_and_sum(list1):\n\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/463", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_subarray_product\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum product subarray of the given array, where the input must be a list, the list must not be empty, and all elements of the list must be either integers or floats.\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> max_subarray_product([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> max_subarray_product(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_subarray_product(arr):\n\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/596", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: tuple_size\nProblem Description:\n\"\"\"\nWrite a python function that finds the size in bytes of the given tuple and the input must be a tuple. \n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> tuple_size(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport sys \ndef tuple_size(tuple_list):\n\n  assert isinstance(tuple_list, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return sys.getsizeof(tuple_list)\n", "constraints": {"assert_0": "assert isinstance(tuple_list, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/274", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: even_binomial_Coeff_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients; n must be an integer and n must be greater than zero.\n\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> even_binomial_Coeff_Sum(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> even_binomial_Coeff_Sum(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/268", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_star_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the n'th star number, where the input n must be an integer greater than zero. \n\nassert find_star_num(3) == 37\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find_star_num(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> find_star_num(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_star_num(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/587", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: list_tuple\nProblem Description:\n\"\"\"\nWrite a python function that converts a list to a tuple; the input must be a list. \n\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> list_tuple(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef list_tuple(listx):\n\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(listx)\n", "constraints": {"assert_0": "assert isinstance(listx, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/598", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: armstrong_number\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number is an Armstrong number; the input must be an integer and it must be greater than zero.\n\nassert armstrong_number(153)==True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> armstrong_number(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> armstrong_number(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef armstrong_number(number):\n\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n", "constraints": {"assert_0": "assert isinstance(number, int), \"invalid inputs", "assert_1": "assert number > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/292", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find\nProblem Description:\n\"\"\"\nWrite a python function that finds the quotient of two numbers rounded down to the nearest integer; both inputs must be integers and the second input must not be zero.\n\nassert find(10,3) == 3\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find([], [])\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> find([], [2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find(n,m):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert m != 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return n // m \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert isinstance(m, int), \"invalid inputs", "assert_2": "assert m != 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/101", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: kth_element\nProblem Description:\n\"\"\"\nWrite a python function that finds the kth element in the given array using 1-based indexing, where the first input must be a list and the second input must be an integer, and the length of the list must be greater than or equal to k and k must be at least 1.\n\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> kth_element([], 0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef kth_element(arr, k):\n\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$ \n  assert len(arr) >= k >= 1, \"invalid inputs\" # $_CONTRACT_$\n  return arr[k-1]\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert isinstance(k, int), \"invalid inputs", "assert_2": "assert len(arr) >= k >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/457", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: Find_Min\nProblem Description:\n\"\"\"\nWrite a python function that finds the sublist having minimum length; the input must be a list and every element in that list must also be a list.\n\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> Find_Min([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Find_Min(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return min(lst, key=len) \n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, list) for x in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/170", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_range_list\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of numbers in a list within a range specified by two indices; the first input must be a list, all elements of the list must be either integers or floats, both indices must be integers, and the indices must be within the valid range of the list's length. \n\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n\nContract Test Cases:\nassert_4:\n>>> sum_range_list([2.0], -1, -2438)\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> sum_range_list([3.0], -1, -2439)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_range_list(list1, m, n):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in list1), \"invalid inputs", "assert_2": "assert isinstance(m, int), \"invalid inputs", "assert_3": "assert isinstance(n, int), \"invalid inputs", "assert_4": "assert 0 <= m < len(list1), \"invalid inputs", "assert_5": "assert 0 <= n < len(list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/557", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: toggle_string\nProblem Description:\n\"\"\"\nWrite a python function that toggles the case of all characters in a string; the input must be a string. \n\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> toggle_string(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef toggle_string(string):\n\n assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n return string.swapcase()\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/447", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: cube_nums\nProblem Description:\n\"\"\"\nWrite a python function that calculates the cubes of individual elements in a list; the input must be a list and all elements in the list must be either integers or floats.\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> cube_nums(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef cube_nums(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n**3 for n in nums]\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/19", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: test_duplicate\nProblem Description:\n\"\"\"\nWrite a python function that determines if there are any duplicate elements in an array of integers, and the input must be a list containing only integers.\n\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> test_duplicate([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef test_duplicate(arraynums):\n\n    assert isinstance(arraynums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) for item in arraynums), \"invalid inputs\" # $_CONTRACT_$\n    return len(arraynums) != len(set(arraynums))\n", "constraints": {"assert_0": "assert isinstance(arraynums, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, int) for item in arraynums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/801", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: test_three_equal\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of equal numbers from three given integers; all three inputs must be integers.\n\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> test_three_equal([4.0, 3.0], [5.0, 6.0], [7.0, 2.0])\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> test_three_equal([12.0, 13.0], [8.0, 9.0], [10.0, 11.0])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> test_three_equal([18.0, 15.0], [19.0, 14.0], [16.0, 17.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef test_three_equal(x,y,z):\n\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n", "constraints": {"assert_0": "assert isinstance(x, int), \"invalid inputs", "assert_1": "assert isinstance(y, int), \"invalid inputs", "assert_2": "assert isinstance(z, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/86", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: centered_hexagonal_number\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth centered hexagonal number; the input n must be an integer and n must be greater than zero.\n\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> centered_hexagonal_number(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> centered_hexagonal_number(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef centered_hexagonal_number(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/777", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of non-repeated elements in a given list; the input must be a list, and all elements in the list must be either integers or floats.\n\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find_sum(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> find_sum(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_sum(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/8", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: square_nums\nProblem Description:\n\"\"\"\nWrite a python function that finds the squares of individual elements in a list, where the input must be a list and every element within that list must be either an integer or a float.\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> square_nums(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_nums(nums):\n\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n return [i**2 for i in nums]\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/414", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: overlapping\nProblem Description:\n\"\"\"\nWrite a python function that checks whether any value in one list exists in another list; both inputs must be lists and every element in the first list must be either an integer or a float while every element in the second list must also be either an integer or a float.\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> overlapping(['!1!'], ['!0!'])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> overlapping(['!'], ['1'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef overlapping(list1,list2):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(list2, list), \"invalid inputs", "assert_2": "assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs", "assert_3": "assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/96", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: divisor\nProblem Description:\n\"\"\"\nWrite a python function that finds the number of divisors of a given integer, and the input must be an integer greater than zero. \n\nassert divisor(15) == 4\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> divisor(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef divisor(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return sum(1 for i in range(1, n + 1) if n % i == 0)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/455", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_monthnumb_number\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given month number contains 31 days or not; the input month number must be an integer and it must be between 1 and 12 inclusive.\n\nassert check_monthnumb_number(5)==True\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> check_monthnumb_number(13)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_monthnumb_number(monthnum2):\n\n  assert isinstance(monthnum2, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum2 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n", "constraints": {"assert_0": "assert isinstance(monthnum2, int), \"invalid inputs", "assert_1": "assert 1 <= monthnum2 <= 12, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/592", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_Of_product\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of the product of consecutive binomial coefficients; the input must be an integer and must be non-negative. \n\nassert sum_Of_product(3) == 15\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> sum_Of_product(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> sum_Of_product(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/448", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: cal_sum\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of perrin numbers; the input \u201cn\u201d must be an integer. \n\nassert cal_sum(9) == 49\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> cal_sum(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef cal_sum(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/171", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: perimeter_pentagon\nProblem Description:\n\"\"\"\nWrite a python function that calculates the perimeter of a regular pentagon based on the length of its sides; the input must be either an integer or a float. \n\nassert perimeter_pentagon(5) == 25\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> perimeter_pentagon('!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef perimeter_pentagon(a):\n\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 5 * a\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/441", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: surfacearea_cube\nProblem Description:\n\"\"\"\nWrite a python function that calculates the surface area of a cube given its size; the input must be either an integer or a float.\n\nassert surfacearea_cube(5)==150\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> surfacearea_cube('!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef surfacearea_cube(l):\n\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 6 * l * l\n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/426", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: filter_oddnumbers\nProblem Description:\n\"\"\"\nWrite a python function that filters odd numbers from a list; the input must be a list and all elements in the list must be integers.\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> filter_oddnumbers([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef filter_oddnumbers(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in nums if n % 2 == 1]\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, int) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/766", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: pair_wise\nProblem Description:\n\"\"\"\nWrite a python function that returns a list of all pairs of consecutive items in a given list; the input must be a list. \n\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> pair_wise(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef pair_wise(l1):\n\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    return list(zip(l1, l1[1:]))\n", "constraints": {"assert_0": "assert isinstance(l1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/612", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: merge\nProblem Description:\n\"\"\"\nWrite a python function that takes a list of lists where each sublist contains exactly two elements and returns a list of two lists where the first list has the first element of each sublist and the second one has the second; the input must be a list, it must not be empty, and each sublist must contain exactly two elements.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> merge([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef merge(lst):\n\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(sublist) == 2 for sublist in lst), \"invalid inputs\" # $_CONTRACT_$\n  \n    return [list(ele) for ele in list(zip(*lst))] \n", "constraints": {"assert_0": "assert isinstance(lst, list), \"invalid inputs", "assert_1": "assert len(lst) > 0, \"invalid inputs", "assert_2": "assert all(len(sublist) == 2 for sublist in lst), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/234", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: volume_cube\nProblem Description:\n\"\"\"\nWrite a python function that calculates the volume of a cube based on its side length, where the side length must be either an integer or a float and it must be greater than zero.\n\nassert volume_cube(3)==27\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> volume_cube('!0!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> volume_cube(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef volume_cube(l):\n\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert l > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/787", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: text_match_three\nProblem Description:\n\"\"\"\nWrite a python function that matches a string that has an a followed by three 'b'; the input must be a string.\n\nassert not text_match_three(\"ac\")\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> text_match_three(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_three(text):\n\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/222", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_type\nProblem Description:\n\"\"\"\nWrite a python function that checks if all the elements in a tuple have the same data type; the input must be a tuple and it must contain at least one element.\n\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> check_type(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_type(test_tuple):\n\n    assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(test_tuple) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n", "constraints": {"assert_0": "assert isinstance(test_tuple, tuple), \"invalid inputs", "assert_1": "assert len(test_tuple) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/123", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: amicable_numbers_sum\nProblem Description:\n\"\"\"\nWrite a python function that sums all amicable numbers from 1 to a specified number, where the input must be an integer and it must be greater than or equal to 1.\n\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> amicable_numbers_sum([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    assert limit >= 1, \"invalid inputs\" # $_CONTRACT_$\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n", "constraints": {"assert_0": "assert isinstance(limit, int), \"invalid inputs", "assert_1": "assert limit >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/556", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Odd_Pair\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of pairs whose xor value is odd; the first input must be a list, all elements in the list must be integers, and the second input must be an integer.\n\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> find_Odd_Pair([2.0], 2)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Odd_Pair(A,N) :\n\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n", "constraints": {"assert_0": "assert isinstance(A, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in A), \"invalid inputs", "assert_2": "assert isinstance(N, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/109", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: odd_Equivalent\nProblem Description:\n\"\"\"\nWrite a python function that finds the number of numbers with an odd value when rotating a binary string the given number of times; the first input must be a string, the second input must be an integer, the string must only contain the characters '0' and '1', and the integer must be non-negative.\n\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> odd_Equivalent('[', -1)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> odd_Equivalent('0', -1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_Equivalent(s,n):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert isinstance(n, int), \"invalid inputs", "assert_2": "assert all([c in '01' for c in s]), \"invalid inputs", "assert_3": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/415", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_Product\nProblem Description:\n\"\"\"\nWrite a python function that finds a pair with the highest product from a given array of integers; the input must be a list, the list must contain at least two elements, and all elements in the list must be integers.\n\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> max_Product([2.0])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> max_Product([3.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_Product(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) >= 2, \"invalid inputs", "assert_2": "assert all(isinstance(i, int) for i in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/80", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: tetrahedral_number\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth tetrahedral number, where the input n must be an integer and n must be greater than or equal to zero.\n\nassert tetrahedral_number(5) == 35\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> tetrahedral_number(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> tetrahedral_number(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tetrahedral_number(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/606", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: radian_degree\nProblem Description:\n\"\"\"\nWrite a python function that converts degrees to radians; the input \"degree\" must be an integer. \n\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> radian_degree(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef radian_degree(degree):\n\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n    return degree * math.pi / 180\n", "constraints": {"assert_0": "assert isinstance(degree, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/602", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: first_repeated_char\nProblem Description:\n\"\"\"\nWrite a python function that finds the first repeated character in a given string; the input must be a string. \n\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> first_repeated_char(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef first_repeated_char(str1):\n\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$I\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs\" I"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/262", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: split_two_parts\nProblem Description:\n\"\"\"\nWrite a python function that splits a given list into two parts where the length of the first part is determined by the integer L, and the input must be a list for the first argument and an integer for the second argument, with L constrained to be between 0 and the length of the list. \n\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> split_two_parts([], 1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef split_two_parts(list1, L):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(L, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:L], list1[L:]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(L, int), \"invalid inputs", "assert_2": "assert 0 <= L <= len(list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/108", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: merge_sorted_list\nProblem Description:\n\"\"\"\nWrite a python function that merges three lists into a single sorted list; each of the three inputs must be of type list and all elements within these lists must be either integers or floats. \n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nContract Test Cases:\nassert_3:\n>>> merge_sorted_list(['!2!'], ['!0!'], ['!1!'])\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> merge_sorted_list(['2'], ['!'], ['2!'])\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> merge_sorted_list(['1'], ['!2!'], ['1!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n\n  assert isinstance(num1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num3, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n", "constraints": {"assert_0": "assert isinstance(num1, list), \"invalid inputs", "assert_1": "assert isinstance(num2, list), \"invalid inputs", "assert_2": "assert isinstance(num3, list), \"invalid inputs", "assert_3": "assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs", "assert_4": "assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs", "assert_5": "assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/737", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_str\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given string starts with a vowel; the input must be a string. \n\nassert check_str(\"annie\")\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> check_str(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re \ndef check_str(string):\n\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/130", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_occurrences\nProblem Description:\n\"\"\"\nWrite a python function that finds the item with maximum frequency in a given list; the input must be a list and all elements of the list must be either integers, floats, or strings.\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> max_occurrences([[]])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom collections import defaultdict\ndef max_occurrences(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float, str)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, (int, float, str)) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/282", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sub_list\nProblem Description:\n\"\"\"\nWrite a python function that subtracts two lists element-wise, where both inputs must be lists, each list must not be empty, both lists must be of the same length, and all elements in both lists must be either integers or floats.\n\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> sub_list([], ['!0!'])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> sub_list(['!0!'], [])\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> sub_list(['!1!'], ['!0!', 2.0])\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> sub_list(['1'], ['!', 3.0])\n \"AssertionError: invalid input\"\n\nassert_6:\n>>> sub_list(['0'], ['1!', 4.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sub_list(nums1,nums2):\n\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n", "constraints": {"assert_0": "assert isinstance(nums1, list), \"invalid inputs", "assert_1": "assert isinstance(nums2, list), \"invalid inputs", "assert_2": "assert len(nums1) > 0, \"invalid inputs", "assert_3": "assert len(nums2) > 0, \"invalid inputs", "assert_4": "assert len(nums1) == len(nums2), \"invalid inputs", "assert_5": "assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs", "assert_6": "assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/740", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: tuple_to_dict\nProblem Description:\n\"\"\"\nWrite a python function that converts the given tuple to a key-value dictionary using adjacent elements; the input must be a tuple and its length must be even. \n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> tuple_to_dict([])\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> tuple_to_dict([3.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_to_dict(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs", "assert_1": "assert len(test_tup) % 2 == 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/560", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: union_elements\nProblem Description:\n\"\"\"\nWrite a python function that finds the union of the elements of two given tuples and outputs them in sorted order; both inputs must be tuples, and all elements in each tuple must be either integers or floats. \n\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> union_elements(['!1!'], ['!0!'])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> union_elements(['1'], ['!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef union_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs", "assert_3": "assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/118", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: string_to_list\nProblem Description:\n\"\"\"\nWrite a python function that converts a string to a list of strings split on the space character; the input must be a string. \n\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> string_to_list(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef string_to_list(string):\n\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return string.split(\" \")\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/458", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: rectangle_area\nProblem Description:\n\"\"\"\nWrite a python function that finds the area of a rectangle; both length and breadth must be numbers either of type integer or float, and both must be greater than zero.\n\nassert rectangle_area(10,20)==200\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> rectangle_area('!0!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> rectangle_area('0', '!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> rectangle_area(False, False)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> rectangle_area(-1, False)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef rectangle_area(l,b):\n\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert l > 0, \"invalid inputs", "assert_3": "assert b > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/573", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: unique_product\nProblem Description:\n\"\"\"\nWrite a python function that calculates the product of the unique numbers in a given list; the input must be a list and all elements within that list must be either integers or floats.\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> unique_product(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef unique_product(list_data):\n\n    assert isinstance(list_data, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs\" # $_CONTRACT_$\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))\n", "constraints": {"assert_0": "assert isinstance(list_data, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/7", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_char_long\nProblem Description:\n\"\"\"\nWrite a python function that finds all words which are at least 4 characters long in a string; the input must be a string. \n\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find_char_long(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef find_char_long(text):\n\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/305", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: start_withp\nProblem Description:\n\"\"\"\nWrite a python function that returns two words from a list of words starting with letter 'p'; the input must be a list and all elements in the list must be strings.\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> start_withp([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef start_withp(words):\n\n    assert isinstance(words, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in words), \"invalid inputs\" # $_CONTRACT_$\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n", "constraints": {"assert_0": "assert isinstance(words, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in words), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/139", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: circle_circumference\nProblem Description:\n\"\"\"\nWrite a python function that calculates the circumference of a circle given its radius; the radius must be an integer and greater than zero.\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> circle_circumference(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> circle_circumference(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef circle_circumference(r):\n\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n", "constraints": {"assert_0": "assert isinstance(r, int), \"invalid inputs", "assert_1": "assert r > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/439", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: multiple_to_single\nProblem Description:\n\"\"\"\nWrite a python function that joins a list of multiple integers into a single integer; the input must be a list, the list must contain at least one element, all elements in the list must be integers, and all elements except the first must be greater than zero.\n\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> multiple_to_single([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> multiple_to_single([2.0, 3.0])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> multiple_to_single([2, 0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef multiple_to_single(L):\n\n  assert isinstance(L, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(L) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n", "constraints": {"assert_0": "assert isinstance(L, list), \"invalid inputs", "assert_1": "assert len(L) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, int) for item in L), \"invalid inputs", "assert_3": "assert all(item > 0 for item in L[1:]), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/770", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: odd_num_sum\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of the fourth power of the first n odd natural numbers; the input n must be an integer, and n must be greater than or equal to 1.\n\nassert odd_num_sum(2) == 82\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> odd_num_sum(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> odd_num_sum(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_num_sum(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/629", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: Split\nProblem Description:\n\"\"\"\nWrite a python function that finds even numbers from a list of numbers; the input must be a list and all elements in the list must be integers.\n\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> Split([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Split(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return [num for num in l if num % 2 == 0]\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/778", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: pack_consecutive_duplicates\nProblem Description:\n\"\"\"\nWrite a python function that packs consecutive duplicates of a given list elements into sublists; the input must be a list. \n\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> pack_consecutive_duplicates(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [list(group) for _, group in groupby(list1)]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/133", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_negativenum\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of the negative numbers from a given list of numbers; the input must be a list and every element in the list must be either an integer or a float.\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> sum_negativenum(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_negativenum(nums):\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return sum(x for x in nums if x < 0)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/565", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: split\nProblem Description:\n\"\"\"\nWrite a python function that splits a string into characters; the input must be a string. \n\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> split(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef split(word):\n\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(word)\n", "constraints": {"assert_0": "assert isinstance(word, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/260", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: newman_prime\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth newman\u2013shanks\u2013williams prime number; the input n must be an integer and it must be greater than or equal to zero.\n\nassert newman_prime(3) == 7\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> newman_prime(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> newman_prime(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef newman_prime(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/98", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: multiply_num\nProblem Description:\n\"\"\"\nWrite a python function that multiplies all the numbers in a list and divides the result by the length of the list; the input must be either a tuple or a list, it must not be empty, and every item in the input must be either an integer or a float.\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> multiply_num([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef multiply_num(numbers):\n\n    assert isinstance(numbers, (tuple, list)), \"invalid inputs\" # $_CONTRACT_$\n    assert len(numbers) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in numbers), \"invalid inputs\" # $_CONTRACT_$\n  \n    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n", "constraints": {"assert_0": "assert isinstance(numbers, (tuple, list)), \"invalid inputs", "assert_1": "assert len(numbers) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, (int, float)) for item in numbers), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/751", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_min_heap\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given array represents a min heap; the input must be a list and all elements in the list must be integers. \n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> check_min_heap([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  return check_min_heap_helper(arr, 0)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/14", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Volume\nProblem Description:\n\"\"\"\nWrite a python function that finds the volume of a triangular prism; the length, base, and height must each be either an integer or a float and must all be greater than zero.\n\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find_Volume('!0!', '!2!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> find_Volume('1', '!', '1!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> find_Volume('!1!', '0!', '0')\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> find_Volume(0, '!0!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> find_Volume(-283, False, False)\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> find_Volume('!1!', '!0!', 0.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Volume(l,b,h) :\n\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_3": "assert l > 0, \"invalid inputs", "assert_4": "assert b > 0, \"invalid inputs", "assert_5": "assert h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/581", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: surface_Area\nProblem Description:\n\"\"\"\nWrite a python function that finds the surface area of a square pyramid with a given base edge and height; the base edge and height must each be either an integer or a float, and both must be greater than zero.\n\nassert surface_Area(3,4) == 33\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> surface_Area(0, 0.0)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> surface_Area(-2437, -8855)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef surface_Area(b,s):\n\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n", "constraints": {"assert_0": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(s, (int, float)), \"invalid inputs", "assert_2": "assert b > 0, \"invalid inputs", "assert_3": "assert s > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/388", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: highest_Power_of_2\nProblem Description:\n\"\"\"\nWrite a python function that finds the highest power of 2 that is less than or equal to n; n must be an integer and must be greater than 0.\n\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> highest_Power_of_2(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> highest_Power_of_2(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef highest_Power_of_2(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/276", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: volume_cylinder\nProblem Description:\n\"\"\"\nWrite a python function that takes in the radius and height of a cylinder and returns the volume; the radius must be a number, the height must be a number, the radius must be greater than zero, and the height must be greater than zero.\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> volume_cylinder([3.0, 5.0], [4.0, 2.0])\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> volume_cylinder([9.0, 7.0], [6.0, 8.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef volume_cylinder(r,h):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.pi * r * r * h\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_2": "assert r > 0, \"invalid inputs", "assert_3": "assert h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/266", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: lateralsurface_cube\nProblem Description:\n\"\"\"\nWrite a python function that calculates the lateral surface area of a cube given its side length, ensuring that the side length is either an integer or a float and that it is greater than zero.\n\nassert lateralsurface_cube(5)==100\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> lateralsurface_cube('!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef lateralsurface_cube(l):\n\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 4 * l * l\n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert l > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/762", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_monthnumber_number\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given month number contains 30 days or not; the input must be an integer and it must be a number from 1 to 12.\n\nassert check_monthnumber_number(6)==True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> check_monthnumber_number(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> check_monthnumber_number(13)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_monthnumber_number(monthnum3):\n\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n", "constraints": {"assert_0": "assert isinstance(monthnum3, int), \"invalid inputs", "assert_1": "assert 1 <= monthnum3 <= 12, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/772", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_length\nProblem Description:\n\"\"\"\nWrite a python function that removes all the words of a specified length from a given string; the input must be a string and the length must be an integer.\n\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> remove_length(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> remove_length(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_length(test_str, K):\n\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n", "constraints": {"assert_0": "assert isinstance(test_str, str), \"invalid inputs", "assert_1": "assert isinstance(K, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/272", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: rear_extract\nProblem Description:\n\"\"\"\nWrite a python function that returns a list containing the rear element of each tuple from a given list of tuples; the input must be a list and every element in the list must be a non-empty tuple. \n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> rear_extract([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef rear_extract(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return [x[-1] for x in test_list]\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/16", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: text_lowercase_underscore\nProblem Description:\n\"\"\"\nWrite a python function that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise; the input must be a string and it must not be empty.\n\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> text_lowercase_underscore(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> text_lowercase_underscore('')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_lowercase_underscore(text):\n\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        assert len(text) > 0, \"invalid inputs\" # $_CONTRACT_$\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs", "assert_1": "assert len(text) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/56", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check\nProblem Description:\n\"\"\"\nWrite a python function that checks if a given number is one less than twice its reverse, and the input must be an integer that is greater than or equal to zero.\n\nassert check(70) == False\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> check([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n == 2 * int(str(n)[::-1]) - 1\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/166", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_even_pair\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of pairs of integers in a list that xor to an even number; the input must be a list and all elements in the list must be integers.\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> find_even_pair([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_even_pair(A):\n\n  assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])\n", "constraints": {"assert_0": "assert isinstance(A, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in A), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/745", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: divisible_by_digits\nProblem Description:\n\"\"\"\nWrite a python function that finds numbers within a given range from startnum to endnum where every number is divisible by every digit it contains; both startnum and endnum must be integers and startnum must be less than or equal to endnum. \n\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> divisible_by_digits(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> divisible_by_digits(5.0, 4.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> divisible_by_digits(7.0, 6.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef divisible_by_digits(startnum, endnum):\n\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n", "constraints": {"assert_0": "assert isinstance(startnum, int), \"invalid inputs", "assert_1": "assert isinstance(endnum, int), \"invalid inputs", "assert_2": "assert startnum <= endnum, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/436", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: neg_nos\nProblem Description:\n\"\"\"\nWrite a python function that returns the negative numbers in a list; the input must be a list and all elements in the list must be either integers or floats.\n\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> neg_nos(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef neg_nos(list1):\n\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  return [i for i in list1 if i < 0]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/66", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: pos_count\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of positive numbers in a list; the input must be a list and all items in the list must be either integers or floats.\n\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> pos_count(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef pos_count(l):\n\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs\" # $_CONTRACT_$\n  return len([x for x in l if x > 0])\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/568", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: empty_list\nProblem Description:\n\"\"\"\nWrite a python function that creates a list of N empty dictionaries where N is a non-negative integer; the length must be an integer and it must be greater than or equal to zero.\n\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> empty_list(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> empty_list(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef empty_list(length):\n\n assert isinstance(length, int), \"invalid inputs\" # $_CONTRACT_$\n assert length >= 0, \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n", "constraints": {"assert_0": "assert isinstance(length, int), \"invalid inputs", "assert_1": "assert length >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/238", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: number_of_substrings\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of non-empty substrings of a given string; the input must be a string. \n\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> number_of_substrings(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef number_of_substrings(str1):\n\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/757", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_reverse_pairs\nProblem Description:\n\"\"\"\nWrite a python function that counts the pairs of reverse strings in the given string list; the input must be a list and all elements within that list must be strings.\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> count_reverse_pairs([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_reverse_pairs(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/440", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_adverb_position\nProblem Description:\n\"\"\"\nWrite a python function that finds the first adverb and their positions in a given sentence; the input must be a string. \n\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> find_adverb_position(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef find_adverb_position(text):\n\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/730", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: consecutive_duplicates\nProblem Description:\n\"\"\"\nWrite a python function that removes consecutive duplicates from a given list; the input must be a list. \n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> consecutive_duplicates(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return [key for key, _ in groupby(nums)] \n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/775", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: odd_position\nProblem Description:\n\"\"\"\nWrite a python function that checks whether every odd index contains odd numbers in a given list; the input must be a list and every element in that list must be an integer.\n\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> odd_position([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_position(nums):\n\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(n % 2 == 1 for n in nums[1::2])\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, int) for n in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/172", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_occurance\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of occurrences of the string 'std' in a given string; the input must be a string. \n\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> count_occurance(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_occurance(s):\n\n  assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n  return s.count('std')\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/140", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: extract_singly\nProblem Description:\n\"\"\"\nWrite a python function that flattens a list of lists into a single set of numbers, where the input must be a list or tuple, each element of the input must be a list or tuple, and every element within those lists or tuples must be either an integer or a float.\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> extract_singly(['!0!'])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> extract_singly(['!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_singly(test_list):\n\n  assert isinstance(test_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return set([item for sublist in test_list for item in sublist])\n", "constraints": {"assert_0": "assert isinstance(test_list, (list, tuple)), \"invalid inputs", "assert_1": "assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs", "assert_2": "assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/309", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: maximum\nProblem Description:\n\"\"\"\nWrite a python function that finds the maximum of two numbers; both inputs must be either integers or floats. \n\nassert maximum(5,10) == 10\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> maximum('!0!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> maximum('!', '0')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef maximum(a,b):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return max(a, b)\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/135", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: hexagonal_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth hexagonal number, where n must be an integer and n must be greater than or equal to zero.\n\nassert hexagonal_num(10) == 190\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> hexagonal_num(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> hexagonal_num(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef hexagonal_num(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/734", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_Of_Subarray_Prod\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of products of all possible sublists of a given list; the input must be a list, the list must not be empty, and all elements within the list must be either integers or floats.\n\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> sum_Of_Subarray_Prod([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> sum_Of_Subarray_Prod(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_Of_Subarray_Prod(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/589", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: perfect_squares\nProblem Description:\n\"\"\"\nWrite a python function that finds perfect squares between two given numbers, ensuring that both inputs must be integers. \n\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> perfect_squares(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> perfect_squares(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef perfect_squares(a, b):\n\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n", "constraints": {"assert_0": "assert isinstance(a, int), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/735", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: toggle_middle_bits\nProblem Description:\n\"\"\"\nWrite a python function that toggles the bits of a number except for the first and the last bit; the input must be an integer and it must be non-negative. \n\nassert toggle_middle_bits(9) == 15\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> toggle_middle_bits(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> toggle_middle_bits(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef toggle_middle_bits(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/628", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: replace_spaces\nProblem Description:\n\"\"\"\nWrite a python function that replaces all spaces in the given string with '%20'; the input must be a string. \n\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> replace_spaces(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_spaces(string):\n\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.replace(\" \", \"%20\")\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/804", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_product_even\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the product of numbers in a list is even or not; the input must be a list, the list must contain more than zero elements, and all elements in the list must be integers.\n\nassert is_product_even([1,2,3])\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> is_product_even([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> is_product_even([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_product_even(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return any(x % 2 == 0 for x in arr)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/739", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Index\nProblem Description:\n\"\"\"\nWrite a python function that finds the index of the smallest triangular number with n digits; n must be an integer and n must be greater than or equal to 1.\n\nassert find_Index(2) == 4\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> find_Index(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math \ndef find_Index(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/759", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_decimal\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a given string is a decimal number with a precision of 2; the input must be a string. \n\nassert is_decimal('123.11')==True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_decimal(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_decimal(num):\n\n    assert isinstance(num, str), \"invalid inputs\" # $_CONTRACT_$\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None\n", "constraints": {"assert_0": "assert isinstance(num, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/577", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: last_Digit_Factorial\nProblem Description:\n\"\"\"\nWrite a python function that finds the last digit in the factorial of a given number; the input must be a number that is either an integer or a float and must be greater than or equal to zero.\n\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> last_Digit_Factorial(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef last_Digit_Factorial(n):\n\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0\n", "constraints": {"assert_0": "assert isinstance(n, (int, float)), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/162", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_series\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of (n - 2*i) from i equals 0 to n divided by 2, where n must be an integer. \n\nassert sum_series(6) == 12\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> sum_series(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_series(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/131", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: reverse_vowels\nProblem Description:\n\"\"\"\nWrite a python function that reverses only the vowels of a given string where the input must be of type string. \n\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> reverse_vowels(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef reverse_vowels(str1):\n\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/271", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: even_Power_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power; n must be an integer and n must be greater than zero.\n\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> even_Power_Sum([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_Power_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/70", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: get_equal\nProblem Description:\n\"\"\"\nWrite a python function that determines if all the provided tuples have the same length; the input must be a list and every item within that list must be a tuple.\n\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> get_equal(3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> get_equal([2.0, 4.0, 3.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_equal(Input):\n\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in Input), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n", "constraints": {"assert_0": "assert isinstance(Input, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, tuple) for item in Input), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/161", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_elements\nProblem Description:\n\"\"\"\nWrite a python function that removes all elements from a given list that are present in another list; both inputs must be lists. \n\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> remove_elements(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> remove_elements(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_elements(list1, list2):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(list2, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/732", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: replace_specialchar\nProblem Description:\n\"\"\"\nWrite a python function that replaces all occurrences of spaces, commas, or dots with a colon; the input must be a string. \n\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> replace_specialchar(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef replace_specialchar(text):\n\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return re.sub(\"[ ,.]\", \":\", text)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/558", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: digit_distance_nums\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of the per-digit difference between two integers; both inputs must be integers, and each integer must be non-negative.\n\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> digit_distance_nums(-1, -7720)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> digit_distance_nums(-21239, -7720)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef digit_distance_nums(n1, n2):\n\n    assert isinstance(n1, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n2, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n", "constraints": {"assert_0": "assert isinstance(n1, int), \"invalid inputs", "assert_1": "assert isinstance(n2, int), \"invalid inputs", "assert_2": "assert n1 >= 0, \"invalid inputs", "assert_3": "assert n2 >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/798", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: _sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of an array; the input must be a list and all elements within the list must be either integers or floats.\n\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> _sum(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef _sum(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(arr)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/623", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: nth_nums\nProblem Description:\n\"\"\"\nWrite a python function that computes the n-th power of each number in a list, where the input must be a list of numbers and the exponent must be a number. \n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> nth_nums(['!1!'], '!0!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> nth_nums(['0'], '!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef nth_nums(nums, n):\n\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs", "assert_2": "assert isinstance(n, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/631", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: replace_spaces\nProblem Description:\n\"\"\"\nWrite a python function that replaces whitespaces with an underscore and vice versa in a given string; the input must be a string. \n\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> replace_spaces(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_spaces(text):\n\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/428", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: shell_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts the given array using shell sort, and the input must be a list where all elements are either integers or floats. \n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> shell_sort(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef shell_sort(my_list):\n\n    assert isinstance(my_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n", "constraints": {"assert_0": "assert isinstance(my_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/103", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: eulerian_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the Eulerian number a(n, m) where n and m are both integers and n must be greater than or equal to zero and m must also be greater than or equal to zero. \n\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> eulerian_num(-1, -7720)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> eulerian_num(-21239, -7720)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef eulerian_num(n, m):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert isinstance(m, int), \"invalid inputs", "assert_2": "assert n >= 0, \"invalid inputs", "assert_3": "assert m >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/554", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: Split\nProblem Description:\n\"\"\"\nWrite a python function that takes a list of integers and returns only the odd ones; the input must be a list, it must contain more than zero elements, and every element in the list must be an integer.\n\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> Split([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> Split([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef Split(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(filter(lambda x: x % 2 == 1, l))\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert len(l) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/786", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: right_insertion\nProblem Description:\n\"\"\"\nWrite a python function that locates the right insertion point for a specified value in sorted order; the first input must be a list, all elements in the list must be either integers or floats, and the specified value must also be an integer or a float.\n\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> right_insertion(['!1!'], '!0!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> right_insertion(['0'], '!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport bisect\ndef right_insertion(a, x):\n\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n", "constraints": {"assert_0": "assert isinstance(a, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs", "assert_2": "assert isinstance(x, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/3", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_not_prime\nProblem Description:\n\"\"\"\nWrite a python function that identifies non-prime numbers; the input must be an integer and greater than zero.\n\nassert is_not_prime(2) == False\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_not_prime(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> is_not_prime(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef is_not_prime(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/138", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_Sum_Of_Powers_Of_Two\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number can be represented as a sum of non-zero powers of 2; the input must be an integer. \n\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_Sum_Of_Powers_Of_Two(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Sum_Of_Powers_Of_Two(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n > 0 and n % 2 == 0\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/465", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: drop_empty\nProblem Description:\n\"\"\"\nWrite a python function that drops empty items from a given dictionary; the input must be a dictionary. \n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> drop_empty(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef drop_empty(dict1):\n\n  assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n", "constraints": {"assert_0": "assert isinstance(dict1, dict), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/430", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: parabola_directrix\nProblem Description:\n\"\"\"\nWrite a python function that finds the directrix of a parabola; the inputs \"a\", \"b\", and \"c\" must each be either an integer or a float. \n\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> parabola_directrix('!0!', '!2!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> parabola_directrix('0', '!', '0!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> parabola_directrix('1', '1!', '!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef parabola_directrix(a, b, c):\n\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(c, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/472", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_Consecutive\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given list contains consecutive numbers or not; the input must be a list, the list must not be empty, and all elements in the list must be integers.\n\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> check_Consecutive([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> check_Consecutive([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_Consecutive(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return sorted(l) == list(range(min(l),max(l)+1)) \n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert len(l) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/300", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_binary_seq\nProblem Description:\n\"\"\"\nWrite a python function that finds the count of all binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits; the input n must be an integer greater than zero.\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> count_binary_seq(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_binary_seq(n):\n\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \n", "constraints": {"assert_0": "assert isinstance(n, int) and n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/293", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: otherside_rightangle\nProblem Description:\n\"\"\"\nWrite a python function that finds the third side of a right angled triangle; both \"w\" and \"h\" must be either integers or floats and greater than zero. \n\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> otherside_rightangle('!0!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> otherside_rightangle('0', '!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef otherside_rightangle(w,h):\n\n  assert isinstance(w, (int, float)) and w > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)) and h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(w * w + h * h)\n", "constraints": {"assert_0": "assert isinstance(w, (int, float)) and w > 0, \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)) and h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/398", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_of_digits\nProblem Description:\n\"\"\"\nWrite a python function that computes the sum of digits of each number in a given list, where the input must be a list. \n\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> sum_of_digits(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_of_digits(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/270", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_even_and_even_index\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of even numbers at even positions of a list; the input must be a list and all elements of the list must be integers. \n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> sum_even_and_even_index([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_even_and_even_index(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(x for x in arr[::2] if x % 2 == 0)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/731", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: lateralsurface_cone\nProblem Description:\n\"\"\"\nWrite a python function that calculates the lateral surface area of a cone given a radius r and a height h, where r must be a number, h must be a number, r must be greater than zero, and h must be greater than zero.\n\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> lateralsurface_cone('!0!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> lateralsurface_cone('0', '!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> lateralsurface_cone(False, False)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> lateralsurface_cone('!0!', 0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef lateralsurface_cone(r,h):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_2": "assert r > 0, \"invalid inputs", "assert_3": "assert h > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/242", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_charac\nProblem Description:\n\"\"\"\nWrite a python function that counts the total number of characters in a string; the input must be a string. \n\nassert count_charac(\"python programming\")==18\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> count_charac(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_charac(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return len(str1)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/750", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: add_tuple\nProblem Description:\n\"\"\"\nWrite a python function that adds the given tuple to the given list; the first input must be a list and the second input must be a tuple.\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> add_tuple(3.0, 2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> add_tuple(4.0, 5.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef add_tuple(test_list, test_tup):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/742", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: area_tetrahedron\nProblem Description:\n\"\"\"\nWrite a python function that calculates the area of a tetrahedron; the input \"side\" must be either an integer or a float, and it must be greater than zero.\n\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> area_tetrahedron('!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef area_tetrahedron(side):\n\n  assert isinstance(side, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert side > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(3)*(side*side)\n", "constraints": {"assert_0": "assert isinstance(side, (int, float)), \"invalid inputs", "assert_1": "assert side > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/412", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_odd\nProblem Description:\n\"\"\"\nWrite a python function that removes odd numbers from a given list; the input must be a list and all elements of the list must be integers.\n\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> remove_odd([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_odd(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in l), \"invalid inputs\" # $_CONTRACT_$\n    return [i for i in l if i % 2 == 0]\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, int) for i in l), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/809", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_smaller\nProblem Description:\n\"\"\"\nWrite a python function that checks if each element of the second tuple is smaller than its corresponding element in the first tuple; both input arguments must be tuples, they must be of the same length, and all elements in both tuples must be integers.\n\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> check_smaller([6.0, 5.0], [4.0, 3.0, 2.0])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> check_smaller([10.0], [9.0, 8.0, 7.0])\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> check_smaller([14.0], [13.0, 12.0, 11.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_smaller(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert len(test_tup1) == len(test_tup2), \"invalid inputs", "assert_3": "assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs", "assert_4": "assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/69", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_sublist\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a list contains the given sublist; both the main list and the sublist must be lists. \n\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_sublist(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> is_sublist(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_sublist(l, s):\n\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert isinstance(s, list), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/624", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_upper\nProblem Description:\n\"\"\"\nWrite a python function that converts a given string to uppercase and ensures that the input must be a string.\n\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_upper(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_upper(string):\n\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.upper()\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/235", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: even_bit_set_number\nProblem Description:\n\"\"\"\nWrite a python function that sets all even bits of a given number; the input must be an integer and must be greater than or equal to zero.\n\nassert even_bit_set_number(10) == 10\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> even_bit_set_number(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_bit_set_number(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/308", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: large_product\nProblem Description:\n\"\"\"\nWrite a python function that finds the specified number of largest products from two given lists, selecting one factor from each list; both inputs must be lists, all elements in the first list must be either integers or floats, the second input must also be a list, all elements in the second list must be either integers or floats, the specified number of largest products must be an integer, and this number must be between zero and the product of the lengths of the two lists inclusive.\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> large_product(['!1!'], ['!0!'], 2)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> large_product(['!'], ['0'], 2)\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> large_product(['0!'], ['1'], 2)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef large_product(nums1, nums2, N):\n\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n", "constraints": {"assert_0": "assert isinstance(nums1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs", "assert_2": "assert isinstance(nums2, list), \"invalid inputs", "assert_3": "assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs", "assert_4": "assert isinstance(N, int), \"invalid inputs", "assert_5": "assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/57", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Max_Num\nProblem Description:\n\"\"\"\nWrite a python function that finds the largest number that can be formed with the given list of digits; the input must be a list and every item in the list must be an integer between 0 and 9 inclusive.\n\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> find_Max_Num([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Max_Num(arr) :\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/277", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: dict_filter\nProblem Description:\n\"\"\"\nWrite a python function that filters a dictionary to only include entries with values greater than or equal to a given integer n; the first input must be a dictionary, all values in the dictionary must be integers, and the second input must be an integer.\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> dict_filter([], 2.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> dict_filter([3.0], 2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef dict_filter(dict1, n):\n\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in dict1.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n", "constraints": {"assert_0": "assert isinstance(dict1, dict), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in dict1.values()), \"invalid inputs", "assert_2": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/600", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_Even\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number is even or not; the input must be an integer. \n\nassert is_Even(1) == False\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_Even(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Even(n) :\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n % 2 == 0\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/299", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_aggregate\nProblem Description:\n\"\"\"\nWrite a python function that calculates the maximum aggregate from a list of tuples, where the input must be a list, each element of the list must be a tuple, each tuple must contain exactly two elements, and the second element of each tuple must be either an integer or a float.\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> max_aggregate([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n\n    assert isinstance(stdata, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[1], (int, float)) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n", "constraints": {"assert_0": "assert isinstance(stdata, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs", "assert_2": "assert all(len(x) == 2 for x in stdata), \"invalid inputs", "assert_3": "assert all(isinstance(x[1], (int, float)) for x in stdata), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
