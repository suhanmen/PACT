{"name": "Mbpp/97", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: frequency_lists\nProblem Description:\n\"\"\"\nWrite a python function that finds the frequency of each element in a flattened list of lists, ensuring that the input is a list, it is not empty, every item in the list is also a list, and all items in the sublists are hashable. \n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> frequency_lists([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef frequency_lists(list1):\n\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(item) for sublist in list1 for item in sublist), \"invalid inputs\" # $_CONTRACT_$\n    list1 = [item for sublist in list1 for item in sublist]\n    return {x: list1.count(x) for x in list1}\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, list) for item in list1), \"invalid inputs", "assert_3": "assert all(is_hashable(item) for sublist in list1 for item in sublist), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/11", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_Occ\nProblem Description:\n\"\"\"\nWrite a python function that removes the first and last occurrence of a given character from the string; the first input must be a non-empty string and the second input must be a string of length one. \n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\nContract Test Cases:\nassert_2:\n>>> remove_Occ('', '')\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> remove_Occ('A', '')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef remove_Occ(s,ch):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert isinstance(ch, str), \"invalid inputs", "assert_2": "assert len(s) > 0, \"invalid inputs", "assert_3": "assert len(ch) == 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/603", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: get_ludic\nProblem Description:\n\"\"\"\nWrite a python function that returns all lucid numbers smaller than or equal to a given integer; the input must be an integer and it must be greater than zero.\n\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> get_ludic(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> get_ludic(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_ludic(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/269", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: ascii_value\nProblem Description:\n\"\"\"\nWrite a python function that finds the ascii value of a character; the input must be a string and its length must be exactly one character. \n\nassert ascii_value('A')==65\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> ascii_value('')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef ascii_value(k):\n\n  assert isinstance(k, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(k)==1, \"invalid inputs\" # $_CONTRACT_$\n  return ord(k)\n", "constraints": {"assert_0": "assert isinstance(k, str), \"invalid inputs", "assert_1": "assert len(k)==1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/478", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_lowercase\nProblem Description:\n\"\"\"\nWrite a python function that removes lowercase substrings from a given string; the input must be a string.\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> remove_lowercase(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef remove_lowercase(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return re.sub('[a-z]', '', str1)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/599", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_average\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum and average of the first n natural numbers; the input must be an integer and must be greater than zero.\n\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> sum_average(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> sum_average(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_average(number):\n\n   assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n   assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n", "constraints": {"assert_0": "assert isinstance(number, int), \"invalid inputs", "assert_1": "assert number > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/639", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sample_nam\nProblem Description:\n\"\"\"\nWrite a python function that sums the lengths of the names from a given list of names after removing those that start with a lowercase letter; the input must be a list and every element in that list must be a string.\n\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> sample_nam([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sample_nam(sample_names):\n\n  assert isinstance(sample_names, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in sample_names), \"invalid inputs\" # $_CONTRACT_$\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n", "constraints": {"assert_0": "assert isinstance(sample_names, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in sample_names), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/301", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: dict_depth\nProblem Description:\n\"\"\"\nWrite a python function that finds the depth of a dictionary; the input must be a dictionary. \n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> dict_depth([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n    return dict_depth_aux(d)\n", "constraints": {"assert_0": "assert isinstance(d, dict), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/17", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: square_perimeter\nProblem Description:\n\"\"\"\nWrite a python function that returns the perimeter of a square given its side length as input; the side length must be either an integer or a float and it must be greater than zero.\n\nassert square_perimeter(10)==40\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> square_perimeter([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_perimeter(a):\n\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 4*a\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert a > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/790", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: even_position\nProblem Description:\n\"\"\"\nWrite a python function that checks whether every even index of a given list contains even numbers; the input must be a list and all elements within that list must be integers.\n\nassert even_position([3,2,1]) == False\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> even_position([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_position(nums):\n\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, int) for i in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/782", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: odd_length_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of all odd length subarrays; the input must be a list and every element in the list must be either an integer or a float.\n\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> odd_length_sum(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_length_sum(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/748", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: capital_words_spaces\nProblem Description:\n\"\"\"\nWrite a python function that puts spaces between words starting with capital letters in a given string; the input must be a string. \n\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> capital_words_spaces(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef capital_words_spaces(str1):\n\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/794", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: text_starta_endb\nProblem Description:\n\"\"\"\nWrite a python function that matches a string that has an 'a' followed by anything, ending in 'b'; the input must be a string. \n\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> text_starta_endb(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_starta_endb(text):\n\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/588", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: big_diff\nProblem Description:\n\"\"\"\nWrite a python function that finds the difference between the largest and smallest value in a given list; the input must be a list, it must not be empty, and all elements in the list must be either integers or floats.\n\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> big_diff([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> big_diff(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef big_diff(nums):\n\n     assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n     return max(nums) - min(nums)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert len(nums) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/226", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: odd_values_string\nProblem Description:\n\"\"\"\nWrite a python function that removes the characters which have odd index values of a given string; the input must be a string. \n\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> odd_values_string(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_values_string(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/765", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_polite\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth polite number, where the input n must be an integer and n must be greater than or equal to one.\n\nassert is_polite(7) == 11\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> is_polite([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math \ndef is_polite(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 1, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/760", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: unique_Element\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a list of numbers contains only one distinct element or not; the input must be a list and it must not be empty.\n\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> unique_Element([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef unique_Element(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return arr.count(arr[0]) == len(arr)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/58", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: opposite_Signs\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given two integers have opposite signs; both inputs must be integers.\n\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> opposite_Signs(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> opposite_Signs(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef opposite_Signs(x,y):\n\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n", "constraints": {"assert_0": "assert isinstance(x, int), \"invalid inputs", "assert_1": "assert isinstance(y, int), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/604", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: reverse_words\nProblem Description:\n\"\"\"\nWrite a python function that reverses words separated by spaces in a given string; the input must be a string. \n\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> reverse_words(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef reverse_words(s):\n\n\tassert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn ' '.join(reversed(s.split()))\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/82", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: volume_sphere\nProblem Description:\n\"\"\"\nWrite a python function that calculates the volume of a sphere given its radius; the radius must be either an integer or a float, and it must be greater than zero.\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> volume_sphere('!0!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> volume_sphere(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef volume_sphere(r):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert r > 0, \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/410", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: min_val\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum value in a given heterogeneous list where the input must be a list, the list must not be empty, and it must contain at least one integer. \n\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> min_val([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> min_val([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef min_val(listval):\n\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n", "constraints": {"assert_0": "assert isinstance(listval, list), \"invalid inputs", "assert_1": "assert len(listval) > 0, \"invalid inputs", "assert_2": "assert any(isinstance(i, int) for i in listval), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/68", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_Monotonic\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given array is monotonic or not; the input must be a list and all elements within that list must be either integers or floats.\n\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\nContract Test Cases:\nassert_1:\n>>> is_Monotonic(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Monotonic(A):\n\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs\" # $_CONTRACT_$\n \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n", "constraints": {"assert_0": "assert isinstance(A, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/390", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: add_string\nProblem Description:\n\"\"\"\nWrite a python function that applies a given format string to all of the elements in a list; the first input must be a list and the second input must be a string. \n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> add_string(3.0, 4.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> add_string(2.0, 6.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef add_string(list_, string):\n\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n", "constraints": {"assert_0": "assert isinstance(list_, list), \"invalid inputs", "assert_1": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/227", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: min_of_three\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum of three numbers; the inputs must be either integers or floats. \n\nassert min_of_three(10,20,0)==0\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> min_of_three('!0!', '!2!', '!1!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> min_of_three('0', '!', '0!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> min_of_three('1', '1!', '!0!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef min_of_three(a,b,c):\n\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(c, (int, float)), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
{"name": "Mbpp/764", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: number_ctr\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of digits in a given string; the input must be a string.\n\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\nContract Test Cases:\nassert_0:\n>>> number_ctr(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef number_ctr(s):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return sum(c.isdigit() for c in s)\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": "I have done a short CoT reasoning and Aha! I have found the right answer.\n</think>\n\n"}
