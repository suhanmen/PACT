{
    "Mbpp/2": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/2": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 7.0,
                        "test_tup2": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 7.0,
                        "test_tup2": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 9.0,
                        "test_tup2": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 9.0,
                        "test_tup2": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 11.0,
                        "test_tup2": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 11.0,
                        "test_tup2": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/2": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/2": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 2.0,
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 3.0,
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 4.0,
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 5.0,
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef similar_elements(test_tup1, test_tup2):\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(set(test_tup1) & set(test_tup2))\n",
                    "input": {
                        "test_tup1": 6.0,
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/3": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/3": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef is_not_prime(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef is_not_prime(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef is_not_prime(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef is_not_prime(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/3": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef is_not_prime(n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
                    "input": {
                        "n": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef is_not_prime(n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
                    "input": {
                        "n": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef is_not_prime(n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
                    "input": {
                        "n": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef is_not_prime(n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
                    "input": {
                        "n": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/4": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {
            "Mbpp/4": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -8855,
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -8855,
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -36955,
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -36955,
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -36955,
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -36955,
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {
            "Mbpp/4": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {
            "Mbpp/4": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 0,
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 0,
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -21238,
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -33035,
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -43485,
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": -71585,
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {
            "Mbpp/4": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "nums": [
                            5
                        ],
                        "n": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            6
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            7
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "nums": [
                            8
                        ],
                        "n": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 1,
                        "nums": [
                            9
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {
            "Mbpp/4": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "nums": [
                            2.0
                        ],
                        "n": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 8857,
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 8857,
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 36957,
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
                    "input": {
                        "n": 36957,
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/6": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/7": {
        "satisfied_, violated_assert_0": {
            "Mbpp/7": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_char_long(text):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_char_long(text):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_char_long(text):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_char_long(text):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/8": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/8": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef square_nums(nums):\n assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n return [i**2 for i in nums]\n",
                    "input": {
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef square_nums(nums):\n assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n return [i**2 for i in nums]\n",
                    "input": {
                        "nums": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef square_nums(nums):\n assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n return [i**2 for i in nums]\n",
                    "input": {
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef square_nums(nums):\n assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n return [i**2 for i in nums]\n",
                    "input": {
                        "nums": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/9": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/9": []
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/11": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/11": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_Occ(s,ch):\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n",
                    "input": {
                        "ch": "",
                        "s": "B"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_Occ(s,ch):\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n",
                    "input": {
                        "ch": "",
                        "s": "C"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_Occ(s,ch):\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n",
                    "input": {
                        "ch": "",
                        "s": "D"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/11": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_Occ(s,ch):\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n",
                    "input": {
                        "ch": "C",
                        "s": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_Occ(s,ch):\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n",
                    "input": {
                        "ch": "E",
                        "s": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/12": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_": {}
    },
    "Mbpp/14": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": "0",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": "0",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1143,
                        "h": "0",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1143,
                        "h": "0",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1143,
                        "h": "0",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "0!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "0!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "0!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "A",
                        "b": -58192
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "A",
                        "b": -58192
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "A",
                        "b": -58192
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": -30613,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": -30613,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": -10451,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": -10451,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": -10451,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10451,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10451,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10451,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10450,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10450,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10450,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -49419,
                        "h": -10450,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -49419,
                        "h": -10450,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -49419,
                        "h": -10450,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -1,
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -1,
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -1,
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "",
                        "h": -2,
                        "b": -6881
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "",
                        "h": -2,
                        "b": -6881
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "",
                        "h": -2,
                        "b": -6881
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.0,
                        "h": 0,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.0,
                        "h": 0,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.0,
                        "h": 0,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": -1,
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": -1,
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": -1,
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1.5,
                        "h": -20977,
                        "b": -20978
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1.5,
                        "h": -20977,
                        "b": -20978
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1.5,
                        "h": -20977,
                        "b": -20978
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1.25,
                        "h": -20977,
                        "b": -20978
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1.25,
                        "h": -20977,
                        "b": -20978
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1.25,
                        "h": -20977,
                        "b": -20978
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1.125,
                        "h": -20977,
                        "b": -20979
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1.125,
                        "h": -20977,
                        "b": -20979
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1.125,
                        "h": -20977,
                        "b": -20979
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11798,
                        "h": "1",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11798,
                        "h": "1",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11799,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11799,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11797,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11797,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11796,
                        "h": false,
                        "b": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11796,
                        "h": false,
                        "b": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": "0",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": "0",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8366,
                        "h": "!",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8366,
                        "h": "!",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "0",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "0",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "0!",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "0!",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": -30613,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": -30613,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8366,
                        "h": -32285,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8366,
                        "h": -32285,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -1,
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -1,
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -1,
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -2,
                        "b": -3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "",
                        "h": -2,
                        "b": -6881
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "",
                        "h": -2,
                        "b": -6881
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "",
                        "h": -2,
                        "b": -6881
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.5,
                        "h": 0,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.5,
                        "h": 0,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": -41062,
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": -41062,
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": -41062,
                        "b": -32284
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": -41062,
                        "b": -32284
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": -41062,
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": -41062,
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 2,
                        "h": -41062,
                        "b": -32287
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 2,
                        "h": -41062,
                        "b": -32287
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -283,
                        "h": true,
                        "b": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": "0",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": "0",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": "!0!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": "!0!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1!",
                        "h": "1",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1!",
                        "h": "1",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": false,
                        "b": 11797
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": false,
                        "b": 11797
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -8365,
                        "h": "!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -8365,
                        "h": "!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14218,
                        "h": "0",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14218,
                        "h": "0",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14219,
                        "h": "0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14219,
                        "h": "0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14217,
                        "h": "A",
                        "b": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14217,
                        "h": "A",
                        "b": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": -30613,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": -30613,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": -10451,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": -10451,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": -10451,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10451,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10451,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10451,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10450,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10450,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -20538,
                        "h": -10450,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -49419,
                        "h": -10450,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -49419,
                        "h": -10450,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -49419,
                        "h": -10450,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -8365,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -8365,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -8365,
                        "b": 5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -8365,
                        "b": 5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -8365,
                        "b": 5853
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -8365,
                        "b": 5853
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": -8366,
                        "b": 2627
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": -8366,
                        "b": 2627
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.0,
                        "h": -40650,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.0,
                        "h": -40650,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": -33953,
                        "b": 30613
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": -33953,
                        "b": 30613
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": -33953,
                        "b": 30614
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": -33953,
                        "b": 30614
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": -33953,
                        "b": 30612
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": -33953,
                        "b": 30612
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": -33953,
                        "b": 9726
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": -33953,
                        "b": 9726
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11798,
                        "h": "1",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11798,
                        "h": "1",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11799,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11799,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11797,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11797,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": "0",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": "0",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": "!0!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": "!0!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1!",
                        "h": "1",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1!",
                        "h": "1",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": false,
                        "b": 11799
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!0!",
                        "b": 282
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282,
                        "h": "!",
                        "b": 20538
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 283.0,
                        "h": "0",
                        "b": 20538
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.5,
                        "h": "0!",
                        "b": 20538
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.25,
                        "h": "A",
                        "b": 20537
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -1,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": -30613,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": -30613,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": -30613,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": 0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8366,
                        "h": -32285,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8366,
                        "h": -32285,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": -32285,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 0,
                        "b": 0.5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -8365,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": -8365,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -8365,
                        "b": 5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": -8365,
                        "b": 5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -8365,
                        "b": 5853
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": -8365,
                        "b": 5853
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": -8366,
                        "b": 2627
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": -8366,
                        "b": 2627
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.5,
                        "h": 0,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 20538,
                        "h": -8945,
                        "b": 15922
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 20538,
                        "h": -8945,
                        "b": 47813
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 20538,
                        "h": -8945,
                        "b": 47812
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 20538,
                        "h": -8945,
                        "b": 21238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -283,
                        "h": true,
                        "b": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -283,
                        "h": true,
                        "b": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": "0",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": "0",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1143,
                        "h": "0",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1143,
                        "h": "0",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1143,
                        "h": "0",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "0!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "0!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "0!",
                        "b": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "A",
                        "b": -58192
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "A",
                        "b": -58192
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -27428,
                        "h": "A",
                        "b": -58192
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": 28102,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": 28102,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": 28102,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 1,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 1,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -8365,
                        "h": 1,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -8365,
                        "h": 1,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14218,
                        "h": 1,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14218,
                        "h": 1,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14219,
                        "h": 2,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14219,
                        "h": 2,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14220,
                        "h": 2242,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14220,
                        "h": 2242,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 1,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 1,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": -8365
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": -8365
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": -14218
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": -14218
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": 2,
                        "b": -14219
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": 2,
                        "b": -14219
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": 3,
                        "b": -14217
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": 3,
                        "b": -14217
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.0,
                        "h": 1,
                        "b": -40650
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.0,
                        "h": 1,
                        "b": -40650
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": 1,
                        "b": -36465
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": 1,
                        "b": -36465
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": 1,
                        "b": -36464
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": 1,
                        "b": -36464
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": 31892,
                        "b": -36466
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": 31892,
                        "b": -36466
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": 31891,
                        "b": -36466
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -42735,
                        "h": 31891,
                        "b": -36466
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11798,
                        "h": "1",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11798,
                        "h": "1",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11799,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11799,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11797,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11797,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11796,
                        "h": true,
                        "b": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": "!0!",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": "0",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": "0",
                        "b": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8366,
                        "h": "!",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8366,
                        "h": "!",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "0",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "0",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "0!",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "0!",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 8365,
                        "h": "",
                        "b": -32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": 28102,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": 28102,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": 282,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282,
                        "h": 20538,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 283.0,
                        "h": 20538,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.5,
                        "h": 20538,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.25,
                        "h": 20538,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 1,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 1,
                        "b": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": -8365
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": -8365
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": -14218
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": -14218
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": 2,
                        "b": -14219
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": 2,
                        "b": -14219
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": 3,
                        "b": -14217
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": 3,
                        "b": -14217
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.5,
                        "h": 1,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 20538,
                        "h": 8946,
                        "b": -15921
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 20538,
                        "h": 8946,
                        "b": -47812
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 20538,
                        "h": 8946,
                        "b": -47813
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 20538,
                        "h": 8946,
                        "b": -69050
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -1,
                        "h": "!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -2,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -283,
                        "h": false,
                        "b": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": "0",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": "0",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": "!0!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": "!0!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1!",
                        "h": "1",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1!",
                        "h": "1",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": "!0!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -8365,
                        "h": "!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -8365,
                        "h": "!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14218,
                        "h": "0",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14218,
                        "h": "0",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14219,
                        "h": "0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14219,
                        "h": "0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14217,
                        "h": "A",
                        "b": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14217,
                        "h": "A",
                        "b": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": 28102,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": 28102,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": 28102,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 1,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0,
                        "h": 1,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -8365,
                        "h": 1,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -8365,
                        "h": 1,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14218,
                        "h": 1,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14218,
                        "h": 1,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14219,
                        "h": 2,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14219,
                        "h": 2,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14220,
                        "h": 2242,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -14220,
                        "h": 2242,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 1,
                        "b": 0.5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 20538,
                        "b": 282
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 20538,
                        "b": 283.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": 20538,
                        "b": 282.5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": 20537,
                        "b": 282.25
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 0.0,
                        "h": 282,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -24866,
                        "h": 2998,
                        "b": 26286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -24866,
                        "h": 2998,
                        "b": 26287.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -24866,
                        "h": 2997,
                        "b": 26286.5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": -24866,
                        "h": 2997,
                        "b": 26286.25
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": "!2!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1",
                        "h": "1!",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "2",
                        "h": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!2!",
                        "h": "2!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!1!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11798,
                        "h": "1",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11798,
                        "h": "1",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11799,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11799,
                        "h": "1!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11797,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 11797,
                        "h": "0",
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": "!1!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": "0",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": "0",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": "!0!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": "!0!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1!",
                        "h": "1",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "1!",
                        "h": "1",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": "!0!",
                        "b": 282
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282,
                        "h": "!",
                        "b": 20538
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.5,
                        "h": "0",
                        "b": 20538
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.25,
                        "h": "0!",
                        "b": 20538
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.125,
                        "h": "A",
                        "b": 20537
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!1!",
                        "h": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 1,
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 2,
                        "b": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": false,
                        "h": 28102,
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": true,
                        "h": 28102,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 1,
                        "h": 282,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282,
                        "h": 20538,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.5,
                        "h": 20538,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.25,
                        "h": 20538,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": 282.125,
                        "h": 20538,
                        "b": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0": {
            "Mbpp/14": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!0!",
                        "h": 1,
                        "b": 0.5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "!",
                        "h": 20538,
                        "b": 282
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0",
                        "h": 20538,
                        "b": 282.25
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "0!",
                        "h": 20538,
                        "b": 282.125
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Volume(l,b,h) :\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n",
                    "input": {
                        "l": "A",
                        "h": 20537,
                        "b": 282.0625
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_": {}
    },
    "Mbpp/16": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/16": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_lowercase_underscore(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_lowercase_underscore(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_lowercase_underscore(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_lowercase_underscore(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/16": []
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/17": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/17": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef square_perimeter(a):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4*a\n",
                    "input": {
                        "a": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef square_perimeter(a):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4*a\n",
                    "input": {
                        "a": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef square_perimeter(a):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4*a\n",
                    "input": {
                        "a": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef square_perimeter(a):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4*a\n",
                    "input": {
                        "a": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/18": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
            "Mbpp/18": []
        },
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
            "Mbpp/18": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 4.0,
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 4.0,
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 4.0,
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 5.0,
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 5.0,
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 5.0,
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 6.0,
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 6.0,
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 6.0,
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
            "Mbpp/18": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "!0!",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "!0!",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "!",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "!",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "0",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "0",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "0!",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "0!",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "",
                        "second_string": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
            "Mbpp/18": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
            "Mbpp/18": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": [],
                        "second_string": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
            "Mbpp/18": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 2.0,
                        "second_string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 2.0,
                        "second_string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 5.0,
                        "second_string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 5.0,
                        "second_string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 7.0,
                        "second_string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 7.0,
                        "second_string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 9.0,
                        "second_string": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 9.0,
                        "second_string": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 11.0,
                        "second_string": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 11.0,
                        "second_string": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
            "Mbpp/18": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "!0!",
                        "second_string": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "!",
                        "second_string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "0",
                        "second_string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "0!",
                        "second_string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": "",
                        "second_string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
            "Mbpp/18": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 2.0,
                        "second_string": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 3.0,
                        "second_string": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 4.0,
                        "second_string": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 5.0,
                        "second_string": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_dirty_chars(string, second_string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n",
                    "input": {
                        "string": 6.0,
                        "second_string": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/19": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/19": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_duplicate(arraynums):\n    assert all(isinstance(item, int) for item in arraynums), \"invalid inputs\" # $_CONTRACT_$\n    return len(arraynums) != len(set(arraynums))\n",
                    "input": {
                        "arraynums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_duplicate(arraynums):\n    assert all(isinstance(item, int) for item in arraynums), \"invalid inputs\" # $_CONTRACT_$\n    return len(arraynums) != len(set(arraynums))\n",
                    "input": {
                        "arraynums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_duplicate(arraynums):\n    assert all(isinstance(item, int) for item in arraynums), \"invalid inputs\" # $_CONTRACT_$\n    return len(arraynums) != len(set(arraynums))\n",
                    "input": {
                        "arraynums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_duplicate(arraynums):\n    assert all(isinstance(item, int) for item in arraynums), \"invalid inputs\" # $_CONTRACT_$\n    return len(arraynums) != len(set(arraynums))\n",
                    "input": {
                        "arraynums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/20": {
        "satisfied_, violated_assert_0": {
            "Mbpp/20": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_woodall(x):\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False\n",
                    "input": {
                        "x": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_woodall(x):\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False\n",
                    "input": {
                        "x": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_woodall(x):\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False\n",
                    "input": {
                        "x": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_woodall(x):\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False\n",
                    "input": {
                        "x": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/56": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/56": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    \n    return n == 2 * int(str(n)[::-1]) - 1\n",
                    "input": {
                        "n": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    \n    return n == 2 * int(str(n)[::-1]) - 1\n",
                    "input": {
                        "n": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    \n    return n == 2 * int(str(n)[::-1]) - 1\n",
                    "input": {
                        "n": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    \n    return n == 2 * int(str(n)[::-1]) - 1\n",
                    "input": {
                        "n": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/57": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/57": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Max_Num(arr) :\n    assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n",
                    "input": {
                        "arr": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Max_Num(arr) :\n    assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n",
                    "input": {
                        "arr": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Max_Num(arr) :\n    assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n",
                    "input": {
                        "arr": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Max_Num(arr) :\n    assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n",
                    "input": {
                        "arr": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/58": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/58": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 7.0,
                        "y": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 7.0,
                        "y": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 9.0,
                        "y": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 9.0,
                        "y": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 11.0,
                        "y": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 11.0,
                        "y": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/58": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 2,
                        "y": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 3,
                        "y": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 4,
                        "y": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 5,
                        "y": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 6,
                        "y": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/58": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 2.0,
                        "y": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 3.0,
                        "y": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 4.0,
                        "y": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 5.0,
                        "y": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef opposite_Signs(x,y):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return ((x ^ y) < 0) \n",
                    "input": {
                        "x": 6.0,
                        "y": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/59": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/61": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/62": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/62": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef smallest_num(xs):\n  assert isinstance(xs, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n",
                    "input": {
                        "xs": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef smallest_num(xs):\n  assert isinstance(xs, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n",
                    "input": {
                        "xs": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef smallest_num(xs):\n  assert isinstance(xs, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n",
                    "input": {
                        "xs": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef smallest_num(xs):\n  assert isinstance(xs, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n",
                    "input": {
                        "xs": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/62": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef smallest_num(xs):\n  assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n",
                    "input": {
                        "xs": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef smallest_num(xs):\n  assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n",
                    "input": {
                        "xs": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef smallest_num(xs):\n  assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n",
                    "input": {
                        "xs": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef smallest_num(xs):\n  assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs\" # $_CONTRACT_$\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n",
                    "input": {
                        "xs": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/63": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/64": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/65": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/66": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/66": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef pos_count(l):\n  assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs\" # $_CONTRACT_$\n  return len([x for x in l if x > 0])\n",
                    "input": {
                        "l": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef pos_count(l):\n  assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs\" # $_CONTRACT_$\n  return len([x for x in l if x > 0])\n",
                    "input": {
                        "l": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef pos_count(l):\n  assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs\" # $_CONTRACT_$\n  return len([x for x in l if x > 0])\n",
                    "input": {
                        "l": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef pos_count(l):\n  assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs\" # $_CONTRACT_$\n  return len([x for x in l if x > 0])\n",
                    "input": {
                        "l": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/67": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/67": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef bell_number(n):\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n",
                    "input": {
                        "n": 7820
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef bell_number(n):\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n",
                    "input": {
                        "n": 10257
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef bell_number(n):\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n",
                    "input": {
                        "n": 22054
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef bell_number(n):\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n",
                    "input": {
                        "n": 54339
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/67": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/68": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/68": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_Monotonic(A):\n    assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs\" # $_CONTRACT_$\n \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n",
                    "input": {
                        "A": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_Monotonic(A):\n    assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs\" # $_CONTRACT_$\n \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n",
                    "input": {
                        "A": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_Monotonic(A):\n    assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs\" # $_CONTRACT_$\n \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n",
                    "input": {
                        "A": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_Monotonic(A):\n    assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs\" # $_CONTRACT_$\n \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n",
                    "input": {
                        "A": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/69": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/69": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 7.0,
                        "s": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 7.0,
                        "s": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 9.0,
                        "s": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 9.0,
                        "s": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 11.0,
                        "s": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 11.0,
                        "s": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/69": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": [],
                        "s": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": [],
                        "s": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": [],
                        "s": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": [],
                        "s": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": [],
                        "s": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/69": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 2.0,
                        "s": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 3.0,
                        "s": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 4.0,
                        "s": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 5.0,
                        "s": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_sublist(l, s):\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n",
                    "input": {
                        "l": 6.0,
                        "s": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/70": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/70": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_equal(Input):\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n",
                    "input": {
                        "Input": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_equal(Input):\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n",
                    "input": {
                        "Input": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_equal(Input):\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n",
                    "input": {
                        "Input": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_equal(Input):\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n",
                    "input": {
                        "Input": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/70": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_equal(Input):\n  assert all(isinstance(item, tuple) for item in Input), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n",
                    "input": {
                        "Input": [
                            5.0,
                            7.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_equal(Input):\n  assert all(isinstance(item, tuple) for item in Input), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n",
                    "input": {
                        "Input": [
                            10.0,
                            9.0,
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_equal(Input):\n  assert all(isinstance(item, tuple) for item in Input), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n",
                    "input": {
                        "Input": [
                            12.0,
                            13.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/71": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/71": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef comb_sort(nums):\n    assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs\" # $_CONTRACT_$\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
                    "input": {
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef comb_sort(nums):\n    assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs\" # $_CONTRACT_$\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
                    "input": {
                        "nums": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef comb_sort(nums):\n    assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs\" # $_CONTRACT_$\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
                    "input": {
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef comb_sort(nums):\n    assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs\" # $_CONTRACT_$\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
                    "input": {
                        "nums": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/72": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/74": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/75": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/77": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/79": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/80": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/80": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef tetrahedral_number(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef tetrahedral_number(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef tetrahedral_number(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef tetrahedral_number(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/80": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tetrahedral_number(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tetrahedral_number(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tetrahedral_number(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tetrahedral_number(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn (n * (n + 1) * (n + 2)) / 6\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/82": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/82": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/82": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": -30614
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": -31756
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/82": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return (4./3.) * math.pi * (r**3)\n",
                    "input": {
                        "r": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/84": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/84": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sequence(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]\n",
                    "input": {
                        "n": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sequence(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]\n",
                    "input": {
                        "n": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sequence(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]\n",
                    "input": {
                        "n": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sequence(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]\n",
                    "input": {
                        "n": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/85": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/85": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef surfacearea_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4 * math.pi * (r**2)\n",
                    "input": {
                        "r": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef surfacearea_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4 * math.pi * (r**2)\n",
                    "input": {
                        "r": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef surfacearea_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4 * math.pi * (r**2)\n",
                    "input": {
                        "r": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef surfacearea_sphere(r):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4 * math.pi * (r**2)\n",
                    "input": {
                        "r": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/86": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/86": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef centered_hexagonal_number(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef centered_hexagonal_number(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef centered_hexagonal_number(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef centered_hexagonal_number(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/86": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef centered_hexagonal_number(n):\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n",
                    "input": {
                        "n": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef centered_hexagonal_number(n):\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n",
                    "input": {
                        "n": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef centered_hexagonal_number(n):\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n",
                    "input": {
                        "n": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef centered_hexagonal_number(n):\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 3 * n * (n - 1) + 1\n",
                    "input": {
                        "n": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/87": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/88": {
        "satisfied_, violated_assert_0": {
            "Mbpp/88": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport collections\ndef freq_count(list1):\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  freq_count= collections.Counter(list1)\n  return freq_count\n",
                    "input": {
                        "list1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport collections\ndef freq_count(list1):\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  freq_count= collections.Counter(list1)\n  return freq_count\n",
                    "input": {
                        "list1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport collections\ndef freq_count(list1):\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  freq_count= collections.Counter(list1)\n  return freq_count\n",
                    "input": {
                        "list1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport collections\ndef freq_count(list1):\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  freq_count= collections.Counter(list1)\n  return freq_count\n",
                    "input": {
                        "list1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/89": {
        "satisfied_, violated_assert_0": {
            "Mbpp/89": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef closest_num(N):\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n  return (N - 1)\n",
                    "input": {
                        "N": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef closest_num(N):\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n  return (N - 1)\n",
                    "input": {
                        "N": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef closest_num(N):\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n  return (N - 1)\n",
                    "input": {
                        "N": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef closest_num(N):\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n  return (N - 1)\n",
                    "input": {
                        "N": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/90": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/90": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef len_log(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n",
                    "input": {
                        "list1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef len_log(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n",
                    "input": {
                        "list1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef len_log(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n",
                    "input": {
                        "list1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef len_log(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n",
                    "input": {
                        "list1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/90": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef len_log(list1):\n    assert all(isinstance(item, str) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n",
                    "input": {
                        "list1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef len_log(list1):\n    assert all(isinstance(item, str) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n",
                    "input": {
                        "list1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef len_log(list1):\n    assert all(isinstance(item, str) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n",
                    "input": {
                        "list1": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef len_log(list1):\n    assert all(isinstance(item, str) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max(len(x) for x in list1)\n",
                    "input": {
                        "list1": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/90": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/91": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/92": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/93": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/93": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power(a, b):\n\tassert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\treturn a ** b\n",
                    "input": {
                        "b": [
                            11.0,
                            10.0
                        ],
                        "a": [
                            12.0,
                            13.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power(a, b):\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\treturn a ** b\n",
                    "input": {
                        "b": [
                            11.0,
                            10.0
                        ],
                        "a": [
                            12.0,
                            13.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power(a, b):\n\tassert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\treturn a ** b\n",
                    "input": {
                        "b": [
                            14.0,
                            17.0
                        ],
                        "a": [
                            15.0,
                            16.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power(a, b):\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\treturn a ** b\n",
                    "input": {
                        "b": [
                            14.0,
                            17.0
                        ],
                        "a": [
                            15.0,
                            16.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power(a, b):\n\tassert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\treturn a ** b\n",
                    "input": {
                        "b": [
                            21.0,
                            18.0
                        ],
                        "a": [
                            19.0,
                            20.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power(a, b):\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\treturn a ** b\n",
                    "input": {
                        "b": [
                            21.0,
                            18.0
                        ],
                        "a": [
                            19.0,
                            20.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/94": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/95": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/96": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/96": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisor(n):\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return sum(1 for i in range(1, n + 1) if n % i == 0)\n",
                    "input": {
                        "n": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisor(n):\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return sum(1 for i in range(1, n + 1) if n % i == 0)\n",
                    "input": {
                        "n": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisor(n):\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return sum(1 for i in range(1, n + 1) if n % i == 0)\n",
                    "input": {
                        "n": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisor(n):\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  return sum(1 for i in range(1, n + 1) if n % i == 0)\n",
                    "input": {
                        "n": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/97": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/97": []
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
            "Mbpp/97": []
        },
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/98": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/98": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/99": {
        "satisfied_, violated_assert_0": {
            "Mbpp/99": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef decimal_to_binary(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n).replace(\"0b\",\"\") \n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef decimal_to_binary(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n).replace(\"0b\",\"\") \n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef decimal_to_binary(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n).replace(\"0b\",\"\") \n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef decimal_to_binary(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n).replace(\"0b\",\"\") \n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/100": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/101": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/101": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef kth_element(arr, k):\n  assert len(arr) >= k >= 1, \"invalid inputs\" # $_CONTRACT_$\n  return arr[k-1]\n",
                    "input": {
                        "k": 1,
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef kth_element(arr, k):\n  assert len(arr) >= k >= 1, \"invalid inputs\" # $_CONTRACT_$\n  return arr[k-1]\n",
                    "input": {
                        "arr": [],
                        "k": 8366
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef kth_element(arr, k):\n  assert len(arr) >= k >= 1, \"invalid inputs\" # $_CONTRACT_$\n  return arr[k-1]\n",
                    "input": {
                        "k": 14219,
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef kth_element(arr, k):\n  assert len(arr) >= k >= 1, \"invalid inputs\" # $_CONTRACT_$\n  return arr[k-1]\n",
                    "input": {
                        "k": 34756,
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/102": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/103": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/103": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef eulerian_num(n, m):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": -16575
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef eulerian_num(n, m):\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": -16575
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef eulerian_num(n, m):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": -24940
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef eulerian_num(n, m):\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": -24940
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef eulerian_num(n, m):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": -35390
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef eulerian_num(n, m):\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": -35390
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/103": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef eulerian_num(n, m):\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": 0,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef eulerian_num(n, m):\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": 7719,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef eulerian_num(n, m):\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": 7719,
                        "m": -2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef eulerian_num(n, m):\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": 7719,
                        "m": -14235
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef eulerian_num(n, m):\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": 7719,
                        "m": -46520
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/103": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef eulerian_num(n, m):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -1,
                        "m": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef eulerian_num(n, m):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": 7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef eulerian_num(n, m):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": 16574
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef eulerian_num(n, m):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": 24939
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef eulerian_num(n, m):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n",
                    "input": {
                        "n": -21239,
                        "m": 35389
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/104": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/105": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/105": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count(lst):\n    assert all(isinstance(x, bool) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n   \n    return sum(lst) \n",
                    "input": {
                        "lst": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count(lst):\n    assert all(isinstance(x, bool) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n   \n    return sum(lst) \n",
                    "input": {
                        "lst": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count(lst):\n    assert all(isinstance(x, bool) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n   \n    return sum(lst) \n",
                    "input": {
                        "lst": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count(lst):\n    assert all(isinstance(x, bool) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n   \n    return sum(lst) \n",
                    "input": {
                        "lst": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/106": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/108": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5": {
            "Mbpp/108": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "0"
                        ],
                        "num1": [
                            false
                        ],
                        "num3": [
                            "!2!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "0"
                        ],
                        "num1": [
                            false
                        ],
                        "num3": [
                            "!2!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            false
                        ],
                        "num3": [
                            "!0!"
                        ],
                        "num1": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            false
                        ],
                        "num3": [
                            "!0!"
                        ],
                        "num1": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5": {
            "Mbpp/108": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "!0!"
                        ],
                        "num1": [],
                        "num3": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "!0!"
                        ],
                        "num1": [],
                        "num3": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "!"
                        ],
                        "num3": [
                            "0"
                        ],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "!"
                        ],
                        "num3": [
                            "0"
                        ],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "1"
                        ],
                        "num3": [
                            "0!"
                        ],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "1"
                        ],
                        "num3": [
                            "0!"
                        ],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            false
                        ],
                        "num3": [
                            "!0!"
                        ],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            []
                        ],
                        "num1": [],
                        "num3": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            []
                        ],
                        "num1": [],
                        "num3": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5": {
            "Mbpp/108": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num1": [
                            "!0!"
                        ],
                        "num3": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num1": [
                            "!0!"
                        ],
                        "num3": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [
                            "0"
                        ],
                        "num1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [
                            "0"
                        ],
                        "num1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [
                            "0!"
                        ],
                        "num1": [
                            "1"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [
                            "0!"
                        ],
                        "num1": [
                            "1"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [
                            "!0!"
                        ],
                        "num1": [
                            false
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num1": [
                            []
                        ],
                        "num3": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num1": [
                            []
                        ],
                        "num3": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5": {
            "Mbpp/108": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [
                            "!0!"
                        ],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [
                            "!"
                        ],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [
                            "0"
                        ],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [
                            "0!"
                        ],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num1": [],
                        "num3": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4": {
            "Mbpp/108": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "!1!"
                        ],
                        "num1": [
                            "!0!"
                        ],
                        "num3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "!1!"
                        ],
                        "num1": [
                            "!0!"
                        ],
                        "num3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "1"
                        ],
                        "num3": [],
                        "num1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "1"
                        ],
                        "num3": [],
                        "num1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "1!"
                        ],
                        "num3": [],
                        "num1": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "1!"
                        ],
                        "num3": [],
                        "num1": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "0"
                        ],
                        "num3": [],
                        "num1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "0"
                        ],
                        "num3": [],
                        "num1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4": {
            "Mbpp/108": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "!0!"
                        ],
                        "num3": [],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "!"
                        ],
                        "num3": [],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "0"
                        ],
                        "num3": [],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            "0!"
                        ],
                        "num3": [],
                        "num1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [
                            ""
                        ],
                        "num1": [],
                        "num3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3": {
            "Mbpp/108": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [],
                        "num1": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [],
                        "num1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [],
                        "num1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num3": [],
                        "num1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  return sorted(num1 + num2 + num3)\n",
                    "input": {
                        "num2": [],
                        "num1": [
                            ""
                        ],
                        "num3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_": {}
    },
    "Mbpp/109": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/109": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -7720,
                        "s": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -7720,
                        "s": "]"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -7720,
                        "s": "]"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -7720,
                        "s": "*"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -7720,
                        "s": "*"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/109": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -1,
                        "s": "[01]*"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -7720,
                        "s": "[01]*"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -10157,
                        "s": "[01]*"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -21954,
                        "s": "[01]*"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": -54239,
                        "s": "[01]*"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/109": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": 0,
                        "s": "["
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": 10156,
                        "s": "]"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef odd_Equivalent(s,n):\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n",
                    "input": {
                        "n": 10156,
                        "s": "*"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/111": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/113": {
        "satisfied_, violated_assert_0": {
            "Mbpp/113": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_integer(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_integer(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_integer(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_integer(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/116": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
            "Mbpp/116": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
            "Mbpp/116": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                2.0,
                                3.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                4.0,
                                5.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                6.0,
                                7.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                8.0,
                                9.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                11.0,
                                10.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
            "Mbpp/116": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/116": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                [
                                    3.0,
                                    4.0
                                ],
                                2.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                [
                                    6.0,
                                    7.0
                                ],
                                5.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                [
                                    10.0,
                                    9.0
                                ],
                                8.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                [
                                    13.0,
                                    11.0
                                ],
                                12.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_to_int(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            [
                                [
                                    16.0,
                                    14.0
                                ],
                                15.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
            "Mbpp/116": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
            "Mbpp/116": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef tuple_to_int(nums):\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
            "Mbpp/116": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef tuple_to_int(nums):\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n",
                    "input": {
                        "nums": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/116": []
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/118": {
        "satisfied_, violated_assert_0": {
            "Mbpp/118": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef string_to_list(string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return string.split(\" \")\n",
                    "input": {
                        "string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef string_to_list(string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return string.split(\" \")\n",
                    "input": {
                        "string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef string_to_list(string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return string.split(\" \")\n",
                    "input": {
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef string_to_list(string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return string.split(\" \")\n",
                    "input": {
                        "string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/119": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/120": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/123": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/123": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n",
                    "input": {
                        "limit": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n",
                    "input": {
                        "limit": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n",
                    "input": {
                        "limit": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n",
                    "input": {
                        "limit": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/124": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/125": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/125": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_length(string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n",
                    "input": {
                        "string": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_length(string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n",
                    "input": {
                        "string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_length(string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n",
                    "input": {
                        "string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_length(string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n",
                    "input": {
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/125": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_length(string):\n\tassert all([c in '01' for c in string]), \"invalid inputs\" # $_CONTRACT_$\n \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n",
                    "input": {
                        "string": "B"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_length(string):\n\tassert all([c in '01' for c in string]), \"invalid inputs\" # $_CONTRACT_$\n \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n",
                    "input": {
                        "string": "C"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/126": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
            "Mbpp/126": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef sum(a,b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n",
                    "input": {
                        "b": [
                            11.0,
                            10.0
                        ],
                        "a": [
                            12.0,
                            13.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef sum(a,b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n",
                    "input": {
                        "b": [
                            11.0,
                            10.0
                        ],
                        "a": [
                            12.0,
                            13.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef sum(a,b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n",
                    "input": {
                        "b": [
                            14.0,
                            17.0
                        ],
                        "a": [
                            15.0,
                            16.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef sum(a,b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n",
                    "input": {
                        "b": [
                            14.0,
                            17.0
                        ],
                        "a": [
                            15.0,
                            16.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef sum(a,b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n",
                    "input": {
                        "b": [
                            21.0,
                            18.0
                        ],
                        "a": [
                            19.0,
                            20.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef sum(a,b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n",
                    "input": {
                        "b": [
                            21.0,
                            18.0
                        ],
                        "a": [
                            19.0,
                            20.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/127": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/128": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/129": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_": {}
    },
    "Mbpp/130": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/130": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    assert all(isinstance(n, (int, float, str)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n",
                    "input": {
                        "nums": [
                            [
                                2.0,
                                3.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    assert all(isinstance(n, (int, float, str)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n",
                    "input": {
                        "nums": [
                            [
                                5.0,
                                4.0
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/131": {
        "satisfied_, violated_assert_0": {
            "Mbpp/131": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef reverse_vowels(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef reverse_vowels(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef reverse_vowels(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef reverse_vowels(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/132": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/133": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/133": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_negativenum(nums):\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return sum(x for x in nums if x < 0)\n",
                    "input": {
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_negativenum(nums):\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return sum(x for x in nums if x < 0)\n",
                    "input": {
                        "nums": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_negativenum(nums):\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return sum(x for x in nums if x < 0)\n",
                    "input": {
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_negativenum(nums):\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return sum(x for x in nums if x < 0)\n",
                    "input": {
                        "nums": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/135": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/135": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef hexagonal_num(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef hexagonal_num(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef hexagonal_num(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef hexagonal_num(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/135": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef hexagonal_num(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef hexagonal_num(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef hexagonal_num(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef hexagonal_num(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/137": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/137": []
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/137": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef zero_count(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n",
                    "input": {
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef zero_count(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n",
                    "input": {
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef zero_count(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n",
                    "input": {
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef zero_count(nums):\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n",
                    "input": {
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/138": {
        "satisfied_, violated_assert_0": {
            "Mbpp/138": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n > 0 and n % 2 == 0\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n > 0 and n % 2 == 0\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n > 0 and n % 2 == 0\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n > 0 and n % 2 == 0\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/139": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/139": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef circle_circumference(r):\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n",
                    "input": {
                        "r": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef circle_circumference(r):\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n",
                    "input": {
                        "r": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef circle_circumference(r):\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n",
                    "input": {
                        "r": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef circle_circumference(r):\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n",
                    "input": {
                        "r": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/139": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef circle_circumference(r):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n",
                    "input": {
                        "r": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef circle_circumference(r):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n",
                    "input": {
                        "r": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef circle_circumference(r):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n",
                    "input": {
                        "r": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef circle_circumference(r):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r\n",
                    "input": {
                        "r": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/140": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/140": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef extract_singly(test_list):\n  assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return set([item for sublist in test_list for item in sublist])\n",
                    "input": {
                        "test_list": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef extract_singly(test_list):\n  assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return set([item for sublist in test_list for item in sublist])\n",
                    "input": {
                        "test_list": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef extract_singly(test_list):\n  assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return set([item for sublist in test_list for item in sublist])\n",
                    "input": {
                        "test_list": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef extract_singly(test_list):\n  assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return set([item for sublist in test_list for item in sublist])\n",
                    "input": {
                        "test_list": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef extract_singly(test_list):\n  assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return set([item for sublist in test_list for item in sublist])\n",
                    "input": {
                        "test_list": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/141": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/141": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef pancake_sort(nums):\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n",
                    "input": {
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef pancake_sort(nums):\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n",
                    "input": {
                        "nums": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef pancake_sort(nums):\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n",
                    "input": {
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef pancake_sort(nums):\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n",
                    "input": {
                        "nums": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/142": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/142": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 12.0,
                        "list2": 11.0,
                        "list3": 13.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 12.0,
                        "list2": 11.0,
                        "list3": 13.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 12.0,
                        "list2": 11.0,
                        "list3": 13.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 14.0,
                        "list2": 16.0,
                        "list3": 15.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 14.0,
                        "list2": 16.0,
                        "list3": 15.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 14.0,
                        "list2": 16.0,
                        "list3": 15.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/142": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 3.0,
                        "list3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 3.0,
                        "list3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 5.0,
                        "list3": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 5.0,
                        "list3": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 7.0,
                        "list3": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 7.0,
                        "list3": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 8.0,
                        "list3": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 8.0,
                        "list3": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 11.0,
                        "list3": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 11.0,
                        "list3": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {
            "Mbpp/142": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 3.0,
                        "list2": [],
                        "list3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 3.0,
                        "list2": [],
                        "list3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 5.0,
                        "list2": [],
                        "list3": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 5.0,
                        "list2": [],
                        "list3": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 7.0,
                        "list2": [],
                        "list3": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 7.0,
                        "list2": [],
                        "list3": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 9.0,
                        "list2": [],
                        "list3": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 9.0,
                        "list2": [],
                        "list3": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 10.0,
                        "list2": [],
                        "list3": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 10.0,
                        "list2": [],
                        "list3": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/142": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": [],
                        "list3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": [],
                        "list3": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": [],
                        "list3": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": [],
                        "list3": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": [],
                        "list3": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {
            "Mbpp/142": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 3.0,
                        "list2": 2.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 3.0,
                        "list2": 2.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 5.0,
                        "list2": 4.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 5.0,
                        "list2": 4.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 7.0,
                        "list2": 6.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 7.0,
                        "list2": 6.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 8.0,
                        "list2": 9.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 8.0,
                        "list2": 9.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 11.0,
                        "list2": 10.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 11.0,
                        "list2": 10.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/142": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 2.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 3.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 4.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 5.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": [],
                        "list2": 6.0,
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {
            "Mbpp/142": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 2.0,
                        "list2": [],
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 3.0,
                        "list2": [],
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 4.0,
                        "list2": [],
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 5.0,
                        "list2": [],
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_samepair(list1,list2,list3):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n",
                    "input": {
                        "list1": 6.0,
                        "list2": [],
                        "list3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/145": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/160": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/161": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/161": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 7.0,
                        "list2": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 7.0,
                        "list2": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 9.0,
                        "list2": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 9.0,
                        "list2": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 11.0,
                        "list2": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 11.0,
                        "list2": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/161": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": [],
                        "list2": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": [],
                        "list2": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": [],
                        "list2": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": [],
                        "list2": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": [],
                        "list2": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/161": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 2.0,
                        "list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 3.0,
                        "list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 4.0,
                        "list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 5.0,
                        "list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_elements(list1, list2):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [x for x in list1 if x not in list2]\n",
                    "input": {
                        "list1": 6.0,
                        "list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/162": {
        "satisfied_, violated_assert_0": {
            "Mbpp/162": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_series(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_series(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_series(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_series(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/166": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/166": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_even_pair(A):\n  assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])\n",
                    "input": {
                        "A": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_even_pair(A):\n  assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])\n",
                    "input": {
                        "A": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_even_pair(A):\n  assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])\n",
                    "input": {
                        "A": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_even_pair(A):\n  assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])\n",
                    "input": {
                        "A": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/167": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/167": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef next_power_of_2(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res; \n",
                    "input": {
                        "n": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef next_power_of_2(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res; \n",
                    "input": {
                        "n": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef next_power_of_2(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res; \n",
                    "input": {
                        "n": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef next_power_of_2(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res; \n",
                    "input": {
                        "n": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/168": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/170": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5": {
            "Mbpp/170": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            4.0
                        ],
                        "n": -33051,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            4.0
                        ],
                        "n": -33051,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            5.0
                        ],
                        "n": -33051,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            5.0
                        ],
                        "n": -33051,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            6.0
                        ],
                        "n": -33051,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            6.0
                        ],
                        "n": -33051,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5": {
            "Mbpp/170": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "n": -2438,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "n": -2438,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "n": -2438,
                        "m": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "n": -2438,
                        "m": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "m": -19306,
                        "n": -2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "m": -19306,
                        "n": -2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "n": -2438,
                        "m": -20448
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "n": -2438,
                        "m": -20448
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "n": -11383,
                        "m": -20448
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [],
                        "n": -11383,
                        "m": -20448
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5": {
            "Mbpp/170": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            2.0
                        ],
                        "n": -1,
                        "m": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            3.0
                        ],
                        "n": -10451,
                        "m": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            4.0
                        ],
                        "n": -42342,
                        "m": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            5.0
                        ],
                        "n": -44582,
                        "m": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            6.0
                        ],
                        "m": 0,
                        "n": -44582
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5": {
            "Mbpp/170": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            6
                        ],
                        "n": -1,
                        "m": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            4
                        ],
                        "m": 0,
                        "n": -32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            5
                        ],
                        "n": -58571,
                        "m": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            7
                        ],
                        "n": -58571,
                        "m": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            8
                        ],
                        "m": 0,
                        "n": -58571
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4": {
            "Mbpp/170": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            2.0
                        ],
                        "n": 0,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            3.0
                        ],
                        "n": 0,
                        "m": -10451
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            4.0
                        ],
                        "n": 0,
                        "m": -25131
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            5.0
                        ],
                        "n": 0,
                        "m": -43588
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            6.0
                        ],
                        "m": -75866,
                        "n": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4": {
            "Mbpp/170": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            5
                        ],
                        "n": 0,
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            4
                        ],
                        "m": -32286,
                        "n": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            6
                        ],
                        "n": 0,
                        "m": -58571
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            7
                        ],
                        "n": 0,
                        "m": -58571
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sum_range_list(list1, m, n):\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n",
                    "input": {
                        "list1": [
                            8
                        ],
                        "m": -58571,
                        "n": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1": {
            "Mbpp/170": []
        },
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_": {}
    },
    "Mbpp/171": {
        "satisfied_, violated_assert_0": {
            "Mbpp/171": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef perimeter_pentagon(a):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 5 * a\n",
                    "input": {
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef perimeter_pentagon(a):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 5 * a\n",
                    "input": {
                        "a": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef perimeter_pentagon(a):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 5 * a\n",
                    "input": {
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef perimeter_pentagon(a):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 5 * a\n",
                    "input": {
                        "a": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/172": {
        "satisfied_, violated_assert_0": {
            "Mbpp/172": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_occurance(s):\n  assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n  return s.count('std')\n",
                    "input": {
                        "s": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_occurance(s):\n  assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n  return s.count('std')\n",
                    "input": {
                        "s": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_occurance(s):\n  assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n  return s.count('std')\n",
                    "input": {
                        "s": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_occurance(s):\n  assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n  return s.count('std')\n",
                    "input": {
                        "s": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/222": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/222": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_type(test_tuple):\n    assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n",
                    "input": {
                        "test_tuple": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_type(test_tuple):\n    assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n",
                    "input": {
                        "test_tuple": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_type(test_tuple):\n    assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n",
                    "input": {
                        "test_tuple": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_type(test_tuple):\n    assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n",
                    "input": {
                        "test_tuple": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/223": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_": {}
    },
    "Mbpp/224": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/224": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_Set_Bits(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_Set_Bits(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_Set_Bits(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_Set_Bits(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/224": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_Set_Bits(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_Set_Bits(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_Set_Bits(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_Set_Bits(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return bin(n)[2:].count('1')\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/226": {
        "satisfied_, violated_assert_0": {
            "Mbpp/226": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef odd_values_string(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef odd_values_string(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef odd_values_string(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef odd_values_string(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/227": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/227": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "2",
                        "b": "!0!",
                        "a": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "2",
                        "b": "!0!",
                        "a": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": false,
                        "b": "0",
                        "a": true
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/227": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "a": 2,
                        "c": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "a": 2,
                        "c": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "0",
                        "b": "!",
                        "a": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "0",
                        "b": "!",
                        "a": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "1",
                        "b": "0!",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "1",
                        "b": "0!",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": false,
                        "b": "!0!",
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": true,
                        "b": "0",
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {
            "Mbpp/227": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "a": "!1!",
                        "c": "!0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "a": "!1!",
                        "c": "!0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "1",
                        "b": 3,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "1",
                        "b": 3,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "!1!",
                        "b": 4,
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "!1!",
                        "b": 4,
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "0",
                        "b": 5,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "0",
                        "b": 5,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/227": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "a": 3,
                        "c": "!0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "!",
                        "b": 4,
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "0",
                        "b": 7,
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "0!",
                        "b": 9,
                        "a": 8
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": "",
                        "b": 10,
                        "a": 11
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {
            "Mbpp/227": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "a": "!1!",
                        "c": 2.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "a": "!1!",
                        "c": 2.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 2,
                        "b": "1",
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 2,
                        "b": "1",
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 3,
                        "b": "!1!",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 3,
                        "b": "!1!",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 4,
                        "b": "0",
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 4,
                        "b": "0",
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/227": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "a": 2,
                        "c": 2.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 3,
                        "b": "!",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 6,
                        "b": "0",
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 8,
                        "b": "0!",
                        "a": 7
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 9,
                        "b": "",
                        "a": 10
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {
            "Mbpp/227": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "a": "!0!",
                        "c": 2.0,
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 3,
                        "b": 4,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 6,
                        "b": 5,
                        "a": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 8,
                        "b": 7,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef min_of_three(a,b,c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return min(a, b, c)\n",
                    "input": {
                        "c": 9,
                        "b": 10,
                        "a": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/230": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/230": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 7.0,
                        "char": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 7.0,
                        "char": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 9.0,
                        "char": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 9.0,
                        "char": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 11.0,
                        "char": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 11.0,
                        "char": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/230": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "!0!",
                        "char": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "!",
                        "char": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "0",
                        "char": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "0!",
                        "char": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "A",
                        "char": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {
            "Mbpp/230": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 5.0,
                        "char": [
                            4.0,
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef replace_blank(str1, char):\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 5.0,
                        "char": [
                            4.0,
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 8.0,
                        "char": [
                            7.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef replace_blank(str1, char):\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 8.0,
                        "char": [
                            7.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 10.0,
                        "char": [
                            9.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef replace_blank(str1, char):\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 10.0,
                        "char": [
                            9.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 14.0,
                        "char": [
                            12.0,
                            13.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef replace_blank(str1, char):\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 14.0,
                        "char": [
                            12.0,
                            13.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/230": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef replace_blank(str1, char):\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "",
                        "char": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef replace_blank(str1, char):\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "A",
                        "char": [
                            2.0,
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef replace_blank(str1, char):\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "B",
                        "char": [
                            5.0,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef replace_blank(str1, char):\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "C",
                        "char": [
                            7.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef replace_blank(str1, char):\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": "D",
                        "char": [
                            8.0,
                            9.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {
            "Mbpp/230": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 2.0,
                        "char": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 3.0,
                        "char": "B"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 4.0,
                        "char": "C"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 5.0,
                        "char": "D"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_blank(str1, char):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(' ', char)\n",
                    "input": {
                        "str1": 6.0,
                        "char": "E"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/233": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
            "Mbpp/233": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "0!",
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "0!",
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "1!",
                        "h": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "1!",
                        "h": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
            "Mbpp/233": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -2437,
                        "h": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -2437,
                        "h": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -2437,
                        "h": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -2437,
                        "h": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -34722,
                        "h": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -34722,
                        "h": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
            "Mbpp/233": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "!",
                        "h": -21238
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "!",
                        "h": -21238
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "0",
                        "h": -33035
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "0",
                        "h": -33035
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "0!",
                        "h": -43485
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "0!",
                        "h": -43485
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "",
                        "h": -71585
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "",
                        "h": -71585
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/233": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": -2437
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": -2437
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": -2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": -2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -5853,
                        "h": -2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -5853,
                        "h": -2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -21774,
                        "h": -2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -21774,
                        "h": -2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -21774,
                        "h": -23414
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -21774,
                        "h": -23414
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
            "Mbpp/233": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 1.0,
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 1,
                        "h": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 2438,
                        "h": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 2438,
                        "h": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 2438,
                        "h": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/233": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 1,
                        "h": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 2438,
                        "h": 0.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 2438,
                        "h": -32285.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 2438,
                        "h": -60385.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 2438,
                        "h": -76306.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
            "Mbpp/233": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "!0!",
                        "h": 1.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "!",
                        "h": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "0",
                        "h": 2438
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "0!",
                        "h": 10803
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": "",
                        "h": 41415
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/233": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": 0,
                        "h": 1.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -11797,
                        "h": 8366.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -11797,
                        "h": 14219.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  return 2 * math.pi * r * h\n",
                    "input": {
                        "r": -11797,
                        "h": 34756.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/234": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/234": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef volume_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef volume_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef volume_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef volume_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/234": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef volume_cube(l):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef volume_cube(l):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": -2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef volume_cube(l):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": -30614
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef volume_cube(l):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": -31756
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/234": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef volume_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef volume_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef volume_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef volume_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef volume_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l ** 3\n",
                    "input": {
                        "l": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/235": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/235": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef even_bit_set_number(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef even_bit_set_number(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef even_bit_set_number(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef even_bit_set_number(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/237": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/238": {
        "satisfied_, violated_assert_0": {
            "Mbpp/238": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef number_of_substrings(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef number_of_substrings(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef number_of_substrings(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef number_of_substrings(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/239": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/240": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/240": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_list(list1, list2):\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return list1[:-1] + list2\n",
                    "input": {
                        "list1": [],
                        "list2": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_list(list1, list2):\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return list1[:-1] + list2\n",
                    "input": {
                        "list1": [],
                        "list2": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_list(list1, list2):\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return list1[:-1] + list2\n",
                    "input": {
                        "list1": [],
                        "list2": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef replace_list(list1, list2):\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    return list1[:-1] + list2\n",
                    "input": {
                        "list1": [],
                        "list2": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/242": {
        "satisfied_, violated_assert_0": {
            "Mbpp/242": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_charac(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return len(str1)\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_charac(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return len(str1)\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_charac(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return len(str1)\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_charac(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return len(str1)\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/244": {
        "satisfied_, violated_assert_0": {
            "Mbpp/244": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math  \ndef next_Perfect_Square(N):\n    assert isinstance(N, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n",
                    "input": {
                        "N": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math  \ndef next_Perfect_Square(N):\n    assert isinstance(N, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n",
                    "input": {
                        "N": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math  \ndef next_Perfect_Square(N):\n    assert isinstance(N, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n",
                    "input": {
                        "N": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math  \ndef next_Perfect_Square(N):\n    assert isinstance(N, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n",
                    "input": {
                        "N": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/245": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/245": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_sum(arr):\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n",
                    "input": {
                        "arr": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_sum(arr):\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n",
                    "input": {
                        "arr": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_sum(arr):\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n",
                    "input": {
                        "arr": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_sum(arr):\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n",
                    "input": {
                        "arr": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/245": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/247": {
        "satisfied_, violated_assert_0": {
            "Mbpp/247": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef lps(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef lps(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef lps(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef lps(str1):\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/250": {
        "satisfied_, violated_assert_0": {
            "Mbpp/250": []
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/251": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/252": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/253": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/255": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/256": {
        "satisfied_, violated_assert_0": {
            "Mbpp/256": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_Primes_nums(n):\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_Primes_nums(n):\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_Primes_nums(n):\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_Primes_nums(n):\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/257": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/257": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": "0",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": "0",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": false,
                        "a": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": true,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/257": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": "!0!",
                        "a": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": "!",
                        "a": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": "0",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": "0!",
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": "A",
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/257": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": 2,
                        "a": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": 3,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": 4,
                        "a": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": 5,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef swap_numbers(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return (b, a)\n",
                    "input": {
                        "b": 6,
                        "a": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/259": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_6;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_6, violated_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_6, violated_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_6, violated_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6, violated_assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_6, violated_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_6, violated_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6, violated_assert_2;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_6, violated_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6, violated_assert_1;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6, violated_assert_0;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6, violated_assert_4;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_6, violated_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_6, violated_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6, violated_assert_2;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_6, violated_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6, violated_assert_1;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6, violated_assert_0;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6, violated_assert_3;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6, violated_assert_1;assert_2;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6, violated_assert_0;assert_2;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6, violated_assert_2;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6, violated_assert_1;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_5;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6, violated_assert_2;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6, violated_assert_1;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6, violated_assert_0;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6, violated_assert_3;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6, violated_assert_1;assert_2;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6, violated_assert_0;assert_2;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6, violated_assert_2;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6, violated_assert_1;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_4;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6, violated_assert_2;assert_3;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6, violated_assert_1;assert_3;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_3;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_3;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_2;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_7;assert_8;assert_9;assert_10": {},
        "satisfied_assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_7, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_7, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_7, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7, violated_assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_7, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_7, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7, violated_assert_2;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_7, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7, violated_assert_1;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7, violated_assert_0;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7, violated_assert_4;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_4;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_7, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_7, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7, violated_assert_2;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_7, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7, violated_assert_1;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7, violated_assert_0;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7, violated_assert_3;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_7, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7, violated_assert_1;assert_2;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7, violated_assert_0;assert_2;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7, violated_assert_2;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7, violated_assert_0;assert_1;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7, violated_assert_1;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7, violated_assert_0;assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7, violated_assert_5;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_5;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_5;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7, violated_assert_2;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_5;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7, violated_assert_1;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7, violated_assert_0;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7, violated_assert_3;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7, violated_assert_1;assert_2;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7, violated_assert_0;assert_2;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7, violated_assert_2;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7, violated_assert_0;assert_1;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7, violated_assert_1;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7, violated_assert_0;assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7, violated_assert_4;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7, violated_assert_1;assert_2;assert_3;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7, violated_assert_0;assert_2;assert_3;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7, violated_assert_2;assert_3;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_3;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7, violated_assert_1;assert_3;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7, violated_assert_0;assert_3;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7, violated_assert_3;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7, violated_assert_1;assert_2;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_2;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7, violated_assert_2;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_1;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_6;assert_8;assert_9;assert_10": {},
        "satisfied_assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7, violated_assert_2;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7, violated_assert_1;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7, violated_assert_0;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7, violated_assert_3;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7, violated_assert_1;assert_2;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7, violated_assert_0;assert_2;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7, violated_assert_2;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7, violated_assert_0;assert_1;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7, violated_assert_1;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7, violated_assert_0;assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7, violated_assert_4;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7, violated_assert_2;assert_3;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7, violated_assert_1;assert_3;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7, violated_assert_0;assert_3;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7, violated_assert_3;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7, violated_assert_1;assert_2;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_2;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7, violated_assert_2;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_1;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_5;assert_8;assert_9;assert_10": {},
        "satisfied_assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7, violated_assert_2;assert_3;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7, violated_assert_1;assert_3;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7, violated_assert_0;assert_3;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7, violated_assert_3;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7, violated_assert_2;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_1;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_4;assert_8;assert_9;assert_10": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7, violated_assert_2;assert_3;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_3;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_3;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_3;assert_8;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_2;assert_8;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_8;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_8;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_8;assert_9;assert_10": {},
        "satisfied_assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_8, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_8, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_8, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_8, violated_assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_3;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_8, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_8, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_8, violated_assert_2;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_8, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_8, violated_assert_1;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_8, violated_assert_0;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_8, violated_assert_4;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_4;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_8, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_8, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_8, violated_assert_2;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_8, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_8, violated_assert_1;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_8, violated_assert_0;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_8, violated_assert_3;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_8, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_8, violated_assert_1;assert_2;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_8, violated_assert_0;assert_2;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_8, violated_assert_2;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_8, violated_assert_0;assert_1;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_8, violated_assert_1;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_8, violated_assert_0;assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8, violated_assert_5;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_5;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_5;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_5;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_8, violated_assert_2;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_5;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_8, violated_assert_1;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_8, violated_assert_0;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_8, violated_assert_3;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_3;assert_5;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_8, violated_assert_1;assert_2;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_8, violated_assert_0;assert_2;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_8, violated_assert_2;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_8, violated_assert_0;assert_1;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_8, violated_assert_1;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_8, violated_assert_0;assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8, violated_assert_4;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_4;assert_5;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_8, violated_assert_1;assert_2;assert_3;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_8, violated_assert_0;assert_2;assert_3;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_8, violated_assert_2;assert_3;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_8, violated_assert_0;assert_1;assert_3;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_8, violated_assert_1;assert_3;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_8, violated_assert_0;assert_3;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8, violated_assert_3;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_8, violated_assert_0;assert_1;assert_2;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_8, violated_assert_1;assert_2;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_8, violated_assert_0;assert_2;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8, violated_assert_2;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_8, violated_assert_0;assert_1;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8, violated_assert_1;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8, violated_assert_0;assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8, violated_assert_6;assert_7;assert_9;assert_10": {},
        "satisfied_assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_6;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_6;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_6;assert_8, violated_assert_2;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_6;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_6;assert_8, violated_assert_1;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_6;assert_8, violated_assert_0;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_8, violated_assert_3;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_3;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_6;assert_8, violated_assert_1;assert_2;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_6;assert_8, violated_assert_0;assert_2;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_8, violated_assert_2;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_6;assert_8, violated_assert_0;assert_1;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_8, violated_assert_1;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_8, violated_assert_0;assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8, violated_assert_4;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_4;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_6;assert_8, violated_assert_1;assert_2;assert_3;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_6;assert_8, violated_assert_0;assert_2;assert_3;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_8, violated_assert_2;assert_3;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_6;assert_8, violated_assert_0;assert_1;assert_3;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_8, violated_assert_1;assert_3;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_8, violated_assert_0;assert_3;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8, violated_assert_3;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_8, violated_assert_1;assert_2;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_8, violated_assert_0;assert_2;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8, violated_assert_2;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_8, violated_assert_0;assert_1;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8, violated_assert_1;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8, violated_assert_0;assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8, violated_assert_5;assert_7;assert_9;assert_10": {},
        "satisfied_assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_5;assert_6;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_5;assert_6;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_8, violated_assert_2;assert_3;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_8, violated_assert_1;assert_3;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_8, violated_assert_0;assert_3;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8, violated_assert_3;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_3;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_8, violated_assert_1;assert_2;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_8, violated_assert_0;assert_2;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8, violated_assert_2;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8, violated_assert_1;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8, violated_assert_0;assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8, violated_assert_4;assert_7;assert_9;assert_10": {},
        "satisfied_assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_8, violated_assert_1;assert_2;assert_3;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_2;assert_3;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8, violated_assert_2;assert_3;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_3;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8, violated_assert_1;assert_3;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_3;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8, violated_assert_3;assert_7;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_1;assert_2;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_2;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_2;assert_7;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_1;assert_7;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_7;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_7;assert_9;assert_10": {},
        "satisfied_assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_7;assert_8, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_2;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_7;assert_8, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_7;assert_8, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7;assert_8, violated_assert_3;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_3;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_7;assert_8, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_7;assert_8, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7;assert_8, violated_assert_2;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_7;assert_8, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7;assert_8, violated_assert_1;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7;assert_8, violated_assert_0;assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8, violated_assert_4;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_4;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7;assert_8, violated_assert_2;assert_3;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7;assert_8, violated_assert_1;assert_3;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7;assert_8, violated_assert_0;assert_3;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8, violated_assert_3;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7;assert_8, violated_assert_1;assert_2;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7;assert_8, violated_assert_0;assert_2;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8, violated_assert_2;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7;assert_8, violated_assert_0;assert_1;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8, violated_assert_1;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8, violated_assert_0;assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8, violated_assert_5;assert_6;assert_9;assert_10": {},
        "satisfied_assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_5;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_5;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7;assert_8, violated_assert_2;assert_3;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_2;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7;assert_8, violated_assert_1;assert_3;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7;assert_8, violated_assert_0;assert_3;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8, violated_assert_3;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_3;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7;assert_8, violated_assert_1;assert_2;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7;assert_8, violated_assert_0;assert_2;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8, violated_assert_2;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8, violated_assert_1;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8, violated_assert_0;assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8, violated_assert_4;assert_6;assert_9;assert_10": {},
        "satisfied_assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8, violated_assert_2;assert_3;assert_6;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8, violated_assert_1;assert_3;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_3;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8, violated_assert_3;assert_6;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_1;assert_2;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_2;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_2;assert_6;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_1;assert_6;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_6;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_6;assert_9;assert_10": {},
        "satisfied_assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_1;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7;assert_8, violated_assert_2;assert_3;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_2;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7;assert_8, violated_assert_1;assert_3;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7;assert_8, violated_assert_0;assert_3;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8, violated_assert_3;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_3;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8, violated_assert_2;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8, violated_assert_1;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8, violated_assert_0;assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8, violated_assert_4;assert_5;assert_9;assert_10": {},
        "satisfied_assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_5;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8, violated_assert_2;assert_3;assert_5;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8, violated_assert_1;assert_3;assert_5;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_3;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8, violated_assert_3;assert_5;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_5;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_2;assert_5;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_1;assert_5;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_5;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_5;assert_9;assert_10": {},
        "satisfied_assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_9;assert_10": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_9;assert_10": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8, violated_assert_2;assert_3;assert_4;assert_9;assert_10": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_3;assert_4;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_3;assert_4;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8, violated_assert_3;assert_4;assert_9;assert_10": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_4;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_4;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_2;assert_4;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_4;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_4;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_4;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_4;assert_9;assert_10": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_9;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_9;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_2;assert_3;assert_9;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_3;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_3;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_3;assert_9;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_9;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_9;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_2;assert_9;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_9;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_9;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_9;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_9;assert_10": {},
        "satisfied_assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_9, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_9, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_9, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_9, violated_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_3;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_9, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_9, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_9, violated_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_9, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_9, violated_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_9, violated_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_9, violated_assert_4;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_4;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_4;assert_9, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_4;assert_9, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_9, violated_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_4;assert_9, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_9, violated_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_9, violated_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_9, violated_assert_3;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_3;assert_4;assert_9, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_9, violated_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_9, violated_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_9, violated_assert_2;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_9, violated_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_9, violated_assert_1;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_9, violated_assert_0;assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_9, violated_assert_5;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_5;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_5;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_5;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_9, violated_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_5;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_9, violated_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_9, violated_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_9, violated_assert_3;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_3;assert_5;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_9, violated_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_9, violated_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_9, violated_assert_2;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_9, violated_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_9, violated_assert_1;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_9, violated_assert_0;assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_9, violated_assert_4;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_4;assert_5;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_9, violated_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_9, violated_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_9, violated_assert_2;assert_3;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_9, violated_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_9, violated_assert_1;assert_3;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_9, violated_assert_0;assert_3;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_9, violated_assert_3;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_9, violated_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_9, violated_assert_1;assert_2;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_9, violated_assert_0;assert_2;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_9, violated_assert_2;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_9, violated_assert_0;assert_1;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_9, violated_assert_1;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_9, violated_assert_0;assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_9, violated_assert_6;assert_7;assert_8;assert_10": {},
        "satisfied_assert_6;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_6;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_6;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_6;assert_9, violated_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_6;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_6;assert_9, violated_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_6;assert_9, violated_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_9, violated_assert_3;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_3;assert_6;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_6;assert_9, violated_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_6;assert_9, violated_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_9, violated_assert_2;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_6;assert_9, violated_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_9, violated_assert_1;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_9, violated_assert_0;assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_9, violated_assert_4;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_4;assert_6;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_4;assert_6;assert_9, violated_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_4;assert_6;assert_9, violated_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_9, violated_assert_2;assert_3;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_4;assert_6;assert_9, violated_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_9, violated_assert_1;assert_3;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_9, violated_assert_0;assert_3;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_9, violated_assert_3;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_3;assert_4;assert_6;assert_9, violated_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_9, violated_assert_1;assert_2;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_9, violated_assert_0;assert_2;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_9, violated_assert_2;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_9, violated_assert_0;assert_1;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_9, violated_assert_1;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_9, violated_assert_0;assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_9, violated_assert_5;assert_7;assert_8;assert_10": {},
        "satisfied_assert_5;assert_6;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_5;assert_6;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_5;assert_6;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_9, violated_assert_2;assert_3;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_5;assert_6;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_9, violated_assert_1;assert_3;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_9, violated_assert_0;assert_3;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_9, violated_assert_3;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_3;assert_5;assert_6;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_9, violated_assert_1;assert_2;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_9, violated_assert_0;assert_2;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_9, violated_assert_2;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_9, violated_assert_0;assert_1;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_9, violated_assert_1;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_9, violated_assert_0;assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_9, violated_assert_4;assert_7;assert_8;assert_10": {},
        "satisfied_assert_4;assert_5;assert_6;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_9, violated_assert_1;assert_2;assert_3;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_9, violated_assert_0;assert_2;assert_3;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_9, violated_assert_2;assert_3;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_9, violated_assert_0;assert_1;assert_3;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_9, violated_assert_1;assert_3;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_9, violated_assert_0;assert_3;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_9, violated_assert_3;assert_7;assert_8;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_9, violated_assert_0;assert_1;assert_2;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_9, violated_assert_1;assert_2;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_9, violated_assert_0;assert_2;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_9, violated_assert_2;assert_7;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_9, violated_assert_0;assert_1;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9, violated_assert_1;assert_7;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9, violated_assert_0;assert_7;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9, violated_assert_7;assert_8;assert_10": {},
        "satisfied_assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_7;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_7;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_7;assert_9, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_2;assert_7;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_7;assert_9, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_7;assert_9, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7;assert_9, violated_assert_3;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_3;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_7;assert_9, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_7;assert_9, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7;assert_9, violated_assert_2;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_7;assert_9, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7;assert_9, violated_assert_1;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7;assert_9, violated_assert_0;assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7;assert_9, violated_assert_4;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_4;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_4;assert_7;assert_9, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_4;assert_7;assert_9, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7;assert_9, violated_assert_2;assert_3;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_2;assert_4;assert_7;assert_9, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7;assert_9, violated_assert_1;assert_3;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7;assert_9, violated_assert_0;assert_3;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7;assert_9, violated_assert_3;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_3;assert_4;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7;assert_9, violated_assert_1;assert_2;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7;assert_9, violated_assert_0;assert_2;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7;assert_9, violated_assert_2;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7;assert_9, violated_assert_0;assert_1;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7;assert_9, violated_assert_1;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7;assert_9, violated_assert_0;assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_9, violated_assert_5;assert_6;assert_8;assert_10": {},
        "satisfied_assert_5;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_5;assert_7;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_5;assert_7;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7;assert_9, violated_assert_2;assert_3;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_2;assert_5;assert_7;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7;assert_9, violated_assert_1;assert_3;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7;assert_9, violated_assert_0;assert_3;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7;assert_9, violated_assert_3;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_3;assert_5;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7;assert_9, violated_assert_1;assert_2;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7;assert_9, violated_assert_0;assert_2;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7;assert_9, violated_assert_2;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7;assert_9, violated_assert_0;assert_1;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7;assert_9, violated_assert_1;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7;assert_9, violated_assert_0;assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_9, violated_assert_4;assert_6;assert_8;assert_10": {},
        "satisfied_assert_4;assert_5;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7;assert_9, violated_assert_1;assert_2;assert_3;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7;assert_9, violated_assert_0;assert_2;assert_3;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7;assert_9, violated_assert_2;assert_3;assert_6;assert_8;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7;assert_9, violated_assert_0;assert_1;assert_3;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7;assert_9, violated_assert_1;assert_3;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7;assert_9, violated_assert_0;assert_3;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_9, violated_assert_3;assert_6;assert_8;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7;assert_9, violated_assert_1;assert_2;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7;assert_9, violated_assert_0;assert_2;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_9, violated_assert_2;assert_6;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7;assert_9, violated_assert_0;assert_1;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9, violated_assert_1;assert_6;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9, violated_assert_0;assert_6;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9, violated_assert_6;assert_8;assert_10": {},
        "satisfied_assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_6;assert_7;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_1;assert_6;assert_7;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7;assert_9, violated_assert_2;assert_3;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_2;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7;assert_9, violated_assert_1;assert_3;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7;assert_9, violated_assert_0;assert_3;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7;assert_9, violated_assert_3;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_3;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7;assert_9, violated_assert_1;assert_2;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7;assert_9, violated_assert_0;assert_2;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7;assert_9, violated_assert_2;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7;assert_9, violated_assert_1;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7;assert_9, violated_assert_0;assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_9, violated_assert_4;assert_5;assert_8;assert_10": {},
        "satisfied_assert_4;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7;assert_9, violated_assert_1;assert_2;assert_3;assert_5;assert_8;assert_10": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7;assert_9, violated_assert_0;assert_2;assert_3;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7;assert_9, violated_assert_2;assert_3;assert_5;assert_8;assert_10": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_3;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7;assert_9, violated_assert_1;assert_3;assert_5;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7;assert_9, violated_assert_0;assert_3;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_9, violated_assert_3;assert_5;assert_8;assert_10": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7;assert_9, violated_assert_1;assert_2;assert_5;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7;assert_9, violated_assert_0;assert_2;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_9, violated_assert_2;assert_5;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9, violated_assert_1;assert_5;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9, violated_assert_0;assert_5;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9, violated_assert_5;assert_8;assert_10": {},
        "satisfied_assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8;assert_10": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_8;assert_10": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7;assert_9, violated_assert_2;assert_3;assert_4;assert_8;assert_10": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7;assert_9, violated_assert_1;assert_3;assert_4;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_3;assert_4;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_9, violated_assert_3;assert_4;assert_8;assert_10": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7;assert_9, violated_assert_1;assert_2;assert_4;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_2;assert_4;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_9, violated_assert_2;assert_4;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_4;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9, violated_assert_1;assert_4;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_4;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9, violated_assert_4;assert_8;assert_10": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_8;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_1;assert_2;assert_3;assert_8;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_2;assert_3;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_2;assert_3;assert_8;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_3;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_1;assert_3;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_3;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_3;assert_8;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_2;assert_8;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_1;assert_2;assert_8;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_2;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_2;assert_8;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_1;assert_8;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_1;assert_8;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_0;assert_8;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9, violated_assert_8;assert_10": {},
        "satisfied_assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_8;assert_9, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_2;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_8;assert_9, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_8;assert_9, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_8;assert_9, violated_assert_3;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_3;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_3;assert_8;assert_9, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_3;assert_8;assert_9, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_8;assert_9, violated_assert_2;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_2;assert_3;assert_8;assert_9, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_8;assert_9, violated_assert_1;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_8;assert_9, violated_assert_0;assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_8;assert_9, violated_assert_4;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_4;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_4;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_4;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_8;assert_9, violated_assert_2;assert_3;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_2;assert_4;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_8;assert_9, violated_assert_1;assert_3;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_8;assert_9, violated_assert_0;assert_3;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_8;assert_9, violated_assert_3;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_3;assert_4;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_8;assert_9, violated_assert_1;assert_2;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_8;assert_9, violated_assert_0;assert_2;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_8;assert_9, violated_assert_2;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_8;assert_9, violated_assert_0;assert_1;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_8;assert_9, violated_assert_1;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_8;assert_9, violated_assert_0;assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8;assert_9, violated_assert_5;assert_6;assert_7;assert_10": {},
        "satisfied_assert_5;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_5;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_5;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_8;assert_9, violated_assert_2;assert_3;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_2;assert_5;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_8;assert_9, violated_assert_1;assert_3;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_8;assert_9, violated_assert_0;assert_3;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_8;assert_9, violated_assert_3;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_3;assert_5;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_8;assert_9, violated_assert_1;assert_2;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_8;assert_9, violated_assert_0;assert_2;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_8;assert_9, violated_assert_2;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_8;assert_9, violated_assert_0;assert_1;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_8;assert_9, violated_assert_1;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_8;assert_9, violated_assert_0;assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8;assert_9, violated_assert_4;assert_6;assert_7;assert_10": {},
        "satisfied_assert_4;assert_5;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_8;assert_9, violated_assert_2;assert_3;assert_6;assert_7;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_8;assert_9, violated_assert_1;assert_3;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_8;assert_9, violated_assert_0;assert_3;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8;assert_9, violated_assert_3;assert_6;assert_7;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_8;assert_9, violated_assert_1;assert_2;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_8;assert_9, violated_assert_0;assert_2;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8;assert_9, violated_assert_2;assert_6;assert_7;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_8;assert_9, violated_assert_0;assert_1;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9, violated_assert_1;assert_6;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9, violated_assert_0;assert_6;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9, violated_assert_6;assert_7;assert_10": {},
        "satisfied_assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_6;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_1;assert_6;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_6;assert_8;assert_9, violated_assert_2;assert_3;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_2;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_6;assert_8;assert_9, violated_assert_1;assert_3;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_6;assert_8;assert_9, violated_assert_0;assert_3;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_8;assert_9, violated_assert_3;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_3;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_3;assert_6;assert_8;assert_9, violated_assert_1;assert_2;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_1;assert_3;assert_6;assert_8;assert_9, violated_assert_0;assert_2;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_8;assert_9, violated_assert_2;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_2;assert_3;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_8;assert_9, violated_assert_1;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_8;assert_9, violated_assert_0;assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8;assert_9, violated_assert_4;assert_5;assert_7;assert_10": {},
        "satisfied_assert_4;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_4;assert_6;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_5;assert_7;assert_10": {},
        "satisfied_assert_1;assert_4;assert_6;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_8;assert_9, violated_assert_2;assert_3;assert_5;assert_7;assert_10": {},
        "satisfied_assert_2;assert_4;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_8;assert_9, violated_assert_1;assert_3;assert_5;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_8;assert_9, violated_assert_0;assert_3;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8;assert_9, violated_assert_3;assert_5;assert_7;assert_10": {},
        "satisfied_assert_3;assert_4;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_8;assert_9, violated_assert_1;assert_2;assert_5;assert_7;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_8;assert_9, violated_assert_0;assert_2;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8;assert_9, violated_assert_2;assert_5;assert_7;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9, violated_assert_1;assert_5;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9, violated_assert_0;assert_5;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9, violated_assert_5;assert_7;assert_10": {},
        "satisfied_assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_10": {},
        "satisfied_assert_0;assert_5;assert_6;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_7;assert_10": {},
        "satisfied_assert_1;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_8;assert_9, violated_assert_2;assert_3;assert_4;assert_7;assert_10": {},
        "satisfied_assert_2;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_8;assert_9, violated_assert_1;assert_3;assert_4;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_3;assert_4;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8;assert_9, violated_assert_3;assert_4;assert_7;assert_10": {},
        "satisfied_assert_3;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_7;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_8;assert_9, violated_assert_1;assert_2;assert_4;assert_7;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_2;assert_4;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8;assert_9, violated_assert_2;assert_4;assert_7;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_4;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9, violated_assert_1;assert_4;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_4;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9, violated_assert_4;assert_7;assert_10": {},
        "satisfied_assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_7;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_7;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_2;assert_3;assert_7;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_1;assert_3;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_3;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_3;assert_7;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_7;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_1;assert_2;assert_7;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_2;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_2;assert_7;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_1;assert_7;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_1;assert_7;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_0;assert_7;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9, violated_assert_7;assert_10": {},
        "satisfied_assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_1;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_7;assert_8;assert_9, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_2;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_2;assert_7;assert_8;assert_9, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_1;assert_2;assert_7;assert_8;assert_9, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7;assert_8;assert_9, violated_assert_3;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_3;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_3;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_1;assert_3;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7;assert_8;assert_9, violated_assert_2;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_2;assert_3;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7;assert_8;assert_9, violated_assert_1;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7;assert_8;assert_9, violated_assert_0;assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8;assert_9, violated_assert_4;assert_5;assert_6;assert_10": {},
        "satisfied_assert_4;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_4;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_10": {},
        "satisfied_assert_1;assert_4;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7;assert_8;assert_9, violated_assert_2;assert_3;assert_5;assert_6;assert_10": {},
        "satisfied_assert_2;assert_4;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7;assert_8;assert_9, violated_assert_1;assert_3;assert_5;assert_6;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7;assert_8;assert_9, violated_assert_0;assert_3;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8;assert_9, violated_assert_3;assert_5;assert_6;assert_10": {},
        "satisfied_assert_3;assert_4;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_5;assert_6;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8;assert_9, violated_assert_2;assert_5;assert_6;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9, violated_assert_1;assert_5;assert_6;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9, violated_assert_0;assert_5;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9, violated_assert_5;assert_6;assert_10": {},
        "satisfied_assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_10": {},
        "satisfied_assert_0;assert_5;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_10": {},
        "satisfied_assert_1;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7;assert_8;assert_9, violated_assert_2;assert_3;assert_4;assert_6;assert_10": {},
        "satisfied_assert_2;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7;assert_8;assert_9, violated_assert_1;assert_3;assert_4;assert_6;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_3;assert_4;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8;assert_9, violated_assert_3;assert_4;assert_6;assert_10": {},
        "satisfied_assert_3;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_4;assert_6;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_4;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8;assert_9, violated_assert_2;assert_4;assert_6;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_4;assert_6;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9, violated_assert_1;assert_4;assert_6;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_4;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9, violated_assert_4;assert_6;assert_10": {},
        "satisfied_assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_6;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_2;assert_3;assert_6;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_6;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_1;assert_3;assert_6;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_3;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_3;assert_6;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_6;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_6;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_2;assert_6;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_6;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_1;assert_6;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_0;assert_6;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9, violated_assert_6;assert_10": {},
        "satisfied_assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_10": {},
        "satisfied_assert_0;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_10": {},
        "satisfied_assert_1;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_10": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7;assert_8;assert_9, violated_assert_2;assert_3;assert_4;assert_5;assert_10": {},
        "satisfied_assert_2;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_10": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_3;assert_4;assert_5;assert_10": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_3;assert_4;assert_5;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8;assert_9, violated_assert_3;assert_4;assert_5;assert_10": {},
        "satisfied_assert_3;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_10": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_4;assert_5;assert_10": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_4;assert_5;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8;assert_9, violated_assert_2;assert_4;assert_5;assert_10": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_4;assert_5;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_4;assert_5;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_4;assert_5;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9, violated_assert_4;assert_5;assert_10": {},
        "satisfied_assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_10": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_5;assert_10": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_5;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_2;assert_3;assert_5;assert_10": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_5;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_3;assert_5;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_3;assert_5;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_3;assert_5;assert_10": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_5;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_5;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_5;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_2;assert_5;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_5;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_5;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_5;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9, violated_assert_5;assert_10": {},
        "satisfied_assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_10": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_4;assert_10": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_4;assert_10": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_2;assert_3;assert_4;assert_10": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_4;assert_10": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_3;assert_4;assert_10": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_3;assert_4;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_3;assert_4;assert_10": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_4;assert_10": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_4;assert_10": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_4;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_2;assert_4;assert_10": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_4;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_4;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_4;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_4;assert_10": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_3;assert_10": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_3;assert_10": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_3;assert_10": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_2;assert_3;assert_10": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_3;assert_10": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_3;assert_10": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_3;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_3;assert_10": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_2;assert_10": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_2;assert_10": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_2;assert_10": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_2;assert_10": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_1;assert_10": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_1;assert_10": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_0;assert_10": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9, violated_assert_10": {},
        "satisfied_assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_10, violated_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_3;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_10, violated_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_10, violated_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_10, violated_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_10, violated_assert_4;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_4;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_4;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_4;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_10, violated_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_4;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_10, violated_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_10, violated_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_10, violated_assert_3;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_3;assert_4;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_10, violated_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_10, violated_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_10, violated_assert_2;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_10, violated_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_10, violated_assert_1;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_10, violated_assert_0;assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_10, violated_assert_5;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_5;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_5;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_5;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_5;assert_10, violated_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_5;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_5;assert_10, violated_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_5;assert_10, violated_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_10, violated_assert_3;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_3;assert_5;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_5;assert_10, violated_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_5;assert_10, violated_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_10, violated_assert_2;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_5;assert_10, violated_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_10, violated_assert_1;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_10, violated_assert_0;assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_10, violated_assert_4;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_4;assert_5;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_4;assert_5;assert_10, violated_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_4;assert_5;assert_10, violated_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_10, violated_assert_2;assert_3;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_4;assert_5;assert_10, violated_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_10, violated_assert_1;assert_3;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_10, violated_assert_0;assert_3;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_10, violated_assert_3;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_3;assert_4;assert_5;assert_10, violated_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_10, violated_assert_1;assert_2;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_10, violated_assert_0;assert_2;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_10, violated_assert_2;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_10, violated_assert_0;assert_1;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_10, violated_assert_1;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_10, violated_assert_0;assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_10, violated_assert_6;assert_7;assert_8;assert_9": {},
        "satisfied_assert_6;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_6;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_6;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_6;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_6;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_6;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_6;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_10, violated_assert_3;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_3;assert_6;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_6;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_6;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_10, violated_assert_2;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_6;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_10, violated_assert_1;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_10, violated_assert_0;assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_10, violated_assert_4;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_4;assert_6;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_4;assert_6;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_4;assert_6;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_10, violated_assert_2;assert_3;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_4;assert_6;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_10, violated_assert_1;assert_3;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_10, violated_assert_0;assert_3;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_10, violated_assert_3;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_3;assert_4;assert_6;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_10, violated_assert_1;assert_2;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_10, violated_assert_0;assert_2;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_10, violated_assert_2;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_10, violated_assert_0;assert_1;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_10, violated_assert_1;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_10, violated_assert_0;assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_10, violated_assert_5;assert_7;assert_8;assert_9": {},
        "satisfied_assert_5;assert_6;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_5;assert_6;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_5;assert_6;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_10, violated_assert_2;assert_3;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_5;assert_6;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_10, violated_assert_1;assert_3;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_10, violated_assert_0;assert_3;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_10, violated_assert_3;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_3;assert_5;assert_6;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_10, violated_assert_1;assert_2;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_10, violated_assert_0;assert_2;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_10, violated_assert_2;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_10, violated_assert_0;assert_1;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_10, violated_assert_1;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_10, violated_assert_0;assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_10, violated_assert_4;assert_7;assert_8;assert_9": {},
        "satisfied_assert_4;assert_5;assert_6;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_10, violated_assert_1;assert_2;assert_3;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_10, violated_assert_0;assert_2;assert_3;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_10, violated_assert_2;assert_3;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_10, violated_assert_0;assert_1;assert_3;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_10, violated_assert_1;assert_3;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_10, violated_assert_0;assert_3;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_10, violated_assert_3;assert_7;assert_8;assert_9": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_10, violated_assert_0;assert_1;assert_2;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_10, violated_assert_1;assert_2;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_10, violated_assert_0;assert_2;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_10, violated_assert_2;assert_7;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_10, violated_assert_0;assert_1;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_10, violated_assert_1;assert_7;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_10, violated_assert_0;assert_7;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_10, violated_assert_7;assert_8;assert_9": {},
        "satisfied_assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_7;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_7;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_7;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_2;assert_7;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_7;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_7;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7;assert_10, violated_assert_3;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_3;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_7;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_7;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7;assert_10, violated_assert_2;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_7;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7;assert_10, violated_assert_1;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7;assert_10, violated_assert_0;assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7;assert_10, violated_assert_4;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_4;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_4;assert_7;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_4;assert_7;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7;assert_10, violated_assert_2;assert_3;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_2;assert_4;assert_7;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7;assert_10, violated_assert_1;assert_3;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7;assert_10, violated_assert_0;assert_3;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7;assert_10, violated_assert_3;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_3;assert_4;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7;assert_10, violated_assert_1;assert_2;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7;assert_10, violated_assert_0;assert_2;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7;assert_10, violated_assert_2;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7;assert_10, violated_assert_0;assert_1;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7;assert_10, violated_assert_1;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7;assert_10, violated_assert_0;assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_10, violated_assert_5;assert_6;assert_8;assert_9": {},
        "satisfied_assert_5;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_5;assert_7;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_5;assert_7;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7;assert_10, violated_assert_2;assert_3;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_2;assert_5;assert_7;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7;assert_10, violated_assert_1;assert_3;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7;assert_10, violated_assert_0;assert_3;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7;assert_10, violated_assert_3;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_3;assert_5;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7;assert_10, violated_assert_1;assert_2;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7;assert_10, violated_assert_0;assert_2;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7;assert_10, violated_assert_2;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7;assert_10, violated_assert_0;assert_1;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7;assert_10, violated_assert_1;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7;assert_10, violated_assert_0;assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_10, violated_assert_4;assert_6;assert_8;assert_9": {},
        "satisfied_assert_4;assert_5;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7;assert_10, violated_assert_1;assert_2;assert_3;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7;assert_10, violated_assert_0;assert_2;assert_3;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7;assert_10, violated_assert_2;assert_3;assert_6;assert_8;assert_9": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7;assert_10, violated_assert_0;assert_1;assert_3;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7;assert_10, violated_assert_1;assert_3;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7;assert_10, violated_assert_0;assert_3;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_10, violated_assert_3;assert_6;assert_8;assert_9": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7;assert_10, violated_assert_1;assert_2;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7;assert_10, violated_assert_0;assert_2;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_10, violated_assert_2;assert_6;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7;assert_10, violated_assert_0;assert_1;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_10, violated_assert_1;assert_6;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_10, violated_assert_0;assert_6;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_10, violated_assert_6;assert_8;assert_9": {},
        "satisfied_assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_6;assert_7;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_1;assert_6;assert_7;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_2;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7;assert_10, violated_assert_3;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_3;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7;assert_10, violated_assert_2;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7;assert_10, violated_assert_1;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7;assert_10, violated_assert_0;assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_10, violated_assert_4;assert_5;assert_8;assert_9": {},
        "satisfied_assert_4;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_8;assert_9": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7;assert_10, violated_assert_2;assert_3;assert_5;assert_8;assert_9": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7;assert_10, violated_assert_1;assert_3;assert_5;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7;assert_10, violated_assert_0;assert_3;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_10, violated_assert_3;assert_5;assert_8;assert_9": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7;assert_10, violated_assert_1;assert_2;assert_5;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7;assert_10, violated_assert_0;assert_2;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_10, violated_assert_2;assert_5;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_10, violated_assert_1;assert_5;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_10, violated_assert_0;assert_5;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_10, violated_assert_5;assert_8;assert_9": {},
        "satisfied_assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8;assert_9": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_8;assert_9": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7;assert_10, violated_assert_2;assert_3;assert_4;assert_8;assert_9": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7;assert_10, violated_assert_1;assert_3;assert_4;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_3;assert_4;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_10, violated_assert_3;assert_4;assert_8;assert_9": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7;assert_10, violated_assert_1;assert_2;assert_4;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_2;assert_4;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_10, violated_assert_2;assert_4;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_4;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_10, violated_assert_1;assert_4;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_4;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_10, violated_assert_4;assert_8;assert_9": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_8;assert_9": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_1;assert_2;assert_3;assert_8;assert_9": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_2;assert_3;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_2;assert_3;assert_8;assert_9": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_3;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_1;assert_3;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_3;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_3;assert_8;assert_9": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_2;assert_8;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_1;assert_2;assert_8;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_2;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_2;assert_8;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_1;assert_8;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_1;assert_8;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_0;assert_8;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_10, violated_assert_8;assert_9": {},
        "satisfied_assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_8;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_2;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_8;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_8;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_8;assert_10, violated_assert_3;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_3;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_3;assert_8;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_3;assert_8;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_8;assert_10, violated_assert_2;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_2;assert_3;assert_8;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_8;assert_10, violated_assert_1;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_8;assert_10, violated_assert_0;assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_8;assert_10, violated_assert_4;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_4;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_4;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_4;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_8;assert_10, violated_assert_2;assert_3;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_2;assert_4;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_8;assert_10, violated_assert_1;assert_3;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_8;assert_10, violated_assert_0;assert_3;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_8;assert_10, violated_assert_3;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_3;assert_4;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_8;assert_10, violated_assert_1;assert_2;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_8;assert_10, violated_assert_0;assert_2;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_8;assert_10, violated_assert_2;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_8;assert_10, violated_assert_0;assert_1;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_8;assert_10, violated_assert_1;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_8;assert_10, violated_assert_0;assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8;assert_10, violated_assert_5;assert_6;assert_7;assert_9": {},
        "satisfied_assert_5;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_5;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_5;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_5;assert_8;assert_10, violated_assert_2;assert_3;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_2;assert_5;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_5;assert_8;assert_10, violated_assert_1;assert_3;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_5;assert_8;assert_10, violated_assert_0;assert_3;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_8;assert_10, violated_assert_3;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_3;assert_5;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_3;assert_5;assert_8;assert_10, violated_assert_1;assert_2;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_3;assert_5;assert_8;assert_10, violated_assert_0;assert_2;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_8;assert_10, violated_assert_2;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_2;assert_3;assert_5;assert_8;assert_10, violated_assert_0;assert_1;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_8;assert_10, violated_assert_1;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_8;assert_10, violated_assert_0;assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8;assert_10, violated_assert_4;assert_6;assert_7;assert_9": {},
        "satisfied_assert_4;assert_5;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_4;assert_5;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_4;assert_5;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_8;assert_10, violated_assert_2;assert_3;assert_6;assert_7;assert_9": {},
        "satisfied_assert_2;assert_4;assert_5;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_8;assert_10, violated_assert_1;assert_3;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_8;assert_10, violated_assert_0;assert_3;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8;assert_10, violated_assert_3;assert_6;assert_7;assert_9": {},
        "satisfied_assert_3;assert_4;assert_5;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_8;assert_10, violated_assert_1;assert_2;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_8;assert_10, violated_assert_0;assert_2;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8;assert_10, violated_assert_2;assert_6;assert_7;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_8;assert_10, violated_assert_0;assert_1;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8;assert_10, violated_assert_1;assert_6;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_10, violated_assert_0;assert_6;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_10, violated_assert_6;assert_7;assert_9": {},
        "satisfied_assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_6;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_1;assert_6;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_6;assert_8;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_2;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_6;assert_8;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_6;assert_8;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_8;assert_10, violated_assert_3;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_3;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_3;assert_6;assert_8;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_1;assert_3;assert_6;assert_8;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_8;assert_10, violated_assert_2;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_2;assert_3;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_8;assert_10, violated_assert_1;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_8;assert_10, violated_assert_0;assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8;assert_10, violated_assert_4;assert_5;assert_7;assert_9": {},
        "satisfied_assert_4;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_4;assert_6;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_7;assert_9": {},
        "satisfied_assert_1;assert_4;assert_6;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_8;assert_10, violated_assert_2;assert_3;assert_5;assert_7;assert_9": {},
        "satisfied_assert_2;assert_4;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_8;assert_10, violated_assert_1;assert_3;assert_5;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_8;assert_10, violated_assert_0;assert_3;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8;assert_10, violated_assert_3;assert_5;assert_7;assert_9": {},
        "satisfied_assert_3;assert_4;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_8;assert_10, violated_assert_1;assert_2;assert_5;assert_7;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_8;assert_10, violated_assert_0;assert_2;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8;assert_10, violated_assert_2;assert_5;assert_7;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8;assert_10, violated_assert_1;assert_5;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_10, violated_assert_0;assert_5;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_10, violated_assert_5;assert_7;assert_9": {},
        "satisfied_assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_9": {},
        "satisfied_assert_0;assert_5;assert_6;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_7;assert_9": {},
        "satisfied_assert_1;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_8;assert_10, violated_assert_2;assert_3;assert_4;assert_7;assert_9": {},
        "satisfied_assert_2;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_8;assert_10, violated_assert_1;assert_3;assert_4;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_3;assert_4;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8;assert_10, violated_assert_3;assert_4;assert_7;assert_9": {},
        "satisfied_assert_3;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_7;assert_9": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_8;assert_10, violated_assert_1;assert_2;assert_4;assert_7;assert_9": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_2;assert_4;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8;assert_10, violated_assert_2;assert_4;assert_7;assert_9": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_4;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8;assert_10, violated_assert_1;assert_4;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_4;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_10, violated_assert_4;assert_7;assert_9": {},
        "satisfied_assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_7;assert_9": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_7;assert_9": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_2;assert_3;assert_7;assert_9": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_1;assert_3;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_3;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_3;assert_7;assert_9": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_7;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_1;assert_2;assert_7;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_2;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_2;assert_7;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_1;assert_7;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_1;assert_7;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_0;assert_7;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_10, violated_assert_7;assert_9": {},
        "satisfied_assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_1;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_7;assert_8;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_2;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_2;assert_7;assert_8;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_1;assert_2;assert_7;assert_8;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7;assert_8;assert_10, violated_assert_3;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_3;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_3;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_1;assert_3;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7;assert_8;assert_10, violated_assert_2;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_2;assert_3;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7;assert_8;assert_10, violated_assert_1;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7;assert_8;assert_10, violated_assert_0;assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8;assert_10, violated_assert_4;assert_5;assert_6;assert_9": {},
        "satisfied_assert_4;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_4;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_9": {},
        "satisfied_assert_1;assert_4;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7;assert_8;assert_10, violated_assert_2;assert_3;assert_5;assert_6;assert_9": {},
        "satisfied_assert_2;assert_4;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7;assert_8;assert_10, violated_assert_1;assert_3;assert_5;assert_6;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7;assert_8;assert_10, violated_assert_0;assert_3;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8;assert_10, violated_assert_3;assert_5;assert_6;assert_9": {},
        "satisfied_assert_3;assert_4;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_5;assert_6;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8;assert_10, violated_assert_2;assert_5;assert_6;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8;assert_10, violated_assert_1;assert_5;assert_6;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_10, violated_assert_0;assert_5;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_10, violated_assert_5;assert_6;assert_9": {},
        "satisfied_assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_9": {},
        "satisfied_assert_0;assert_5;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_9": {},
        "satisfied_assert_1;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7;assert_8;assert_10, violated_assert_2;assert_3;assert_4;assert_6;assert_9": {},
        "satisfied_assert_2;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_9": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7;assert_8;assert_10, violated_assert_1;assert_3;assert_4;assert_6;assert_9": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_3;assert_4;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8;assert_10, violated_assert_3;assert_4;assert_6;assert_9": {},
        "satisfied_assert_3;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_9": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_4;assert_6;assert_9": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_4;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8;assert_10, violated_assert_2;assert_4;assert_6;assert_9": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_4;assert_6;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8;assert_10, violated_assert_1;assert_4;assert_6;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_4;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_10, violated_assert_4;assert_6;assert_9": {},
        "satisfied_assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_9": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_6;assert_9": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_2;assert_3;assert_6;assert_9": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_6;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_1;assert_3;assert_6;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_3;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_3;assert_6;assert_9": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_6;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_6;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_2;assert_6;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_6;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_1;assert_6;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_0;assert_6;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_10, violated_assert_6;assert_9": {},
        "satisfied_assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_9": {},
        "satisfied_assert_0;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_9": {},
        "satisfied_assert_1;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_9": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7;assert_8;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_9": {},
        "satisfied_assert_2;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_9": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_9": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8;assert_10, violated_assert_3;assert_4;assert_5;assert_9": {},
        "satisfied_assert_3;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_9": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_9": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8;assert_10, violated_assert_2;assert_4;assert_5;assert_9": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_4;assert_5;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_4;assert_5;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_10, violated_assert_4;assert_5;assert_9": {},
        "satisfied_assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_9": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_9": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_2;assert_3;assert_5;assert_9": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_3;assert_5;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_3;assert_5;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_3;assert_5;assert_9": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_5;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_5;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_2;assert_5;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_5;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_5;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_5;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_10, violated_assert_5;assert_9": {},
        "satisfied_assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_9": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_9": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_9": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_2;assert_3;assert_4;assert_9": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_9": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_3;assert_4;assert_9": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_3;assert_4;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_3;assert_4;assert_9": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_9": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_4;assert_9": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_4;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_2;assert_4;assert_9": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_4;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_4;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_4;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_4;assert_9": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_9": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_3;assert_9": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_3;assert_9": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_2;assert_3;assert_9": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_3;assert_9": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_3;assert_9": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_3;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_3;assert_9": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_2;assert_9": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_2;assert_9": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_2;assert_9": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_2;assert_9": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_1;assert_9": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_1;assert_9": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_0;assert_9": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_10, violated_assert_9": {},
        "satisfied_assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_9;assert_10, violated_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_3;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_9;assert_10, violated_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_9;assert_10, violated_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_9;assert_10, violated_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_9;assert_10, violated_assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_4;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_4;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_4;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_9;assert_10, violated_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_4;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_9;assert_10, violated_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_9;assert_10, violated_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_9;assert_10, violated_assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_3;assert_4;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_9;assert_10, violated_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_9;assert_10, violated_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_9;assert_10, violated_assert_2;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_9;assert_10, violated_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_9;assert_10, violated_assert_1;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_9;assert_10, violated_assert_0;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_9;assert_10, violated_assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_5;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_5;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_5;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_5;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_5;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_5;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_5;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_9;assert_10, violated_assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_3;assert_5;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_5;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_5;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_9;assert_10, violated_assert_2;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_5;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_9;assert_10, violated_assert_1;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_9;assert_10, violated_assert_0;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_9;assert_10, violated_assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_4;assert_5;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_4;assert_5;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_4;assert_5;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_9;assert_10, violated_assert_2;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_4;assert_5;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_9;assert_10, violated_assert_1;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_9;assert_10, violated_assert_0;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_9;assert_10, violated_assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_3;assert_4;assert_5;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_9;assert_10, violated_assert_1;assert_2;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_9;assert_10, violated_assert_0;assert_2;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_9;assert_10, violated_assert_2;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_9;assert_10, violated_assert_0;assert_1;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_9;assert_10, violated_assert_1;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_9;assert_10, violated_assert_0;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_9;assert_10, violated_assert_6;assert_7;assert_8": {},
        "satisfied_assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_6;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_6;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_6;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_2;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_6;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_6;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_9;assert_10, violated_assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_3;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_6;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_6;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_9;assert_10, violated_assert_2;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_9;assert_10, violated_assert_1;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_9;assert_10, violated_assert_0;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_9;assert_10, violated_assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_4;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_4;assert_6;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_4;assert_6;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_9;assert_10, violated_assert_2;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_2;assert_4;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_9;assert_10, violated_assert_1;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_9;assert_10, violated_assert_0;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_9;assert_10, violated_assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_3;assert_4;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_9;assert_10, violated_assert_1;assert_2;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_9;assert_10, violated_assert_0;assert_2;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_9;assert_10, violated_assert_2;assert_5;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_9;assert_10, violated_assert_1;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_9;assert_10, violated_assert_0;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_9;assert_10, violated_assert_5;assert_7;assert_8": {},
        "satisfied_assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_5;assert_6;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_1;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_2;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_9;assert_10, violated_assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_3;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_9;assert_10, violated_assert_2;assert_4;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_9;assert_10, violated_assert_1;assert_4;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_9;assert_10, violated_assert_4;assert_7;assert_8": {},
        "satisfied_assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_7;assert_8": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_2;assert_3;assert_7;assert_8": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_1;assert_3;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_3;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_3;assert_7;assert_8": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_1;assert_2;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_2;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_2;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_1;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_1;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_0;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_9;assert_10, violated_assert_7;assert_8": {},
        "satisfied_assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_7;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_2;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_7;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_7;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7;assert_9;assert_10, violated_assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_3;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_3;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_3;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7;assert_9;assert_10, violated_assert_2;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_2;assert_3;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7;assert_9;assert_10, violated_assert_1;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7;assert_9;assert_10, violated_assert_0;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7;assert_9;assert_10, violated_assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_4;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_4;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_4;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7;assert_9;assert_10, violated_assert_2;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_2;assert_4;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7;assert_9;assert_10, violated_assert_1;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7;assert_9;assert_10, violated_assert_0;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7;assert_9;assert_10, violated_assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_3;assert_4;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7;assert_9;assert_10, violated_assert_2;assert_5;assert_6;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7;assert_9;assert_10, violated_assert_1;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7;assert_9;assert_10, violated_assert_0;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_9;assert_10, violated_assert_5;assert_6;assert_8": {},
        "satisfied_assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_5;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_1;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_2;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7;assert_9;assert_10, violated_assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_3;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_6;assert_8": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7;assert_9;assert_10, violated_assert_2;assert_4;assert_6;assert_8": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7;assert_9;assert_10, violated_assert_1;assert_4;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_9;assert_10, violated_assert_4;assert_6;assert_8": {},
        "satisfied_assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_6;assert_8": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_2;assert_3;assert_6;assert_8": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_1;assert_3;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_3;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_3;assert_6;assert_8": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_6;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_6;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_2;assert_6;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_1;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_0;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_9;assert_10, violated_assert_6;assert_8": {},
        "satisfied_assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_1;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_2;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7;assert_9;assert_10, violated_assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_3;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_8": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7;assert_9;assert_10, violated_assert_2;assert_4;assert_5;assert_8": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_4;assert_5;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_9;assert_10, violated_assert_4;assert_5;assert_8": {},
        "satisfied_assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_8": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_2;assert_3;assert_5;assert_8": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_3;assert_5;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_3;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_3;assert_5;assert_8": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_5;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_2;assert_5;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_5;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_5;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_9;assert_10, violated_assert_5;assert_8": {},
        "satisfied_assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_8": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_8": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_8": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_8": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_8": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_3;assert_4;assert_8": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_8": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_8": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_2;assert_4;assert_8": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_4;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_4;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_4;assert_8": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_8": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_8": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_2;assert_3;assert_8": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_3;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_3;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_3;assert_8": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_2;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_2;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_2;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_1;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_1;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_0;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_9;assert_10, violated_assert_8": {},
        "satisfied_assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_8;assert_9;assert_10, violated_assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_3;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_8;assert_9;assert_10, violated_assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_8;assert_9;assert_10, violated_assert_1;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_8;assert_9;assert_10, violated_assert_0;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_8;assert_9;assert_10, violated_assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_4;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_4;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_4;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_4;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_8;assert_9;assert_10, violated_assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_3;assert_4;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_8;assert_9;assert_10, violated_assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_8;assert_9;assert_10, violated_assert_1;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_8;assert_9;assert_10, violated_assert_0;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8;assert_9;assert_10, violated_assert_5;assert_6;assert_7": {},
        "satisfied_assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_5;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_5;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_2;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_5;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_8;assert_9;assert_10, violated_assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_3;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_5;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_8;assert_9;assert_10, violated_assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_8;assert_9;assert_10, violated_assert_1;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8;assert_9;assert_10, violated_assert_4;assert_6;assert_7": {},
        "satisfied_assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_1;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_2;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_3;assert_6;assert_7": {},
        "satisfied_assert_3;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_2;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_1;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_0;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8;assert_9;assert_10, violated_assert_6;assert_7": {},
        "satisfied_assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_6;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_2;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_8;assert_9;assert_10, violated_assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_3;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_3;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_3;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_8;assert_9;assert_10, violated_assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_2;assert_3;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8;assert_9;assert_10, violated_assert_4;assert_5;assert_7": {},
        "satisfied_assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_1;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_2;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_3;assert_5;assert_7": {},
        "satisfied_assert_3;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_5;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_2;assert_5;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8;assert_9;assert_10, violated_assert_5;assert_7": {},
        "satisfied_assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_1;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_2;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_7": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_3;assert_4;assert_7": {},
        "satisfied_assert_3;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_7": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_7": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_2;assert_4;assert_7": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_4;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_4;assert_7": {},
        "satisfied_assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_7": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_7": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_7": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_3;assert_7": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_2;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_1;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_0;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8;assert_9;assert_10, violated_assert_7": {},
        "satisfied_assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7;assert_8;assert_9;assert_10, violated_assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_3;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8;assert_9;assert_10, violated_assert_4;assert_5;assert_6": {},
        "satisfied_assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_2;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_3;assert_5;assert_6": {},
        "satisfied_assert_3;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8;assert_9;assert_10, violated_assert_5;assert_6": {},
        "satisfied_assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_2;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_3;assert_4;assert_6": {},
        "satisfied_assert_3;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_4;assert_6": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_4;assert_6": {},
        "satisfied_assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_6": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_3;assert_6": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8;assert_9;assert_10, violated_assert_6": {},
        "satisfied_assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_4;assert_5": {},
        "satisfied_assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_5": {},
        "satisfied_assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_4": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8;assert_9;assert_10, violated_": {}
    },
    "Mbpp/260": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/260": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef newman_prime(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef newman_prime(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef newman_prime(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef newman_prime(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/260": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef newman_prime(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef newman_prime(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef newman_prime(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef newman_prime(n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/261": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/262": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/262": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef split_two_parts(list1, L):\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:L], list1[L:]\n",
                    "input": {
                        "list1": [],
                        "L": 8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef split_two_parts(list1, L):\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:L], list1[L:]\n",
                    "input": {
                        "list1": [],
                        "L": 19306
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef split_two_parts(list1, L):\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:L], list1[L:]\n",
                    "input": {
                        "list1": [],
                        "L": 20448
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef split_two_parts(list1, L):\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:L], list1[L:]\n",
                    "input": {
                        "list1": [],
                        "L": 29393
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/264": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/264": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dog_age(h_age):\n\tassert isinstance(h_age, int), \"invalid inputs\" # $_CONTRACT_$\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age\n",
                    "input": {
                        "h_age": [
                            4.0,
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dog_age(h_age):\n\tassert isinstance(h_age, int), \"invalid inputs\" # $_CONTRACT_$\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age\n",
                    "input": {
                        "h_age": [
                            6.0,
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dog_age(h_age):\n\tassert isinstance(h_age, int), \"invalid inputs\" # $_CONTRACT_$\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age\n",
                    "input": {
                        "h_age": [
                            9.0,
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dog_age(h_age):\n\tassert isinstance(h_age, int), \"invalid inputs\" # $_CONTRACT_$\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age\n",
                    "input": {
                        "h_age": [
                            11.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/265": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/266": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/266": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef lateralsurface_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4 * l * l\n",
                    "input": {
                        "l": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef lateralsurface_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4 * l * l\n",
                    "input": {
                        "l": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef lateralsurface_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4 * l * l\n",
                    "input": {
                        "l": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef lateralsurface_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 4 * l * l\n",
                    "input": {
                        "l": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/266": []
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/267": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/267": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef square_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n * (4 * n * n - 1) / 3\n",
                    "input": {
                        "n": [
                            4.0,
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef square_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n * (4 * n * n - 1) / 3\n",
                    "input": {
                        "n": [
                            6.0,
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef square_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n * (4 * n * n - 1) / 3\n",
                    "input": {
                        "n": [
                            8.0,
                            9.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef square_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n * (4 * n * n - 1) / 3\n",
                    "input": {
                        "n": [
                            10.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/268": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/268": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_star_num(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_star_num(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_star_num(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_star_num(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/268": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_star_num(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n",
                    "input": {
                        "n": -21238
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_star_num(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n",
                    "input": {
                        "n": -33035
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_star_num(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n",
                    "input": {
                        "n": -43485
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_star_num(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 6 * n * (n - 1) + 1 \n",
                    "input": {
                        "n": -71585
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/269": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/269": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef ascii_value(k):\n  assert len(k)==1, \"invalid inputs\" # $_CONTRACT_$\n  return ord(k)\n",
                    "input": {
                        "k": "AB"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef ascii_value(k):\n  assert len(k)==1, \"invalid inputs\" # $_CONTRACT_$\n  return ord(k)\n",
                    "input": {
                        "k": "CD"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef ascii_value(k):\n  assert len(k)==1, \"invalid inputs\" # $_CONTRACT_$\n  return ord(k)\n",
                    "input": {
                        "k": "EF"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef ascii_value(k):\n  assert len(k)==1, \"invalid inputs\" # $_CONTRACT_$\n  return ord(k)\n",
                    "input": {
                        "k": "GH"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/270": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/270": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_even_and_even_index(arr):\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(x for x in arr[::2] if x % 2 == 0)\n",
                    "input": {
                        "arr": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_even_and_even_index(arr):\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(x for x in arr[::2] if x % 2 == 0)\n",
                    "input": {
                        "arr": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_even_and_even_index(arr):\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(x for x in arr[::2] if x % 2 == 0)\n",
                    "input": {
                        "arr": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_even_and_even_index(arr):\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(x for x in arr[::2] if x % 2 == 0)\n",
                    "input": {
                        "arr": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/271": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/271": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef even_Power_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n",
                    "input": {
                        "n": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef even_Power_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n",
                    "input": {
                        "n": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef even_Power_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n",
                    "input": {
                        "n": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef even_Power_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n",
                    "input": {
                        "n": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/272": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/272": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rear_extract(test_list):\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return [x[-1] for x in test_list]\n",
                    "input": {
                        "test_list": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rear_extract(test_list):\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return [x[-1] for x in test_list]\n",
                    "input": {
                        "test_list": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rear_extract(test_list):\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return [x[-1] for x in test_list]\n",
                    "input": {
                        "test_list": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rear_extract(test_list):\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return [x[-1] for x in test_list]\n",
                    "input": {
                        "test_list": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/273": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/274": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/274": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/274": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n",
                    "input": {
                        "n": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n",
                    "input": {
                        "n": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n",
                    "input": {
                        "n": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n",
                    "input": {
                        "n": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/276": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
            "Mbpp/276": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_cylinder(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.pi * r * r * h\n",
                    "input": {
                        "r": [
                            12.0,
                            13.0
                        ],
                        "h": [
                            11.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef volume_cylinder(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.pi * r * r * h\n",
                    "input": {
                        "r": [
                            12.0,
                            13.0
                        ],
                        "h": [
                            11.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_cylinder(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.pi * r * r * h\n",
                    "input": {
                        "r": [
                            15.0,
                            16.0
                        ],
                        "h": [
                            14.0,
                            17.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef volume_cylinder(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.pi * r * r * h\n",
                    "input": {
                        "r": [
                            15.0,
                            16.0
                        ],
                        "h": [
                            14.0,
                            17.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef volume_cylinder(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.pi * r * r * h\n",
                    "input": {
                        "r": [
                            19.0,
                            20.0
                        ],
                        "h": [
                            21.0,
                            18.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef volume_cylinder(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.pi * r * r * h\n",
                    "input": {
                        "r": [
                            19.0,
                            20.0
                        ],
                        "h": [
                            21.0,
                            18.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/277": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/277": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 4.0,
                        "dict1": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 6.0,
                        "dict1": [
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "dict1": [
                            8.0
                        ],
                        "n": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 11.0,
                        "dict1": [
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {
            "Mbpp/277": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 3.0,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 3.0,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 4.0,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 4.0,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 5.0,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 5.0,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 6.0,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 6.0,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/277": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 2.0,
                        "dict1": [
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 3.0,
                        "dict1": [
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 4.0,
                        "dict1": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 5.0,
                        "dict1": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "dict1": [
                            6
                        ],
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/277": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {
            "Mbpp/277": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 2,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 3,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 4,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 5,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_filter(dict1, n):\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    return {key : value for (key, value) in dict1.items() if value >=n}\n",
                    "input": {
                        "n": 6,
                        "dict1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/278": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/279": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/279": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_num_decagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_num_decagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_num_decagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_num_decagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/279": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_num_decagonal(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n",
                    "input": {
                        "n": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_num_decagonal(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n",
                    "input": {
                        "n": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_num_decagonal(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n",
                    "input": {
                        "n": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef is_num_decagonal(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn 4 * n * n - 3 * n \n",
                    "input": {
                        "n": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/280": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/281": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/282": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5;assert_6": {
            "Mbpp/282": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!1!",
                            5.0
                        ],
                        "nums1": [
                            false
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!1!",
                            5.0
                        ],
                        "nums1": [
                            false
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            true
                        ],
                        "nums2": [
                            "!1!",
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            true
                        ],
                        "nums2": [
                            "!1!",
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5;assert_6": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5;assert_6": {
            "Mbpp/282": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!0!"
                        ],
                        "nums1": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!0!"
                        ],
                        "nums1": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "nums1": [
                            "1"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "nums1": [
                            "1"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!1!"
                        ],
                        "nums1": [
                            "1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!1!"
                        ],
                        "nums1": [
                            "1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4;assert_6": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4;assert_6": {
            "Mbpp/282": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            ""
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            ""
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            ""
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4;assert_6": {
            "Mbpp/282": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!0!"
                        ],
                        "nums1": [
                            8,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "!0!"
                        ],
                        "nums1": [
                            8,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            9,
                            3.0
                        ],
                        "nums2": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            9,
                            3.0
                        ],
                        "nums2": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "nums1": [
                            10,
                            11
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "nums1": [
                            10,
                            11
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "nums1": [
                            12,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "nums1": [
                            12,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "A"
                        ],
                        "nums1": [
                            14,
                            15
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "A"
                        ],
                        "nums1": [
                            14,
                            15
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3;assert_6": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3;assert_6": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_6": {
            "Mbpp/282": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            6
                        ],
                        "nums2": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            7
                        ],
                        "nums2": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "nums1": [
                            8
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "nums1": [
                            9
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_6",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            "A"
                        ],
                        "nums1": [
                            12
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_6, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_6, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_6, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6, violated_assert_3;assert_4;assert_5": {
            "Mbpp/282": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3;assert_6, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3;assert_6, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3;assert_6, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6, violated_assert_4;assert_5": {
            "Mbpp/282": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            8
                        ],
                        "nums1": [
                            "!0!",
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            8
                        ],
                        "nums1": [
                            "!0!",
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            9
                        ],
                        "nums1": [
                            "0",
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            9
                        ],
                        "nums1": [
                            "0",
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            "!0!",
                            "0!"
                        ],
                        "nums2": [
                            10
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            "!0!",
                            "0!"
                        ],
                        "nums2": [
                            10
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            11
                        ],
                        "nums1": [
                            "1",
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            11
                        ],
                        "nums1": [
                            "1",
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            "1!",
                            "!0!"
                        ],
                        "nums2": [
                            12
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            "1!",
                            "!0!"
                        ],
                        "nums2": [
                            12
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4;assert_6, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4;assert_6, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4;assert_6, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_5": {
            "Mbpp/282": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            "!0!"
                        ],
                        "nums2": [
                            6
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            "!"
                        ],
                        "nums2": [
                            7
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            8
                        ],
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            9
                        ],
                        "nums1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            12
                        ],
                        "nums1": [
                            "A"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6, violated_assert_3;assert_4": {
            "Mbpp/282": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            5
                        ],
                        "nums2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            5
                        ],
                        "nums2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6, violated_assert_2;assert_4": {
            "Mbpp/282": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [],
                        "nums2": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [],
                        "nums2": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            2.0
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            2.0
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            3.0
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            3.0
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            4.0
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            4.0
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            5.0
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            5.0
                        ],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_4": {
            "Mbpp/282": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            9
                        ],
                        "nums2": [
                            8,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            3.0,
                            10
                        ],
                        "nums1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            6.0,
                            11
                        ],
                        "nums1": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums1": [
                            7.0
                        ],
                        "nums2": [
                            8.0,
                            12
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [
                            10.0,
                            13
                        ],
                        "nums1": [
                            9.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6, violated_assert_2;assert_3": {
            "Mbpp/282": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef sub_list(nums1,nums2):\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
                    "input": {
                        "nums2": [],
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_": {}
    },
    "Mbpp/283": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/284": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/285": {
        "satisfied_, violated_assert_0": {
            "Mbpp/285": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_two_three(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_two_three(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_two_three(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_two_three(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/286": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/287": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/287": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef square_Sum(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return 2 * n * (n + 1) * (2 * n + 1) /3\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef square_Sum(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return 2 * n * (n + 1) * (2 * n + 1) /3\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef square_Sum(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return 2 * n * (n + 1) * (2 * n + 1) /3\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef square_Sum(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return 2 * n * (n + 1) * (2 * n + 1) /3\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/290": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/290": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_length(list1):\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n",
                    "input": {
                        "list1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_length(list1):\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n",
                    "input": {
                        "list1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_length(list1):\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n",
                    "input": {
                        "list1": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_length(list1):\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n",
                    "input": {
                        "list1": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/292": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {
            "Mbpp/292": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find(n,m):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n // m \n",
                    "input": {
                        "n": [],
                        "m": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find(n,m):\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n // m \n",
                    "input": {
                        "n": [],
                        "m": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find(n,m):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n // m \n",
                    "input": {
                        "m": [
                            4.0
                        ],
                        "n": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find(n,m):\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n // m \n",
                    "input": {
                        "m": [
                            4.0
                        ],
                        "n": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find(n,m):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n // m \n",
                    "input": {
                        "n": [],
                        "m": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find(n,m):\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return n // m \n",
                    "input": {
                        "n": [],
                        "m": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/293": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/293": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef otherside_rightangle(w,h):\n  assert isinstance(w, (int, float)) and w > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(w * w + h * h)\n",
                    "input": {
                        "w": "1",
                        "h": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef otherside_rightangle(w,h):\n  assert isinstance(h, (int, float)) and h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(w * w + h * h)\n",
                    "input": {
                        "w": "1",
                        "h": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef otherside_rightangle(w,h):\n  assert isinstance(w, (int, float)) and w > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(w * w + h * h)\n",
                    "input": {
                        "w": false,
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef otherside_rightangle(w,h):\n  assert isinstance(h, (int, float)) and h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(w * w + h * h)\n",
                    "input": {
                        "w": false,
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef otherside_rightangle(w,h):\n  assert isinstance(w, (int, float)) and w > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(w * w + h * h)\n",
                    "input": {
                        "w": [],
                        "h": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef otherside_rightangle(w,h):\n  assert isinstance(h, (int, float)) and h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(w * w + h * h)\n",
                    "input": {
                        "w": [],
                        "h": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/294": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/294": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_val(listval):\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val\n",
                    "input": {
                        "listval": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_val(listval):\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val\n",
                    "input": {
                        "listval": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_val(listval):\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val\n",
                    "input": {
                        "listval": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_val(listval):\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val\n",
                    "input": {
                        "listval": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/294": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/296": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/296": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef get_Inv_Count(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n",
                    "input": {
                        "arr": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef get_Inv_Count(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n",
                    "input": {
                        "arr": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef get_Inv_Count(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n",
                    "input": {
                        "arr": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef get_Inv_Count(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n",
                    "input": {
                        "arr": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/296": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/297": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/299": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
            "Mbpp/299": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/299": []
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
            "Mbpp/299": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            3.0,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            5.0,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            7.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            9.0,
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            11.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/299": []
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
            "Mbpp/299": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            3.0,
                            4.0,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            6.0,
                            5.0,
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            9.0,
                            10.0,
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            13.0,
                            12.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n",
                    "input": {
                        "stdata": [
                            15.0,
                            14.0,
                            16.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/300": {
        "satisfied_, violated_assert_0": {
            "Mbpp/300": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_binary_seq(n):\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_binary_seq(n):\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_binary_seq(n):\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_binary_seq(n):\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/301": {
        "satisfied_, violated_assert_0": {
            "Mbpp/301": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n    return dict_depth_aux(d)\n",
                    "input": {
                        "d": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n    return dict_depth_aux(d)\n",
                    "input": {
                        "d": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n    return dict_depth_aux(d)\n",
                    "input": {
                        "d": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n    return dict_depth_aux(d)\n",
                    "input": {
                        "d": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/305": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/305": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef start_withp(words):\n    assert all(isinstance(x, str) for x in words), \"invalid inputs\" # $_CONTRACT_$\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n",
                    "input": {
                        "words": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef start_withp(words):\n    assert all(isinstance(x, str) for x in words), \"invalid inputs\" # $_CONTRACT_$\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n",
                    "input": {
                        "words": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef start_withp(words):\n    assert all(isinstance(x, str) for x in words), \"invalid inputs\" # $_CONTRACT_$\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n",
                    "input": {
                        "words": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef start_withp(words):\n    assert all(isinstance(x, str) for x in words), \"invalid inputs\" # $_CONTRACT_$\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n",
                    "input": {
                        "words": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/306": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5;assert_6;assert_7": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4;assert_6;assert_7": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3;assert_6;assert_7": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_6;assert_7": {},
        "satisfied_assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_6, violated_assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_2;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_6, violated_assert_1;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_6, violated_assert_0;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6, violated_assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_3;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_3;assert_6, violated_assert_1;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_3;assert_6, violated_assert_0;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6, violated_assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_2;assert_3;assert_6, violated_assert_0;assert_1;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6, violated_assert_1;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6, violated_assert_0;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6, violated_assert_4;assert_5;assert_7": {},
        "satisfied_assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_4;assert_6, violated_assert_1;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_1;assert_4;assert_6, violated_assert_0;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6, violated_assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_2;assert_4;assert_6, violated_assert_0;assert_1;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6, violated_assert_1;assert_3;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6, violated_assert_0;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6, violated_assert_3;assert_5;assert_7": {},
        "satisfied_assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_5;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6, violated_assert_1;assert_2;assert_5;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6, violated_assert_0;assert_2;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6, violated_assert_2;assert_5;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6, violated_assert_1;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_5;assert_7": {},
        "satisfied_assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_1;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6, violated_assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_2;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6, violated_assert_1;assert_3;assert_4;assert_7": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6, violated_assert_0;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6, violated_assert_3;assert_4;assert_7": {},
        "satisfied_assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_7": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6, violated_assert_1;assert_2;assert_4;assert_7": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6, violated_assert_0;assert_2;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6, violated_assert_2;assert_4;assert_7": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_4;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6, violated_assert_1;assert_4;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_4;assert_7": {},
        "satisfied_assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_7": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_7": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6, violated_assert_2;assert_3;assert_7": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6, violated_assert_1;assert_3;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_3;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_3;assert_7": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_2;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_7": {},
        "satisfied_assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_7, violated_assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_7, violated_assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_7, violated_assert_0;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7, violated_assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_3;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_7, violated_assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_7, violated_assert_0;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7, violated_assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_7, violated_assert_0;assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7, violated_assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7, violated_assert_0;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7, violated_assert_4;assert_5;assert_6": {},
        "satisfied_assert_4;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_4;assert_7, violated_assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_4;assert_7, violated_assert_0;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7, violated_assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_2;assert_4;assert_7, violated_assert_0;assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7, violated_assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7, violated_assert_0;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7, violated_assert_3;assert_5;assert_6": {},
        "satisfied_assert_3;assert_4;assert_7, violated_assert_0;assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7, violated_assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7, violated_assert_0;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7, violated_assert_2;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7, violated_assert_0;assert_1;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7, violated_assert_1;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7, violated_assert_0;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7, violated_assert_5;assert_6": {},
        "satisfied_assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_5;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_5;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7, violated_assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_2;assert_5;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7, violated_assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7, violated_assert_0;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7, violated_assert_3;assert_4;assert_6": {},
        "satisfied_assert_3;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7, violated_assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7, violated_assert_0;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7, violated_assert_2;assert_4;assert_6": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7, violated_assert_0;assert_1;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7, violated_assert_1;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7, violated_assert_0;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7, violated_assert_4;assert_6": {},
        "satisfied_assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7, violated_assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7, violated_assert_0;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7, violated_assert_2;assert_3;assert_6": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_3;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7, violated_assert_1;assert_3;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7, violated_assert_0;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7, violated_assert_3;assert_6": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7, violated_assert_1;assert_2;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_2;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7, violated_assert_2;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_1;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_6": {},
        "satisfied_assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7, violated_assert_4;assert_5": {},
        "satisfied_assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_5": {},
        "satisfied_assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_4": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_": {}
    },
    "Mbpp/308": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5": {
            "Mbpp/308": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            false
                        ],
                        "N": 2,
                        "nums1": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            false
                        ],
                        "N": 2,
                        "nums1": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "N": 2,
                        "nums2": [
                            true
                        ],
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "N": 2,
                        "nums2": [
                            true
                        ],
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5": {
            "Mbpp/308": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!0!"
                        ],
                        "nums1": [],
                        "N": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!0!"
                        ],
                        "nums1": [],
                        "N": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "N": -1,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "N": -1,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "N": -1,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "N": -1,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "N": -2998,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "0!"
                        ],
                        "N": -2998,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            ""
                        ],
                        "N": -28904,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            ""
                        ],
                        "N": -28904,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5": {
            "Mbpp/308": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "!0!"
                        ],
                        "N": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "!0!"
                        ],
                        "N": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 2,
                        "nums1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 2,
                        "nums1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 2,
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 2,
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums1": [
                            "0!"
                        ],
                        "nums2": [],
                        "N": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums1": [
                            "0!"
                        ],
                        "nums2": [],
                        "N": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 4,
                        "nums1": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 4,
                        "nums1": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5": {
            "Mbpp/308": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 1,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 2,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": -1,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": -32279,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_5",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": -49186,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3": {
            "Mbpp/308": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!1!"
                        ],
                        "N": 0,
                        "nums1": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!1!"
                        ],
                        "N": 0,
                        "nums1": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "N": 1,
                        "nums1": [
                            "1"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "N": 1,
                        "nums1": [
                            "1"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums1": [
                            "!1!"
                        ],
                        "nums2": [
                            "1!"
                        ],
                        "N": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums1": [
                            "!1!"
                        ],
                        "nums2": [
                            "1!"
                        ],
                        "N": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "N": 1,
                        "nums1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "N": 1,
                        "nums1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3": {
            "Mbpp/308": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!0!"
                        ],
                        "nums1": [],
                        "N": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "!"
                        ],
                        "N": 0,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            "0"
                        ],
                        "N": 0,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums1": [],
                        "nums2": [
                            "0!"
                        ],
                        "N": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [
                            ""
                        ],
                        "N": 0,
                        "nums1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1": {
            "Mbpp/308": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "nums1": [
                            "!0!"
                        ],
                        "N": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 0,
                        "nums1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 0,
                        "nums1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums1": [
                            "0!"
                        ],
                        "nums2": [],
                        "N": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef large_product(nums1, nums2, N):\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n",
                    "input": {
                        "nums2": [],
                        "N": 0,
                        "nums1": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_": {}
    },
    "Mbpp/309": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/309": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef maximum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return max(a, b)\n",
                    "input": {
                        "b": "0!",
                        "a": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef maximum(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return max(a, b)\n",
                    "input": {
                        "b": "0!",
                        "a": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef maximum(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return max(a, b)\n",
                    "input": {
                        "b": "!0!",
                        "a": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef maximum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return max(a, b)\n",
                    "input": {
                        "b": "!",
                        "a": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef maximum(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return max(a, b)\n",
                    "input": {
                        "b": "!",
                        "a": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/310": {
        "satisfied_, violated_assert_0": {
            "Mbpp/310": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef string_to_tuple(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef string_to_tuple(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef string_to_tuple(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef string_to_tuple(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/311": {
        "satisfied_, violated_assert_0": {
            "Mbpp/311": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef set_left_most_unset_bit(n):\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef set_left_most_unset_bit(n):\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef set_left_most_unset_bit(n):\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef set_left_most_unset_bit(n):\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/312": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/388": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/388": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef highest_Power_of_2(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef highest_Power_of_2(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef highest_Power_of_2(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef highest_Power_of_2(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/388": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef highest_Power_of_2(n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n",
                    "input": {
                        "n": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef highest_Power_of_2(n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n",
                    "input": {
                        "n": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef highest_Power_of_2(n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n",
                    "input": {
                        "n": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef highest_Power_of_2(n):\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n",
                    "input": {
                        "n": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/389": {
        "satisfied_, violated_assert_0": {
            "Mbpp/389": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_lucas(n):\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_lucas(n):\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_lucas(n):\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_lucas(n):\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/390": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/390": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 7.0,
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 7.0,
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 10.0,
                        "string": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 10.0,
                        "string": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 12.0,
                        "string": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 12.0,
                        "string": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/390": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": [
                            4.0,
                            3.0,
                            2.0
                        ],
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": [
                            6.0,
                            8.0,
                            9.0
                        ],
                        "string": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": [
                            12.0,
                            13.0,
                            10.0
                        ],
                        "string": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": [
                            15.0,
                            14.0,
                            16.0
                        ],
                        "string": 17.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": [
                            21.0,
                            19.0,
                            20.0
                        ],
                        "string": 18.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/390": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 3.0,
                        "string": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 2.0,
                        "string": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 4.0,
                        "string": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 5.0,
                        "string": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_string(list_, string):\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    return [string.format(i) for i in  list_]\n",
                    "input": {
                        "list_": 7.0,
                        "string": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/391": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/391": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 12.0,
                        "l2": 11.0,
                        "l3": 13.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 12.0,
                        "l2": 11.0,
                        "l3": 13.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 12.0,
                        "l2": 11.0,
                        "l3": 13.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 14.0,
                        "l2": 16.0,
                        "l3": 15.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 14.0,
                        "l2": 16.0,
                        "l3": 15.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 14.0,
                        "l2": 16.0,
                        "l3": 15.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/391": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [],
                        "l2": 3.0,
                        "l3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [],
                        "l2": 3.0,
                        "l3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            7.0,
                            6.0
                        ],
                        "l2": 4.0,
                        "l3": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            7.0,
                            6.0
                        ],
                        "l2": 4.0,
                        "l3": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            9.0,
                            10.0
                        ],
                        "l2": 8.0,
                        "l3": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            9.0,
                            10.0
                        ],
                        "l2": 8.0,
                        "l3": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            15.0,
                            13.0
                        ],
                        "l2": 14.0,
                        "l3": 12.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            15.0,
                            13.0
                        ],
                        "l2": 14.0,
                        "l3": 12.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            19.0,
                            18.0
                        ],
                        "l2": 17.0,
                        "l3": 16.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            19.0,
                            18.0
                        ],
                        "l2": 17.0,
                        "l3": 16.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {
            "Mbpp/391": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 3.0,
                        "l2": [],
                        "l3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 3.0,
                        "l2": [],
                        "l3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 5.0,
                        "l2": [
                            7.0,
                            4.0
                        ],
                        "l3": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 5.0,
                        "l2": [
                            7.0,
                            4.0
                        ],
                        "l3": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 11.0,
                        "l2": [
                            9.0,
                            10.0
                        ],
                        "l3": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 11.0,
                        "l2": [
                            9.0,
                            10.0
                        ],
                        "l3": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 12.0,
                        "l2": [
                            14.0,
                            13.0
                        ],
                        "l3": 15.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 12.0,
                        "l2": [
                            14.0,
                            13.0
                        ],
                        "l3": 15.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 16.0,
                        "l2": [
                            18.0,
                            17.0
                        ],
                        "l3": 19.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 16.0,
                        "l2": [
                            18.0,
                            17.0
                        ],
                        "l3": 19.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/391": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [],
                        "l2": [],
                        "l3": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            4.0,
                            5.0
                        ],
                        "l2": [
                            7.0,
                            3.0
                        ],
                        "l3": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            10.0,
                            11.0
                        ],
                        "l2": [
                            9.0,
                            12.0
                        ],
                        "l3": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            15.0,
                            17.0
                        ],
                        "l2": [
                            14.0,
                            13.0
                        ],
                        "l3": 16.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            22.0,
                            21.0
                        ],
                        "l2": [
                            20.0,
                            19.0
                        ],
                        "l3": 18.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {
            "Mbpp/391": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 5.0,
                        "l2": 4.0,
                        "l3": [
                            3.0,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 5.0,
                        "l2": 4.0,
                        "l3": [
                            3.0,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 6.0,
                        "l2": 7.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 6.0,
                        "l2": 7.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 9.0,
                        "l2": 8.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 9.0,
                        "l2": 8.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 11.0,
                        "l2": 10.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 11.0,
                        "l2": 10.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 13.0,
                        "l2": 12.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 13.0,
                        "l2": 12.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/391": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [],
                        "l2": 4.0,
                        "l3": [
                            3.0,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            7.0,
                            5.0
                        ],
                        "l2": 6.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            10.0,
                            9.0
                        ],
                        "l2": 8.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            12.0,
                            11.0
                        ],
                        "l2": 13.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": [
                            14.0,
                            15.0
                        ],
                        "l2": 16.0,
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {
            "Mbpp/391": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 4.0,
                        "l2": [],
                        "l3": [
                            3.0,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 5.0,
                        "l2": [
                            6.0,
                            7.0
                        ],
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 10.0,
                        "l2": [
                            8.0,
                            9.0
                        ],
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 12.0,
                        "l2": [
                            13.0,
                            11.0
                        ],
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef convert_list_dictionary(l1, l2, l3):\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n",
                    "input": {
                        "l1": 15.0,
                        "l2": [
                            16.0,
                            14.0
                        ],
                        "l3": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/392": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/392": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_max_sum (n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_max_sum (n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_max_sum (n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_max_sum (n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/392": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_max_sum (n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_max_sum (n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_max_sum (n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_max_sum (n):\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/394": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/395": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/397": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/397": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "2",
                        "b": "!0!",
                        "a": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "2",
                        "b": "!0!",
                        "a": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": false,
                        "b": "0",
                        "a": true
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/397": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "a": 2,
                        "c": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "a": 2,
                        "c": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "0",
                        "b": "!",
                        "a": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "0",
                        "b": "!",
                        "a": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "1",
                        "b": "0!",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "1",
                        "b": "0!",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": false,
                        "b": "!0!",
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": true,
                        "b": "0",
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {
            "Mbpp/397": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "a": "!1!",
                        "c": "!0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "a": "!1!",
                        "c": "!0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "1",
                        "b": 3,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "1",
                        "b": 3,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "!1!",
                        "b": 4,
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "!1!",
                        "b": 4,
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "0",
                        "b": 5,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "0",
                        "b": 5,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/397": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "a": 3,
                        "c": "!0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "!",
                        "b": 4,
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "0",
                        "b": 7,
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "0!",
                        "b": 9,
                        "a": 8
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": "",
                        "b": 10,
                        "a": 11
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {
            "Mbpp/397": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "a": "!1!",
                        "c": 2.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "a": "!1!",
                        "c": 2.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 2,
                        "b": "1",
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 2,
                        "b": "1",
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 3,
                        "b": "!1!",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 3,
                        "b": "!1!",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 4,
                        "b": "0",
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 4,
                        "b": "0",
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/397": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "a": 2,
                        "c": 2.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 3,
                        "b": "!",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 6,
                        "b": "0",
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 8,
                        "b": "0!",
                        "a": 7
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 9,
                        "b": "",
                        "a": 10
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {
            "Mbpp/397": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "a": "!0!",
                        "c": 2.0,
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 3,
                        "b": 4,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 6,
                        "b": 5,
                        "a": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 8,
                        "b": 7,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef median_numbers(a,b,c):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n",
                    "input": {
                        "c": 9,
                        "b": 10,
                        "a": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/398": {
        "satisfied_, violated_assert_0": {
            "Mbpp/398": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_of_digits(nums):\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n",
                    "input": {
                        "nums": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_of_digits(nums):\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n",
                    "input": {
                        "nums": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_of_digits(nums):\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n",
                    "input": {
                        "nums": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_of_digits(nums):\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n",
                    "input": {
                        "nums": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/404": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/404": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return min(a,b)\n",
                    "input": {
                        "b": "0",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n   \n    return min(a,b)\n",
                    "input": {
                        "b": "0",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return min(a,b)\n",
                    "input": {
                        "b": false,
                        "a": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return min(a,b)\n",
                    "input": {
                        "b": true,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/404": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n   \n    return min(a,b)\n",
                    "input": {
                        "b": "!0!",
                        "a": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n   \n    return min(a,b)\n",
                    "input": {
                        "b": "!",
                        "a": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n   \n    return min(a,b)\n",
                    "input": {
                        "b": "0",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n   \n    return min(a,b)\n",
                    "input": {
                        "b": "0!",
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n   \n    return min(a,b)\n",
                    "input": {
                        "b": "A",
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/404": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return min(a,b)\n",
                    "input": {
                        "b": 2.0,
                        "a": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return min(a,b)\n",
                    "input": {
                        "b": 2,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return min(a,b)\n",
                    "input": {
                        "b": 3,
                        "a": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return min(a,b)\n",
                    "input": {
                        "b": 4,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef minimum(a,b):\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n   \n    return min(a,b)\n",
                    "input": {
                        "b": 5,
                        "a": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/405": {
        "satisfied_, violated_assert_0": {
            "Mbpp/405": []
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/406": {
        "satisfied_, violated_assert_0": {
            "Mbpp/406": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Parity(x):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return x % 2 != 0\n",
                    "input": {
                        "x": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Parity(x):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return x % 2 != 0\n",
                    "input": {
                        "x": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Parity(x):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return x % 2 != 0\n",
                    "input": {
                        "x": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_Parity(x):\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return x % 2 != 0\n",
                    "input": {
                        "x": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/409": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/409": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, (int, float)) for sub in list1 for ele in sub), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, (int, float)) for sub in list1 for ele in sub), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/409": []
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/409": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_product_tuple(list1):\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    return min(x * y for x, y in list1)\n",
                    "input": {
                        "list1": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
            "Mbpp/409": []
        },
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/410": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/410": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_val(listval):\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n",
                    "input": {
                        "listval": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_val(listval):\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n",
                    "input": {
                        "listval": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_val(listval):\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n",
                    "input": {
                        "listval": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef min_val(listval):\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n",
                    "input": {
                        "listval": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/410": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/412": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/412": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_odd(l):\n    assert all(isinstance(i, int) for i in l), \"invalid inputs\" # $_CONTRACT_$\n    return [i for i in l if i % 2 == 0]\n",
                    "input": {
                        "l": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_odd(l):\n    assert all(isinstance(i, int) for i in l), \"invalid inputs\" # $_CONTRACT_$\n    return [i for i in l if i % 2 == 0]\n",
                    "input": {
                        "l": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_odd(l):\n    assert all(isinstance(i, int) for i in l), \"invalid inputs\" # $_CONTRACT_$\n    return [i for i in l if i % 2 == 0]\n",
                    "input": {
                        "l": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_odd(l):\n    assert all(isinstance(i, int) for i in l), \"invalid inputs\" # $_CONTRACT_$\n    return [i for i in l if i % 2 == 0]\n",
                    "input": {
                        "l": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/413": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/414": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/414": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [
                            "1!"
                        ],
                        "list2": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [
                            "1!"
                        ],
                        "list2": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [
                            "0!"
                        ],
                        "list2": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [
                            "0!"
                        ],
                        "list2": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/414": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list2": [
                            "!0!"
                        ],
                        "list1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [],
                        "list2": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [],
                        "list2": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [],
                        "list2": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [],
                        "list2": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/414": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list2": [],
                        "list1": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [
                            "!"
                        ],
                        "list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [
                            "0"
                        ],
                        "list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [
                            "0!"
                        ],
                        "list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef overlapping(list1,list2):\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  \n    return any(v in list2 for v in list1)\n",
                    "input": {
                        "list1": [
                            ""
                        ],
                        "list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/415": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/415": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_Product(arr):\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_Product(arr):\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_Product(arr):\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_Product(arr):\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_Product(arr):\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_Product(arr):\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/415": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_Product(arr):\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            3.0,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_Product(arr):\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            5.0,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_Product(arr):\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            7.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_Product(arr):\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            9.0,
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_Product(arr):\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            10.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/415": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_Product(arr):\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_Product(arr):\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_Product(arr):\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_Product(arr):\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            6
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_Product(arr):\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n",
                    "input": {
                        "arr": [
                            7
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/418": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/418": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Find_Max(lst):\n    assert all(isinstance(i, list) for i in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return max(lst, key = len)\n",
                    "input": {
                        "lst": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Find_Max(lst):\n    assert all(isinstance(i, list) for i in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return max(lst, key = len)\n",
                    "input": {
                        "lst": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Find_Max(lst):\n    assert all(isinstance(i, list) for i in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return max(lst, key = len)\n",
                    "input": {
                        "lst": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Find_Max(lst):\n    assert all(isinstance(i, list) for i in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return max(lst, key = len)\n",
                    "input": {
                        "lst": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/419": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/419": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef round_and_sum(list1):\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n",
                    "input": {
                        "list1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef round_and_sum(list1):\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n",
                    "input": {
                        "list1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef round_and_sum(list1):\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n",
                    "input": {
                        "list1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef round_and_sum(list1):\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n",
                    "input": {
                        "list1": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/420": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/420": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef cube_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef cube_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef cube_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef cube_Sum(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/420": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef cube_Sum(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef cube_Sum(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef cube_Sum(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef cube_Sum(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/421": {
        "satisfied_, violated_assert_0": {
            "Mbpp/421": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef concatenate_tuple(test_tup):\n    assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n",
                    "input": {
                        "test_tup": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef concatenate_tuple(test_tup):\n    assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n",
                    "input": {
                        "test_tup": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef concatenate_tuple(test_tup):\n    assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n",
                    "input": {
                        "test_tup": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef concatenate_tuple(test_tup):\n    assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n",
                    "input": {
                        "test_tup": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/422": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/424": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/425": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/425": []
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/426": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/426": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef filter_oddnumbers(nums):\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in nums if n % 2 == 1]\n",
                    "input": {
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef filter_oddnumbers(nums):\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in nums if n % 2 == 1]\n",
                    "input": {
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef filter_oddnumbers(nums):\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in nums if n % 2 == 1]\n",
                    "input": {
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef filter_oddnumbers(nums):\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in nums if n % 2 == 1]\n",
                    "input": {
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/428": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/428": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef shell_sort(my_list):\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n",
                    "input": {
                        "my_list": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef shell_sort(my_list):\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n",
                    "input": {
                        "my_list": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef shell_sort(my_list):\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n",
                    "input": {
                        "my_list": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef shell_sort(my_list):\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n",
                    "input": {
                        "my_list": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/429": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/430": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/430": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "2",
                        "b": "!0!",
                        "a": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "2",
                        "b": "!0!",
                        "a": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": false,
                        "b": "0",
                        "a": true
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/430": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "a": 2,
                        "c": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "a": 2,
                        "c": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "0",
                        "b": "!",
                        "a": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "0",
                        "b": "!",
                        "a": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "1",
                        "b": "0!",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "1",
                        "b": "0!",
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": false,
                        "b": "!0!",
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": true,
                        "b": "0",
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {
            "Mbpp/430": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "a": "!1!",
                        "c": "!0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "a": "!1!",
                        "c": "!0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "1",
                        "b": 3,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "1",
                        "b": 3,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "!1!",
                        "b": 4,
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "!1!",
                        "b": 4,
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "0",
                        "b": 5,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "0",
                        "b": 5,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/430": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "a": 3,
                        "c": "!0!",
                        "b": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "!",
                        "b": 4,
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "0",
                        "b": 7,
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "0!",
                        "b": 9,
                        "a": 8
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": "",
                        "b": 10,
                        "a": 11
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {
            "Mbpp/430": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "a": "!1!",
                        "c": 2,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "a": "!1!",
                        "c": 2,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 3,
                        "b": "1",
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 3,
                        "b": "1",
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 4,
                        "b": "!1!",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 4,
                        "b": "!1!",
                        "a": "1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 5,
                        "b": "0",
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 5,
                        "b": "0",
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/430": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "a": 3,
                        "c": 2,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 4,
                        "b": "!",
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 7,
                        "b": "0",
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 9,
                        "b": "0!",
                        "a": 8
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 10,
                        "b": "",
                        "a": 11
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {
            "Mbpp/430": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "a": "!0!",
                        "c": 2,
                        "b": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 4,
                        "b": 5,
                        "a": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 7,
                        "b": 6,
                        "a": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 9,
                        "b": 8,
                        "a": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef parabola_directrix(a, b, c):\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n",
                    "input": {
                        "c": 10,
                        "b": 11,
                        "a": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/432": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/433": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/435": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/436": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/436": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef neg_nos(list1):\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  return [i for i in list1 if i < 0]\n",
                    "input": {
                        "list1": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef neg_nos(list1):\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  return [i for i in list1 if i < 0]\n",
                    "input": {
                        "list1": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef neg_nos(list1):\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  return [i for i in list1 if i < 0]\n",
                    "input": {
                        "list1": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef neg_nos(list1):\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n  return [i for i in list1 if i < 0]\n",
                    "input": {
                        "list1": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/437": {
        "satisfied_, violated_assert_0": {
            "Mbpp/437": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_odd(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1[1::2]\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_odd(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1[1::2]\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_odd(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1[1::2]\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_odd(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return str1[1::2]\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/439": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/439": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef multiple_to_single(L):\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            4.0,
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef multiple_to_single(L):\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            6.0,
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef multiple_to_single(L):\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            8.0,
                            9.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef multiple_to_single(L):\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            10.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
            "Mbpp/439": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/439": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef multiple_to_single(L):\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            3,
                            -21238
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef multiple_to_single(L):\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            4,
                            -30093
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef multiple_to_single(L):\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            5,
                            -38458
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef multiple_to_single(L):\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            6,
                            -48908
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/439": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef multiple_to_single(L):\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef multiple_to_single(L):\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef multiple_to_single(L):\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef multiple_to_single(L):\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef multiple_to_single(L):\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
            "Mbpp/439": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef multiple_to_single(L):\n  assert len(L) > 0, \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n",
                    "input": {
                        "L": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/440": {
        "satisfied_, violated_assert_0": {
            "Mbpp/440": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_adverb_position(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_adverb_position(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_adverb_position(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_adverb_position(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/441": {
        "satisfied_, violated_assert_0": {
            "Mbpp/441": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef surfacearea_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 6 * l * l\n",
                    "input": {
                        "l": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef surfacearea_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 6 * l * l\n",
                    "input": {
                        "l": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef surfacearea_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 6 * l * l\n",
                    "input": {
                        "l": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef surfacearea_cube(l):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return 6 * l * l\n",
                    "input": {
                        "l": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/445": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5;assert_6;assert_7": {
            "Mbpp/445": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            []
                        ],
                        "test_tup1": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            []
                        ],
                        "test_tup1": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5;assert_6;assert_7": {
            "Mbpp/445": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_5",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [],
                        "test_tup1": [
                            [
                                []
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [],
                        "test_tup1": [
                            [
                                [
                                    []
                                ]
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_5",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                [
                                    []
                                ]
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                [
                                    []
                                ]
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4;assert_6;assert_7": {
            "Mbpp/445": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            [
                                []
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            [
                                []
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            [
                                []
                            ]
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                []
                            ],
                            []
                        ],
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                []
                            ],
                            []
                        ],
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                []
                            ],
                            []
                        ],
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3;assert_6;assert_7": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_6;assert_7": {
            "Mbpp/445": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            [
                                []
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            [
                                []
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            [
                                []
                            ],
                            [
                                []
                            ],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            [
                                []
                            ],
                            [
                                []
                            ],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                [
                                    []
                                ]
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            [
                                []
                            ],
                            [
                                []
                            ],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                [
                                    []
                                ]
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            [
                                []
                            ],
                            [
                                []
                            ],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            [
                                [
                                    []
                                ]
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup1": [
                            [
                                [
                                    []
                                ]
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_6",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                [],
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_7",
                    "code": "\ndef index_multiplication(test_tup1, test_tup2):\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            [
                                [],
                                []
                            ],
                            [],
                            []
                        ],
                        "test_tup2": [
                            [
                                []
                            ],
                            [],
                            []
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_6, violated_assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_2;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_6, violated_assert_1;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_6, violated_assert_0;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6, violated_assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_3;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_3;assert_6, violated_assert_1;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_3;assert_6, violated_assert_0;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6, violated_assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_2;assert_3;assert_6, violated_assert_0;assert_1;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6, violated_assert_1;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6, violated_assert_0;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6, violated_assert_4;assert_5;assert_7": {},
        "satisfied_assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_4;assert_6, violated_assert_1;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_1;assert_4;assert_6, violated_assert_0;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6, violated_assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_2;assert_4;assert_6, violated_assert_0;assert_1;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6, violated_assert_1;assert_3;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6, violated_assert_0;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6, violated_assert_3;assert_5;assert_7": {},
        "satisfied_assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_5;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6, violated_assert_1;assert_2;assert_5;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6, violated_assert_0;assert_2;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6, violated_assert_2;assert_5;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6, violated_assert_1;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_5;assert_7": {},
        "satisfied_assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_1;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6, violated_assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_2;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6, violated_assert_1;assert_3;assert_4;assert_7": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6, violated_assert_0;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6, violated_assert_3;assert_4;assert_7": {},
        "satisfied_assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_7": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6, violated_assert_1;assert_2;assert_4;assert_7": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6, violated_assert_0;assert_2;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6, violated_assert_2;assert_4;assert_7": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_4;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6, violated_assert_1;assert_4;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_4;assert_7": {},
        "satisfied_assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_7": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_7": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6, violated_assert_2;assert_3;assert_7": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6, violated_assert_1;assert_3;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_3;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_3;assert_7": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_2;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_7": {},
        "satisfied_assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_7, violated_assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_7, violated_assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_7, violated_assert_0;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7, violated_assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_3;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_7, violated_assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_7, violated_assert_0;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7, violated_assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_7, violated_assert_0;assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7, violated_assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7, violated_assert_0;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7, violated_assert_4;assert_5;assert_6": {},
        "satisfied_assert_4;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_4;assert_7, violated_assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_4;assert_7, violated_assert_0;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7, violated_assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_2;assert_4;assert_7, violated_assert_0;assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7, violated_assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7, violated_assert_0;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7, violated_assert_3;assert_5;assert_6": {},
        "satisfied_assert_3;assert_4;assert_7, violated_assert_0;assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7, violated_assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7, violated_assert_0;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7, violated_assert_2;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7, violated_assert_0;assert_1;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7, violated_assert_1;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7, violated_assert_0;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7, violated_assert_5;assert_6": {},
        "satisfied_assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_5;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_5;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7, violated_assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_2;assert_5;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7, violated_assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7, violated_assert_0;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7, violated_assert_3;assert_4;assert_6": {},
        "satisfied_assert_3;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7, violated_assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7, violated_assert_0;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7, violated_assert_2;assert_4;assert_6": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7, violated_assert_0;assert_1;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7, violated_assert_1;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7, violated_assert_0;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7, violated_assert_4;assert_6": {},
        "satisfied_assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7, violated_assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7, violated_assert_0;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7, violated_assert_2;assert_3;assert_6": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_3;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7, violated_assert_1;assert_3;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7, violated_assert_0;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7, violated_assert_3;assert_6": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7, violated_assert_1;assert_2;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_2;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7, violated_assert_2;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_1;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_6": {},
        "satisfied_assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7, violated_assert_4;assert_5": {},
        "satisfied_assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_5": {},
        "satisfied_assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_4": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_": {}
    },
    "Mbpp/446": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/447": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/447": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef cube_nums(nums):\n    assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n**3 for n in nums]\n",
                    "input": {
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef cube_nums(nums):\n    assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n**3 for n in nums]\n",
                    "input": {
                        "nums": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef cube_nums(nums):\n    assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n**3 for n in nums]\n",
                    "input": {
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef cube_nums(nums):\n    assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n**3 for n in nums]\n",
                    "input": {
                        "nums": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/448": {
        "satisfied_, violated_assert_0": {
            "Mbpp/448": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef cal_sum(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef cal_sum(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef cal_sum(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef cal_sum(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/450": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/450": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef extract_string(str1, l):\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    return [e for e in str1 if len(e) == l] \n",
                    "input": {
                        "l": 3,
                        "str1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef extract_string(str1, l):\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    return [e for e in str1 if len(e) == l] \n",
                    "input": {
                        "l": 4,
                        "str1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef extract_string(str1, l):\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    return [e for e in str1 if len(e) == l] \n",
                    "input": {
                        "l": 5,
                        "str1": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef extract_string(str1, l):\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    return [e for e in str1 if len(e) == l] \n",
                    "input": {
                        "l": 6,
                        "str1": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/451": {
        "satisfied_, violated_assert_0": {
            "Mbpp/451": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef remove_whitespaces(text1):\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return text1.replace(' ', '')\n",
                    "input": {
                        "text1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef remove_whitespaces(text1):\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return text1.replace(' ', '')\n",
                    "input": {
                        "text1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef remove_whitespaces(text1):\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return text1.replace(' ', '')\n",
                    "input": {
                        "text1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef remove_whitespaces(text1):\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return text1.replace(' ', '')\n",
                    "input": {
                        "text1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/453": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/454": {
        "satisfied_, violated_assert_0": {
            "Mbpp/454": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_wordz(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return 'z' in text\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_wordz(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return 'z' in text\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_wordz(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return 'z' in text\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_wordz(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        return 'z' in text\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/455": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/455": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_monthnumb_number(monthnum2):\n  assert 1 <= monthnum2 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n",
                    "input": {
                        "monthnum2": 21251
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_monthnumb_number(monthnum2):\n  assert 1 <= monthnum2 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n",
                    "input": {
                        "monthnum2": 33048
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_monthnumb_number(monthnum2):\n  assert 1 <= monthnum2 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n",
                    "input": {
                        "monthnum2": 43498
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_monthnumb_number(monthnum2):\n  assert 1 <= monthnum2 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n",
                    "input": {
                        "monthnum2": 71598
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/456": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/456": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef reverse_string_list(stringlist):\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n    return [x[::-1] for x in stringlist]\n",
                    "input": {
                        "stringlist": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef reverse_string_list(stringlist):\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n    return [x[::-1] for x in stringlist]\n",
                    "input": {
                        "stringlist": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef reverse_string_list(stringlist):\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n    return [x[::-1] for x in stringlist]\n",
                    "input": {
                        "stringlist": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef reverse_string_list(stringlist):\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n    return [x[::-1] for x in stringlist]\n",
                    "input": {
                        "stringlist": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/457": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/457": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Find_Min(lst):\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return min(lst, key=len) \n",
                    "input": {
                        "lst": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Find_Min(lst):\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return min(lst, key=len) \n",
                    "input": {
                        "lst": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Find_Min(lst):\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return min(lst, key=len) \n",
                    "input": {
                        "lst": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Find_Min(lst):\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return min(lst, key=len) \n",
                    "input": {
                        "lst": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/458": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
            "Mbpp/458": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "1!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "1!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "",
                        "b": -5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "",
                        "b": -5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -1,
                        "b": -282
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -1,
                        "b": -282
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -1,
                        "b": -281
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -1,
                        "b": -281
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -1,
                        "b": -283
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -1,
                        "b": -283
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -16908,
                        "b": -283
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -16908,
                        "b": -283
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "1!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "1!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": true,
                        "b": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 1,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 1,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 1,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 5854,
                        "b": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "",
                        "b": -5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "",
                        "b": -5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 1,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 1,
                        "b": -8365
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 1,
                        "b": -8366
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 2,
                        "b": -8366
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef rectangle_area(l,b):\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 25908,
                        "b": -8366
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "1!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "1!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0.0,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -1,
                        "b": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": 11797
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": 11797
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "A",
                        "b": 11796
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -8365,
                        "b": 32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -8365,
                        "b": 32287
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -8364,
                        "b": 32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rectangle_area(l,b):\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": -8363,
                        "b": 32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": "!1!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "1!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "1!",
                        "b": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 0.5,
                        "b": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 1,
                        "b": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 1,
                        "b": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 1,
                        "b": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": 5854,
                        "b": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {
            "Mbpp/458": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!0!",
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "!",
                        "b": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0",
                        "b": 11797
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "0!",
                        "b": 11797
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef rectangle_area(l,b):\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return l * b\n",
                    "input": {
                        "l": "A",
                        "b": 11796
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/459": {
        "satisfied_, violated_assert_0": {
            "Mbpp/459": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_uppercase(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return ''.join(c for c in str1 if c.islower())\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_uppercase(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return ''.join(c for c in str1 if c.islower())\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_uppercase(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return ''.join(c for c in str1 if c.islower())\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_uppercase(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return ''.join(c for c in str1 if c.islower())\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/460": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/460": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Extract(lst):\n    assert all(isinstance(l, list) for l in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return [item[0] for item in lst] \n",
                    "input": {
                        "lst": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Extract(lst):\n    assert all(isinstance(l, list) for l in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return [item[0] for item in lst] \n",
                    "input": {
                        "lst": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Extract(lst):\n    assert all(isinstance(l, list) for l in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return [item[0] for item in lst] \n",
                    "input": {
                        "lst": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Extract(lst):\n    assert all(isinstance(l, list) for l in lst), \"invalid inputs\" # $_CONTRACT_$\n \n    return [item[0] for item in lst] \n",
                    "input": {
                        "lst": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/460": []
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/462": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/463": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/463": []
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/463": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_subarray_product(arr):\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far\n",
                    "input": {
                        "arr": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_subarray_product(arr):\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far\n",
                    "input": {
                        "arr": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_subarray_product(arr):\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far\n",
                    "input": {
                        "arr": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef max_subarray_product(arr):\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far\n",
                    "input": {
                        "arr": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/465": {
        "satisfied_, violated_assert_0": {
            "Mbpp/465": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef drop_empty(dict1):\n  assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n",
                    "input": {
                        "dict1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef drop_empty(dict1):\n  assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n",
                    "input": {
                        "dict1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef drop_empty(dict1):\n  assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n",
                    "input": {
                        "dict1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef drop_empty(dict1):\n  assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n",
                    "input": {
                        "dict1": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/468": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/468": []
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/468": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_product(arr):\n  assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]\n",
                    "input": {
                        "arr": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_product(arr):\n  assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]\n",
                    "input": {
                        "arr": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_product(arr):\n  assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]\n",
                    "input": {
                        "arr": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef max_product(arr):\n  assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]\n",
                    "input": {
                        "arr": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/470": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/471": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/472": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/472": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_Consecutive(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return sorted(l) == list(range(min(l),max(l)+1)) \n",
                    "input": {
                        "l": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_Consecutive(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return sorted(l) == list(range(min(l),max(l)+1)) \n",
                    "input": {
                        "l": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_Consecutive(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return sorted(l) == list(range(min(l),max(l)+1)) \n",
                    "input": {
                        "l": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_Consecutive(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return sorted(l) == list(range(min(l),max(l)+1)) \n",
                    "input": {
                        "l": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/472": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/473": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/473": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list1": [
                            7.0
                        ],
                        "test_list2": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list1": [
                            7.0
                        ],
                        "test_list2": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [
                            9.0
                        ],
                        "test_list1": [
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [
                            9.0
                        ],
                        "test_list1": [
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [
                            11.0
                        ],
                        "test_list1": [
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [
                            11.0
                        ],
                        "test_list1": [
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/473": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [
                            2.0
                        ],
                        "test_list1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [
                            3.0
                        ],
                        "test_list1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [
                            4.0
                        ],
                        "test_list1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list1": [],
                        "test_list2": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [
                            6.0
                        ],
                        "test_list1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/473": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [],
                        "test_list1": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [],
                        "test_list1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [],
                        "test_list1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list1": [
                            5.0
                        ],
                        "test_list2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef tuple_intersection(test_list1, test_list2):\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n",
                    "input": {
                        "test_list2": [],
                        "test_list1": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/474": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/475": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/476": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/476": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef big_sum(nums):\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n      return max(nums) + min(nums)\n",
                    "input": {
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef big_sum(nums):\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n      return max(nums) + min(nums)\n",
                    "input": {
                        "nums": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef big_sum(nums):\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n      return max(nums) + min(nums)\n",
                    "input": {
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef big_sum(nums):\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n      return max(nums) + min(nums)\n",
                    "input": {
                        "nums": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/476": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/477": {
        "satisfied_, violated_assert_0": {
            "Mbpp/477": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_lower(string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return string.lower()\n",
                    "input": {
                        "string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_lower(string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return string.lower()\n",
                    "input": {
                        "string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_lower(string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return string.lower()\n",
                    "input": {
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_lower(string):\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n    return string.lower()\n",
                    "input": {
                        "string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/478": {
        "satisfied_, violated_assert_0": {
            "Mbpp/478": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef remove_lowercase(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return re.sub('[a-z]', '', str1)\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef remove_lowercase(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return re.sub('[a-z]', '', str1)\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef remove_lowercase(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return re.sub('[a-z]', '', str1)\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef remove_lowercase(str1):\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return re.sub('[a-z]', '', str1)\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/479": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/479": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_Digit(n) :\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_Digit(n) :\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_Digit(n) :\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_Digit(n) :\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/479": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef first_Digit(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef first_Digit(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef first_Digit(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef first_Digit(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  \n    return int(str(n)[0])\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/554": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/554": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef Split(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(filter(lambda x: x % 2 == 1, l))\n",
                    "input": {
                        "l": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef Split(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(filter(lambda x: x % 2 == 1, l))\n",
                    "input": {
                        "l": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef Split(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(filter(lambda x: x % 2 == 1, l))\n",
                    "input": {
                        "l": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef Split(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(filter(lambda x: x % 2 == 1, l))\n",
                    "input": {
                        "l": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/554": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/555": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/556": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/556": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Odd_Pair(A,N) :\n    assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n",
                    "input": {
                        "A": [
                            3.0
                        ],
                        "N": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Odd_Pair(A,N) :\n    assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n",
                    "input": {
                        "A": [
                            4.0
                        ],
                        "N": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Odd_Pair(A,N) :\n    assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n",
                    "input": {
                        "A": [
                            5.0
                        ],
                        "N": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_Odd_Pair(A,N) :\n    assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n",
                    "input": {
                        "A": [
                            6.0
                        ],
                        "N": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/557": {
        "satisfied_, violated_assert_0": {
            "Mbpp/557": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef toggle_string(string):\n assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n return string.swapcase()\n",
                    "input": {
                        "string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef toggle_string(string):\n assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n return string.swapcase()\n",
                    "input": {
                        "string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef toggle_string(string):\n assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n return string.swapcase()\n",
                    "input": {
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef toggle_string(string):\n assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n return string.swapcase()\n",
                    "input": {
                        "string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/558": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/558": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -16575,
                        "n1": -21239
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -16575,
                        "n1": -21239
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -24940,
                        "n1": -21239
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -24940,
                        "n1": -21239
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -35390,
                        "n1": -21239
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -35390,
                        "n1": -21239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/558": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -1,
                        "n1": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -1,
                        "n1": 7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -2438,
                        "n1": 7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -14235,
                        "n1": 7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": -46520,
                        "n1": 7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/558": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": 0,
                        "n1": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": 7719,
                        "n1": -21239
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": 7719,
                        "n1": -30094
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": 7719,
                        "n1": -38459
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef digit_distance_nums(n1, n2):\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n",
                    "input": {
                        "n2": 7719,
                        "n1": -48909
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/559": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/560": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/560": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [
                            "0"
                        ],
                        "test_tup2": [
                            "1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [
                            "0"
                        ],
                        "test_tup2": [
                            "1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [
                            false
                        ],
                        "test_tup2": [
                            "!1!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [
                            true
                        ],
                        "test_tup2": [
                            "1"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/560": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup2": [
                            "!0!"
                        ],
                        "test_tup1": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [],
                        "test_tup2": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/560": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [
                            "!0!"
                        ],
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [
                            "!"
                        ],
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [
                            "0"
                        ],
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [
                            "0!"
                        ],
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef union_elements(test_tup1, test_tup2):\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n",
                    "input": {
                        "test_tup1": [
                            ""
                        ],
                        "test_tup2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/562": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/563": {
        "satisfied_, violated_assert_0": {
            "Mbpp/563": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef extract_values(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return (re.findall(r'\"(.*?)\"', text))\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef extract_values(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return (re.findall(r'\"(.*?)\"', text))\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef extract_values(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return (re.findall(r'\"(.*?)\"', text))\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef extract_values(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return (re.findall(r'\"(.*?)\"', text))\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/564": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/565": {
        "satisfied_, violated_assert_0": {
            "Mbpp/565": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef split(word):\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(word)\n",
                    "input": {
                        "word": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef split(word):\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(word)\n",
                    "input": {
                        "word": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef split(word):\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(word)\n",
                    "input": {
                        "word": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef split(word):\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n \n    return list(word)\n",
                    "input": {
                        "word": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/566": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/566": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_digits(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  return sum(map(int, str(n)))\n",
                    "input": {
                        "n": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_digits(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  return sum(map(int, str(n)))\n",
                    "input": {
                        "n": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_digits(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  return sum(map(int, str(n)))\n",
                    "input": {
                        "n": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_digits(n):\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  return sum(map(int, str(n)))\n",
                    "input": {
                        "n": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/567": {
        "satisfied_, violated_assert_0": {
            "Mbpp/567": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef issort_list(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return all(a <= b for a, b in zip(list1, list1[1:]))\n",
                    "input": {
                        "list1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef issort_list(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return all(a <= b for a, b in zip(list1, list1[1:]))\n",
                    "input": {
                        "list1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef issort_list(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return all(a <= b for a, b in zip(list1, list1[1:]))\n",
                    "input": {
                        "list1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef issort_list(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return all(a <= b for a, b in zip(list1, list1[1:]))\n",
                    "input": {
                        "list1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/568": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/568": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef empty_list(length):\n assert isinstance(length, int), \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n",
                    "input": {
                        "length": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef empty_list(length):\n assert isinstance(length, int), \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n",
                    "input": {
                        "length": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef empty_list(length):\n assert isinstance(length, int), \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n",
                    "input": {
                        "length": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef empty_list(length):\n assert isinstance(length, int), \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n",
                    "input": {
                        "length": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/568": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef empty_list(length):\n assert length >= 0, \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n",
                    "input": {
                        "length": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef empty_list(length):\n assert length >= 0, \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n",
                    "input": {
                        "length": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef empty_list(length):\n assert length >= 0, \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n",
                    "input": {
                        "length": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef empty_list(length):\n assert length >= 0, \"invalid inputs\" # $_CONTRACT_$\n return [{} for _ in range(length)]\n",
                    "input": {
                        "length": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/569": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/572": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/572": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef two_unique_nums(nums):\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return [n for n in nums if nums.count(n)==1]\n",
                    "input": {
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef two_unique_nums(nums):\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return [n for n in nums if nums.count(n)==1]\n",
                    "input": {
                        "nums": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef two_unique_nums(nums):\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return [n for n in nums if nums.count(n)==1]\n",
                    "input": {
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef two_unique_nums(nums):\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return [n for n in nums if nums.count(n)==1]\n",
                    "input": {
                        "nums": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/573": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/573": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef unique_product(list_data):\n    assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs\" # $_CONTRACT_$\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))\n",
                    "input": {
                        "list_data": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef unique_product(list_data):\n    assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs\" # $_CONTRACT_$\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))\n",
                    "input": {
                        "list_data": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef unique_product(list_data):\n    assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs\" # $_CONTRACT_$\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))\n",
                    "input": {
                        "list_data": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef unique_product(list_data):\n    assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs\" # $_CONTRACT_$\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))\n",
                    "input": {
                        "list_data": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/576": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/577": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/577": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef last_Digit_Factorial(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef last_Digit_Factorial(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef last_Digit_Factorial(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef last_Digit_Factorial(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/578": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/578": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef interleave_lists(list1, list2, list3):\n    assert len(list1) == len(list2) == len(list3), \"invalid inputs\" # $_CONTRACT_$\n    return [el for pair in zip(list1, list2, list3) for el in pair]\n",
                    "input": {
                        "list2": [],
                        "list1": [],
                        "list3": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef interleave_lists(list1, list2, list3):\n    assert len(list1) == len(list2) == len(list3), \"invalid inputs\" # $_CONTRACT_$\n    return [el for pair in zip(list1, list2, list3) for el in pair]\n",
                    "input": {
                        "list2": [],
                        "list1": [],
                        "list3": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef interleave_lists(list1, list2, list3):\n    assert len(list1) == len(list2) == len(list3), \"invalid inputs\" # $_CONTRACT_$\n    return [el for pair in zip(list1, list2, list3) for el in pair]\n",
                    "input": {
                        "list2": [],
                        "list1": [],
                        "list3": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef interleave_lists(list1, list2, list3):\n    assert len(list1) == len(list2) == len(list3), \"invalid inputs\" # $_CONTRACT_$\n    return [el for pair in zip(list1, list2, list3) for el in pair]\n",
                    "input": {
                        "list2": [],
                        "list1": [],
                        "list3": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/579": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/580": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/581": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/581": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef surface_Area(b,s):\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": -8855,
                        "b": -12887
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef surface_Area(b,s):\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": -8855,
                        "b": -12887
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef surface_Area(b,s):\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": -8855,
                        "b": -14029
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef surface_Area(b,s):\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": -8855,
                        "b": -14029
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef surface_Area(b,s):\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": -8855,
                        "b": -22974
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef surface_Area(b,s):\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": -8855,
                        "b": -22974
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/581": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef surface_Area(b,s):\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": 0,
                        "b": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef surface_Area(b,s):\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": 0.0,
                        "b": 8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef surface_Area(b,s):\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": -10450.0,
                        "b": 39468
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef surface_Area(b,s):\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": -10450.0,
                        "b": 39749
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef surface_Area(b,s):\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": -10450.0,
                        "b": 42746
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/581": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef surface_Area(b,s):\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": 1,
                        "b": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef surface_Area(b,s):\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": 0.5,
                        "b": -2437
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef surface_Area(b,s):\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": 0.25,
                        "b": -34722
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef surface_Area(b,s):\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": 0.125,
                        "b": -62822
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef surface_Area(b,s):\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 2 * b * s + pow(b,2) \n",
                    "input": {
                        "s": 0.0625,
                        "b": -71767
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/583": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/585": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5;assert_6": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5;assert_6": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5;assert_6": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4;assert_6": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4;assert_6": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4;assert_6": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3;assert_6": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3;assert_6": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_6": {},
        "satisfied_assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_6, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_6, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_6, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3;assert_6, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3;assert_6, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3;assert_6, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6, violated_assert_4;assert_5": {},
        "satisfied_assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4;assert_6, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4;assert_6, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4;assert_6, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_5": {},
        "satisfied_assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_4": {},
        "satisfied_assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_": {}
    },
    "Mbpp/586": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/587": {
        "satisfied_, violated_assert_0": {
            "Mbpp/587": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef list_tuple(listx):\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(listx)\n",
                    "input": {
                        "listx": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef list_tuple(listx):\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(listx)\n",
                    "input": {
                        "listx": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef list_tuple(listx):\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(listx)\n",
                    "input": {
                        "listx": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef list_tuple(listx):\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(listx)\n",
                    "input": {
                        "listx": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/588": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/588": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef big_diff(nums):\n     assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n     return max(nums) - min(nums)\n",
                    "input": {
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef big_diff(nums):\n     assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n     return max(nums) - min(nums)\n",
                    "input": {
                        "nums": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef big_diff(nums):\n     assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n     return max(nums) - min(nums)\n",
                    "input": {
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef big_diff(nums):\n     assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n     return max(nums) - min(nums)\n",
                    "input": {
                        "nums": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/588": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/589": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/589": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 6.0,
                        "a": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 6.0,
                        "a": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 8.0,
                        "a": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 8.0,
                        "a": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 10.0,
                        "a": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 10.0,
                        "a": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/589": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 2.0,
                        "a": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 3.0,
                        "a": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 4.0,
                        "a": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 5.0,
                        "a": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 6.0,
                        "a": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/589": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 2,
                        "a": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 3,
                        "a": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 4,
                        "a": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 5,
                        "a": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef perfect_squares(a, b):\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n",
                    "input": {
                        "b": 6,
                        "a": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/591": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/592": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/592": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/592": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return binomial_Coeff(2 * n, n - 1); \n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/593": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/594": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/596": {
        "satisfied_, violated_assert_0": {
            "Mbpp/596": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport sys \ndef tuple_size(tuple_list):\n  assert isinstance(tuple_list, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return sys.getsizeof(tuple_list)\n",
                    "input": {
                        "tuple_list": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport sys \ndef tuple_size(tuple_list):\n  assert isinstance(tuple_list, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return sys.getsizeof(tuple_list)\n",
                    "input": {
                        "tuple_list": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport sys \ndef tuple_size(tuple_list):\n  assert isinstance(tuple_list, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return sys.getsizeof(tuple_list)\n",
                    "input": {
                        "tuple_list": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport sys \ndef tuple_size(tuple_list):\n  assert isinstance(tuple_list, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return sys.getsizeof(tuple_list)\n",
                    "input": {
                        "tuple_list": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/597": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/598": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/598": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef armstrong_number(number):\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n",
                    "input": {
                        "number": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef armstrong_number(number):\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n",
                    "input": {
                        "number": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef armstrong_number(number):\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n",
                    "input": {
                        "number": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef armstrong_number(number):\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n",
                    "input": {
                        "number": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/598": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef armstrong_number(number):\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n",
                    "input": {
                        "number": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef armstrong_number(number):\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n",
                    "input": {
                        "number": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef armstrong_number(number):\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n",
                    "input": {
                        "number": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef armstrong_number(number):\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n",
                    "input": {
                        "number": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/599": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/599": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_average(number):\n   assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n",
                    "input": {
                        "number": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_average(number):\n   assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n",
                    "input": {
                        "number": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_average(number):\n   assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n",
                    "input": {
                        "number": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef sum_average(number):\n   assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n",
                    "input": {
                        "number": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/599": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_average(number):\n   assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n",
                    "input": {
                        "number": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_average(number):\n   assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n",
                    "input": {
                        "number": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_average(number):\n   assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n",
                    "input": {
                        "number": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sum_average(number):\n   assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n",
                    "input": {
                        "number": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/600": {
        "satisfied_, violated_assert_0": {
            "Mbpp/600": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_Even(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n % 2 == 0\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_Even(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n % 2 == 0\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_Even(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n % 2 == 0\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_Even(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n % 2 == 0\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/602": {
        "satisfied_, violated_assert_0": {
            "Mbpp/602": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef first_repeated_char(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$I\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef first_repeated_char(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$I\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef first_repeated_char(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$I\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef first_repeated_char(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$I\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/603": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/603": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_ludic(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_ludic(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_ludic(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef get_ludic(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/603": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_ludic(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n",
                    "input": {
                        "n": -7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_ludic(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n",
                    "input": {
                        "n": -10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_ludic(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n",
                    "input": {
                        "n": -21953
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef get_ludic(n):\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n",
                    "input": {
                        "n": -54238
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/604": {
        "satisfied_, violated_assert_0": {
            "Mbpp/604": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef reverse_words(s):\n\tassert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn ' '.join(reversed(s.split()))\n",
                    "input": {
                        "s": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef reverse_words(s):\n\tassert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn ' '.join(reversed(s.split()))\n",
                    "input": {
                        "s": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef reverse_words(s):\n\tassert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn ' '.join(reversed(s.split()))\n",
                    "input": {
                        "s": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef reverse_words(s):\n\tassert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn ' '.join(reversed(s.split()))\n",
                    "input": {
                        "s": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/605": {
        "satisfied_, violated_assert_0": {
            "Mbpp/605": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef prime_num(num):\n  assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n",
                    "input": {
                        "num": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef prime_num(num):\n  assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n",
                    "input": {
                        "num": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef prime_num(num):\n  assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n",
                    "input": {
                        "num": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef prime_num(num):\n  assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n",
                    "input": {
                        "num": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/606": {
        "satisfied_, violated_assert_0": {
            "Mbpp/606": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef radian_degree(degree):\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n    return degree * math.pi / 180\n",
                    "input": {
                        "degree": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef radian_degree(degree):\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n    return degree * math.pi / 180\n",
                    "input": {
                        "degree": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef radian_degree(degree):\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n    return degree * math.pi / 180\n",
                    "input": {
                        "degree": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef radian_degree(degree):\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n    return degree * math.pi / 180\n",
                    "input": {
                        "degree": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/607": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/607": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 7.0,
                        "pattern": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 7.0,
                        "pattern": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 9.0,
                        "pattern": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 9.0,
                        "pattern": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 11.0,
                        "pattern": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 11.0,
                        "pattern": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/607": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": "!0!",
                        "pattern": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": "!",
                        "pattern": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": "0",
                        "pattern": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": "0!",
                        "pattern": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": "",
                        "pattern": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/607": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 2.0,
                        "pattern": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 3.0,
                        "pattern": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 4.0,
                        "pattern": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 5.0,
                        "pattern": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef find_literals(text, pattern):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n",
                    "input": {
                        "text": 6.0,
                        "pattern": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/608": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/610": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/611": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5;assert_6": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5;assert_6": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5;assert_6": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4;assert_6": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4;assert_6": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4;assert_6": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3;assert_6": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3;assert_6": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_6": {},
        "satisfied_assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_6, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_6, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_6, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3;assert_6, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3;assert_6, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3;assert_6, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6, violated_assert_4;assert_5": {},
        "satisfied_assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4;assert_6, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4;assert_6, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4;assert_6, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_5": {},
        "satisfied_assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_4": {},
        "satisfied_assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_": {}
    },
    "Mbpp/612": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/612": []
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/612": []
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/614": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/615": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/616": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/618": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5;assert_6": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5;assert_6": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5;assert_6": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4;assert_6": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4;assert_6": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4;assert_6": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3;assert_6": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3;assert_6": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_6": {},
        "satisfied_assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_6, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_6, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_6, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3;assert_6, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3;assert_6, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3;assert_6, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6, violated_assert_4;assert_5": {},
        "satisfied_assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4;assert_6, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4;assert_6, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4;assert_6, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_5": {},
        "satisfied_assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_4": {},
        "satisfied_assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_": {}
    },
    "Mbpp/619": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/620": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/622": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_": {}
    },
    "Mbpp/623": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/623": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef nth_nums(nums, n):\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": "1",
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef nth_nums(nums, n):\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": "1",
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef nth_nums(nums, n):\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": false,
                        "nums": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef nth_nums(nums, n):\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": true,
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/623": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef nth_nums(nums, n):\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": "!0!",
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef nth_nums(nums, n):\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": "!",
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef nth_nums(nums, n):\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": "0",
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef nth_nums(nums, n):\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": "0!",
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef nth_nums(nums, n):\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": "A",
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/623": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef nth_nums(nums, n):\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": 2,
                        "nums": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef nth_nums(nums, n):\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": 3,
                        "nums": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef nth_nums(nums, n):\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": 4,
                        "nums": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef nth_nums(nums, n):\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": 5,
                        "nums": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef nth_nums(nums, n):\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n",
                    "input": {
                        "n": 6,
                        "nums": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/624": {
        "satisfied_, violated_assert_0": {
            "Mbpp/624": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_upper(string):\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.upper()\n",
                    "input": {
                        "string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_upper(string):\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.upper()\n",
                    "input": {
                        "string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_upper(string):\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.upper()\n",
                    "input": {
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_upper(string):\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.upper()\n",
                    "input": {
                        "string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/626": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/628": {
        "satisfied_, violated_assert_0": {
            "Mbpp/628": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_spaces(string):\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.replace(\" \", \"%20\")\n",
                    "input": {
                        "string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_spaces(string):\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.replace(\" \", \"%20\")\n",
                    "input": {
                        "string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_spaces(string):\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.replace(\" \", \"%20\")\n",
                    "input": {
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_spaces(string):\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n  return string.replace(\" \", \"%20\")\n",
                    "input": {
                        "string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/629": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/629": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Split(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return [num for num in l if num % 2 == 0]\n",
                    "input": {
                        "l": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Split(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return [num for num in l if num % 2 == 0]\n",
                    "input": {
                        "l": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Split(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return [num for num in l if num % 2 == 0]\n",
                    "input": {
                        "l": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef Split(l):\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return [num for num in l if num % 2 == 0]\n",
                    "input": {
                        "l": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/630": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/631": {
        "satisfied_, violated_assert_0": {
            "Mbpp/631": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_spaces(text):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_spaces(text):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_spaces(text):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef replace_spaces(text):\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/632": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/632": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef move_zero(num_list):\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n",
                    "input": {
                        "num_list": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef move_zero(num_list):\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n",
                    "input": {
                        "num_list": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef move_zero(num_list):\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n",
                    "input": {
                        "num_list": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef move_zero(num_list):\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n",
                    "input": {
                        "num_list": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/633": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/635": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/635": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport heapq as hq\ndef heap_sort(iterable):\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n",
                    "input": {
                        "iterable": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport heapq as hq\ndef heap_sort(iterable):\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n",
                    "input": {
                        "iterable": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport heapq as hq\ndef heap_sort(iterable):\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n",
                    "input": {
                        "iterable": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport heapq as hq\ndef heap_sort(iterable):\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n",
                    "input": {
                        "iterable": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/637": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/638": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/639": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/639": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sample_nam(sample_names):\n  assert all(isinstance(x, str) for x in sample_names), \"invalid inputs\" # $_CONTRACT_$\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n",
                    "input": {
                        "sample_names": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sample_nam(sample_names):\n  assert all(isinstance(x, str) for x in sample_names), \"invalid inputs\" # $_CONTRACT_$\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n",
                    "input": {
                        "sample_names": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sample_nam(sample_names):\n  assert all(isinstance(x, str) for x in sample_names), \"invalid inputs\" # $_CONTRACT_$\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n",
                    "input": {
                        "sample_names": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef sample_nam(sample_names):\n  assert all(isinstance(x, str) for x in sample_names), \"invalid inputs\" # $_CONTRACT_$\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n",
                    "input": {
                        "sample_names": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/641": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/641": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_nonagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n",
                    "input": {
                        "n": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_nonagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n",
                    "input": {
                        "n": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_nonagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n",
                    "input": {
                        "n": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_nonagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n",
                    "input": {
                        "n": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/641": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_nonagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n",
                    "input": {
                        "n": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_nonagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n",
                    "input": {
                        "n": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_nonagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n",
                    "input": {
                        "n": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_nonagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n",
                    "input": {
                        "n": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_nonagonal(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n",
                    "input": {
                        "n": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/643": {
        "satisfied_, violated_assert_0": {
            "Mbpp/643": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_wordz_middle(text):\n\tassert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn re.search(r'\\Bz\\B',  text) is not None\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_wordz_middle(text):\n\tassert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn re.search(r'\\Bz\\B',  text) is not None\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_wordz_middle(text):\n\tassert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn re.search(r'\\Bz\\B',  text) is not None\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_wordz_middle(text):\n\tassert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n\treturn re.search(r'\\Bz\\B',  text) is not None\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/644": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/720": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/721": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/722": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0;assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_assert_5;assert_6;assert_7;assert_8": {},
        "satisfied_assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_5, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_5, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_5, violated_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_5, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_5, violated_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_5, violated_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5, violated_assert_3;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_3;assert_5, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_5, violated_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_5, violated_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5, violated_assert_2;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_5, violated_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5, violated_assert_1;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5, violated_assert_0;assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5, violated_assert_4;assert_6;assert_7;assert_8": {},
        "satisfied_assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_4;assert_5, violated_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_4;assert_5, violated_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5, violated_assert_2;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_4;assert_5, violated_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5, violated_assert_1;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5, violated_assert_0;assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5, violated_assert_3;assert_6;assert_7;assert_8": {},
        "satisfied_assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5, violated_assert_1;assert_2;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5, violated_assert_0;assert_2;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5, violated_assert_2;assert_6;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_1;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5, violated_assert_1;assert_6;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_0;assert_6;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5, violated_assert_6;assert_7;assert_8": {},
        "satisfied_assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_6, violated_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_2;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_6, violated_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_6, violated_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6, violated_assert_3;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_3;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_6, violated_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_6, violated_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6, violated_assert_2;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_6, violated_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6, violated_assert_1;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6, violated_assert_0;assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6, violated_assert_4;assert_5;assert_7;assert_8": {},
        "satisfied_assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_4;assert_6, violated_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_4;assert_6, violated_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6, violated_assert_2;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_2;assert_4;assert_6, violated_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6, violated_assert_1;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6, violated_assert_0;assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6, violated_assert_3;assert_5;assert_7;assert_8": {},
        "satisfied_assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6, violated_assert_1;assert_2;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6, violated_assert_0;assert_2;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6, violated_assert_2;assert_5;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_1;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6, violated_assert_1;assert_5;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_0;assert_5;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6, violated_assert_5;assert_7;assert_8": {},
        "satisfied_assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_1;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6, violated_assert_2;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_2;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6, violated_assert_1;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6, violated_assert_0;assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6, violated_assert_3;assert_4;assert_7;assert_8": {},
        "satisfied_assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6, violated_assert_1;assert_2;assert_4;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6, violated_assert_0;assert_2;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6, violated_assert_2;assert_4;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_1;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6, violated_assert_1;assert_4;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_0;assert_4;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6, violated_assert_4;assert_7;assert_8": {},
        "satisfied_assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_3;assert_7;assert_8": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_3;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6, violated_assert_2;assert_3;assert_7;assert_8": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_3;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6, violated_assert_1;assert_3;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_0;assert_3;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6, violated_assert_3;assert_7;assert_8": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_2;assert_7;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_2;assert_7;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_2;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6, violated_assert_2;assert_7;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_1;assert_7;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_1;assert_7;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_0;assert_7;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6, violated_assert_7;assert_8": {},
        "satisfied_assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_7, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_2;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_7, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_7, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7, violated_assert_3;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_3;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_3;assert_7, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_3;assert_7, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7, violated_assert_2;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_2;assert_3;assert_7, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7, violated_assert_1;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7, violated_assert_0;assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7, violated_assert_4;assert_5;assert_6;assert_8": {},
        "satisfied_assert_4;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_4;assert_7, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_4;assert_7, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7, violated_assert_2;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_2;assert_4;assert_7, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7, violated_assert_1;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7, violated_assert_0;assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7, violated_assert_3;assert_5;assert_6;assert_8": {},
        "satisfied_assert_3;assert_4;assert_7, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7, violated_assert_1;assert_2;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7, violated_assert_0;assert_2;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7, violated_assert_2;assert_5;assert_6;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7, violated_assert_0;assert_1;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7, violated_assert_1;assert_5;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7, violated_assert_0;assert_5;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7, violated_assert_5;assert_6;assert_8": {},
        "satisfied_assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_5;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_1;assert_5;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7, violated_assert_2;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_2;assert_5;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7, violated_assert_1;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7, violated_assert_0;assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7, violated_assert_3;assert_4;assert_6;assert_8": {},
        "satisfied_assert_3;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7, violated_assert_1;assert_2;assert_4;assert_6;assert_8": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7, violated_assert_0;assert_2;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7, violated_assert_2;assert_4;assert_6;assert_8": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7, violated_assert_0;assert_1;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7, violated_assert_1;assert_4;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7, violated_assert_0;assert_4;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7, violated_assert_4;assert_6;assert_8": {},
        "satisfied_assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7, violated_assert_1;assert_2;assert_3;assert_6;assert_8": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7, violated_assert_0;assert_2;assert_3;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7, violated_assert_2;assert_3;assert_6;assert_8": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_3;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7, violated_assert_1;assert_3;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7, violated_assert_0;assert_3;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7, violated_assert_3;assert_6;assert_8": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_2;assert_6;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7, violated_assert_1;assert_2;assert_6;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_2;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7, violated_assert_2;assert_6;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_1;assert_6;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_1;assert_6;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_0;assert_6;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7, violated_assert_6;assert_8": {},
        "satisfied_assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_1;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7, violated_assert_2;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_2;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7, violated_assert_1;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7, violated_assert_0;assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7, violated_assert_3;assert_4;assert_5;assert_8": {},
        "satisfied_assert_3;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7, violated_assert_1;assert_2;assert_4;assert_5;assert_8": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7, violated_assert_0;assert_2;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7, violated_assert_2;assert_4;assert_5;assert_8": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7, violated_assert_0;assert_1;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7, violated_assert_1;assert_4;assert_5;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7, violated_assert_0;assert_4;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7, violated_assert_4;assert_5;assert_8": {},
        "satisfied_assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_5;assert_8": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7, violated_assert_2;assert_3;assert_5;assert_8": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_5;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7, violated_assert_1;assert_3;assert_5;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7, violated_assert_0;assert_3;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7, violated_assert_3;assert_5;assert_8": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_5;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7, violated_assert_1;assert_2;assert_5;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_2;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7, violated_assert_2;assert_5;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_1;assert_5;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_1;assert_5;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_0;assert_5;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7, violated_assert_5;assert_8": {},
        "satisfied_assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_4;assert_8": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_4;assert_8": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7, violated_assert_2;assert_3;assert_4;assert_8": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_4;assert_8": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7, violated_assert_1;assert_3;assert_4;assert_8": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7, violated_assert_0;assert_3;assert_4;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7, violated_assert_3;assert_4;assert_8": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_4;assert_8": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_4;assert_8": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_4;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7, violated_assert_2;assert_4;assert_8": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_4;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_1;assert_4;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_0;assert_4;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7, violated_assert_4;assert_8": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_3;assert_8": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_3;assert_8": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_3;assert_8": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7, violated_assert_2;assert_3;assert_8": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_3;assert_8": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_3;assert_8": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_3;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7, violated_assert_3;assert_8": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_2;assert_8": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_2;assert_8": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_2;assert_8": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_2;assert_8": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_1;assert_8": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_1;assert_8": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_0;assert_8": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7, violated_assert_8": {},
        "satisfied_assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_8, violated_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_8, violated_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_8, violated_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_8, violated_assert_3;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_3;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_8, violated_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_8, violated_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_8, violated_assert_2;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_8, violated_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_8, violated_assert_1;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_8, violated_assert_0;assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_8, violated_assert_4;assert_5;assert_6;assert_7": {},
        "satisfied_assert_4;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_4;assert_8, violated_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_4;assert_8, violated_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_8, violated_assert_2;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_4;assert_8, violated_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_8, violated_assert_1;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_8, violated_assert_0;assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_8, violated_assert_3;assert_5;assert_6;assert_7": {},
        "satisfied_assert_3;assert_4;assert_8, violated_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_8, violated_assert_1;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_8, violated_assert_0;assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_8, violated_assert_2;assert_5;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_8, violated_assert_0;assert_1;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_8, violated_assert_1;assert_5;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_8, violated_assert_0;assert_5;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_8, violated_assert_5;assert_6;assert_7": {},
        "satisfied_assert_5;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_5;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_5;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_5;assert_8, violated_assert_2;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_2;assert_5;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_5;assert_8, violated_assert_1;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_5;assert_8, violated_assert_0;assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_8, violated_assert_3;assert_4;assert_6;assert_7": {},
        "satisfied_assert_3;assert_5;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_5;assert_8, violated_assert_1;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_5;assert_8, violated_assert_0;assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_8, violated_assert_2;assert_4;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_5;assert_8, violated_assert_0;assert_1;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_8, violated_assert_1;assert_4;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_8, violated_assert_0;assert_4;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_8, violated_assert_4;assert_6;assert_7": {},
        "satisfied_assert_4;assert_5;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_4;assert_5;assert_8, violated_assert_1;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_1;assert_4;assert_5;assert_8, violated_assert_0;assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_8, violated_assert_2;assert_3;assert_6;assert_7": {},
        "satisfied_assert_2;assert_4;assert_5;assert_8, violated_assert_0;assert_1;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_8, violated_assert_1;assert_3;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_8, violated_assert_0;assert_3;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_8, violated_assert_3;assert_6;assert_7": {},
        "satisfied_assert_3;assert_4;assert_5;assert_8, violated_assert_0;assert_1;assert_2;assert_6;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_8, violated_assert_1;assert_2;assert_6;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_8, violated_assert_0;assert_2;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_8, violated_assert_2;assert_6;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_8, violated_assert_0;assert_1;assert_6;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_8, violated_assert_1;assert_6;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_8, violated_assert_0;assert_6;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_8, violated_assert_6;assert_7": {},
        "satisfied_assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_6;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_6;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_6;assert_8, violated_assert_2;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_2;assert_6;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_6;assert_8, violated_assert_1;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_6;assert_8, violated_assert_0;assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_8, violated_assert_3;assert_4;assert_5;assert_7": {},
        "satisfied_assert_3;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_3;assert_6;assert_8, violated_assert_1;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_3;assert_6;assert_8, violated_assert_0;assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_8, violated_assert_2;assert_4;assert_5;assert_7": {},
        "satisfied_assert_2;assert_3;assert_6;assert_8, violated_assert_0;assert_1;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_8, violated_assert_1;assert_4;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_8, violated_assert_0;assert_4;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_8, violated_assert_4;assert_5;assert_7": {},
        "satisfied_assert_4;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_4;assert_6;assert_8, violated_assert_1;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_1;assert_4;assert_6;assert_8, violated_assert_0;assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_8, violated_assert_2;assert_3;assert_5;assert_7": {},
        "satisfied_assert_2;assert_4;assert_6;assert_8, violated_assert_0;assert_1;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_8, violated_assert_1;assert_3;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_8, violated_assert_0;assert_3;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_8, violated_assert_3;assert_5;assert_7": {},
        "satisfied_assert_3;assert_4;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_5;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_8, violated_assert_1;assert_2;assert_5;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_8, violated_assert_0;assert_2;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_8, violated_assert_2;assert_5;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_8, violated_assert_0;assert_1;assert_5;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_8, violated_assert_1;assert_5;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_8, violated_assert_0;assert_5;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_8, violated_assert_5;assert_7": {},
        "satisfied_assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_5;assert_6;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_1;assert_5;assert_6;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_8, violated_assert_2;assert_3;assert_4;assert_7": {},
        "satisfied_assert_2;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_8, violated_assert_1;assert_3;assert_4;assert_7": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_8, violated_assert_0;assert_3;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_8, violated_assert_3;assert_4;assert_7": {},
        "satisfied_assert_3;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_7": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_8, violated_assert_1;assert_2;assert_4;assert_7": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_8, violated_assert_0;assert_2;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_8, violated_assert_2;assert_4;assert_7": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_4;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_8, violated_assert_1;assert_4;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_8, violated_assert_0;assert_4;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_8, violated_assert_4;assert_7": {},
        "satisfied_assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_7": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_8, violated_assert_1;assert_2;assert_3;assert_7": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_2;assert_3;assert_7": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_8, violated_assert_2;assert_3;assert_7": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_3;assert_7": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_8, violated_assert_1;assert_3;assert_7": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_3;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_8, violated_assert_3;assert_7": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_2;assert_7": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_1;assert_2;assert_7": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_2;assert_7": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_2;assert_7": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_1;assert_7": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_1;assert_7": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_0;assert_7": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_8, violated_assert_7": {},
        "satisfied_assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_7;assert_8, violated_assert_2;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_7;assert_8, violated_assert_1;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_7;assert_8, violated_assert_0;assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_7;assert_8, violated_assert_3;assert_4;assert_5;assert_6": {},
        "satisfied_assert_3;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_7;assert_8, violated_assert_1;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_7;assert_8, violated_assert_0;assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_7;assert_8, violated_assert_2;assert_4;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_7;assert_8, violated_assert_0;assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_7;assert_8, violated_assert_1;assert_4;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_7;assert_8, violated_assert_0;assert_4;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_7;assert_8, violated_assert_4;assert_5;assert_6": {},
        "satisfied_assert_4;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_4;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_4;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_7;assert_8, violated_assert_2;assert_3;assert_5;assert_6": {},
        "satisfied_assert_2;assert_4;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_7;assert_8, violated_assert_1;assert_3;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_7;assert_8, violated_assert_0;assert_3;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_7;assert_8, violated_assert_3;assert_5;assert_6": {},
        "satisfied_assert_3;assert_4;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_7;assert_8, violated_assert_1;assert_2;assert_5;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_7;assert_8, violated_assert_0;assert_2;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_7;assert_8, violated_assert_2;assert_5;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_7;assert_8, violated_assert_0;assert_1;assert_5;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_7;assert_8, violated_assert_1;assert_5;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_7;assert_8, violated_assert_0;assert_5;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_7;assert_8, violated_assert_5;assert_6": {},
        "satisfied_assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_5;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_5;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_5;assert_7;assert_8, violated_assert_2;assert_3;assert_4;assert_6": {},
        "satisfied_assert_2;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_5;assert_7;assert_8, violated_assert_1;assert_3;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_5;assert_7;assert_8, violated_assert_0;assert_3;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_7;assert_8, violated_assert_3;assert_4;assert_6": {},
        "satisfied_assert_3;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_3;assert_5;assert_7;assert_8, violated_assert_1;assert_2;assert_4;assert_6": {},
        "satisfied_assert_1;assert_3;assert_5;assert_7;assert_8, violated_assert_0;assert_2;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_7;assert_8, violated_assert_2;assert_4;assert_6": {},
        "satisfied_assert_2;assert_3;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_4;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_7;assert_8, violated_assert_1;assert_4;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_7;assert_8, violated_assert_0;assert_4;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_7;assert_8, violated_assert_4;assert_6": {},
        "satisfied_assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_4;assert_5;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_6": {},
        "satisfied_assert_1;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_7;assert_8, violated_assert_2;assert_3;assert_6": {},
        "satisfied_assert_2;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_6": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_7;assert_8, violated_assert_1;assert_3;assert_6": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_3;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_7;assert_8, violated_assert_3;assert_6": {},
        "satisfied_assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_6": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_1;assert_2;assert_6": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_2;assert_6": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_2;assert_6": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_1;assert_6": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_1;assert_6": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_0;assert_6": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_7;assert_8, violated_assert_6": {},
        "satisfied_assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_6;assert_7;assert_8, violated_assert_2;assert_3;assert_4;assert_5": {},
        "satisfied_assert_2;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_6;assert_7;assert_8, violated_assert_1;assert_3;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_6;assert_7;assert_8, violated_assert_0;assert_3;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_6;assert_7;assert_8, violated_assert_3;assert_4;assert_5": {},
        "satisfied_assert_3;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_3;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_4;assert_5": {},
        "satisfied_assert_1;assert_3;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_6;assert_7;assert_8, violated_assert_2;assert_4;assert_5": {},
        "satisfied_assert_2;assert_3;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_4;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_6;assert_7;assert_8, violated_assert_1;assert_4;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_6;assert_7;assert_8, violated_assert_0;assert_4;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_6;assert_7;assert_8, violated_assert_4;assert_5": {},
        "satisfied_assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_4;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_5": {},
        "satisfied_assert_1;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_4;assert_6;assert_7;assert_8, violated_assert_2;assert_3;assert_5": {},
        "satisfied_assert_2;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_5": {},
        "satisfied_assert_0;assert_2;assert_4;assert_6;assert_7;assert_8, violated_assert_1;assert_3;assert_5": {},
        "satisfied_assert_1;assert_2;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_3;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_6;assert_7;assert_8, violated_assert_3;assert_5": {},
        "satisfied_assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_5": {},
        "satisfied_assert_0;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_5": {},
        "satisfied_assert_1;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_5": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_2;assert_5": {},
        "satisfied_assert_2;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_5": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_1;assert_5": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_0;assert_5": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_6;assert_7;assert_8, violated_assert_5": {},
        "satisfied_assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_5;assert_6;assert_7;assert_8, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_5;assert_6;assert_7;assert_8, violated_assert_3;assert_4": {},
        "satisfied_assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_5;assert_6;assert_7;assert_8, violated_assert_4": {},
        "satisfied_assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_3": {},
        "satisfied_assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4;assert_5;assert_6;assert_7;assert_8, violated_": {}
    },
    "Mbpp/723": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/724": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/724": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 6.0,
                        "base": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 6.0,
                        "base": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 8.0,
                        "base": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 8.0,
                        "base": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 10.0,
                        "base": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 10.0,
                        "base": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/724": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power_base_sum(base, power):\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 3.0,
                        "base": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 3.0,
                        "base": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power_base_sum(base, power):\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 4.0,
                        "base": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 4.0,
                        "base": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power_base_sum(base, power):\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 5.0,
                        "base": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 5.0,
                        "base": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power_base_sum(base, power):\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 6.0,
                        "base": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 6.0,
                        "base": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/724": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 2.0,
                        "base": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 3.0,
                        "base": 7719
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 4.0,
                        "base": 10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 5.0,
                        "base": 10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 6.0,
                        "base": 10156
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {
            "Mbpp/724": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 2,
                        "base": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 3,
                        "base": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 4,
                        "base": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 5,
                        "base": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef power_base_sum(base, power):\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 6,
                        "base": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/724": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power_base_sum(base, power):\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 2,
                        "base": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power_base_sum(base, power):\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 3,
                        "base": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power_base_sum(base, power):\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 4,
                        "base": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power_base_sum(base, power):\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 5,
                        "base": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef power_base_sum(base, power):\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return sum([int(i) for i in str(pow(base, power))])\n",
                    "input": {
                        "power": 6,
                        "base": -8856
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/725": {
        "satisfied_, violated_assert_0": {
            "Mbpp/725": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef extract_quotation(text1):\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.findall(r'\"(.*?)\"', text1)\n",
                    "input": {
                        "text1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef extract_quotation(text1):\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.findall(r'\"(.*?)\"', text1)\n",
                    "input": {
                        "text1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef extract_quotation(text1):\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.findall(r'\"(.*?)\"', text1)\n",
                    "input": {
                        "text1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef extract_quotation(text1):\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.findall(r'\"(.*?)\"', text1)\n",
                    "input": {
                        "text1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/726": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/726": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef multiply_elements(test_tup):\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n",
                    "input": {
                        "test_tup": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef multiply_elements(test_tup):\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n",
                    "input": {
                        "test_tup": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef multiply_elements(test_tup):\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n",
                    "input": {
                        "test_tup": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef multiply_elements(test_tup):\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n",
                    "input": {
                        "test_tup": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/728": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/728": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_list(lst1,lst2):\n  assert len(lst1) == len(lst2), \"invalid inputs\" # $_CONTRACT_$\n  return [a + b for a, b in zip(lst1, lst2)] \n",
                    "input": {
                        "lst2": [],
                        "lst1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_list(lst1,lst2):\n  assert len(lst1) == len(lst2), \"invalid inputs\" # $_CONTRACT_$\n  return [a + b for a, b in zip(lst1, lst2)] \n",
                    "input": {
                        "lst2": [],
                        "lst1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_list(lst1,lst2):\n  assert len(lst1) == len(lst2), \"invalid inputs\" # $_CONTRACT_$\n  return [a + b for a, b in zip(lst1, lst2)] \n",
                    "input": {
                        "lst1": [
                            5.0
                        ],
                        "lst2": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_list(lst1,lst2):\n  assert len(lst1) == len(lst2), \"invalid inputs\" # $_CONTRACT_$\n  return [a + b for a, b in zip(lst1, lst2)] \n",
                    "input": {
                        "lst2": [],
                        "lst1": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/730": {
        "satisfied_, violated_assert_0": {
            "Mbpp/730": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return [key for key, _ in groupby(nums)] \n",
                    "input": {
                        "nums": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return [key for key, _ in groupby(nums)] \n",
                    "input": {
                        "nums": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return [key for key, _ in groupby(nums)] \n",
                    "input": {
                        "nums": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    return [key for key, _ in groupby(nums)] \n",
                    "input": {
                        "nums": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/731": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {
            "Mbpp/731": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "0!",
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "0!",
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "1!",
                        "h": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "1!",
                        "h": "1"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {
            "Mbpp/731": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -1,
                        "h": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -1,
                        "h": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {
            "Mbpp/731": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "!",
                        "h": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "!",
                        "h": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "0",
                        "h": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "0",
                        "h": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "0!",
                        "h": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "0!",
                        "h": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "",
                        "h": -5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "",
                        "h": -5854
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {
            "Mbpp/731": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -1,
                        "h": -282
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -1,
                        "h": -282
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -1,
                        "h": -281
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -1,
                        "h": -281
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -1,
                        "h": -283
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -1,
                        "h": -283
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -16908,
                        "h": -283
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -16908,
                        "h": -283
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {
            "Mbpp/731": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 1,
                        "h": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 1,
                        "h": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 1,
                        "h": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 1,
                        "h": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 2,
                        "h": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {
            "Mbpp/731": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 1,
                        "h": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 1,
                        "h": -8365
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 1,
                        "h": -8366
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 2,
                        "h": -8366
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 25908,
                        "h": -8366
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {
            "Mbpp/731": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "!0!",
                        "h": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "!",
                        "h": 11798
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "0",
                        "h": 11797
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "0!",
                        "h": 11797
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": "A",
                        "h": 11796
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {
            "Mbpp/731": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": 0,
                        "h": 1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -8365,
                        "h": 32286
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -8365,
                        "h": 32287
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -8364,
                        "h": 32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\nimport math\ndef lateralsurface_cone(r,h):\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n",
                    "input": {
                        "r": -8363,
                        "h": 32285
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/732": {
        "satisfied_, violated_assert_0": {
            "Mbpp/732": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef replace_specialchar(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return re.sub(\"[ ,.]\", \":\", text)\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef replace_specialchar(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return re.sub(\"[ ,.]\", \":\", text)\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef replace_specialchar(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return re.sub(\"[ ,.]\", \":\", text)\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef replace_specialchar(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return re.sub(\"[ ,.]\", \":\", text)\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/734": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/734": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_Of_Subarray_Prod(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result\n",
                    "input": {
                        "arr": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_Of_Subarray_Prod(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result\n",
                    "input": {
                        "arr": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_Of_Subarray_Prod(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result\n",
                    "input": {
                        "arr": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_Of_Subarray_Prod(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result\n",
                    "input": {
                        "arr": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/734": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/735": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/735": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef toggle_middle_bits(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef toggle_middle_bits(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef toggle_middle_bits(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef toggle_middle_bits(n):\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/735": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef toggle_middle_bits(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef toggle_middle_bits(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef toggle_middle_bits(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef toggle_middle_bits(n):\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/736": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/737": {
        "satisfied_, violated_assert_0": {
            "Mbpp/737": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re \ndef check_str(string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)\n",
                    "input": {
                        "string": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re \ndef check_str(string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)\n",
                    "input": {
                        "string": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re \ndef check_str(string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)\n",
                    "input": {
                        "string": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re \ndef check_str(string):\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)\n",
                    "input": {
                        "string": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/739": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/739": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math \ndef find_Index(n):\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n",
                    "input": {
                        "n": -21239
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math \ndef find_Index(n):\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n",
                    "input": {
                        "n": -33036
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math \ndef find_Index(n):\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n",
                    "input": {
                        "n": -43486
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math \ndef find_Index(n):\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n",
                    "input": {
                        "n": -71586
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/740": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/740": []
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/740": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef tuple_to_dict(test_tup):\n  assert len(test_tup) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n",
                    "input": {
                        "test_tup": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef tuple_to_dict(test_tup):\n  assert len(test_tup) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n",
                    "input": {
                        "test_tup": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef tuple_to_dict(test_tup):\n  assert len(test_tup) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n",
                    "input": {
                        "test_tup": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef tuple_to_dict(test_tup):\n  assert len(test_tup) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n",
                    "input": {
                        "test_tup": [
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/741": {
        "satisfied_, violated_assert_0": {
            "Mbpp/741": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef all_Characters_Same(s) :\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return all(ch == s[0] for ch in s[1:])\n",
                    "input": {
                        "s": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef all_Characters_Same(s) :\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return all(ch == s[0] for ch in s[1:])\n",
                    "input": {
                        "s": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef all_Characters_Same(s) :\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return all(ch == s[0] for ch in s[1:])\n",
                    "input": {
                        "s": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef all_Characters_Same(s) :\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return all(ch == s[0] for ch in s[1:])\n",
                    "input": {
                        "s": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/742": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/742": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef area_tetrahedron(side):\n  assert isinstance(side, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(3)*(side*side)\n",
                    "input": {
                        "side": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef area_tetrahedron(side):\n  assert isinstance(side, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(3)*(side*side)\n",
                    "input": {
                        "side": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef area_tetrahedron(side):\n  assert isinstance(side, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(3)*(side*side)\n",
                    "input": {
                        "side": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math\ndef area_tetrahedron(side):\n  assert isinstance(side, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(3)*(side*side)\n",
                    "input": {
                        "side": "A"
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/742": []
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/743": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/743": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rotate_right(l, m):\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n  return l[-m:] + l[:-m]\n",
                    "input": {
                        "l": [
                            2.0,
                            3.0
                        ],
                        "m": -1
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rotate_right(l, m):\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n  return l[-m:] + l[:-m]\n",
                    "input": {
                        "l": [
                            5.0,
                            4.0
                        ],
                        "m": -10451
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rotate_right(l, m):\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n  return l[-m:] + l[:-m]\n",
                    "input": {
                        "l": [],
                        "m": -11593
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef rotate_right(l, m):\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n  return l[-m:] + l[:-m]\n",
                    "input": {
                        "l": [],
                        "m": 8946
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/744": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/745": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/745": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 9.0,
                        "endnum": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 9.0,
                        "endnum": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 9.0,
                        "endnum": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 11.0,
                        "endnum": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 11.0,
                        "endnum": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 11.0,
                        "endnum": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/745": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 2,
                        "endnum": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 3,
                        "endnum": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 4,
                        "endnum": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 5,
                        "endnum": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 6,
                        "endnum": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {
            "Mbpp/745": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 2.0,
                        "endnum": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 3.0,
                        "endnum": 3
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 4.0,
                        "endnum": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 5.0,
                        "endnum": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 6.0,
                        "endnum": 6
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/745": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 1,
                        "endnum": 0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 21239,
                        "endnum": 21238
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 30094,
                        "endnum": 30093
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 38459,
                        "endnum": 38458
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef divisible_by_digits(startnum, endnum):\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n",
                    "input": {
                        "startnum": 48909,
                        "endnum": 48908
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/748": {
        "satisfied_, violated_assert_0": {
            "Mbpp/748": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef capital_words_spaces(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n",
                    "input": {
                        "str1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef capital_words_spaces(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n",
                    "input": {
                        "str1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef capital_words_spaces(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n",
                    "input": {
                        "str1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef capital_words_spaces(str1):\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n",
                    "input": {
                        "str1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/750": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/750": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 6.0,
                        "test_list": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 6.0,
                        "test_list": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 9.0,
                        "test_list": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 9.0,
                        "test_list": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 12.0,
                        "test_list": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 12.0,
                        "test_list": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/750": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 2.0,
                        "test_list": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 3.0,
                        "test_list": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 5.0,
                        "test_list": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 4.0,
                        "test_list": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": 7.0,
                        "test_list": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/750": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": [
                            3.0
                        ],
                        "test_list": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": [
                            4.0
                        ],
                        "test_list": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": [
                            6.0
                        ],
                        "test_list": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": [
                            8.0
                        ],
                        "test_list": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef add_tuple(test_list, test_tup):\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  return test_list + list(test_tup)\n",
                    "input": {
                        "test_tup": [
                            10.0
                        ],
                        "test_list": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/751": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/751": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  return check_min_heap_helper(arr, 0)\n",
                    "input": {
                        "arr": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  return check_min_heap_helper(arr, 0)\n",
                    "input": {
                        "arr": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  return check_min_heap_helper(arr, 0)\n",
                    "input": {
                        "arr": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  return check_min_heap_helper(arr, 0)\n",
                    "input": {
                        "arr": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/753": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/754": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/755": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/755": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef second_smallest(numbers):\n  assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs\" # $_CONTRACT_$\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]\n",
                    "input": {
                        "numbers": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef second_smallest(numbers):\n  assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs\" # $_CONTRACT_$\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]\n",
                    "input": {
                        "numbers": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef second_smallest(numbers):\n  assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs\" # $_CONTRACT_$\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]\n",
                    "input": {
                        "numbers": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef second_smallest(numbers):\n  assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs\" # $_CONTRACT_$\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]\n",
                    "input": {
                        "numbers": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/757": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/757": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_reverse_pairs(test_list):\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n",
                    "input": {
                        "test_list": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_reverse_pairs(test_list):\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n",
                    "input": {
                        "test_list": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_reverse_pairs(test_list):\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n",
                    "input": {
                        "test_list": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef count_reverse_pairs(test_list):\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n",
                    "input": {
                        "test_list": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/758": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/759": {
        "satisfied_, violated_assert_0": {
            "Mbpp/759": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_decimal(num):\n    assert isinstance(num, str), \"invalid inputs\" # $_CONTRACT_$\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None\n",
                    "input": {
                        "num": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_decimal(num):\n    assert isinstance(num, str), \"invalid inputs\" # $_CONTRACT_$\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None\n",
                    "input": {
                        "num": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_decimal(num):\n    assert isinstance(num, str), \"invalid inputs\" # $_CONTRACT_$\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None\n",
                    "input": {
                        "num": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_decimal(num):\n    assert isinstance(num, str), \"invalid inputs\" # $_CONTRACT_$\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None\n",
                    "input": {
                        "num": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/760": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/760": []
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/762": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/762": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_monthnumber_number(monthnum3):\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n",
                    "input": {
                        "monthnum3": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_monthnumber_number(monthnum3):\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n",
                    "input": {
                        "monthnum3": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_monthnumber_number(monthnum3):\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n",
                    "input": {
                        "monthnum3": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef check_monthnumber_number(monthnum3):\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n",
                    "input": {
                        "monthnum3": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/762": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_monthnumber_number(monthnum3):\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n",
                    "input": {
                        "monthnum3": 21251
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_monthnumber_number(monthnum3):\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n",
                    "input": {
                        "monthnum3": 33048
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_monthnumber_number(monthnum3):\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n",
                    "input": {
                        "monthnum3": 43498
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef check_monthnumber_number(monthnum3):\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n",
                    "input": {
                        "monthnum3": 71598
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/763": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/764": {
        "satisfied_, violated_assert_0": {
            "Mbpp/764": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef number_ctr(s):\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return sum(c.isdigit() for c in s)\n",
                    "input": {
                        "s": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef number_ctr(s):\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return sum(c.isdigit() for c in s)\n",
                    "input": {
                        "s": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef number_ctr(s):\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return sum(c.isdigit() for c in s)\n",
                    "input": {
                        "s": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef number_ctr(s):\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return sum(c.isdigit() for c in s)\n",
                    "input": {
                        "s": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/765": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/765": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math \ndef is_polite(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \n",
                    "input": {
                        "n": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math \ndef is_polite(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \n",
                    "input": {
                        "n": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math \ndef is_polite(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \n",
                    "input": {
                        "n": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math \ndef is_polite(n):\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \n",
                    "input": {
                        "n": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/766": {
        "satisfied_, violated_assert_0": {
            "Mbpp/766": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef pair_wise(l1):\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    return list(zip(l1, l1[1:]))\n",
                    "input": {
                        "l1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef pair_wise(l1):\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    return list(zip(l1, l1[1:]))\n",
                    "input": {
                        "l1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef pair_wise(l1):\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    return list(zip(l1, l1[1:]))\n",
                    "input": {
                        "l1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef pair_wise(l1):\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    return list(zip(l1, l1[1:]))\n",
                    "input": {
                        "l1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/767": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/767": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/769": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/770": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/770": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef odd_num_sum(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef odd_num_sum(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef odd_num_sum(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef odd_num_sum(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/770": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_num_sum(n) :\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n",
                    "input": {
                        "n": -21238
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_num_sum(n) :\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n",
                    "input": {
                        "n": -33035
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_num_sum(n) :\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n",
                    "input": {
                        "n": -43485
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_num_sum(n) :\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n",
                    "input": {
                        "n": -71585
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/771": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/772": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/772": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 6.0,
                        "test_str": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 6.0,
                        "test_str": 7.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 8.0,
                        "test_str": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 8.0,
                        "test_str": 9.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 10.0,
                        "test_str": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 10.0,
                        "test_str": 11.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/772": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 2.0,
                        "test_str": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 3.0,
                        "test_str": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 4.0,
                        "test_str": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 5.0,
                        "test_str": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 6.0,
                        "test_str": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/772": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 2,
                        "test_str": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 3,
                        "test_str": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 4,
                        "test_str": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 5,
                        "test_str": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_length(test_str, K):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n",
                    "input": {
                        "K": 6,
                        "test_str": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/773": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/773": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 7.0,
                        "pattern": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 7.0,
                        "pattern": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 9.0,
                        "pattern": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 9.0,
                        "pattern": 8.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 11.0,
                        "pattern": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 11.0,
                        "pattern": 10.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/773": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": "!0!",
                        "pattern": 2.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": "!",
                        "pattern": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": "0",
                        "pattern": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": "0!",
                        "pattern": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": "",
                        "pattern": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {
            "Mbpp/773": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 2.0,
                        "pattern": "!0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 3.0,
                        "pattern": "!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 4.0,
                        "pattern": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 5.0,
                        "pattern": "0!"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef occurance_substring(text,pattern):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n",
                    "input": {
                        "text": 6.0,
                        "pattern": ""
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/775": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/775": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_position(nums):\n\tassert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(n % 2 == 1 for n in nums[1::2])\n",
                    "input": {
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_position(nums):\n\tassert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(n % 2 == 1 for n in nums[1::2])\n",
                    "input": {
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_position(nums):\n\tassert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(n % 2 == 1 for n in nums[1::2])\n",
                    "input": {
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_position(nums):\n\tassert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(n % 2 == 1 for n in nums[1::2])\n",
                    "input": {
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/777": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/777": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_sum(arr):\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n",
                    "input": {
                        "arr": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_sum(arr):\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n",
                    "input": {
                        "arr": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_sum(arr):\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n",
                    "input": {
                        "arr": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef find_sum(arr):\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n",
                    "input": {
                        "arr": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/777": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_sum(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n",
                    "input": {
                        "arr": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_sum(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n",
                    "input": {
                        "arr": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_sum(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n",
                    "input": {
                        "arr": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef find_sum(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(set(arr))\n",
                    "input": {
                        "arr": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/778": {
        "satisfied_, violated_assert_0": {
            "Mbpp/778": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [list(group) for _, group in groupby(list1)]\n",
                    "input": {
                        "list1": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [list(group) for _, group in groupby(list1)]\n",
                    "input": {
                        "list1": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [list(group) for _, group in groupby(list1)]\n",
                    "input": {
                        "list1": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    return [list(group) for _, group in groupby(list1)]\n",
                    "input": {
                        "list1": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/780": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {},
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/781": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/781": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math \ndef count_divisors(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math \ndef count_divisors(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math \ndef count_divisors(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport math \ndef count_divisors(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/781": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math \ndef count_divisors(n) :\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n",
                    "input": {
                        "n": -7720
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math \ndef count_divisors(n) :\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n",
                    "input": {
                        "n": -10157
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math \ndef count_divisors(n) :\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n",
                    "input": {
                        "n": -21954
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport math \ndef count_divisors(n) :\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n",
                    "input": {
                        "n": -54239
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/782": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/782": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_length_sum(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_\n",
                    "input": {
                        "arr": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_length_sum(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_\n",
                    "input": {
                        "arr": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_length_sum(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_\n",
                    "input": {
                        "arr": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef odd_length_sum(arr):\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_\n",
                    "input": {
                        "arr": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/784": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3": {},
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3": {},
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2": {},
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_": {}
    },
    "Mbpp/786": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/786": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": "1",
                        "a": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": "1",
                        "a": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "a": [
                            "!0!"
                        ],
                        "x": false
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": true,
                        "a": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/786": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": "!0!",
                        "a": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": "!",
                        "a": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": "0",
                        "a": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": "0!",
                        "a": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": "A",
                        "a": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/786": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": 2,
                        "a": [
                            "!0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": 3,
                        "a": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": 4,
                        "a": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "a": [
                            "0!"
                        ],
                        "x": 5
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\nimport bisect\ndef right_insertion(a, x):\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    return bisect.bisect_right(a, x)\n",
                    "input": {
                        "x": 6,
                        "a": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/787": {
        "satisfied_, violated_assert_0": {
            "Mbpp/787": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_three(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_three(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_three(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_match_three(text):\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/788": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/790": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/790": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef even_position(nums):\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n",
                    "input": {
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef even_position(nums):\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n",
                    "input": {
                        "nums": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef even_position(nums):\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n",
                    "input": {
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef even_position(nums):\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n",
                    "input": {
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/791": {
        "satisfied_, violated_assert_0": {},
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/792": {
        "satisfied_, violated_assert_0": {
            "Mbpp/792": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_list(input_list):\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(isinstance(e, list) for e in input_list)\n",
                    "input": {
                        "input_list": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_list(input_list):\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(isinstance(e, list) for e in input_list)\n",
                    "input": {
                        "input_list": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_list(input_list):\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(isinstance(e, list) for e in input_list)\n",
                    "input": {
                        "input_list": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef count_list(input_list):\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(isinstance(e, list) for e in input_list)\n",
                    "input": {
                        "input_list": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/793": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {
            "Mbpp/793": [
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0",
                        "arr": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0",
                        "arr": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0!",
                        "arr": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0!",
                        "arr": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "",
                        "arr": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "",
                        "arr": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {
            "Mbpp/793": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!0!",
                        "arr": [
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!0!",
                        "arr": [
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!",
                        "arr": [
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!",
                        "arr": [
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0",
                        "arr": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0",
                        "arr": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0!",
                        "arr": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0!",
                        "arr": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "A",
                        "arr": [
                            6
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "A",
                        "arr": [
                            6
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {
            "Mbpp/793": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!0!",
                        "arr": [
                            2.0,
                            3.0,
                            4.0,
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!0!",
                        "arr": [
                            2.0,
                            3.0,
                            4.0,
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!",
                        "arr": [
                            9.0,
                            8.0,
                            6.0,
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!",
                        "arr": [
                            9.0,
                            8.0,
                            6.0,
                            7.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0",
                        "arr": [
                            13.0,
                            11.0,
                            12.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0",
                        "arr": [
                            13.0,
                            11.0,
                            12.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0!",
                        "arr": [
                            15.0,
                            17.0,
                            16.0,
                            14.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0!",
                        "arr": [
                            15.0,
                            17.0,
                            16.0,
                            14.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "",
                        "arr": [
                            19.0,
                            20.0,
                            21.0,
                            18.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "",
                        "arr": [
                            19.0,
                            20.0,
                            21.0,
                            18.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {
            "Mbpp/793": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!0!",
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!0!",
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!",
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "!",
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "arr": [],
                        "x": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "arr": [],
                        "x": "0"
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0!",
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "0!",
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef last(arr,x):\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "A",
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": "A",
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {
            "Mbpp/793": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 5,
                        "arr": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 6,
                        "arr": [
                            9.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {
            "Mbpp/793": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 3,
                        "arr": [
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 5,
                        "arr": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 7,
                        "arr": [
                            6
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 9,
                        "arr": [
                            8
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 11,
                        "arr": [
                            10
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {
            "Mbpp/793": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 2.0,
                        "arr": [
                            3.0,
                            4.0,
                            5.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 2,
                        "arr": [
                            7.0,
                            8.0,
                            9.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 3,
                        "arr": [
                            11.0,
                            13.0,
                            12.0,
                            14.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "arr": [
                            18.0,
                            17.0,
                            15.0,
                            16.0
                        ],
                        "x": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 5,
                        "arr": [
                            20.0,
                            22.0,
                            19.0,
                            21.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {
            "Mbpp/793": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 2,
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 3,
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "arr": [],
                        "x": 4
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 5,
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef last(arr,x):\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n",
                    "input": {
                        "x": 6,
                        "arr": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {},
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {},
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {},
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    },
    "Mbpp/794": {
        "satisfied_, violated_assert_0": {
            "Mbpp/794": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_starta_endb(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_starta_endb(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_starta_endb(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\nimport re\ndef text_starta_endb(text):\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/796": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {},
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/797": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/797": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r):\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum_odd(r) - sum_odd(l - 1)\n",
                    "input": {
                        "l": 21238,
                        "r": -2437
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r):\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum_odd(r) - sum_odd(l - 1)\n",
                    "input": {
                        "l": -1,
                        "r": 2
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r):\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum_odd(r) - sum_odd(l - 1)\n",
                    "input": {
                        "l": 10450,
                        "r": -30612
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/798": {
        "satisfied_, violated_assert_0;assert_1": {},
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/798": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef _sum(arr):\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(arr)\n",
                    "input": {
                        "arr": [
                            "!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef _sum(arr):\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(arr)\n",
                    "input": {
                        "arr": [
                            "0"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef _sum(arr):\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(arr)\n",
                    "input": {
                        "arr": [
                            "0!"
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef _sum(arr):\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(arr)\n",
                    "input": {
                        "arr": [
                            ""
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/799": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/800": {
        "satisfied_, violated_assert_0": {
            "Mbpp/800": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_all_spaces(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return text.replace(' ', '')\n",
                    "input": {
                        "text": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_all_spaces(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return text.replace(' ', '')\n",
                    "input": {
                        "text": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_all_spaces(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return text.replace(' ', '')\n",
                    "input": {
                        "text": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef remove_all_spaces(text):\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n return text.replace(' ', '')\n",
                    "input": {
                        "text": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/801": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {
            "Mbpp/801": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            21.0,
                            22.0
                        ],
                        "x": [
                            24.0,
                            23.0
                        ],
                        "z": [
                            25.0,
                            20.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            21.0,
                            22.0
                        ],
                        "x": [
                            24.0,
                            23.0
                        ],
                        "z": [
                            25.0,
                            20.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            21.0,
                            22.0
                        ],
                        "x": [
                            24.0,
                            23.0
                        ],
                        "z": [
                            25.0,
                            20.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            27.0,
                            28.0
                        ],
                        "z": [
                            26.0,
                            31.0
                        ],
                        "y": [
                            30.0,
                            29.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            27.0,
                            28.0
                        ],
                        "z": [
                            26.0,
                            31.0
                        ],
                        "y": [
                            30.0,
                            29.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            27.0,
                            28.0
                        ],
                        "z": [
                            26.0,
                            31.0
                        ],
                        "y": [
                            30.0,
                            29.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/801": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            6.0,
                            3.0
                        ],
                        "x": [
                            2.0,
                            2
                        ],
                        "z": [
                            5.0,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            6.0,
                            3.0
                        ],
                        "x": [
                            2.0,
                            2
                        ],
                        "z": [
                            5.0,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            11.0,
                            3
                        ],
                        "z": [
                            10.0,
                            7.0
                        ],
                        "y": [
                            9.0,
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            11.0,
                            3
                        ],
                        "z": [
                            10.0,
                            7.0
                        ],
                        "y": [
                            9.0,
                            8.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            14.0,
                            4
                        ],
                        "z": [
                            12.0,
                            13.0
                        ],
                        "y": [
                            16.0,
                            15.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            14.0,
                            4
                        ],
                        "z": [
                            12.0,
                            13.0
                        ],
                        "y": [
                            16.0,
                            15.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            19.0,
                            21.0
                        ],
                        "x": [
                            18.0,
                            5
                        ],
                        "z": [
                            20.0,
                            17.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            19.0,
                            21.0
                        ],
                        "x": [
                            18.0,
                            5
                        ],
                        "z": [
                            20.0,
                            17.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            22.0,
                            6
                        ],
                        "z": [
                            23.0,
                            25.0
                        ],
                        "y": [
                            26.0,
                            24.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            22.0,
                            6
                        ],
                        "z": [
                            23.0,
                            25.0
                        ],
                        "y": [
                            26.0,
                            24.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {
            "Mbpp/801": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            3.0,
                            2
                        ],
                        "x": [
                            2.0,
                            6.0
                        ],
                        "z": [
                            5.0,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            3.0,
                            2
                        ],
                        "x": [
                            2.0,
                            6.0
                        ],
                        "z": [
                            5.0,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            11.0,
                            9.0
                        ],
                        "z": [
                            10.0,
                            7.0
                        ],
                        "y": [
                            8.0,
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            11.0,
                            9.0
                        ],
                        "z": [
                            10.0,
                            7.0
                        ],
                        "y": [
                            8.0,
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            14.0,
                            16.0
                        ],
                        "z": [
                            12.0,
                            13.0
                        ],
                        "y": [
                            15.0,
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            14.0,
                            16.0
                        ],
                        "z": [
                            12.0,
                            13.0
                        ],
                        "y": [
                            15.0,
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            21.0,
                            5
                        ],
                        "x": [
                            18.0,
                            19.0
                        ],
                        "z": [
                            20.0,
                            17.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            21.0,
                            5
                        ],
                        "x": [
                            18.0,
                            19.0
                        ],
                        "z": [
                            20.0,
                            17.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            22.0,
                            26.0
                        ],
                        "z": [
                            23.0,
                            25.0
                        ],
                        "y": [
                            24.0,
                            6
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            22.0,
                            26.0
                        ],
                        "z": [
                            23.0,
                            25.0
                        ],
                        "y": [
                            24.0,
                            6
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/801": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            2.0,
                            2
                        ],
                        "z": [
                            5.0,
                            3.0
                        ],
                        "y": [
                            4.0,
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            7.0,
                            4
                        ],
                        "z": [
                            6.0,
                            9.0
                        ],
                        "y": [
                            8.0,
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            13.0,
                            6
                        ],
                        "z": [
                            11.0,
                            12.0
                        ],
                        "y": [
                            10.0,
                            7
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            17.0,
                            9
                        ],
                        "x": [
                            14.0,
                            8
                        ],
                        "z": [
                            15.0,
                            16.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            20.0,
                            10
                        ],
                        "z": [
                            19.0,
                            18.0
                        ],
                        "y": [
                            21.0,
                            11
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {
            "Mbpp/801": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            3.0,
                            5.0
                        ],
                        "x": [
                            2.0,
                            6.0
                        ],
                        "z": [
                            4.0,
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            3.0,
                            5.0
                        ],
                        "x": [
                            2.0,
                            6.0
                        ],
                        "z": [
                            4.0,
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            11.0,
                            9.0
                        ],
                        "z": [
                            7.0,
                            3
                        ],
                        "y": [
                            8.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            11.0,
                            9.0
                        ],
                        "z": [
                            7.0,
                            3
                        ],
                        "y": [
                            8.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            14.0,
                            16.0
                        ],
                        "z": [
                            13.0,
                            4
                        ],
                        "y": [
                            15.0,
                            12.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            14.0,
                            16.0
                        ],
                        "z": [
                            13.0,
                            4
                        ],
                        "y": [
                            15.0,
                            12.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            21.0,
                            20.0
                        ],
                        "x": [
                            18.0,
                            19.0
                        ],
                        "z": [
                            17.0,
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            21.0,
                            20.0
                        ],
                        "x": [
                            18.0,
                            19.0
                        ],
                        "z": [
                            17.0,
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            22.0,
                            26.0
                        ],
                        "z": [
                            25.0,
                            6
                        ],
                        "y": [
                            24.0,
                            23.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            22.0,
                            26.0
                        ],
                        "z": [
                            25.0,
                            6
                        ],
                        "y": [
                            24.0,
                            23.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/801": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            2.0,
                            2
                        ],
                        "z": [
                            3.0,
                            3
                        ],
                        "y": [
                            4.0,
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            7.0,
                            4
                        ],
                        "z": [
                            9.0,
                            5
                        ],
                        "y": [
                            8.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            13.0,
                            6
                        ],
                        "z": [
                            12.0,
                            7
                        ],
                        "y": [
                            10.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            17.0,
                            15.0
                        ],
                        "x": [
                            14.0,
                            8
                        ],
                        "z": [
                            16.0,
                            9
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            20.0,
                            10
                        ],
                        "z": [
                            18.0,
                            11
                        ],
                        "y": [
                            21.0,
                            19.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {
            "Mbpp/801": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            2.0,
                            4.0
                        ],
                        "z": [
                            3.0,
                            3
                        ],
                        "y": [
                            5.0,
                            2
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            7.0,
                            8.0
                        ],
                        "z": [
                            9.0,
                            5
                        ],
                        "y": [
                            6.0,
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            13.0,
                            10.0
                        ],
                        "z": [
                            12.0,
                            7
                        ],
                        "y": [
                            11.0,
                            6
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "y": [
                            15.0,
                            8
                        ],
                        "x": [
                            14.0,
                            17.0
                        ],
                        "z": [
                            16.0,
                            9
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef test_three_equal(x,y,z):\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n",
                    "input": {
                        "x": [
                            20.0,
                            21.0
                        ],
                        "z": [
                            18.0,
                            11
                        ],
                        "y": [
                            19.0,
                            10
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/803": {
        "satisfied_, violated_assert_0": {
            "Mbpp/803": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_perfect_square(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))\n",
                    "input": {
                        "n": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_perfect_square(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))\n",
                    "input": {
                        "n": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_perfect_square(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))\n",
                    "input": {
                        "n": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef is_perfect_square(n) :\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))\n",
                    "input": {
                        "n": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_": {}
    },
    "Mbpp/804": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/804": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef is_product_even(arr):\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return any(x % 2 == 0 for x in arr)\n",
                    "input": {
                        "arr": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef is_product_even(arr):\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return any(x % 2 == 0 for x in arr)\n",
                    "input": {
                        "arr": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef is_product_even(arr):\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return any(x % 2 == 0 for x in arr)\n",
                    "input": {
                        "arr": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef is_product_even(arr):\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    return any(x % 2 == 0 for x in arr)\n",
                    "input": {
                        "arr": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/804": []
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/805": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {},
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {},
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {},
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/806": {
        "satisfied_, violated_assert_0;assert_1": {
            "Mbpp/806": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_0",
                    "code": "\ndef max_run_uppercase(test_str):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n",
                    "input": {
                        "test_str": 3.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_0",
                    "code": "\ndef max_run_uppercase(test_str):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n",
                    "input": {
                        "test_str": 4.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_0",
                    "code": "\ndef max_run_uppercase(test_str):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n",
                    "input": {
                        "test_str": 5.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_0",
                    "code": "\ndef max_run_uppercase(test_str):\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n",
                    "input": {
                        "test_str": 6.0
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_0, violated_assert_1": {
            "Mbpp/806": []
        },
        "satisfied_assert_1, violated_assert_0": {},
        "satisfied_assert_0;assert_1, violated_": {}
    },
    "Mbpp/807": {
        "satisfied_, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0, violated_assert_1;assert_2": {
            "Mbpp/807": [
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_odd(nums):\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_odd(nums):\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_odd(nums):\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef first_odd(nums):\n  assert any(el % 2 != 0 for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1, violated_assert_2": {
            "Mbpp/807": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef first_odd(nums):\n  assert any(el % 2 != 0 for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": []
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef first_odd(nums):\n  assert any(el % 2 != 0 for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2, violated_assert_1": {
            "Mbpp/807": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_odd(nums):\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            2,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_odd(nums):\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            3,
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_odd(nums):\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            -1,
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_odd(nums):\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            3,
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_1",
                    "code": "\ndef first_odd(nums):\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n",
                    "input": {
                        "nums": [
                            -2,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_1;assert_2, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2, violated_": {}
    },
    "Mbpp/809": {
        "satisfied_, violated_assert_0;assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0, violated_assert_1;assert_2;assert_3;assert_4": {},
        "satisfied_assert_1, violated_assert_0;assert_2;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1, violated_assert_2;assert_3;assert_4": {
            "Mbpp/809": [
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            18.0
                        ],
                        "test_tup2": [
                            17.0,
                            16.0,
                            15.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            18.0
                        ],
                        "test_tup2": [
                            17.0,
                            16.0,
                            15.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            18.0
                        ],
                        "test_tup2": [
                            17.0,
                            16.0,
                            15.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            21.0
                        ],
                        "test_tup2": [
                            20.0,
                            19.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            21.0
                        ],
                        "test_tup2": [
                            20.0,
                            19.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            21.0
                        ],
                        "test_tup2": [
                            20.0,
                            19.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2, violated_assert_0;assert_1;assert_3;assert_4": {},
        "satisfied_assert_0;assert_2, violated_assert_1;assert_3;assert_4": {},
        "satisfied_assert_1;assert_2, violated_assert_0;assert_3;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2, violated_assert_3;assert_4": {
            "Mbpp/809": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            2.0
                        ],
                        "test_tup1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            2.0
                        ],
                        "test_tup1": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            4.0
                        ],
                        "test_tup2": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            4.0
                        ],
                        "test_tup2": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            7.0
                        ],
                        "test_tup2": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            7.0
                        ],
                        "test_tup2": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            8.0
                        ],
                        "test_tup2": [
                            9.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            8.0
                        ],
                        "test_tup2": [
                            9.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            10.0
                        ],
                        "test_tup1": [
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            10.0
                        ],
                        "test_tup1": [
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3, violated_assert_0;assert_1;assert_2;assert_4": {},
        "satisfied_assert_0;assert_3, violated_assert_1;assert_2;assert_4": {},
        "satisfied_assert_1;assert_3, violated_assert_0;assert_2;assert_4": {},
        "satisfied_assert_0;assert_1;assert_3, violated_assert_2;assert_4": {
            "Mbpp/809": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            5
                        ],
                        "test_tup2": [
                            4.0,
                            3.0,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            5
                        ],
                        "test_tup2": [
                            4.0,
                            3.0,
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            7.0,
                            6.0,
                            5.0
                        ],
                        "test_tup1": [
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            7.0,
                            6.0,
                            5.0
                        ],
                        "test_tup1": [
                            3
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            10.0,
                            9.0,
                            8.0
                        ],
                        "test_tup1": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            10.0,
                            9.0,
                            8.0
                        ],
                        "test_tup1": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            6
                        ],
                        "test_tup2": [
                            13.0,
                            12.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            6
                        ],
                        "test_tup2": [
                            13.0,
                            12.0,
                            11.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            7
                        ],
                        "test_tup2": [
                            16.0,
                            15.0,
                            14.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            7
                        ],
                        "test_tup2": [
                            16.0,
                            15.0,
                            14.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3, violated_assert_0;assert_1;assert_4": {},
        "satisfied_assert_0;assert_2;assert_3, violated_assert_1;assert_4": {},
        "satisfied_assert_1;assert_2;assert_3, violated_assert_0;assert_4": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3, violated_assert_4": {
            "Mbpp/809": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            2
                        ],
                        "test_tup2": [
                            2.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            3
                        ],
                        "test_tup2": [
                            3.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            4.0
                        ],
                        "test_tup1": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            5.0
                        ],
                        "test_tup1": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_4",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            6
                        ],
                        "test_tup2": [
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_4, violated_assert_0;assert_1;assert_2;assert_3": {},
        "satisfied_assert_0;assert_4, violated_assert_1;assert_2;assert_3": {},
        "satisfied_assert_1;assert_4, violated_assert_0;assert_2;assert_3": {},
        "satisfied_assert_0;assert_1;assert_4, violated_assert_2;assert_3": {
            "Mbpp/809": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            4.0,
                            3.0,
                            2.0
                        ],
                        "test_tup2": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            4.0,
                            3.0,
                            2.0
                        ],
                        "test_tup2": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            7
                        ],
                        "test_tup1": [
                            7.0,
                            5.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            7
                        ],
                        "test_tup1": [
                            7.0,
                            5.0,
                            6.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            8
                        ],
                        "test_tup1": [
                            9.0,
                            8.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            8
                        ],
                        "test_tup1": [
                            9.0,
                            8.0,
                            10.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            13.0,
                            11.0,
                            12.0
                        ],
                        "test_tup2": [
                            9
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            13.0,
                            11.0,
                            12.0
                        ],
                        "test_tup2": [
                            9
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            16.0,
                            14.0,
                            15.0
                        ],
                        "test_tup2": [
                            10
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            16.0,
                            14.0,
                            15.0
                        ],
                        "test_tup2": [
                            10
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_4, violated_assert_0;assert_1;assert_3": {},
        "satisfied_assert_0;assert_2;assert_4, violated_assert_1;assert_3": {},
        "satisfied_assert_1;assert_2;assert_4, violated_assert_0;assert_3": {},
        "satisfied_assert_0;assert_1;assert_2;assert_4, violated_assert_3": {
            "Mbpp/809": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            2.0
                        ],
                        "test_tup2": [
                            4
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            3.0
                        ],
                        "test_tup2": [
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            6
                        ],
                        "test_tup1": [
                            4.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            7
                        ],
                        "test_tup1": [
                            5.0
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_3",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            6.0
                        ],
                        "test_tup2": [
                            8
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_3;assert_4, violated_assert_0;assert_1;assert_2": {},
        "satisfied_assert_0;assert_3;assert_4, violated_assert_1;assert_2": {},
        "satisfied_assert_1;assert_3;assert_4, violated_assert_0;assert_2": {},
        "satisfied_assert_0;assert_1;assert_3;assert_4, violated_assert_2": {
            "Mbpp/809": [
                {
                    "case_index": 1,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup2": [
                            6
                        ],
                        "test_tup1": [
                            7,
                            5
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 2,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            9
                        ],
                        "test_tup2": [
                            8,
                            11
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 3,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            13
                        ],
                        "test_tup2": [
                            12,
                            14
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 4,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            16
                        ],
                        "test_tup2": [
                            15,
                            17
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                },
                {
                    "case_index": 5,
                    "contract_in_key": "assert_2",
                    "code": "\ndef check_smaller(test_tup1, test_tup2):\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n",
                    "input": {
                        "test_tup1": [
                            19
                        ],
                        "test_tup2": [
                            18,
                            20
                        ]
                    },
                    "model_result": "AssertionError: invalid inputs"
                }
            ]
        },
        "satisfied_assert_2;assert_3;assert_4, violated_assert_0;assert_1": {},
        "satisfied_assert_0;assert_2;assert_3;assert_4, violated_assert_1": {},
        "satisfied_assert_1;assert_2;assert_3;assert_4, violated_assert_0": {},
        "satisfied_assert_0;assert_1;assert_2;assert_3;assert_4, violated_": {}
    }
}