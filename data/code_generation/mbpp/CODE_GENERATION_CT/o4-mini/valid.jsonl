{"name": "Mbpp/70", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: get_equal\nProblem Description:\n\"\"\"\nWrite a python function that determines if all the provided tuples have the same length; the input must be a list and every item within that list must be a tuple.\n\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> get_equal(6.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> get_equal([4.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_equal(Input):\n\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in Input), \"invalid inputs\" # $_CONTRACT_$\n  return len(set(len(item) for item in Input)) == 1\n", "constraints": {"assert_0": "assert isinstance(Input, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, tuple) for item in Input), \"invalid inputs"}}], "reasoning": ["I will add assertions checking for list type and tuple items, then compare tuple lengths returning True for equal lengths or empty list.</think>"]}
{"name": "Mbpp/792", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_list\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of lists in a given number of lists; the input must be a list. \n\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> count_list(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_list(input_list):\n\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(isinstance(e, list) for e in input_list)\n", "constraints": {"assert_0": "assert isinstance(input_list, list), \"invalid inputs"}}], "reasoning": ["I'll assert the input is a list and count how many elements are lists using isinstance and sum.</think>"]}
{"name": "Mbpp/137", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: zero_count\nProblem Description:\n\"\"\"\nWrite a python function that finds the ratio of zeroes to non-zeroes in an array of integers; the input must be a list, all elements in the list must be integers, and the list must not be empty.\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> zero_count([2.0])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> zero_count([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef zero_count(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in nums), \"invalid inputs", "assert_2": "assert len(nums) > 0, \"invalid inputs"}}], "reasoning": ["Validate that input is a non-empty list of ints, then count zeros and non-zeros and return their ratio.</think>"]}
{"name": "Mbpp/472", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_Consecutive\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given list contains consecutive numbers or not; the input must be a list, the list must not be empty, and all elements in the list must be integers.\n\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0:\n>>> check_Consecutive(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> check_Consecutive([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> check_Consecutive([3.0, 2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_Consecutive(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return sorted(l) == list(range(min(l),max(l)+1)) \n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert len(l) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in l), \"invalid inputs"}}], "reasoning": ["Validate input type, emptiness, and integer elements with asserts; then determine if max\u2212min+1 equals list length and ensure all elements are unique.</think>"]}
{"name": "Mbpp/109", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: odd_Equivalent\nProblem Description:\n\"\"\"\nWrite a python function that finds the number of numbers with an odd value when rotating a binary string the given number of times; the first input must be a string, the second input must be an integer, the string must only contain the characters '0' and '1', and the integer must be non-negative.\n\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3']: \n\nContract Test Cases:\nassert_0:\n>>> odd_Equivalent(2.0, -1)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> odd_Equivalent(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> odd_Equivalent('A', -1)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> odd_Equivalent(3.0, -1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef odd_Equivalent(s,n):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert isinstance(n, int), \"invalid inputs", "assert_2": "assert all([c in '01' for c in s]), \"invalid inputs", "assert_3": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["Implement input validation with assert statements, then perform right rotations n times, counting when the last bit is '1'.</think>"]}
{"name": "Mbpp/426", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: filter_oddnumbers\nProblem Description:\n\"\"\"\nWrite a python function that filters odd numbers from a list; the input must be a list and all elements in the list must be integers.\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> filter_oddnumbers([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef filter_oddnumbers(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n    return [n for n in nums if n % 2 == 1]\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, int) for n in nums), \"invalid inputs"}}], "reasoning": ["I will validate input type and elements, then filter odd integers.</think>"]}
{"name": "Mbpp/739", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Index\nProblem Description:\n\"\"\"\nWrite a python function that finds the index of the smallest triangular number with n digits; n must be an integer and n must be greater than or equal to 1.\n\nassert find_Index(2) == 4\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> find_Index(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> find_Index(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math \ndef find_Index(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 1, \"invalid inputs"}}], "reasoning": ["Enforce type int and n>=1 constraints, then compute minimal index i solving i(i+1)/2>=10^(n-1) using integer quadratic formula.</think>"]}
{"name": "Mbpp/451", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_whitespaces\nProblem Description:\n\"\"\"\nWrite a python function that removes all whitespaces from the given string while ensuring that the input is a string. \n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> remove_whitespaces(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef remove_whitespaces(text1):\n\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return text1.replace(' ', '')\n", "constraints": {"assert_0": "assert isinstance(text1, str), \"invalid inputs"}}], "reasoning": ["I will assert the input is a string and raise an error otherwise. Then remove all whitespace using split join.</think>"]}
{"name": "Mbpp/564", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_Pairs\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of possible unordered pairs from a list of integers where both elements are unequal; the input must be a list, all elements in the list must be integers, the second input must be an integer, and the integer must not exceed the length of the list. \n\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> count_Pairs([2.0], 2)\n \"AssertionError: invalid input\"\n\nassert_2: no suitable test case\n\nassert_3:\n>>> count_Pairs([3.0], 8367)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_Pairs(arr,n):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, int) for x in arr), \"invalid inputs", "assert_2": "assert isinstance(n, int), \"invalid inputs", "assert_3": "assert n <= len(arr), \"invalid inputs"}}], "reasoning": ["Implement input validation via assert statements, restrict to list of ints, n within [0, len], then count unequal pairs in first n elements by nested loops.</think>"]}
{"name": "Mbpp/474", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: replace_char\nProblem Description:\n\"\"\"\nWrite a python function that replaces characters in a string, ensuring that the first input is a string, the second input is a string of length one, the third input is a string, and the fourth input is also a string of length one. \n\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3', 'assert_4']: \n\nContract Test Cases:\nassert_0:\n>>> replace_char(2.0, 4.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> replace_char(6.0, 5.0, 7.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> replace_char(3.0, '', 2.0)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> replace_char(10.0, 8.0, 9.0)\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> replace_char(3.0, 2.0, '')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef replace_char(str1, ch, newch):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(newch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newch) == 1, \"invalid inputs\" # $_CONTRACT_$\n    return str1.replace(ch, newch)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs", "assert_1": "assert isinstance(ch, str), \"invalid inputs", "assert_2": "assert len(ch) == 1, \"invalid inputs", "assert_3": "assert isinstance(newch, str), \"invalid inputs", "assert_4": "assert len(newch) == 1, \"invalid inputs"}}], "reasoning": ["Check inputs types and lengths, then use str.replace to swap the character.</think>"]}
{"name": "Mbpp/140", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: extract_singly\nProblem Description:\n\"\"\"\nWrite a python function that flattens a list of lists into a single set of numbers, where the input must be a list or tuple, each element of the input must be a list or tuple, and every element within those lists or tuples must be either an integer or a float.\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0:\n>>> extract_singly(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> extract_singly([2.0])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> extract_singly([['!0!']])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_singly(test_list):\n\n  assert isinstance(test_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return set([item for sublist in test_list for item in sublist])\n", "constraints": {"assert_0": "assert isinstance(test_list, (list, tuple)), \"invalid inputs", "assert_1": "assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs", "assert_2": "assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs"}}], "reasoning": ["Use assertions to enforce top-level and sub-level type constraints, then iterate to collect numeric elements into a set.</think>"]}
{"name": "Mbpp/16", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: text_lowercase_underscore\nProblem Description:\n\"\"\"\nWrite a python function that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise; the input must be a string and it must not be empty.\n\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> text_lowercase_underscore(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> text_lowercase_underscore('')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_lowercase_underscore(text):\n\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        assert len(text) > 0, \"invalid inputs\" # $_CONTRACT_$\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs", "assert_1": "assert len(text) > 0, \"invalid inputs"}}], "reasoning": ["Use regex to match lowercase words joined by underscores, and assert input is non-empty string.</think>"]}
{"name": "Mbpp/793", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: last\nProblem Description:\n\"\"\"\nWrite a python function that finds the last position of an element in a sorted array; the first input must be a list, all elements in the list must be either integers or floats, the list must be sorted in non-decreasing order, the second input must be either an integer or a float, and the element must be present in the list. \n\nassert last([1,2,3],1) == 0\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3', 'assert_4']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1: no suitable test case\n\nassert_2:\n>>> last([0, -1.0], 6.0)\n \"AssertionError: invalid input\"\n\nassert_3: no suitable test case\n\nassert_4:\n>>> last(['!0!', -0.5], 5.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef last(arr,x):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs", "assert_2": "assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs", "assert_3": "assert isinstance(x, (int, float)), \"invalid inputs", "assert_4": "assert x in arr, \"invalid inputs"}}], "reasoning": ["Validate inputs with asserts, then perform binary search to find the last occurrence of the target.</think>"]}
{"name": "Mbpp/283", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: validate\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself; the input must be an integer and it must be non-negative.\n\nassert validate(1234) == True\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> validate(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef validate(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    digits = [int(digit) for digit in str(n)]\n    return all(digit >= digits.count(digit) for digit in digits)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["I will assert input is a non-negative integer. Then count each digit\u2019s frequency and compare to its value.</think>"]}
{"name": "Mbpp/725", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: extract_quotation\nProblem Description:\n\"\"\"\nWrite a python function that extracts values between quotation marks from the given string, and the input must be a string.\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> extract_quotation(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef extract_quotation(text1):\n\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.findall(r'\"(.*?)\"', text1)\n", "constraints": {"assert_0": "assert isinstance(text1, str), \"invalid inputs"}}], "reasoning": ["Check input type then use regex to extract substrings between double quotes.</think>"]}
{"name": "Mbpp/293", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: otherside_rightangle\nProblem Description:\n\"\"\"\nWrite a python function that finds the third side of a right angled triangle; both \"w\" and \"h\" must be either integers or floats and greater than zero. \n\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> otherside_rightangle(0, '!0!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> otherside_rightangle(-1, -1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef otherside_rightangle(w,h):\n\n  assert isinstance(w, (int, float)) and w > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)) and h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.sqrt(w * w + h * h)\n", "constraints": {"assert_0": "assert isinstance(w, (int, float)) and w > 0, \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)) and h > 0, \"invalid inputs"}}], "reasoning": ["I will enforce that both inputs are positive numbers and compute the hypotenuse using the Pythagorean theorem.</think>"]}
{"name": "Mbpp/267", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: square_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers; n must be an integer and n must be greater than zero.\n\nassert square_Sum(2) == 10\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> square_Sum(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> square_Sum(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef square_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return n * (4 * n * n - 1) / 3\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": ["Combine type and positivity checks in one assertion, then use the closed-form formula n*(4n\u00b2\u22121)/3 for the sum of squares of odd numbers.</think>"]}
{"name": "Mbpp/389", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_lucas\nProblem Description:\n\"\"\"\nWrite a python function that finds the n'th lucas number; the input n must be an integer that is greater than or equal to zero. \n\nassert find_lucas(9) == 76\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> find_lucas(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_lucas(n):\n\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n", "constraints": {"assert_0": "assert isinstance(n, int) and n >= 0, \"invalid inputs"}}], "reasoning": ["I\u2019ll validate input n as a nonnegative integer, then compute Lucas numbers iteratively handling base cases for n=0 and n=1.</think>"]}
{"name": "Mbpp/141", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: pancake_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts a list of elements while ensuring that the input is a list and every element in that list is either an integer or a float.\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> pancake_sort(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef pancake_sort(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": ["I assert input is a list of numbers, then perform pancake sort by flipping sublists to position maximal elements at end. Return sorted copy.</think>"]}
{"name": "Mbpp/478", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: remove_lowercase\nProblem Description:\n\"\"\"\nWrite a python function that removes lowercase substrings from a given string; the input must be a string.\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> remove_lowercase(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef remove_lowercase(str1):\n\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    return re.sub('[a-z]', '', str1)\n", "constraints": {"assert_0": "assert isinstance(str1, str), \"invalid inputs"}}], "reasoning": ["I will assert the input is a string, then use a regex to strip all contiguous lowercase letter sequences from it.</think>"]}
{"name": "Mbpp/261", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: division_elements\nProblem Description:\n\"\"\"\nWrite a python function that takes in two tuples and performs mathematical division operation element-wise across the given tuples; the first tuple must be of type tuple, the second tuple must also be of type tuple, both tuples must have the same length, every element in the first tuple must be either an integer or a float, and every element in the second tuple must be either an integer or a float and must not be zero.\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3', 'assert_4']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1: no suitable test case\n\nassert_2:\n>>> division_elements(['!0!'], ['!0!', 2.0])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> division_elements(['!'], ['0', 3.0])\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> division_elements(['0!'], ['!0!', 4.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef division_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) and ele != 0 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert len(test_tup1) == len(test_tup2), \"invalid inputs", "assert_3": "assert all(isinstance(ele, (int, float)) for ele in test_tup1), \"invalid inputs", "assert_4": "assert all(isinstance(ele, (int, float)) and ele != 0 for ele in test_tup2), \"invalid inputs"}}], "reasoning": ["I will validate inputs with asserts and perform element-wise division, returning a tuple.</think>"]}
{"name": "Mbpp/301", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: dict_depth\nProblem Description:\n\"\"\"\nWrite a python function that finds the depth of a dictionary; the input must be a dictionary. \n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> dict_depth(5.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n    return dict_depth_aux(d)\n", "constraints": {"assert_0": "assert isinstance(d, dict), \"invalid inputs"}}], "reasoning": ["I assert the input is a dict, then recursively compute depth as 1 plus the maximum nested dict depth, returning 1 when no nested dicts exist.</think>"]}
{"name": "Mbpp/757", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_reverse_pairs\nProblem Description:\n\"\"\"\nWrite a python function that counts the pairs of reverse strings in the given string list; the input must be a list and all elements within that list must be strings.\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> count_reverse_pairs([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_reverse_pairs(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in test_list), \"invalid inputs"}}], "reasoning": ["Validate input with assert, then use nested loops to count each unique reverse string pair.</think>"]}
{"name": "Mbpp/476", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: big_sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of the largest and smallest value in a given array; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> big_sum([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> big_sum(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef big_sum(nums):\n\n      assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n      assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n      return max(nums) + min(nums)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert len(nums) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs"}}], "reasoning": ["I\u2019ll validate inputs with asserts for list type, non-empty, and numeric items, then compute min and max sum.</think>"]}
{"name": "Mbpp/9", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Rotations\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum number of rotations greater than zero required to get the same string; the input must be a string and it must not be empty.\n\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> find_Rotations(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> find_Rotations('')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Rotations(s):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert len(s) > 0, \"invalid inputs"}}], "reasoning": ["I will validate input type and emptiness then iterate rotations to find the minimum positive shift that reconstructs the original string.</think>"]}
{"name": "Mbpp/262", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: split_two_parts\nProblem Description:\n\"\"\"\nWrite a python function that splits a given list into two parts where the length of the first part is determined by the integer L, and the input must be a list for the first argument and an integer for the second argument, with L constrained to be between 0 and the length of the list. \n\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0:\n>>> split_two_parts(3.0, 2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> split_two_parts(4.0, 5.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> split_two_parts([], 2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef split_two_parts(list1, L):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(L, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n    return list1[:L], list1[L:]\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert isinstance(L, int), \"invalid inputs", "assert_2": "assert 0 <= L <= len(list1), \"invalid inputs"}}], "reasoning": ["I will validate input types and bounds using assertions, then return two list slices split at index L.</think>"]}
{"name": "Mbpp/637", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: noprofit_noloss\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given amount has no profit and no loss; both the actual_cost and sale_amount must be either an integer or a float. \n\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> noprofit_noloss('!0!', '!0!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> noprofit_noloss('0', '!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef noprofit_noloss(actual_cost, sale_amount):\n\n  assert isinstance(actual_cost, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(sale_amount, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return actual_cost == sale_amount\n", "constraints": {"assert_0": "assert isinstance(actual_cost, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(sale_amount, (int, float)), \"invalid inputs"}}], "reasoning": ["I will enforce type checks. Then return True if sale_amount equals actual_cost.</think>"]}
{"name": "Mbpp/798", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: _sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of an array; the input must be a list and all elements within the list must be either integers or floats.\n\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> _sum(['!0!', 2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef _sum(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum(arr)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs"}}], "reasoning": ["I will validate the input list and element types. Then I will sum elements if valid, raising AssertionError otherwise.</think>"]}
{"name": "Mbpp/422", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Average_Of_Cube\nProblem Description:\n\"\"\"\nWrite a python function that finds the average of cubes of the first n natural numbers; the input n must be an integer and must be greater than or equal to zero.\n\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> find_Average_Of_Cube(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Average_Of_Cube(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  \n    return sum([(i ** 3) for i in range(1, n + 1)]) / n\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["I'll assert that n is a non-negative integer. Then compute the sum of cubes from 1 to n and divide by n, returning 0.0 for n equal to zero.</think>"]}
{"name": "Mbpp/797", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_in_range\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of all odd natural numbers within the range l and r; both l and r must be integers, and l must be less than or equal to r and greater than or equal to zero.\n\nassert sum_in_range(2,5) == 8\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0:\n>>> sum_in_range(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> sum_in_range(5.0, 4.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> sum_in_range(7.0, 6.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r):\n\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum_odd(r) - sum_odd(l - 1)\n", "constraints": {"assert_0": "assert isinstance(l, int), \"invalid inputs", "assert_1": "assert isinstance(r, int), \"invalid inputs", "assert_2": "assert 0 <= l <= r, \"invalid inputs"}}], "reasoning": ["I will assert types, non-negativity, and ordering, then sum odd integers in the inclusive range.</think>"]}
{"name": "Mbpp/428", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: shell_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts the given array using shell sort, and the input must be a list where all elements are either integers or floats. \n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> shell_sort(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef shell_sort(my_list):\n\n    assert isinstance(my_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n", "constraints": {"assert_0": "assert isinstance(my_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs"}}], "reasoning": ["Validate the list and element types, then apply an in-place Shell sort on a copy and return it.</think>"]}
{"name": "Mbpp/764", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: number_ctr\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of digits in a given string; the input must be a string.\n\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> number_ctr(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef number_ctr(s):\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    return sum(c.isdigit() for c in s)\n", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": ["I will assert input is a string, then count characters where isdigit() returns True.</think>"]}
{"name": "Mbpp/124", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: angle_complex\nProblem Description:\n\"\"\"\nWrite a python function that returns the angle of a complex number; the first input must be an integer or a float, the second input must be a complex number or a float, and the real part of the second input must be zero.\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0:\n>>> angle_complex('!0!', 2)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> angle_complex('0', 3)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> angle_complex('!', 4)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport cmath\ndef angle_complex(a,b):\n\n  assert isinstance(a, (int, float)) or isinstance(a, float), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, complex) or isinstance(b, float), \"invalid inputs\" # $_CONTRACT_$\n  assert b.real == 0, \"invalid inputs\" # $_CONTRACT_$\n  angle=cmath.phase(a+b)\n  return angle\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)) or isinstance(a, float), \"invalid inputs", "assert_1": "assert isinstance(b, complex) or isinstance(b, float), \"invalid inputs", "assert_2": "assert b.real == 0, \"invalid inputs"}}], "reasoning": ["Combine real a and imaginary b into angle via atan2 with input type checks and ensure second input has zero real part if complex.</think>"]}
{"name": "Mbpp/170", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_range_list\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of numbers in a list within a range specified by two indices; the first input must be a list, all elements of the list must be either integers or floats, both indices must be integers, and the indices must be within the valid range of the list's length. \n\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3', 'assert_4', 'assert_5']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> sum_range_list(['!0!'], 3.0, 2.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> sum_range_list(['!'], 4.0, 5.0)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> sum_range_list(['0'], 7.0, 6.0)\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> sum_range_list(['0!'], 8.0, 9.0)\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> sum_range_list(['A'], 10.0, 11.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>\u2026</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory \u2014 even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_range_list(list1, m, n):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(item, (int, float)) for item in list1), \"invalid inputs", "assert_2": "assert isinstance(m, int), \"invalid inputs", "assert_3": "assert isinstance(n, int), \"invalid inputs", "assert_4": "assert 0 <= m < len(list1), \"invalid inputs", "assert_5": "assert 0 <= n < len(list1), \"invalid inputs"}}], "reasoning": ["I will enforce type checks for the list and its elements, ensure integer indices in range and start \u2264 end, then compute the inclusive sum.</think>"]}
