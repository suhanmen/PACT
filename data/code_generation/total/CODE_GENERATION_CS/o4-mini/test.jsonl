{"name": "Mbpp/598", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: armstrong_number\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given number is an Armstrong number; the input must be an integer and it must be greater than zero.\n\nassert armstrong_number(153)==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef armstrong_number(number):\n\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n", "constraints": {"assert_0": "assert isinstance(number, int), \"invalid inputs", "assert_1": "assert number > 0, \"invalid inputs"}}], "reasoning": ["Use assertions to enforce integer type and positivity, then compute sum of digits^power and compare to the number.</think>"]}
{"name": "Mbpp/737", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_str\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given string starts with a vowel; the input must be a string. \n\nassert check_str(\"annie\")\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re \ndef check_str(string):\n\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)\n", "constraints": {"assert_0": "assert isinstance(string, str), \"invalid inputs"}}], "reasoning": ["I’ll validate that the input is a nonempty string, raising AssertionError for invalid types, then check if its first character is a vowel.</think>"]}
{"name": "HumanEval/9", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: rolling_max\nProblem Description:\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence; \"numbers\" must be a list containing only integers.\"\"\"\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\n\n    assert isinstance(numbers, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all([isinstance(v, int) for v in numbers]), \"invalid inputs\" # $_CONTRACT_$\n\n\n    return [max(numbers[:(i+1)]) for i in range(len(numbers))]", "constraints": {"assert_0": "assert isinstance(numbers, list), \"invalid inputs", "assert_1": "assert all([isinstance(v, int) for v in numbers]), \"invalid inputs"}}], "reasoning": ["We validate that 'numbers' is a list of ints using asserts. Then we iterate to build the rolling maximum list.</think>"]}
{"name": "HumanEval/83", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: starts_one_ends\nProblem Description:\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n that must be an integer greater than zero, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def starts_one_ends(n):\n\n\n    assert type(n) == int and n > 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    if n == 1: return 1\n    return 18 * 10 ** (n - 2)", "constraints": {"assert_0": "assert type(n) == int and n > 0, \"invalid inputs"}}], "reasoning": ["Assert n is an integer >0, handle n=1 specially, and for n>=2 apply inclusion–exclusion yielding 18*10^(n-2).</think>"]}
{"name": "Mbpp/566", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_digits\nProblem Description:\n\"\"\"\nWrite a python function that returns the sum of the digits of a non-negative integer; the input must be an integer and it must be non-negative. \n\nassert sum_digits(345)==12\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_digits(n):\n\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n  return sum(map(int, str(n)))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["Assert input is a non-negative integer. Sum digits via string conversion.</think>"]}
{"name": "HumanEval/38", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: decode_cyclic\nProblem Description:\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function; the input string must be of type str.\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def encode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n\n\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs"}}], "reasoning": ["Assert input is str, then return s unchanged as placeholder decode logic.</think>"]}
{"name": "HumanEval/89", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: encrypt\nProblem Description:\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated; the input string must either be empty or consist solely of lowercase letters. \n    The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def encrypt(s):\n\n\n    assert s == \"\" or s.islower(), \"invalid inputs\" # $_CONTRACT_$\n\n\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))", "constraints": {"assert_0": "assert s == \"\" or s.islower(), \"invalid inputs"}}], "reasoning": ["Validate that s is a lowercase string, then shift each letter by 4 positions with wrap-around.</think>"]}
{"name": "Mbpp/762", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_monthnumber_number\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given month number contains 30 days or not; the input must be an integer and it must be a number from 1 to 12.\n\nassert check_monthnumber_number(6)==True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_monthnumber_number(monthnum3):\n\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n", "constraints": {"assert_0": "assert isinstance(monthnum3, int), \"invalid inputs", "assert_1": "assert 1 <= monthnum3 <= 12, \"invalid inputs"}}], "reasoning": ["Use assert to validate integer 1–12, then return True iff month is in the 30-day set {4,6,9,11}.</think>"]}
{"name": "HumanEval/133", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_squares\nProblem Description:\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers, which must be a list containing only integers or floats. \n    You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def sum_squares(lst):\n\n\n    assert type(lst) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) in [int, float] for x in lst), \"invalid inputs\" # $_CONTRACT_$\n\n\n    import math\n    return sum(map(lambda x: math.ceil(x) ** 2, lst))", "constraints": {"assert_0": "assert type(lst) == list, \"invalid inputs", "assert_1": "assert all(type(x) in [int, float] for x in lst), \"invalid inputs"}}], "reasoning": ["I will add assertions for the input list and element types, then apply math.ceil to each element and sum their squares.</think>"]}
{"name": "HumanEval/104", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: unique_digits\nProblem Description:\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit; \"x\" must be a list and all elements in \"x\" must be positive integers.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def unique_digits(x):\n\n\n    assert type(x) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(num) == int and num > 0 for num in x), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n    return sorted(list(filter(judge, x)))", "constraints": {"assert_0": "assert type(x) == list, \"invalid inputs", "assert_1": "assert all(type(num) == int and num > 0 for num in x), \"invalid inputs"}}], "reasoning": ["I will assert input types and positivity, then filter numbers whose decimal digits are all odd, and return them sorted.</think>"]}
{"name": "HumanEval/87", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: get_row\nProblem Description:\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, which must be a list of lists, and x, which must be an integer, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def get_row(lst, x):\n\n\n    assert type(x) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert type(lst) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(y) == list for y in lst), \"invalid inputs\" # $_CONTRACT_$\n\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res", "constraints": {"assert_0": "assert type(x) == int, \"invalid inputs", "assert_1": "assert type(lst) == list, \"invalid inputs", "assert_2": "assert all(type(y) == list for y in lst), \"invalid inputs"}}], "reasoning": ["Validate inputs ensuring lst is list of lists and x is int. Iterate rows to collect coordinates, sort columns descending per row, rows ascending overall.</think>"]}
{"name": "Mbpp/271", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: even_Power_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power; n must be an integer and n must be greater than zero.\n\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_Power_Sum(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": ["I will enforce integer and positive constraints with assertions. Then compute the sum of the first n even numbers raised to the fifth power.</think>"]}
{"name": "HumanEval/145", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: order_by_points\nProblem Description:\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers in ascending order according to the sum of their digits; \n    \"nums\" must be a list of integers.\n    \n    Note: if there are several items with similar sum of their digits, order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def order_by_points(nums):\n\n\n    assert all(type(x) == int for x in nums), \"invalid inputs\" # $_CONTRACT_$\n\n\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)", "constraints": {"assert_0": "assert all(type(x) == int for x in nums), \"invalid inputs"}}], "reasoning": ["Validate that input is a list of ints, then sort using sum of digits as key while preserving original order for ties.</think>"]}
{"name": "Mbpp/259", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: maximize_elements\nProblem Description:\n\"\"\"\nWrite a python function that maximizes the elements from two tuples where each input must be a tuple, both tuples must be of the same length, both tuples must have a length greater than zero, each element of the first tuple must be a tuple of length two, each element of the second tuple must also be a tuple of length two, and each element of both tuples must consist of two numbers that are either integers or floats. \n\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef maximize_elements(test_tup1, test_tup2):\n\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  return tuple((max(a, c), max(b, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2))\n", "constraints": {"assert_0": "assert isinstance(test_tup1, tuple), \"invalid inputs", "assert_1": "assert isinstance(test_tup2, tuple), \"invalid inputs", "assert_2": "assert len(test_tup1) == len(test_tup2), \"invalid inputs", "assert_3": "assert len(test_tup1) > 0, \"invalid inputs", "assert_4": "assert len(test_tup2) > 0, \"invalid inputs", "assert_5": "assert all(isinstance(x, tuple) for x in test_tup1), \"invalid inputs", "assert_6": "assert all(isinstance(x, tuple) for x in test_tup2), \"invalid inputs", "assert_7": "assert all(len(x) == 2 for x in test_tup1), \"invalid inputs", "assert_8": "assert all(len(x) == 2 for x in test_tup2), \"invalid inputs", "assert_9": "assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup1), \"invalid inputs", "assert_10": "assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup2), \"invalid inputs"}}], "reasoning": ["I validate both inputs as non-empty tuples of equal length containing only 2-number tuples, then compute per-position elementwise maxima.</think>"]}
{"name": "Mbpp/439", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: multiple_to_single\nProblem Description:\n\"\"\"\nWrite a python function that joins a list of multiple integers into a single integer; the input must be a list, the list must contain at least one element, all elements in the list must be integers, and all elements except the first must be greater than zero.\n\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef multiple_to_single(L):\n\n  assert isinstance(L, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(L) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n  return int(''.join(map(str,L)))\n", "constraints": {"assert_0": "assert isinstance(L, list), \"invalid inputs", "assert_1": "assert len(L) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, int) for item in L), \"invalid inputs", "assert_3": "assert all(item > 0 for item in L[1:]), \"invalid inputs"}}], "reasoning": ["Validate input with asserts, then concatenate each integer's string and convert to int.</think>"]}
{"name": "Mbpp/311", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: set_left_most_unset_bit\nProblem Description:\n\"\"\"\nWrite a python function that sets the left most unset bit of a given integer; the input must be a non-negative integer. \n\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef set_left_most_unset_bit(n):\n\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n", "constraints": {"assert_0": "assert isinstance(n, int) and n >= 0, \"invalid inputs"}}], "reasoning": ["We assert n is an integer>=0. Then scan from highest to lowest bit for first zero, set it, else set next higher bit.</think>"]}
{"name": "Mbpp/801", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: test_three_equal\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of equal numbers from three given integers; all three inputs must be integers.\n\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef test_three_equal(x,y,z):\n\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n", "constraints": {"assert_0": "assert isinstance(x, int), \"invalid inputs", "assert_1": "assert isinstance(y, int), \"invalid inputs", "assert_2": "assert isinstance(z, int), \"invalid inputs"}}], "reasoning": ["I will assert inputs are ints. Then count triple or pair matches.</think>"]}
{"name": "HumanEval/120", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: maximum\nProblem Description:\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, where arr must be a list containing between one and one thousand integers that each range from negative one thousand to positive one thousand, and k must be a non-negative integer that does not exceed the length of arr, return a sorted list of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def maximum(arr, k):\n\n\n    assert type(arr) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert 1 <= len(arr) <= 1000, \"invalid inputs\" # $_CONTRACT_$\n    assert all(-1000 <= x <= 1000 for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert type(k) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= k <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    return sorted(sorted(arr)[::-1][:k])", "constraints": {"assert_0": "assert type(arr) == list, \"invalid inputs", "assert_1": "assert 1 <= len(arr) <= 1000, \"invalid inputs", "assert_2": "assert all(-1000 <= x <= 1000 for x in arr), \"invalid inputs", "assert_3": "assert type(k) == int, \"invalid inputs", "assert_4": "assert 0 <= k <= len(arr), \"invalid inputs"}}], "reasoning": ["Enforce input validations on types, lengths, and ranges via assert, then return an empty list if k is zero or slice the sorted ascending array’s last k elements.</think>"]}
{"name": "Mbpp/404", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: minimum\nProblem Description:\n\"\"\"\nWrite a python function that finds the minimum of two numbers; both inputs must be either integers or floats. \n\nassert minimum(1,2) == 1\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef minimum(a,b):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n   \n    return min(a,b)\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs"}}], "reasoning": ["I will assert both args are int or float, then return the smaller one using a conditional expression.</think>"]}
{"name": "Mbpp/749", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sort_numeric_strings\nProblem Description:\n\"\"\"\nWrite a python function that sorts a given list of strings of numbers numerically; the input must be a list, each element of the list must be a string, and every string must represent a numeric value. \n\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sort_numeric_strings(nums_str):\n\n    def check_numeric(num: str): # $_CONTRACT_$\n        return num.lstrip('-').rstrip(' ').isdigit() # $_CONTRACT_$\n    assert isinstance(nums_str, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in nums_str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(check_numeric(num) for num in nums_str), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([int(x) for x in nums_str])\n", "constraints": {"assert_0": "assert isinstance(nums_str, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in nums_str), \"invalid inputs", "assert_2": "assert all(check_numeric(num) for num in nums_str), \"invalid inputs"}}], "reasoning": ["I’ll assert the input is a list of strings, ensure each represents a number via float conversion, then convert to int if integral, sort, and return.</think>"]}
{"name": "HumanEval/93", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: encode\nProblem Description:\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet; \"message\" must be a string containing only alphabetic characters and spaces.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def encode(message):\n\n\n    assert type(message) == str, \"invalid inputs\" # $_CONTRACT_$\n    assert all(ch == \" \" or ch.isalpha() for ch in message), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    \n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))", "constraints": {"assert_0": "assert type(message) == str, \"invalid inputs", "assert_1": "assert all(ch == \" \" or ch.isalpha() for ch in message), \"invalid inputs"}}], "reasoning": ["I will assert input validity then process each character by swapping case and shifting vowels two places ahead.</think>"]}
{"name": "HumanEval/0", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: has_close_elements\nProblem Description:\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold; \"numbers\" must be a list containing only integers or floats, and \"threshold\" must be a positive float.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n\n    assert isinstance(threshold, float) and threshold > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(numbers, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all([isinstance(v, (int, float)) for v in numbers]), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False", "constraints": {"assert_0": "assert isinstance(threshold, float) and threshold > 0, \"invalid inputs", "assert_1": "assert isinstance(numbers, list), \"invalid inputs", "assert_2": "assert all([isinstance(v, (int, float)) for v in numbers]), \"invalid inputs"}}], "reasoning": ["I'll validate inputs then sort numbers and check adjacent differences against threshold.</think>"]}
{"name": "Mbpp/256", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: count_Primes_nums\nProblem Description:\n\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number; the input must be an integer and it must be non-negative. \n\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef count_Primes_nums(n):\n\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n", "constraints": {"assert_0": "assert isinstance(n, int) and n >= 0, \"invalid inputs"}}], "reasoning": ["I validate the input, then iterate checking primes via trial division to count how many are less than n.</think>"]}
{"name": "HumanEval/12", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: longest\nProblem Description:\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one; \"strings\" must be a list of strings and cannot be empty. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n\n\n    assert type(strings) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all([isinstance(v, str) for v in strings]), \"invalid inputs\" # $_CONTRACT_$\n\n\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s", "constraints": {"assert_0": "assert type(strings) == list, \"invalid inputs", "assert_1": "assert all([isinstance(v, str) for v in strings]), \"invalid inputs"}}], "reasoning": ["Enforce input is a list of strings, return None if empty, otherwise return the longest (first in ties) using max with key=len.</think>"]}
{"name": "Mbpp/593", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: removezero_ip\nProblem Description:\n\"\"\"\nWrite a python function that removes leading zeroes from an ip address; the input must be a string and cannot be empty.\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef removezero_ip(ip):\n\n assert isinstance(ip, str), \"invalid inputs\" # $_CONTRACT_$\n assert len(ip) > 0, \"invalid inputs\" # $_CONTRACT_$\n return re.sub('\\.[0]*', '.', ip)\n", "constraints": {"assert_0": "assert isinstance(ip, str), \"invalid inputs", "assert_1": "assert len(ip) > 0, \"invalid inputs"}}], "reasoning": ["Check input is non-empty string, then split by '.', strip leading zeros (or default '0') for each segment, and rejoin.</think>"]}
{"name": "HumanEval/35", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_element\nProblem Description:\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list; the input must be a non-empty list containing only integers or floats.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def max_element(l: list):\n\n\n    assert type(l) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) != 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) in [int, float] for x in l), \"invalid inputs\" # $_CONTRACT_$\n\n\n    return max(l)", "constraints": {"assert_0": "assert type(l) == list, \"invalid inputs", "assert_1": "assert len(l) != 0, \"invalid inputs", "assert_2": "assert all(type(x) in [int, float] for x in l), \"invalid inputs"}}], "reasoning": ["I will validate input type, emptiness, and element types with assert statements. Then return the maximum using built-in max.</think>"]}
{"name": "Mbpp/752", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: jacobsthal_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth jacobsthal number; the input n must be an integer and must be greater than or equal to zero.\n\nassert jacobsthal_num(5) == 11\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef jacobsthal_num(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["I will enforce integer and non-negative constraints then compute Jacobsthal numbers using an iterative recurrence.</think>"]}
{"name": "HumanEval/72", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: will_it_fly\nProblem Description:\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise; \"q\" must be a list of ints or floats, and \"w\" must be an int or float. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n\n    assert type(q) == list and all(type(x) in [int, float] for x in q), \"invalid inputs\" # $_CONTRACT_$\n    assert type(w) in [int, float], \"invalid inputs\" # $_CONTRACT_$\n\n\n    return q == q[::-1] and sum(q) <= w", "constraints": {"assert_0": "assert type(q) == list and all(type(x) in [int, float] for x in q), \"invalid inputs", "assert_1": "assert type(w) in [int, float], \"invalid inputs"}}], "reasoning": ["Validate types of q and its items and w, then return True if q is palindromic and its sum is within w, else False.</think>"]}
{"name": "HumanEval/117", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: select_words\nProblem Description:\ndef select_words(s, n):\n    \"\"\"Given a string s that must contain only letters and spaces and a natural number n that must be a non-negative integer, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def select_words(s, n):\n\n\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(ch == \" \" or ch.isalpha() for ch in s), \"invalid inputs\" # $_CONTRACT_$\n    assert type(n) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    ans = []\n    for word in s.split(\" \"):\n        if word != \"\":\n            c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))\n            if c_cnt == n: ans.append(word)\n    return ans", "constraints": {"assert_0": "assert isinstance(s, str), \"invalid inputs", "assert_1": "assert all(ch == \" \" or ch.isalpha() for ch in s), \"invalid inputs", "assert_2": "assert type(n) == int, \"invalid inputs", "assert_3": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["Use asserts for input validation, then split the string and count consonants against vowel set.</think>"]}
{"name": "HumanEval/142", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: sum_squares\nProblem Description:\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers; “lst” must be a list and all entries in “lst” must be integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def sum_squares(lst):\n\n\n    assert type(lst) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in lst), \"invalid inputs\" # $_CONTRACT_$\n\n\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans", "constraints": {"assert_0": "assert type(lst) == list, \"invalid inputs", "assert_1": "assert all(type(x) == int for x in lst), \"invalid inputs"}}], "reasoning": ["Validate input types, then iterate with indices applying square for multiples of 3, cube for multiples of 4, and accumulating sum.</think>"]}
{"name": "Mbpp/790", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: even_position\nProblem Description:\n\"\"\"\nWrite a python function that checks whether every even index of a given list contains even numbers; the input must be a list and all elements within that list must be integers.\n\nassert even_position([3,2,1]) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_position(nums):\n\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, int) for i in nums), \"invalid inputs"}}], "reasoning": ["I will validate that input is a list of ints then iterate even indices to confirm evenness.</think>"]}
{"name": "Mbpp/793", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: last\nProblem Description:\n\"\"\"\nWrite a python function that finds the last position of an element in a sorted array; the first input must be a list, all elements in the list must be either integers or floats, the list must be sorted in non-decreasing order, the second input must be either an integer or a float, and the element must be present in the list. \n\nassert last([1,2,3],1) == 0\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef last(arr,x):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n    return len(arr)-arr[::-1].index(x) - 1\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs", "assert_2": "assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs", "assert_3": "assert isinstance(x, (int, float)), \"invalid inputs", "assert_4": "assert x in arr, \"invalid inputs"}}], "reasoning": ["Validate inputs with asserts, then perform binary search to find the last occurrence of the target.</think>"]}
{"name": "Mbpp/744", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check_none\nProblem Description:\n\"\"\"\nWrite a python function that checks if the given tuple contains any None values, and the input must be a tuple. \n\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_none(test_tup):\n\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return any(ele is None for ele in test_tup)\n", "constraints": {"assert_0": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": ["Assert the input is a tuple, then iterate items to detect None, returning True if found, otherwise False.</think>"]}
{"name": "HumanEval/90", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: next_smallest\nProblem Description:\ndef next_smallest(lst):\n    \"\"\"\n    Write a function next_smallest() that returns the 2nd smallest element of the list; \"lst\" must be a list of integers. \n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def next_smallest(lst):\n\n\n    assert all(type(x) == int for x in lst), \"invalid inputs\" # $_CONTRACT_$\n\n\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    for x in sorted_list:\n        if x != sorted_list[0]:\n            return x", "constraints": {"assert_0": "assert all(type(x) == int for x in lst), \"invalid inputs"}}], "reasoning": ["Enforce list of integers via asserts, then compute sorted unique values and return second item or None if insufficient.</think>"]}
{"name": "Mbpp/77", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: is_Diff\nProblem Description:\n\"\"\"\nWrite a python function that finds whether a number is divisible by 11; the input must be an integer. \n\nassert is_Diff (12345) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Diff(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n \n    return n % 11 == 0 \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs"}}], "reasoning": ["Check input is int, then use modulus operator to test divisibility by 11.</think>"]}
{"name": "HumanEval/20", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_closest_elements\nProblem Description:\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers that must be of length at least two and contain only integers or floats, \n    select and return two that are the closest to each other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n\n    assert all(type(x) in [int, float] for x in numbers), \"invalid inputs\" # $_CONTRACT_$\n    assert len(numbers) >= 2, \"invalid inputs\"  # $_CONTRACT_$\n\n\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n    return min_pair", "constraints": {"assert_0": "assert all(type(x) in [int, float] for x in numbers), \"invalid inputs", "assert_1": "assert len(numbers) >= 2, \"invalid inputs"}}], "reasoning": ["I assert the input is a list of at least two ints/floats. Then I sort it and scan adjacent pairs to find the minimal difference.</think>"]}
{"name": "Mbpp/735", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: toggle_middle_bits\nProblem Description:\n\"\"\"\nWrite a python function that toggles the bits of a number except for the first and the last bit; the input must be an integer and it must be non-negative. \n\nassert toggle_middle_bits(9) == 15\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef toggle_middle_bits(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["Validate input then compute a mask for middle bits (excluding MSB and LSB) and XOR it with the number.</think>"]}
{"name": "Mbpp/301", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: dict_depth\nProblem Description:\n\"\"\"\nWrite a python function that finds the depth of a dictionary; the input must be a dictionary. \n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n    return dict_depth_aux(d)\n", "constraints": {"assert_0": "assert isinstance(d, dict), \"invalid inputs"}}], "reasoning": ["I assert the input is a dict, then recursively compute depth as 1 plus the maximum nested dict depth, returning 1 when no nested dicts exist.</think>"]}
{"name": "Mbpp/725", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: extract_quotation\nProblem Description:\n\"\"\"\nWrite a python function that extracts values between quotation marks from the given string, and the input must be a string.\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef extract_quotation(text1):\n\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n  return re.findall(r'\"(.*?)\"', text1)\n", "constraints": {"assert_0": "assert isinstance(text1, str), \"invalid inputs"}}], "reasoning": ["Check input type then use regex to extract substrings between double quotes.</think>"]}
{"name": "HumanEval/45", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: triangle_area\nProblem Description:\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle; \"a\" must be a positive int or float and \"h\" must also be a positive int or float.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def triangle_area(a, h):\n\n\n    assert isinstance(a, (int, float)) and isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0 and h > 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    return a * h / 2", "constraints": {"assert_0": "assert isinstance(a, (int, float)) and isinstance(h, (int, float)), \"invalid inputs", "assert_1": "assert a > 0 and h > 0, \"invalid inputs"}}], "reasoning": ["Implement input validation using asserts requiring positive numeric inputs, then compute and return the area as a*h/2.</think>"]}
{"name": "HumanEval/157", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: right_angle_triangle\nProblem Description:\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, which must each be positive numbers of type int or float, return True if the three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n\n    assert type(a) in [int, float] and type(b) in [int, float] and type(c) in [int, float], \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0 and b > 0 and c > 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n    \n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2", "constraints": {"assert_0": "assert type(a) in [int, float] and type(b) in [int, float] and type(c) in [int, float], \"invalid inputs", "assert_1": "assert a > 0 and b > 0 and c > 0, \"invalid inputs"}}], "reasoning": ["Enforce types and positivity via asserts, sort sides, use math.isclose for Pythagorean check.</think>"]}
{"name": "Mbpp/56", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: check\nProblem Description:\n\"\"\"\nWrite a python function that checks if a given number is one less than twice its reverse, and the input must be an integer that is greater than or equal to zero.\n\nassert check(70) == False\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n == 2 * int(str(n)[::-1]) - 1\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["I will validate input is a non-negative integer, reverse its digits, and check if n equals twice its reverse minus one.</think>"]}
{"name": "HumanEval/79", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: decimal_to_binary\nProblem Description:\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format; the input number must be an integer that is greater than or equal to zero. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def decimal_to_binary(decimal):\n\n\n    assert type(decimal) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert decimal >= 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    return \"db\" + bin(decimal)[2:] + \"db\"", "constraints": {"assert_0": "assert type(decimal) == int, \"invalid inputs", "assert_1": "assert decimal >= 0, \"invalid inputs"}}], "reasoning": ["Validate input with assertions, convert integer to binary via bin(), strip prefix, and wrap with 'db' markers.</think>"]}
{"name": "HumanEval/63", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: fibfib\nProblem Description:\ndef fibfib(n: int):\n    \"\"\"Compute the n-th element of the FibFib number sequence, where \"n\" must be a non-negative integer. The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def fibfib(n: int):\n\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["I assert input is a non-negative integer, then iteratively compute the tribonacci-like sequence in O(n) time.</think>"]}
{"name": "Mbpp/245", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: max_sum\nProblem Description:\n\"\"\"\nWrite a python function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_sum(arr):\n\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": ["I assert input validity, then use dynamic programming to compute max sum bitonic subsequence via increasing and decreasing subsequences.</think>"]}
{"name": "Mbpp/722", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: filter_data\nProblem Description:\n\"\"\"\nWrite a python function that filters a dictionary of students with their heights and weights, ensuring the input is a dictionary where each key is a string representing a student name and each value is a tuple of two floats, and the minimum height and weight must both be numbers that are non-negative. \n\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef filter_data(students,h,w):\n\n    assert isinstance(students, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in students.keys()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(height, (int, float)) and isinstance(weight, (int, float)) for height, weight in students.values()) # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(w, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert h >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert w >= 0, \"invalid inputs\" # $_CONTRACT_$\n    return {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}\n", "constraints": {"assert_0": "assert isinstance(students, dict), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in students.keys()), \"invalid inputs", "assert_2": "assert all(isinstance(x, tuple) for x in students.values()), \"invalid inputs", "assert_3": "assert all(len(x) == 2 for x in students.values()), \"invalid inputs", "assert_4": "assert all(isinstance(height, (int, float)) and isinstance(weight, (int, float)) for height, weight in students.values())", "assert_5": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_6": "assert isinstance(w, (int, float)), \"invalid inputs", "assert_7": "assert h >= 0, \"invalid inputs", "assert_8": "assert w >= 0, \"invalid inputs"}}], "reasoning": ["Validate types and non-negativity via asserts, then iterate dict items checking each key and tuple values, collecting entries meeting thresholds.</think>"]}
{"name": "Mbpp/471", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: find_remainder\nProblem Description:\n\"\"\"\nWrite a python function that finds the product of the array multiplication modulo n, where the input must be a list, the list must not be empty, all elements in the list must be either integers or floats, and n must be either an integer or a float.\n\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_remainder(arr, n):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n    from functools import reduce\n    return reduce(lambda x, y: x * y, arr) % n\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs", "assert_3": "assert isinstance(n, (int, float)), \"invalid inputs"}}], "reasoning": ["Validate inputs with asserts, compute product, then apply modulo.</think>"]}
{"name": "Mbpp/758", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\nI will provide:\n  - Method Name: the name of the function to test.\n  - Problem Description: a one-sentence description of what the function is supposed to do, followed by one or more example assertions.\n\nYour task is:\n  1. Read the problem description carefully and infer appropriate arguments for the function.\n  2. Write a correct implementation that:\n    - Satisfies the described behavior\n    - Passes all provided examples\n    - If the problem includes input constraints, you may enforce them using assert statements.\n  3. Do not change the function name.\n\n**Output** \n  - Return ONLY the code block. Do not include any other text or explanation.\n  ```\n"}, {"role": "user", "content": "Method Name: unique_sublists\nProblem Description:\n\"\"\"\nWrite a python function that counts lists within a list and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list; the input must be a list, every element of that list must also be a list, and each of those lists must be hashable tuples. \n\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef unique_sublists(list1):\n\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(tuple(x)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return {tuple(x): list1.count(x) for x in list1}\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, list) for x in list1), \"invalid inputs", "assert_2": "assert all(is_hashable(tuple(x)) for x in list1), \"invalid inputs"}}], "reasoning": ["Validate the input is a list of lists with hashable content, convert each sublist to a tuple, then count their occurrences.</think>"]}
