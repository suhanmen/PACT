{"name": "HumanEval/22", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: filter_integers\nProblem Description:\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers; \"values\" must be a list. \n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> filter_integers(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n\n\n    assert type(values) == list, \"invalid inputs\" # $_CONTRACT_$\n\n\n    return list(filter(lambda x: type(x) == int, values))", "constraints": {"assert_0": "assert type(values) == list, \"invalid inputs"}}], "reasoning": ["We assert that values is a list and then filter items strictly of type int. This meets the test and rejects non-list inputs.</think>"]}
{"name": "HumanEval/108", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: count_nums\nProblem Description:\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0; \"arr\" must be a list, and all elements in \"arr\" must be integers.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> count_nums([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def count_nums(arr):\n\n\n    assert type(arr) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in arr), \"invalid inputs\" # $_CONTRACT_$\n\n\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))", "constraints": {"assert_0": "assert type(arr) == list, \"invalid inputs", "assert_1": "assert all(type(x) == int for x in arr), \"invalid inputs"}}], "reasoning": ["Implement input checks with asserts then compute digit sums, handling negative numbers by negating first digit before summing.</think>"]}
{"name": "Mbpp/106", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: add_lists\nProblem Description:\n\"\"\"\nWrite a python function that appends the given list to the given tuples; the first input must be a list and the second input must be a tuple.\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> add_lists(5.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> add_lists(4.0, 7.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef add_lists(test_list, test_tup):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  return test_tup + tuple(test_list)\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert isinstance(test_tup, tuple), \"invalid inputs"}}], "reasoning": ["I will enforce input types via assertions then convert the list to a tuple and concatenate it to the given tuple.</think>"]}
{"name": "Mbpp/424", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: extract_rear\nProblem Description:\n\"\"\"\nWrite a python function that extracts only the rear index element of each string in the given tuple; the input must be a tuple, every element in the tuple must be a string, and every string must have a length greater than zero.\n\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> extract_rear([3.0])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> extract_rear([''])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_rear(test_tuple):\n\n  assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, str) for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) > 0 for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n  return [ele[-1] for ele in test_tuple]\n", "constraints": {"assert_0": "assert isinstance(test_tuple, tuple), \"invalid inputs", "assert_1": "assert all(isinstance(ele, str) for ele in test_tuple), \"invalid inputs", "assert_2": "assert all(len(ele) > 0 for ele in test_tuple), \"invalid inputs"}}], "reasoning": ["I'll assert input constraints then return the last character of each string.</think>"]}
{"name": "Mbpp/123", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: amicable_numbers_sum\nProblem Description:\n\"\"\"\nWrite a python function that sums all amicable numbers from 1 to a specified number, where the input must be an integer and it must be greater than or equal to 1.\n\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> amicable_numbers_sum(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> amicable_numbers_sum(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    assert limit >= 1, \"invalid inputs\" # $_CONTRACT_$\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n", "constraints": {"assert_0": "assert isinstance(limit, int), \"invalid inputs", "assert_1": "assert limit >= 1, \"invalid inputs"}}], "reasoning": ["Assert input type and bounds, compute proper divisor sums via sqrt, iterate to sum amicable numbers.</think>"]}
{"name": "HumanEval/163", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: generate_integers\nProblem Description:\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, where both a and b must be integers and greater than zero, return the even digits between a and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> generate_integers(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> generate_integers(0, 21238)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def generate_integers(a, b):\n\n\n    assert type(a) == int and type(b) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0 and b > 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    if a > b: a, b = b, a\n    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]", "constraints": {"assert_0": "assert type(a) == int and type(b) == int, \"invalid inputs", "assert_1": "assert a > 0 and b > 0, \"invalid inputs"}}], "reasoning": ["Validate that a and b are positive ints, then range between min and max inclusive, selecting numbers whose every digit is even.</think>"]}
{"name": "Mbpp/635", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: heap_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts the given list; the input must be a list and all elements in the list must be either integers or floats.\n\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> heap_sort(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport heapq as hq\ndef heap_sort(iterable):\n\n    assert isinstance(iterable, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n", "constraints": {"assert_0": "assert isinstance(iterable, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs"}}], "reasoning": ["I assert the list and element types, then use heapq.heapify and heappop to perform heap sort and return the sorted list.</think>"]}
{"name": "HumanEval/159", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: eat\nProblem Description:\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots, which must be an integer between zero and one thousand, but now you need to eat more carrots to complete the day's meals, where the number of carrots you need must also be an integer between zero and one thousand, and the number of remaining carrots that exist in stock must be an integer between zero and one thousand; you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3']: \n\nContract Test Cases:\nassert_0:\n>>> eat(2.0, 4.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> eat(1001, 9856, -1)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> eat(-1, 12798, 9856)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> eat(-1, 12798, 15709)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def eat(number, need, remaining):\n\n\n    assert type(number) == int and type(need) == int and type(remaining) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= number <= 1000, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= need <= 1000, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= remaining <= 1000, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "constraints": {"assert_0": "assert type(number) == int and type(need) == int and type(remaining) == int, \"invalid inputs", "assert_1": "assert 0 <= number <= 1000, \"invalid inputs", "assert_2": "assert 0 <= need <= 1000, \"invalid inputs", "assert_3": "assert 0 <= remaining <= 1000, \"invalid inputs"}}], "reasoning": ["I will enforce integer type and range constraints using assertions, then compute the eaten carrots and remaining stock accordingly.</think>"]}
{"name": "Mbpp/12", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sort_matrix\nProblem Description:\n\"\"\"\nWrite a python function that sorts a given matrix in ascending order according to the sum of its rows; the input must be a list, it must not be empty, every element of the list must also be a list, the first row must not be empty, every row must have the same length as the first row, and every item in the matrix must be either an integer or a float.\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3', 'assert_4', 'assert_5']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> sort_matrix([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> sort_matrix([4.0, ['!0!', 3.0]])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> sort_matrix([[], ['!0!']])\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> sort_matrix([[], ['!']])\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> sort_matrix([[], ['0']])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sort_matrix(M):\n\n    assert isinstance(M, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(row, list) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(row) == len(M[0]) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for row in M for item in row), \"invalid inputs\" # $_CONTRACT_$\n    result = sorted(M, key=sum)\n    return result\n", "constraints": {"assert_0": "assert isinstance(M, list), \"invalid inputs", "assert_1": "assert len(M) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(row, list) for row in M), \"invalid inputs", "assert_3": "assert len(M[0]) > 0, \"invalid inputs", "assert_4": "assert all(len(row) == len(M[0]) for row in M), \"invalid inputs", "assert_5": "assert all(isinstance(item, (int, float)) for row in M for item in row), \"invalid inputs"}}], "reasoning": ["I will enforce input constraints via assert statements and sort rows by their sums. This ensures invalid inputs raise errors and valid matrices are sorted correctly.</think>"]}
{"name": "Mbpp/767", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: get_pairs_count\nProblem Description:\n\"\"\"\nWrite a python function that counts the number of pairs in a list of numbers that sum to a specified value; the input must be a list, all elements in the list must be either integers or floats, and the specified sum must also be an integer or a float.\n\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> get_pairs_count(['!0!'], '!0!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> get_pairs_count(['!'], '0')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_pairs_count(arr, sum_):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(sum_, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    cnt = 0\n    for n in arr:\n        cnt += arr.count(sum_ - n)\n        if sum_ - n == n:\n            cnt -= 1\n    return cnt / 2\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs", "assert_2": "assert isinstance(sum_, (int, float)), \"invalid inputs"}}], "reasoning": ["Validate input types then count unique index pairs summing to target.</think>"]}
{"name": "Mbpp/14", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: find_Volume\nProblem Description:\n\"\"\"\nWrite a python function that finds the volume of a triangular prism; the length, base, and height must each be either an integer or a float and must all be greater than zero.\n\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3', 'assert_4', 'assert_5']: \n\nContract Test Cases:\nassert_0:\n>>> find_Volume('!0!', '!0!', '!0!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> find_Volume('0', '!', '0!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> find_Volume('!', '0!', '0')\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> find_Volume(False, False, False)\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> find_Volume(-0.5, False, '0')\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> find_Volume(-0.25, True, False)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef find_Volume(l,b,h) :\n\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return ((l * b * h) / 2) \n", "constraints": {"assert_0": "assert isinstance(l, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_3": "assert l > 0, \"invalid inputs", "assert_4": "assert b > 0, \"invalid inputs", "assert_5": "assert h > 0, \"invalid inputs"}}], "reasoning": ["I will assert each argument is a positive non-boolean int or float, then compute the triangular prism volume as length * base * height / 2.</think>"]}
{"name": "Mbpp/632", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: move_zero\nProblem Description:\n\"\"\"\nWrite a python function that moves all zeroes to the end of the given list; the input must be a list and every element in the list must be either an integer or a float.\n\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> move_zero(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef move_zero(num_list):\n\n    assert isinstance(num_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n", "constraints": {"assert_0": "assert isinstance(num_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs"}}], "reasoning": ["Check input type and element types, then separate non-zero elements and count zeros, appending zeros at end.</think>"]}
{"name": "Mbpp/235", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: even_bit_set_number\nProblem Description:\n\"\"\"\nWrite a python function that sets all even bits of a given number; the input must be an integer and must be greater than or equal to zero.\n\nassert even_bit_set_number(10) == 10\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> even_bit_set_number(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef even_bit_set_number(n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["I'll mask bits at 1-indexed even positions (0-indexed odd indices) and return n & mask after input validation.</think>"]}
{"name": "Mbpp/133", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum_negativenum\nProblem Description:\n\"\"\"\nWrite a python function that calculates the sum of the negative numbers from a given list of numbers; the input must be a list and every element in the list must be either an integer or a float.\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> sum_negativenum(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef sum_negativenum(nums):\n\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n  return sum(x for x in nums if x < 0)\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": ["Use assertions to ensure input is a list and elements are numeric; then sum only negatives.</think>"]}
{"name": "HumanEval/28", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: concatenate\nProblem Description:\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string; \"strings\" must be a list of string elements. \n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> concatenate([2.0])\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> concatenate(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n\n\n    assert all(isinstance(s, str) for s in strings), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(strings, list), \"invalid inputs\" # $_CONTRACT_$\n\n\n    return \"\".join(strings)", "constraints": {"assert_0": "assert all(isinstance(s, str) for s in strings), \"invalid inputs", "assert_1": "assert isinstance(strings, list), \"invalid inputs"}}], "reasoning": ["Assert the input is a list of strings, else error. Then join and return.</think>"]}
{"name": "Mbpp/296", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: get_Inv_Count\nProblem Description:\n\"\"\"\nWrite a python function that counts inversions in an array; the input must be a list, the list must not be empty, and all elements in the list must be either integers or floats.\n\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> get_Inv_Count([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> get_Inv_Count(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef get_Inv_Count(arr):\n\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert len(arr) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs"}}], "reasoning": ["I'll validate input with asserts, then count inversions by checking all pairs.</think>"]}
{"name": "HumanEval/121", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: solution\nProblem Description:\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions; “lst” must be a list containing only integers and it must not be empty.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> solution([2.0])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> solution([])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def solution(lst):\n\n\n    assert type(lst) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in lst), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)", "constraints": {"assert_0": "assert type(lst) == list, \"invalid inputs", "assert_1": "assert all(type(x) == int for x in lst), \"invalid inputs", "assert_2": "assert len(lst) > 0, \"invalid inputs"}}], "reasoning": ["Enforce that lst is a non-empty list of ints, then loop through even indices summing odd values.</think>"]}
{"name": "Mbpp/126", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: sum\nProblem Description:\n\"\"\"\nWrite a python function that finds the sum of common divisors of two given numbers; both inputs must be integers and greater than zero. \n\nassert sum(10,15) == 6\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3']: \n\nContract Test Cases:\nassert_0:\n>>> sum(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> sum(5.0, 4.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> sum(0, 2.0)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> sum(2.0, 0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef sum(a,b):\n\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n", "constraints": {"assert_0": "assert isinstance(a, int), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs", "assert_2": "assert a > 0, \"invalid inputs", "assert_3": "assert b > 0, \"invalid inputs"}}], "reasoning": ["I will assert both inputs are positive integers. Then compute their gcd and sum its divisors.</think>"]}
{"name": "Mbpp/276", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: volume_cylinder\nProblem Description:\n\"\"\"\nWrite a python function that takes in the radius and height of a cylinder and returns the volume; the radius must be a number, the height must be a number, the radius must be greater than zero, and the height must be greater than zero.\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3']: \n\nContract Test Cases:\nassert_0:\n>>> volume_cylinder('!0!', '!0!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> volume_cylinder('0', '!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> volume_cylinder(False, True)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> volume_cylinder('!', False)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef volume_cylinder(r,h):\n\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n  return math.pi * r * r * h\n", "constraints": {"assert_0": "assert isinstance(r, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(h, (int, float)), \"invalid inputs", "assert_2": "assert r > 0, \"invalid inputs", "assert_3": "assert h > 0, \"invalid inputs"}}], "reasoning": ["I will enforce type and positivity constraints via asserts, then compute the cylinder volume using math.pi.</think>"]}
{"name": "Mbpp/397", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: median_numbers\nProblem Description:\n\"\"\"\nWrite a python function that finds the median of three numbers; the inputs must be of type integer or float for each of the three numbers provided. \n\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0:\n>>> median_numbers('!0!', '!0!', '!0!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> median_numbers('0', '!', '0!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> median_numbers('0!', '0!', '0')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef median_numbers(a,b,c):\n\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    return sorted([a,b,c])[1]\n", "constraints": {"assert_0": "assert isinstance(a, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(b, (int, float)), \"invalid inputs", "assert_2": "assert isinstance(c, (int, float)), \"invalid inputs"}}], "reasoning": ["I will assert input types then sort the values to extract the middle and convert to float.</think>"]}
{"name": "Mbpp/135", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: hexagonal_num\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth hexagonal number, where n must be an integer and n must be greater than or equal to zero.\n\nassert hexagonal_num(10) == 190\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> hexagonal_num(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> hexagonal_num(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef hexagonal_num(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn n * (2 * n - 1) \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["Use assertion to validate type and range, then apply formula H_n = n(2n−1).</think>"]}
{"name": "Mbpp/141", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: pancake_sort\nProblem Description:\n\"\"\"\nWrite a python function that sorts a list of elements while ensuring that the input is a list and every element in that list is either an integer or a float.\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> pancake_sort(['!0!'])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef pancake_sort(nums):\n\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n", "constraints": {"assert_0": "assert isinstance(nums, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs"}}], "reasoning": ["I assert input is a list of numbers, then perform pancake sort by flipping sublists to position maximal elements at end. Return sorted copy.</think>"]}
{"name": "Mbpp/290", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: max_length\nProblem Description:\n\"\"\"\nWrite a python function that finds the list of maximum length in a list of lists; the input must be a list and every element within that list must also be a list. \n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> max_length(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> max_length([3.0, 2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef max_length(list1):\n\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, list) for x in list1), \"invalid inputs"}}], "reasoning": ["I'll assert the input is a list of lists, then iterate to track and return the longest sublist and its length, handling empty inputs gracefully.</think>"]}
{"name": "Mbpp/472", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_Consecutive\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given list contains consecutive numbers or not; the input must be a list, the list must not be empty, and all elements in the list must be integers.\n\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0:\n>>> check_Consecutive(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> check_Consecutive([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> check_Consecutive([3.0, 2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_Consecutive(l):\n\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n \n    return sorted(l) == list(range(min(l),max(l)+1)) \n", "constraints": {"assert_0": "assert isinstance(l, list), \"invalid inputs", "assert_1": "assert len(l) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in l), \"invalid inputs"}}], "reasoning": ["Validate input type, emptiness, and integer elements with asserts; then determine if max−min+1 equals list length and ensure all elements are unique.</think>"]}
{"name": "HumanEval/135", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: can_arrange\nProblem Description:\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values. The input 'arr' must be a list containing only integers or floats, and it must not contain any duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> can_arrange([0.0, 'A', 0.0])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> can_arrange([0, 'A', 0.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def can_arrange(arr):\n\n\n    assert type(arr) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) in [int, float] for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) == len(set(arr)), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            return i\n    return -1", "constraints": {"assert_0": "assert type(arr) == list, \"invalid inputs", "assert_1": "assert all(type(x) in [int, float] for x in arr), \"invalid inputs", "assert_2": "assert len(arr) == len(set(arr)), \"invalid inputs"}}], "reasoning": ["Validate list type, numeric elements, uniqueness; then scan from end to find first index where arr[i] < arr[i-1].</think>"]}
{"name": "HumanEval/110", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: exchange\nProblem Description:\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers; both lst1 and lst2 must be non-empty lists of integers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\". For example: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" It is assumed that the input lists will be non-empty.\n    \"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> exchange([2.0], [])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> exchange([], [2.0])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> exchange([], [3.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def exchange(lst1, lst2):\n\n\n    assert type(lst1) == list and type(lst2) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in lst1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in lst2), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst1) > 0 and len(lst2) > 0, \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))\n    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    return \"YES\" if cnt_odd <= cnt_even else \"NO\"", "constraints": {"assert_0": "assert type(lst1) == list and type(lst2) == list, \"invalid inputs", "assert_1": "assert all(type(x) == int for x in lst1), \"invalid inputs", "assert_2": "assert all(type(x) == int for x in lst2), \"invalid inputs", "assert_3": "assert len(lst1) > 0 and len(lst2) > 0, \"invalid inputs"}}], "reasoning": ["Ensure inputs are non-empty lists of ints then count odds in lst1 and evens in lst2; compare counts to decide YES/NO.</think>"]}
{"name": "Mbpp/618", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: div_list\nProblem Description:\n\"\"\"\nWrite a python function that divides two lists element wise; both inputs must be lists, neither list can be empty, both lists must be of the same length, all elements in both lists must be either integers or floats, and the second list must not contain any zeros.\n\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3', 'assert_4', 'assert_5', 'assert_6']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1: no suitable test case\n\nassert_2:\n>>> div_list([], ['!0!'])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> div_list(['!0!'], [])\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> div_list([], ['!'])\n \"AssertionError: invalid input\"\n\nassert_5:\n>>> div_list([], ['0'])\n \"AssertionError: invalid input\"\n\nassert_6:\n>>> div_list([], [0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef div_list(nums1,nums2):\n\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums1 + nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x != 0 for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n", "constraints": {"assert_0": "assert isinstance(nums1, list), \"invalid inputs", "assert_1": "assert isinstance(nums2, list), \"invalid inputs", "assert_2": "assert len(nums1) > 0, \"invalid inputs", "assert_3": "assert len(nums2) > 0, \"invalid inputs", "assert_4": "assert len(nums1) == len(nums2), \"invalid inputs", "assert_5": "assert all(isinstance(x, (int, float)) for x in nums1 + nums2), \"invalid inputs", "assert_6": "assert all(x != 0 for x in nums2), \"invalid inputs"}}], "reasoning": ["I’ll enforce input constraints with asserts for types, non-empty lists, equal lengths, numeric elements, and no zeros in the divisor list, then return element-wise division.</think>"]}
{"name": "Mbpp/97", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: frequency_lists\nProblem Description:\n\"\"\"\nWrite a python function that finds the frequency of each element in a flattened list of lists, ensuring that the input is a list, it is not empty, every item in the list is also a list, and all items in the sublists are hashable. \n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> frequency_lists([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> frequency_lists([2.0])\n \"AssertionError: invalid input\"\n\nassert_3: no suitable test case\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef frequency_lists(list1):\n\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(item) for sublist in list1 for item in sublist), \"invalid inputs\" # $_CONTRACT_$\n    list1 = [item for sublist in list1 for item in sublist]\n    return {x: list1.count(x) for x in list1}\n", "constraints": {"assert_0": "assert isinstance(list1, list), \"invalid inputs", "assert_1": "assert len(list1) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(item, list) for item in list1), \"invalid inputs", "assert_3": "assert all(is_hashable(item) for sublist in list1 for item in sublist), \"invalid inputs"}}], "reasoning": ["I will validate input types and non-emptiness, then flatten the lists and count occurrences in a dictionary.</think>"]}
{"name": "Mbpp/237", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_occurences\nProblem Description:\n\"\"\"\nWrite a python function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list; the input must be a list and every element in that list must be a tuple.\n\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> check_occurences([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nfrom collections import Counter \ndef check_occurences(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return dict(Counter(tuple(sorted(t)) for t in test_list))\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs"}}], "reasoning": ["Enforce input is a list and each element is a tuple. Sort each tuple to a canonical form and count occurrences in a dictionary.</think>"]}
{"name": "Mbpp/274", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: even_binomial_Coeff_Sum\nProblem Description:\n\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients; n must be an integer and n must be greater than zero.\n\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> even_binomial_Coeff_Sum(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> even_binomial_Coeff_Sum(0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math  \ndef even_binomial_Coeff_Sum( n):\n\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n \n    return 1 << (n - 1)\n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n > 0, \"invalid inputs"}}], "reasoning": ["Check n is positive integer then use formula sum of even-indexed binomial coefficients equals 2^(n-1).</think>"]}
{"name": "Mbpp/6", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: differ_At_One_Bit_Pos\nProblem Description:\n\"\"\"\nWrite a python function that checks whether two numbers differ at one bit position only; both inputs must be integers. \n\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> differ_At_One_Bit_Pos(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> differ_At_One_Bit_Pos(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$ \n    return is_Power_Of_Two(a ^ b)\n", "constraints": {"assert_0": "assert isinstance(a, int), \"invalid inputs", "assert_1": "assert isinstance(b, int), \"invalid inputs"}}], "reasoning": ["Use assert to enforce integer inputs, then XOR the numbers and check if the result is a nonzero power of two (only one bit set).</think>"]}
{"name": "Mbpp/450", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: extract_string\nProblem Description:\n\"\"\"\nWrite a python function that extracts specified size of strings from a given list of string values; the first input must be a list, every element in that list must be a string, and the second input must be an integer.\n\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> extract_string([2.0], 2)\n \"AssertionError: invalid input\"\n\nassert_2: no suitable test case\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef extract_string(str1, l):\n\n    assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    return [e for e in str1 if len(e) == l] \n", "constraints": {"assert_0": "assert isinstance(str1, list), \"invalid inputs", "assert_1": "assert all(isinstance(ele, str) for ele in str1), \"invalid inputs", "assert_2": "assert isinstance(l, int), \"invalid inputs"}}], "reasoning": ["I will enforce input types with asserts and filter list elements by matching the given length.</think>"]}
{"name": "Mbpp/473", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: tuple_intersection\nProblem Description:\n\"\"\"\nWrite a python function that finds the tuple intersection of elements in the given tuple list irrespective of their order; the first input must be a list, the second input must also be a list, and all elements in both lists must be tuples.\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1: no suitable test case\n\nassert_2:\n>>> tuple_intersection([7.0], [2.0])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> tuple_intersection([8.0], [3.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_intersection(test_list1, test_list2):\n\n  assert isinstance(test_list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_list2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n", "constraints": {"assert_0": "assert isinstance(test_list1, list), \"invalid inputs", "assert_1": "assert isinstance(test_list2, list), \"invalid inputs", "assert_2": "assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs", "assert_3": "assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs"}}], "reasoning": ["I'll validate inputs as lists of tuples, then match tuples by comparing their sorted versions to find intersections regardless of order.</think>"]}
{"name": "HumanEval/126", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_sorted\nProblem Description:\ndef is_sorted(lst):\n    '''\n    Given a list of non-negative integers, return whether or not they are sorted in ascending order; \"lst\" must be a list and all elements in \"lst\" must be non-negative integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> is_sorted([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n\n\n    assert type(lst) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int and x >= 0 for x in lst), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    count = dict()\n    for x in lst:\n        if x not in count: count[x] = 0\n        count[x] += 1\n        if count[x] > 2: return False\n    return lst == sorted(lst)", "constraints": {"assert_0": "assert type(lst) == list, \"invalid inputs", "assert_1": "assert all(type(x) == int and x >= 0 for x in lst), \"invalid inputs"}}], "reasoning": ["I will enforce type and value constraints, then check non-decreasing order and that no element repeats more than twice consecutively.</think>"]}
{"name": "HumanEval/122", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: add_elements\nProblem Description:\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr, which must be a list of integers with a length between one and one hundred inclusive, and an integer k, which must also be an integer between one and the length of arr inclusive, return the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3', 'assert_4']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> add_elements([20.0, 19.0, 93.0, 52.0, 94.0, 70.0, 35.0, 9.0, 30.0, 83.0, 62.0, 4.0, 15.0, 103.0, 8.0, 18.0, 57.0, 102.0, 79.0, 58.0, 43.0, 72.0, 75.0, 50.0, 41.0, 16.0, 2.0, 98.0, 49.0, 26.0, 48.0, 82.0, 89.0, 39.0, 27.0, 3.0, 67.0, 37.0, 99.0, 14.0, 47.0, 7.0, 68.0, 40.0, 29.0, 88.0, 6.0, 65.0, 5.0, 10.0, 42.0, 95.0, 59.0, 101.0, 21.0, 85.0, 100.0, 97.0, 55.0, 44.0, 17.0, 92.0, 66.0, 28.0, 11.0, 77.0, 56.0, 96.0, 84.0, 76.0, 23.0, 64.0, 36.0, 78.0, 45.0, 13.0, 81.0, 74.0, 60.0, 90.0, 80.0, 46.0, 34.0, 24.0, 86.0, 91.0, 38.0, 63.0, 12.0, 31.0, 53.0, 54.0, 33.0, 22.0, 25.0, 73.0, 69.0, 51.0, 87.0, 32.0, 71.0], 61.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> add_elements([203.0, 114.0, 106.0, 195.0, 174.0, 143.0, 186.0, 196.0, 181.0, 140.0, 166.0, 176.0, 172.0, 124.0, 137.0, 141.0, 145.0, 183.0, 149.0, 178.0, 204.0, 160.0, 168.0, 104.0, 170.0, 132.0, 110.0, 188.0, 200.0, 173.0, 148.0, 129.0, 138.0, 157.0, 115.0, 142.0, 191.0, 107.0, 159.0, 198.0, 154.0, 125.0, 111.0, 199.0, 156.0, 123.0, 158.0, 152.0, 194.0, 197.0, 144.0, 155.0, 127.0, 153.0, 105.0, 187.0, 117.0, 130.0, 147.0, 108.0, 113.0, 151.0, 205.0, 119.0, 193.0, 179.0, 177.0, 180.0, 164.0, 146.0, 161.0, 184.0, 116.0, 122.0, 112.0, 190.0, 134.0, 175.0, 120.0, 162.0, 139.0, 136.0, 169.0, 202.0, 121.0, 189.0, 118.0, 109.0, 128.0, 150.0, 131.0, 182.0, 135.0, 201.0, 192.0, 163.0, 185.0, 167.0, 126.0, 133.0, 165.0], 171.0)\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> add_elements([235.0, 292.0, 255.0, 291.0, 214.0, 306.0, 276.0, 270.0, 212.0, 250.0, 305.0, 274.0, 284.0, 264.0, 267.0, 236.0, 246.0, 245.0, 207.0, 262.0, 253.0, 225.0, 259.0, 224.0, 229.0, 282.0, 226.0, 302.0, 294.0, 234.0, 210.0, 254.0, 251.0, 280.0, 232.0, 297.0, 239.0, 275.0, 298.0, 237.0, 263.0, 290.0, 222.0, 278.0, 238.0, 230.0, 283.0, 296.0, 240.0, 277.0, 221.0, 271.0, 286.0, 288.0, 279.0, 206.0, 215.0, 247.0, 252.0, 269.0, 228.0, 213.0, 211.0, 304.0, 266.0, 219.0, 260.0, 285.0, 248.0, 220.0, 295.0, 303.0, 223.0, 287.0, 242.0, 243.0, 241.0, 217.0, 256.0, 231.0, 261.0, 272.0, 249.0, 293.0, 227.0, 244.0, 300.0, 258.0, 299.0, 281.0, 218.0, 257.0, 209.0, 273.0, 301.0, 216.0, 208.0, 233.0, 307.0, 289.0, 268.0], 265.0)\n \"AssertionError: invalid input\"\n\nassert_4:\n>>> add_elements([358.0, 407.0, 315.0, 353.0, 360.0, 365.0, 383.0, 313.0, 341.0, 350.0, 372.0, 333.0, 402.0, 310.0, 403.0, 316.0, 338.0, 361.0, 395.0, 327.0, 367.0, 308.0, 309.0, 400.0, 356.0, 393.0, 334.0, 349.0, 398.0, 324.0, 343.0, 406.0, 332.0, 311.0, 405.0, 384.0, 345.0, 352.0, 319.0, 325.0, 369.0, 323.0, 331.0, 329.0, 409.0, 344.0, 354.0, 330.0, 355.0, 363.0, 312.0, 368.0, 382.0, 404.0, 346.0, 386.0, 373.0, 359.0, 351.0, 390.0, 322.0, 391.0, 379.0, 321.0, 399.0, 362.0, 347.0, 408.0, 371.0, 378.0, 326.0, 357.0, 396.0, 320.0, 375.0, 377.0, 380.0, 401.0, 388.0, 337.0, 364.0, 342.0, 387.0, 366.0, 336.0, 335.0, 348.0, 385.0, 381.0, 397.0, 374.0, 317.0, 339.0, 328.0, 389.0, 376.0, 392.0, 314.0, 340.0, 370.0, 318.0], 394.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def add_elements(arr, k):\n\n\n    assert type(arr) == list, \"invalid inputs\" # $_CONTRACT_$\n    assert all(type(x) == int for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert 1 <= len(arr) <= 100, \"invalid inputs\" # $_CONTRACT_$\n    assert type(k) == int, \"invalid inputs\" # $_CONTRACT_$\n    assert 1 <= k <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n\n\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))", "constraints": {"assert_0": "assert type(arr) == list, \"invalid inputs", "assert_1": "assert all(type(x) == int for x in arr), \"invalid inputs", "assert_2": "assert 1 <= len(arr) <= 100, \"invalid inputs", "assert_3": "assert type(k) == int, \"invalid inputs", "assert_4": "assert 1 <= k <= len(arr), \"invalid inputs"}}], "reasoning": ["Check arr and k types and bounds with asserts. Sum first k ints whose absolute value is <=99.</think>"]}
{"name": "Mbpp/606", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: radian_degree\nProblem Description:\n\"\"\"\nWrite a python function that converts degrees to radians; the input \"degree\" must be an integer. \n\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> radian_degree(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport math\ndef radian_degree(degree):\n\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n    return degree * math.pi / 180\n", "constraints": {"assert_0": "assert isinstance(degree, int), \"invalid inputs"}}], "reasoning": ["I’ll assert that degree is an integer, then convert it using pi/180 to satisfy the example and reject invalid types.</think>"]}
{"name": "Mbpp/116", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: tuple_to_int\nProblem Description:\n\"\"\"\nWrite a python function that converts a given tuple of positive integers into a single integer; the input must be a tuple, it must contain at least one element, all elements in the tuple must be integers, and all integers must be positive.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2', 'assert_3']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> tuple_to_int([])\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> tuple_to_int([2.0])\n \"AssertionError: invalid input\"\n\nassert_3:\n>>> tuple_to_int([0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef tuple_to_int(nums):\n\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x > 0 for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    return int(''.join(map(str,nums)))\n", "constraints": {"assert_0": "assert isinstance(nums, tuple), \"invalid inputs", "assert_1": "assert len(nums) > 0, \"invalid inputs", "assert_2": "assert all(isinstance(x, int) for x in nums), \"invalid inputs", "assert_3": "assert all(x > 0 for x in nums), \"invalid inputs"}}], "reasoning": ["Validate input as a non-empty tuple of positive ints, raising AssertionError on any violation. Then concatenate elements as strings and convert to an integer.</think>"]}
{"name": "HumanEval/61", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: correct_bracketing\nProblem Description:\ndef correct_bracketing(brackets: str):\n    \"\"\" Check if every opening bracket has a corresponding closing bracket; \"brackets\" must be a string consisting only of the characters \"(\" and \")\". \n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> correct_bracketing(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> correct_bracketing('^')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def correct_bracketing(brackets: str):\n\n\n    assert type(brackets) == str, \"invalid inputs\" # $_CONTRACT_$\n    assert all(x in \"()\" for x in brackets) # $_CONTRACT_$\n\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0", "constraints": {"assert_0": "assert type(brackets) == str, \"invalid inputs", "assert_1": "assert all(x in \"()\" for x in brackets)"}}], "reasoning": ["I will validate the input type and allowed characters then use a counter to verify balanced parentheses.</think>"]}
{"name": "Mbpp/456", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: reverse_string_list\nProblem Description:\n\"\"\"\nWrite a python function that reverses each string in a given list of string values; the input must be a list, and every element within that list must be a string.\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> reverse_string_list([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef reverse_string_list(stringlist):\n\n    assert isinstance(stringlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n    return [x[::-1] for x in stringlist]\n", "constraints": {"assert_0": "assert isinstance(stringlist, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, str) for x in stringlist), \"invalid inputs"}}], "reasoning": ["Use assert to validate input list and string elements, then return list of reversed strings.</think>"]}
{"name": "Mbpp/285", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: text_match_two_three\nProblem Description:\n\"\"\"\nWrite a python function that checks whether a string contains the 'a' character followed by two or three 'b' characters; the input must be a string. \n\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> text_match_two_three(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\nimport re\ndef text_match_two_three(text):\n\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": ["Use assertion to enforce input is string, then search using regex for 'a' followed by two or three 'b's.</think>"]}
{"name": "Mbpp/637", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: noprofit_noloss\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the given amount has no profit and no loss; both the actual_cost and sale_amount must be either an integer or a float. \n\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> noprofit_noloss('!0!', '!0!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> noprofit_noloss('0', '!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef noprofit_noloss(actual_cost, sale_amount):\n\n  assert isinstance(actual_cost, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(sale_amount, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n \n  return actual_cost == sale_amount\n", "constraints": {"assert_0": "assert isinstance(actual_cost, (int, float)), \"invalid inputs", "assert_1": "assert isinstance(sale_amount, (int, float)), \"invalid inputs"}}], "reasoning": ["I will enforce type checks. Then return True if sale_amount equals actual_cost.</think>"]}
{"name": "Mbpp/587", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: list_tuple\nProblem Description:\n\"\"\"\nWrite a python function that converts a list to a tuple; the input must be a list. \n\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> list_tuple(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef list_tuple(listx):\n\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n  return tuple(listx)\n", "constraints": {"assert_0": "assert isinstance(listx, list), \"invalid inputs"}}], "reasoning": ["I assert the input is a list, then return its tuple conversion.</think>"]}
{"name": "Mbpp/265", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: list_split\nProblem Description:\n\"\"\"\nWrite a python function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists; the first input must be a list, the second input must be an integer, and the integer must be greater than zero.\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0:\n>>> list_split(3.0, 2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> list_split(4.0, 5.0)\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> list_split(2.0, 0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef list_split(S, step):\n\n    assert isinstance(S, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(step, int), \"invalid inputs\" # $_CONTRACT_$\n    assert step > 0, \"invalid inputs\" # $_CONTRACT_$\n    return [S[i::step] for i in range(step)]\n", "constraints": {"assert_0": "assert isinstance(S, list), \"invalid inputs", "assert_1": "assert isinstance(step, int), \"invalid inputs", "assert_2": "assert step > 0, \"invalid inputs"}}], "reasoning": ["Check types and range with asserts, then use slicing in a comprehension to collect every nth element per sublist.</think>"]}
{"name": "Mbpp/641", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: is_nonagonal\nProblem Description:\n\"\"\"\nWrite a python function that finds the nth nonagonal number; the input n must be an integer and n must be greater than or equal to zero.\n\nassert is_nonagonal(10) == 325\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> is_nonagonal(2.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> is_nonagonal(-1)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef is_nonagonal(n):\n\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n \n\treturn int(n * (7 * n - 5) / 2) \n", "constraints": {"assert_0": "assert isinstance(n, int), \"invalid inputs", "assert_1": "assert n >= 0, \"invalid inputs"}}], "reasoning": ["I will validate the input type and range then compute the nth nonagonal number using formula (7*n^2 - 5*n) / 2.</think>"]}
{"name": "Mbpp/127", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: multiply_int\nProblem Description:\n\"\"\"\nWrite a python function that multiplies two integers and both inputs must be integers. \n\nassert multiply_int(10,20)==200\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0:\n>>> multiply_int(2.0, 3.0)\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> multiply_int(5.0, 4.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef multiply_int(x, y):\n\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n    return x * y\n", "constraints": {"assert_0": "assert isinstance(x, int), \"invalid inputs", "assert_1": "assert isinstance(y, int), \"invalid inputs"}}], "reasoning": ["Enforce integer types with assertions and return their product.</think>"]}
{"name": "HumanEval/162", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: string_to_md5\nProblem Description:\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', which must be a non-empty string, return its md5 hash equivalent string. If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\nAll assert statements for ['assert_0']: \n\nContract Test Cases:\nassert_0:\n>>> string_to_md5(2.0)\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "def string_to_md5(text):\n\n\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n\n\n    if text == \"\": return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    return m.hexdigest()", "constraints": {"assert_0": "assert isinstance(text, str), \"invalid inputs"}}], "reasoning": ["Validate that text is a non‐empty string, return None if empty, else compute MD5 via hashlib.</think>"]}
{"name": "Mbpp/433", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: check_greater\nProblem Description:\n\"\"\"\nWrite a python function that checks whether the entered number is greater than the elements of the given array; the input \"arr\" must be a list, all elements in \"arr\" must be either integers or floats, and \"number\" must also be an integer or a float.\n\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1', 'assert_2']: \n\nContract Test Cases:\nassert_0:\n>>> check_greater(2.0, '!0!')\n \"AssertionError: invalid input\"\n\nassert_1:\n>>> check_greater(['!0!'], '!0!')\n \"AssertionError: invalid input\"\n\nassert_2:\n>>> check_greater(3.0, '!')\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef check_greater(arr, number):\n\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(number, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  return all(number > el for el in arr)\n", "constraints": {"assert_0": "assert isinstance(arr, list), \"invalid inputs", "assert_1": "assert all(isinstance(el, (int, float)) for el in arr), \"invalid inputs", "assert_2": "assert isinstance(number, (int, float)), \"invalid inputs"}}], "reasoning": ["I will enforce arr is list of numbers and number is numeric via assert with message \"invalid input\", then return if number is greater than all elements.</think>"]}
{"name": "Mbpp/272", "description": [{"role": "system", "content": "\nYou are an expert program analyst.\n\nI will provide:\n  - Method Name: the name of the function to implement.\n  - Problem Description: a one-sentence description of what the function is supposed to do.\n  - Functionality Test Cases: valid examples that the function must pass in problem description.\n  - Contract Test Cases: invalid inputs that must be rejected using appropriate input validation logic (e.g., assert statements).\n\nYour task is:\n  1. Carefully read the problem description.\n  2. Analyze the functionality test cases to understand the expected behavior.\n  3. Analyze the contract test cases to infer input constraints that must be enforced.\n  4. Write a correct implementation that:\n    - Passes all functionality test cases.\n    - Rejects all contract test cases by raising an AssertionError.\n    - Enforces input constraints using assert statements or precondition checks.\n  5. Do not change the function name.\n  6. Do not return test code or any explanation.\n\n**Output**\n  - Return ONLY the code block. Do not include any other text or explanation.\n"}, {"role": "user", "content": "Method Name: rear_extract\nProblem Description:\n\"\"\"\nWrite a python function that returns a list containing the rear element of each tuple from a given list of tuples; the input must be a list and every element in the list must be a non-empty tuple. \n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\nAll assert statements for ['assert_0', 'assert_1']: \n\nContract Test Cases:\nassert_0: no suitable test case\n\nassert_1:\n>>> rear_extract([2.0])\n \"AssertionError: invalid input\"\n\n\n----------------------------------------\n**Before emitting the JSON object, write a very short `<think>…</think>` block (maximum 2 sentences, no more than 30 words) describing your strategy.**\nThen, you must return a valid JSON object containing the Python code inside the `\"code\"` field.\n**The JSON block is mandatory — even if you're unsure, you must always produce code. Never omit it.**\n\n### Output Example\n<think>\nI will parse the example assertions to infer argument types and constraints. Then I implement the logic to satisfy all examples.\n</think>\n\n```json\n{\n  \"code\": '''\n  ...\n  '''\n}\n```\n----------------------------------------\n"}], "grammar": [{"production": "\ndef rear_extract(test_list):\n\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  return [x[-1] for x in test_list]\n", "constraints": {"assert_0": "assert isinstance(test_list, list), \"invalid inputs", "assert_1": "assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs"}}], "reasoning": ["I will validate input type and tuple elements, then extract each tuple's last element.</think>"]}
